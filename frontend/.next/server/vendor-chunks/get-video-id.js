/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/get-video-id";
exports.ids = ["vendor-chunks/get-video-id"];
exports.modules = {

/***/ "(ssr)/./node_modules/get-video-id/dist/get-video-id.js":
/*!********************************************************!*\
  !*** ./node_modules/get-video-id/dist/get-video-id.js ***!
  \********************************************************/
/***/ (function(module) {

eval("/*! get-video-id v3.6.5 | @license MIT Â© Michael Wuergler | https://github.com/radiovisual/get-video-id */\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\t0;\n}(this, function () { 'use strict';\n\n\t/**\n\t * Strip away any remaining parameters following `?` or `/` or '&' for YouTube shortcode strings.\n\t *\n\t * @note this function is not meant to work with url strings containing a protocol like https://\n\t * @param {String} shortcodeString - the parameter string\n\t * @returns {String}\n\t */\n\tfunction stripParameters(shortcodeString) {\n\t  // Split parameters or split folder separator\n\t  if (shortcodeString.includes('?')) {\n\t    shortcodeString = shortcodeString.split('?')[0];\n\t  }\n\n\t  if (shortcodeString.includes('/')) {\n\t    shortcodeString = shortcodeString.split('/')[0];\n\t  }\n\n\t  if (shortcodeString.includes('&')) {\n\t    shortcodeString = shortcodeString.split('&')[0];\n\t  }\n\n\t  return shortcodeString;\n\t}\n\t/**\n\t * Get the Youtube Video id.\n\t * @param {string} youtubeStr - the url from which you want to extract the id\n\t * @returns {string|undefined}\n\t */\n\n\n\tfunction youtube(youtubeString) {\n\t  var string_ = youtubeString; // Remove time hash at the end of the string\n\n\t  string_ = string_.replace(/#t=.*$/, ''); // Strip the leading protocol\n\n\t  string_ = string_.replace(/^https?:\\/\\//, ''); // Shortcode\n\n\t  var shortcode = /youtube:\\/\\/|youtu\\.be\\/|y2u\\.be\\//g;\n\n\t  if (shortcode.test(string_)) {\n\t    var shortcodeid = string_.split(shortcode)[1];\n\t    return stripParameters(shortcodeid);\n\t  } // Shorts\n\n\n\t  var shortsUrl = /\\/shorts\\//g;\n\n\t  if (shortsUrl.test(string_)) {\n\t    return stripParameters(string_.split(shortsUrl)[1]);\n\t  } // V= or vi=\n\n\n\t  var parameterv = /v=|vi=/g;\n\n\t  if (parameterv.test(string_)) {\n\t    var array = string_.split(parameterv);\n\t    return stripParameters(array[1].split('&')[0]);\n\t  } // /v/ or /vi/ or /watch/\n\n\n\t  var inlinev = /\\/v\\/|\\/vi\\/|\\/watch\\//g;\n\n\t  if (inlinev.test(string_)) {\n\t    var inlineid = string_.split(inlinev)[1];\n\t    return stripParameters(inlineid);\n\t  } // Format an_webp\n\n\n\t  var parameterwebp = /\\/an_webp\\//g;\n\n\t  if (parameterwebp.test(string_)) {\n\t    var webp = string_.split(parameterwebp)[1];\n\t    return stripParameters(webp);\n\t  } // /e/\n\n\n\t  var eformat = /\\/e\\//g;\n\n\t  if (eformat.test(string_)) {\n\t    var estring = string_.split(eformat)[1];\n\t    return stripParameters(estring);\n\t  } // Embed\n\n\n\t  var embedreg = /\\/embed\\//g;\n\n\t  if (embedreg.test(string_)) {\n\t    var embedid = string_.split(embedreg)[1];\n\t    return stripParameters(embedid);\n\t  } // ignore /user/username pattern\n\n\n\t  var usernamereg = /\\/user\\/([a-zA-Z\\d]*)$/g;\n\n\t  if (usernamereg.test(string_)) {\n\t    return undefined;\n\t  } // User\n\n\n\t  var userreg = /\\/user\\/(?!.*videos)/g;\n\n\t  if (userreg.test(string_)) {\n\t    var elements = string_.split('/');\n\t    return stripParameters(elements.pop());\n\t  } // Attribution_link\n\n\n\t  var attrreg = /\\/attribution_link\\?.*v%3D([^%&]*)(%26|&|$)/;\n\n\t  if (attrreg.test(string_)) {\n\t    return stripParameters(string_.match(attrreg)[1]);\n\t  }\n\n\t  return undefined;\n\t}\n\n\tfunction _slicedToArray(arr, i) {\n\t  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n\t}\n\n\tfunction _arrayWithHoles(arr) {\n\t  if (Array.isArray(arr)) return arr;\n\t}\n\n\tfunction _iterableToArrayLimit(arr, i) {\n\t  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n\t  if (_i == null) return;\n\t  var _arr = [];\n\t  var _n = true;\n\t  var _d = false;\n\n\t  var _s, _e;\n\n\t  try {\n\t    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n\t      _arr.push(_s.value);\n\n\t      if (i && _arr.length === i) break;\n\t    }\n\t  } catch (err) {\n\t    _d = true;\n\t    _e = err;\n\t  } finally {\n\t    try {\n\t      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n\t    } finally {\n\t      if (_d) throw _e;\n\t    }\n\t  }\n\n\t  return _arr;\n\t}\n\n\tfunction _unsupportedIterableToArray(o, minLen) {\n\t  if (!o) return;\n\t  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\t  var n = Object.prototype.toString.call(o).slice(8, -1);\n\t  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n\t  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n\t  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n\t}\n\n\tfunction _arrayLikeToArray(arr, len) {\n\t  if (len == null || len > arr.length) len = arr.length;\n\n\t  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n\t  return arr2;\n\t}\n\n\tfunction _nonIterableRest() {\n\t  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n\t}\n\n\t/**\n\t * Get the vimeo id.\n\t *\n\t * @param {String} vimeoString the url from which you want to extract the id\n\t * @returns {String|undefined}\n\t */\n\tfunction vimeo(vimeoString) {\n\t  var string_ = vimeoString;\n\n\t  if (string_.includes('#')) {\n\t    var _string_$split = string_.split('#');\n\n\t    var _string_$split2 = _slicedToArray(_string_$split, 1);\n\n\t    string_ = _string_$split2[0];\n\t  }\n\n\t  if (string_.includes('?') && !string_.includes('clip_id=')) {\n\t    var _string_$split3 = string_.split('?');\n\n\t    var _string_$split4 = _slicedToArray(_string_$split3, 1);\n\n\t    string_ = _string_$split4[0];\n\t  }\n\n\t  var id;\n\t  var array;\n\t  var event = /https?:\\/\\/vimeo\\.com\\/event\\/(\\d+)$/;\n\t  var eventMatches = event.exec(string_);\n\n\t  if (eventMatches && eventMatches[1]) {\n\t    return eventMatches[1];\n\t  }\n\n\t  var primary = /https?:\\/\\/vimeo\\.com\\/(\\d+)/;\n\t  var matches = primary.exec(string_);\n\n\t  if (matches && matches[1]) {\n\t    return matches[1];\n\t  }\n\n\t  var vimeoPipe = ['https?://player.vimeo.com/video/[0-9]+$', 'https?://vimeo.com/channels', 'groups', 'album'].join('|');\n\t  var vimeoRegex = new RegExp(vimeoPipe, 'gim');\n\n\t  if (vimeoRegex.test(string_)) {\n\t    array = string_.split('/');\n\n\t    if (array && array.length > 0) {\n\t      id = array.pop();\n\t    }\n\t  } else if (/clip_id=/gim.test(string_)) {\n\t    array = string_.split('clip_id=');\n\n\t    if (array && array.length > 0) {\n\t      var _array$1$split = array[1].split('&');\n\n\t      var _array$1$split2 = _slicedToArray(_array$1$split, 1);\n\n\t      id = _array$1$split2[0];\n\t    }\n\t  }\n\n\t  return id;\n\t}\n\n\t/**\n\t * Get the vine id.\n\t * @param {string} string_ - the url from which you want to extract the id\n\t * @returns {string|undefined}\n\t */\n\tfunction vine(string_) {\n\t  var regex = /https:\\/\\/vine\\.co\\/v\\/([a-zA-Z\\d]*)\\/?/;\n\t  var matches = regex.exec(string_);\n\n\t  if (matches && matches.length > 1) {\n\t    return matches[1];\n\t  }\n\n\t  return undefined;\n\t}\n\n\t/**\n\t * Get the VideoPress id.\n\t * @param {string} urlString - the url from which you want to extract the id\n\t * @returns {string|undefined}\n\t */\n\tfunction videopress(urlString) {\n\t  var idRegex;\n\n\t  if (urlString.includes('embed')) {\n\t    idRegex = /embed\\/(\\w{8})/;\n\t    return urlString.match(idRegex)[1];\n\t  }\n\n\t  idRegex = /\\/v\\/(\\w{8})/;\n\t  var matches = urlString.match(idRegex);\n\n\t  if (matches && matches.length > 0) {\n\t    return matches[1];\n\t  }\n\n\t  return undefined;\n\t}\n\n\t/**\n\t * Get the Microsoft Stream id.\n\t * @param {string} urlString - the url from which you want to extract the id\n\t * @returns {string|undefined}\n\t */\n\tfunction microsoftStream(urlString) {\n\t  var regex = urlString.includes('embed') ? /https:\\/\\/web\\.microsoftstream\\.com\\/embed\\/video\\/([a-zA-Z\\d-]*)\\/?/ : /https:\\/\\/web\\.microsoftstream\\.com\\/video\\/([a-zA-Z\\d-]*)\\/?/;\n\t  var matches = regex.exec(urlString);\n\n\t  if (matches && matches.length > 1) {\n\t    return matches[1];\n\t  }\n\n\t  return undefined;\n\t}\n\n\t/**\n\t * Get the tiktok id.\n\t * @param {string} urlString - the url from which you want to extract the id\n\t * @returns {string|undefined}\n\t */\n\tfunction tiktok(urlString) {\n\t  // Parse basic url and embeds\n\t  var basicReg = /tiktok\\.com(.*)\\/video\\/(\\d+)/gm;\n\t  var basicParsed = basicReg.exec(urlString);\n\n\t  if (basicParsed && basicParsed.length > 2) {\n\t    return basicParsed[2];\n\t  }\n\n\t  return undefined;\n\t}\n\n\t/**\n\t * Get the dailymotion id.\n\t * @param {string} urlString - the url from which you want to extract the id\n\t * @returns {string|undefined}\n\t */\n\tfunction dailymotion(urlString) {\n\t  // Parse basic url and embeds\n\t  var basicReg = /dailymotion\\.com(.*)(video)\\/([a-zA-Z\\d]+)/gm;\n\t  var basicParsed = basicReg.exec(urlString);\n\n\t  if (basicParsed) {\n\t    return basicParsed[3];\n\t  } // Parse shortlink\n\n\n\t  var shortRegex = /dai\\.ly\\/([a-zA-Z\\d]+)/gm;\n\t  var shortParsed = shortRegex.exec(urlString);\n\n\t  if (shortParsed && shortParsed.length > 1) {\n\t    return shortParsed[1];\n\t  } // Dynamic link\n\n\n\t  var dynamicRegex = /dailymotion\\.com(.*)video=([a-zA-Z\\d]+)/gm;\n\t  var dynamicParsed = dynamicRegex.exec(urlString);\n\n\t  if (dynamicParsed && dynamicParsed.length > 2) {\n\t    return dynamicParsed[2];\n\t  }\n\n\t  return undefined;\n\t}\n\n\t/**\n\t * Get the value assigned to a \"src\" attribute in a string, or undefined.\n\t * @param {String} input\n\t * @returns {String|undefined}\n\t */\n\tfunction getSrc(input) {\n\t  if (typeof input !== 'string') {\n\t    throw new TypeError('getSrc expected a string');\n\t  }\n\n\t  var srcRegEx = /src=\"(.*?)\"/gm;\n\t  var matches = srcRegEx.exec(input);\n\n\t  if (matches && matches.length >= 2) {\n\t    return matches[1];\n\t  }\n\n\t  return undefined;\n\t}\n\n\t/**\n\t * Get the id and service from a video url.\n\t * @param {String} urlString - the url from which you want to extract the id\n\t * @returns {Object}\n\t */\n\n\tfunction getVideoId(urlString) {\n\t  if (typeof urlString !== 'string') {\n\t    throw new TypeError('get-video-id expects a string');\n\t  }\n\n\t  var string_ = urlString;\n\n\t  if (/<iframe/gi.test(string_)) {\n\t    string_ = getSrc(string_) || '';\n\t  } // Remove surrounding whitespaces or linefeeds\n\n\n\t  string_ = string_.trim(); // Remove the '-nocookie' flag from youtube urls\n\n\t  string_ = string_.replace('-nocookie', ''); // Remove any leading `www.`\n\n\t  string_ = string_.replace('/www.', '/');\n\t  var metadata = {\n\t    id: null,\n\t    service: null\n\t  }; // Try to handle google redirection uri\n\n\t  if (/\\/\\/google/.test(string_)) {\n\t    // Find the redirection uri\n\t    var matches = string_.match(/url=([^&]+)&/); // Decode the found uri and replace current url string - continue with final link\n\n\t    if (matches) {\n\t      // JavaScript can get encoded URI\n\t      string_ = decodeURIComponent(matches[1]);\n\t    }\n\t  }\n\n\t  if (/youtube|youtu\\.be|y2u\\.be|i.ytimg\\./.test(string_)) {\n\t    metadata = {\n\t      id: youtube(string_),\n\t      service: 'youtube'\n\t    };\n\t  } else if (/vimeo/.test(string_)) {\n\t    metadata = {\n\t      id: vimeo(string_),\n\t      service: 'vimeo'\n\t    };\n\t  } else if (/vine/.test(string_)) {\n\t    metadata = {\n\t      id: vine(string_),\n\t      service: 'vine'\n\t    };\n\t  } else if (/videopress/.test(string_)) {\n\t    metadata = {\n\t      id: videopress(string_),\n\t      service: 'videopress'\n\t    };\n\t  } else if (/microsoftstream/.test(string_)) {\n\t    metadata = {\n\t      id: microsoftStream(string_),\n\t      service: 'microsoftstream'\n\t    };\n\t  } else if (/tiktok\\.com/.test(string_)) {\n\t    metadata = {\n\t      id: tiktok(string_),\n\t      service: 'tiktok'\n\t    };\n\t  } else if (/(dailymotion\\.com|dai\\.ly)/.test(string_)) {\n\t    metadata = {\n\t      id: dailymotion(string_),\n\t      service: 'dailymotion'\n\t    };\n\t  }\n\n\t  return metadata;\n\t}\n\n\treturn getVideoId;\n\n}));\n//# sourceMappingURL=get-video-id.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/get-video-id/dist/get-video-id.js\n");

/***/ })

};
;