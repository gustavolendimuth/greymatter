"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pluralize-esm";
exports.ids = ["vendor-chunks/pluralize-esm"];
exports.modules = {

/***/ "(ssr)/./node_modules/pluralize-esm/dist/index.cjs":
/*!***************************************************!*\
  !*** ./node_modules/pluralize-esm/dist/index.cjs ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nconst pluralRules = [];\nconst singularRules = [];\nconst uncountables = /* @__PURE__ */new Set();\nconst irregularPlurals = /* @__PURE__ */new Map();\nconst irregularSingles = /* @__PURE__ */new Map();\nconst sanitizeRule = rule => typeof rule === \"string\" ? new RegExp(\"^\".concat(rule, \"$\"), \"i\") : rule;\nconst restoreCase = (word, token) => {\n  if (typeof token !== \"string\") return word;\n  if (word === token) return token;\n  if (word === word.toLowerCase()) return token.toLowerCase();\n  if (word === word.toUpperCase()) return token.toUpperCase();\n  if (word[0] === word[0].toUpperCase()) {\n    return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n  }\n  return token.toLowerCase();\n};\nconst sanitizeWord = (token, word, rules) => {\n  if (!token.length || uncountables.has(token)) {\n    return word;\n  }\n  let {\n    length: len\n  } = rules;\n  while (len--) {\n    const rule = rules[len];\n    if (rule[0].test(word)) {\n      return word.replace(rule[0], function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        const [match, index] = args;\n        const result = rule[1].replace(/\\$(\\d{1,2})/g, (_, index2) => args[index2] || \"\");\n        if (match === \"\") {\n          return restoreCase(word[index - 1], result);\n        }\n        return restoreCase(match, result);\n      });\n    }\n  }\n  return word;\n};\nconst compute = (word, replaceMap, keepMap, rules) => {\n  const token = word.toLowerCase();\n  if (keepMap.has(token)) {\n    return restoreCase(word, token);\n  }\n  if (replaceMap.has(token)) {\n    return restoreCase(word, replaceMap.get(token));\n  }\n  return sanitizeWord(token, word, rules);\n};\nconst mapHas = (word, replaceMap, keepMap, rules) => {\n  const token = word.toLowerCase();\n  if (keepMap.has(token)) return true;\n  if (replaceMap.has(token)) return false;\n  return sanitizeWord(token, token, rules) === token;\n};\nconst pluralize = (word, count, inclusive) => {\n  const pluralized = count === 1 ? pluralize.singular(word) : pluralize.plural(word);\n  if (inclusive) return \"\".concat(count, \" \").concat(pluralized);\n  return pluralized;\n};\npluralize.plural = word => compute(word, irregularSingles, irregularPlurals, pluralRules);\npluralize.singular = word => compute(word, irregularPlurals, irregularSingles, singularRules);\npluralize.addPluralRule = (rule, replacement) => {\n  pluralRules.push([sanitizeRule(rule), replacement]);\n};\npluralize.addSingularRule = (rule, replacement) => {\n  singularRules.push([sanitizeRule(rule), replacement]);\n};\npluralize.addIrregularRule = (single, plural) => {\n  const _plural = plural.toLowerCase();\n  const _single = single.toLowerCase();\n  irregularSingles.set(_single, _plural);\n  irregularPlurals.set(_plural, _single);\n};\npluralize.addUncountableRule = rule => {\n  if (typeof rule === \"string\") {\n    uncountables.add(rule.toLowerCase());\n    return;\n  }\n  pluralize.addPluralRule(rule, \"$0\");\n  pluralize.addSingularRule(rule, \"$0\");\n};\npluralize.isPlural = word => mapHas(word, irregularSingles, irregularPlurals, pluralRules);\npluralize.isSingular = word => mapHas(word, irregularPlurals, irregularSingles, singularRules);\nconst defaultIrregulars = [\n// Pronouns.\n[\"I\", \"we\"], [\"me\", \"us\"], [\"he\", \"they\"], [\"she\", \"they\"], [\"them\", \"them\"], [\"myself\", \"ourselves\"], [\"yourself\", \"yourselves\"], [\"itself\", \"themselves\"], [\"herself\", \"themselves\"], [\"himself\", \"themselves\"], [\"themself\", \"themselves\"], [\"is\", \"are\"], [\"was\", \"were\"], [\"has\", \"have\"], [\"this\", \"these\"], [\"that\", \"those\"], [\"my\", \"our\"], [\"its\", \"their\"], [\"his\", \"their\"], [\"her\", \"their\"],\n// Words ending in with a consonant and `o`.\n[\"echo\", \"echoes\"], [\"dingo\", \"dingoes\"], [\"volcano\", \"volcanoes\"], [\"tornado\", \"tornadoes\"], [\"torpedo\", \"torpedoes\"],\n// Ends with `us`.\n[\"genus\", \"genera\"], [\"viscus\", \"viscera\"],\n// Ends with `ma`.\n[\"stigma\", \"stigmata\"], [\"stoma\", \"stomata\"], [\"dogma\", \"dogmata\"], [\"lemma\", \"lemmata\"], [\"schema\", \"schemata\"], [\"anathema\", \"anathemata\"],\n// Other irregular rules.\n[\"ox\", \"oxen\"], [\"axe\", \"axes\"], [\"die\", \"dice\"], [\"yes\", \"yeses\"], [\"foot\", \"feet\"], [\"eave\", \"eaves\"], [\"goose\", \"geese\"], [\"tooth\", \"teeth\"], [\"quiz\", \"quizzes\"], [\"human\", \"humans\"], [\"proof\", \"proofs\"], [\"carve\", \"carves\"], [\"valve\", \"valves\"], [\"looey\", \"looies\"], [\"thief\", \"thieves\"], [\"groove\", \"grooves\"], [\"pickaxe\", \"pickaxes\"], [\"passerby\", \"passersby\"], [\"canvas\", \"canvases\"]];\nconst defaultPlurals = [[/s?$/i, \"s\"], [/[^\\u0000-\\u007F]$/i, \"$0\"], [/([^aeiou]ese)$/i, \"$1\"], [/(ax|test)is$/i, \"$1es\"], [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, \"$1es\"], [/(e[mn]u)s?$/i, \"$1s\"], [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, \"$1\"], [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, \"$1i\"], [/(alumn|alg|vertebr)(?:a|ae)$/i, \"$1ae\"], [/(seraph|cherub)(?:im)?$/i, \"$1im\"], [/(her|at|gr)o$/i, \"$1oes\"], [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, \"$1a\"], [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, \"$1a\"], [/sis$/i, \"ses\"], [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, \"$1$2ves\"], [/([^aeiouy]|qu)y$/i, \"$1ies\"], [/([^ch][ieo][ln])ey$/i, \"$1ies\"], [/(x|ch|ss|sh|zz)$/i, \"$1es\"], [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, \"$1ices\"], [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, \"$1ice\"], [/(pe)(?:rson|ople)$/i, \"$1ople\"], [/(child)(?:ren)?$/i, \"$1ren\"], [/eaux$/i, \"$0\"], [/m[ae]n$/i, \"men\"], [\"thou\", \"you\"]];\nconst defaultSingles = [[/s$/i, \"\"], [/(ss)$/i, \"$1\"], [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, \"$1fe\"], [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, \"$1f\"], [/ies$/i, \"y\"], [/(dg|ss|ois|lk|ok|wn|mb|th|ch|ec|oal|is|ck|ix|sser|ts|wb)ies$/i, \"$1ie\"], [/\\b(l|(?:neck|cross|hog|aun)?t|coll|faer|food|gen|goon|group|hipp|junk|vegg|(?:pork)?p|charl|calor|cut)ies$/i, \"$1ie\"], [/\\b(mon|smil)ies$/i, \"$1ey\"], [/\\b((?:tit)?m|l)ice$/i, \"$1ouse\"], [/(seraph|cherub)im$/i, \"$1\"], [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, \"$1\"], [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, \"$1sis\"], [/(movie|twelve|abuse|e[mn]u)s$/i, \"$1\"], [/(test)(?:is|es)$/i, \"$1is\"], [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, \"$1us\"], [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, \"$1um\"], [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, \"$1on\"], [/(alumn|alg|vertebr)ae$/i, \"$1a\"], [/(cod|mur|sil|vert|ind)ices$/i, \"$1ex\"], [/(matr|append)ices$/i, \"$1ix\"], [/(pe)(rson|ople)$/i, \"$1rson\"], [/(child)ren$/i, \"$1\"], [/(eau)x?$/i, \"$1\"], [/men$/i, \"man\"]];\nconst defaultUncountables = [\n// Singular words with no plurals.\n\"adulthood\", \"advice\", \"agenda\", \"aid\", \"aircraft\", \"alcohol\", \"ammo\", \"analytics\", \"anime\", \"athletics\", \"audio\", \"bison\", \"blood\", \"bream\", \"buffalo\", \"butter\", \"carp\", \"cash\", \"chassis\", \"chess\", \"clothing\", \"cod\", \"commerce\", \"cooperation\", \"corps\", \"debris\", \"diabetes\", \"digestion\", \"elk\", \"energy\", \"equipment\", \"excretion\", \"expertise\", \"firmware\", \"flounder\", \"fun\", \"gallows\", \"garbage\", \"graffiti\", \"hardware\", \"headquarters\", \"health\", \"herpes\", \"highjinks\", \"homework\", \"housework\", \"information\", \"jeans\", \"justice\", \"kudos\", \"labour\", \"literature\", \"machinery\", \"mackerel\", \"mail\", \"media\", \"mews\", \"moose\", \"music\", \"mud\", \"manga\", \"news\", \"only\", \"personnel\", \"pike\", \"plankton\", \"pliers\", \"police\", \"pollution\", \"premises\", \"rain\", \"research\", \"rice\", \"salmon\", \"scissors\", \"series\", \"sewage\", \"shambles\", \"shrimp\", \"software\", \"staff\", \"swine\", \"tennis\", \"traffic\", \"transportation\", \"trout\", \"tuna\", \"wealth\", \"welfare\", \"whiting\", \"wildebeest\", \"wildlife\", \"you\", /pok[e√©]mon$/i,\n// Regexes.\n/[^aeiou]ese$/i,\n// \"chinese\", \"japanese\"\n/deer$/i,\n// \"deer\", \"reindeer\"\n/fish$/i,\n// \"fish\", \"blowfish\", \"angelfish\"\n/measles$/i, /o[iu]s$/i,\n// \"carnivorous\"\n/pox$/i,\n// \"chickpox\", \"smallpox\"\n/sheep$/i];\nfor (const [single, plural] of defaultIrregulars) {\n  pluralize.addIrregularRule(single, plural);\n}\nfor (const [search, replacement] of defaultPlurals) {\n  pluralize.addPluralRule(search, replacement);\n}\nfor (const [search, replacement] of defaultSingles) {\n  pluralize.addSingularRule(search, replacement);\n}\nfor (const search of defaultUncountables) {\n  pluralize.addUncountableRule(search);\n}\nmodule.exports = pluralize;\n//# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pluralize-esm/dist/index.cjs\n");

/***/ })

};
;