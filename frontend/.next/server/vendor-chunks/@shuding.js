/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@shuding";
exports.ids = ["vendor-chunks/@shuding"];
exports.modules = {

/***/ "(ssr)/./node_modules/@shuding/opentype.js/dist/opentype.js":
/*!************************************************************!*\
  !*** ./node_modules/@shuding/opentype.js/dist/opentype.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("/**\n * https://opentype.js.org v1.3.5 | (c) Frederik De Bleser and other contributors | MIT License | Uses fflate by 101arrowz and string.prototype.codepointat polyfill by Mathias Bynens\n */\n\n(function (global, factory) {\n    true ? factory(exports) :\n   0;\n}(this, (function (exports) { 'use strict';\n\n   // DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n\n   // aliases for shorter compressed code (most minifers don't do this)\n   var u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n   // fixed length extra bits\n   var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n   // fixed distance extra bits\n   // see fleb note\n   var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n   // code length index map\n   var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n   // get base, reverse index map from extra bits\n   var freb = function (eb, start) {\n       var b = new u16(31);\n       for (var i = 0; i < 31; ++i) {\n           b[i] = start += 1 << eb[i - 1];\n       }\n       // numbers here are at max 18 bits\n       var r = new u32(b[30]);\n       for (var i = 1; i < 30; ++i) {\n           for (var j = b[i]; j < b[i + 1]; ++j) {\n               r[j] = ((j - b[i]) << 5) | i;\n           }\n       }\n       return [b, r];\n   };\n   var _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n   // we can ignore the fact that the other numbers are wrong; they never happen anyway\n   fl[28] = 258, revfl[258] = 28;\n   var _b = freb(fdeb, 0), fd = _b[0];\n   // map of value to reverse (assuming 16 bits)\n   var rev = new u16(32768);\n   for (var i = 0; i < 32768; ++i) {\n       // reverse table algorithm from SO\n       var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n       x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n       x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n       rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n   }\n   // create huffman tree from u8 \"map\": index -> code length for code index\n   // mb (max bits) must be at most 15\n   // TODO: optimize/split up?\n   var hMap = (function (cd, mb, r) {\n       var s = cd.length;\n       // index\n       var i = 0;\n       // u16 \"map\": index -> # of codes with bit length = index\n       var l = new u16(mb);\n       // length of cd must be 288 (total # of codes)\n       for (; i < s; ++i) {\n           if (cd[i])\n               { ++l[cd[i] - 1]; }\n       }\n       // u16 \"map\": index -> minimum code for bit length = index\n       var le = new u16(mb);\n       for (i = 0; i < mb; ++i) {\n           le[i] = (le[i - 1] + l[i - 1]) << 1;\n       }\n       var co;\n       if (r) {\n           // u16 \"map\": index -> number of actual bits, symbol for code\n           co = new u16(1 << mb);\n           // bits to remove for reverser\n           var rvb = 15 - mb;\n           for (i = 0; i < s; ++i) {\n               // ignore 0 lengths\n               if (cd[i]) {\n                   // num encoding both symbol and bits read\n                   var sv = (i << 4) | cd[i];\n                   // free bits\n                   var r_1 = mb - cd[i];\n                   // start value\n                   var v = le[cd[i] - 1]++ << r_1;\n                   // m is end value\n                   for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                       // every 16 bit value starting with the code yields the same result\n                       co[rev[v] >>> rvb] = sv;\n                   }\n               }\n           }\n       }\n       else {\n           co = new u16(s);\n           for (i = 0; i < s; ++i) {\n               if (cd[i]) {\n                   co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n               }\n           }\n       }\n       return co;\n   });\n   // fixed length tree\n   var flt = new u8(288);\n   for (var i = 0; i < 144; ++i)\n       { flt[i] = 8; }\n   for (var i = 144; i < 256; ++i)\n       { flt[i] = 9; }\n   for (var i = 256; i < 280; ++i)\n       { flt[i] = 7; }\n   for (var i = 280; i < 288; ++i)\n       { flt[i] = 8; }\n   // fixed distance tree\n   var fdt = new u8(32);\n   for (var i = 0; i < 32; ++i)\n       { fdt[i] = 5; }\n   // fixed length map\n   var flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n   // fixed distance map\n   var fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n   // find max of array\n   var max = function (a) {\n       var m = a[0];\n       for (var i = 1; i < a.length; ++i) {\n           if (a[i] > m)\n               { m = a[i]; }\n       }\n       return m;\n   };\n   // read d, starting at bit p and mask with m\n   var bits = function (d, p, m) {\n       var o = (p / 8) | 0;\n       return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n   };\n   // read d, starting at bit p continuing for at least 16 bits\n   var bits16 = function (d, p) {\n       var o = (p / 8) | 0;\n       return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n   };\n   // get end of byte\n   var shft = function (p) { return ((p + 7) / 8) | 0; };\n   // typed array slice - allows garbage collector to free original reference,\n   // while being more compatible than .slice\n   var slc = function (v, s, e) {\n       if (s == null || s < 0)\n           { s = 0; }\n       if (e == null || e > v.length)\n           { e = v.length; }\n       // can't use .constructor in case user-supplied\n       var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n       n.set(v.subarray(s, e));\n       return n;\n   };\n   // error codes\n   var ec = [\n       'unexpected EOF',\n       'invalid block type',\n       'invalid length/literal',\n       'invalid distance',\n       'stream finished',\n       'no stream handler',\n       ,\n       'no callback',\n       'invalid UTF-8 data',\n       'extra field too long',\n       'date not in range 1980-2099',\n       'filename too long',\n       'stream finishing',\n       'invalid zip data'\n       // determined by unknown compression method\n   ];\n   var err = function (ind, msg, nt) {\n       var e = new Error(msg || ec[ind]);\n       e.code = ind;\n       if (Error.captureStackTrace)\n           { Error.captureStackTrace(e, err); }\n       if (!nt)\n           { throw e; }\n       return e;\n   };\n   // expands raw DEFLATE data\n   var inflt = function (dat, buf, st) {\n       // source length\n       var sl = dat.length;\n       if (!sl || (st && st.f && !st.l))\n           { return buf || new u8(0); }\n       // have to estimate size\n       var noBuf = !buf || st;\n       // no state\n       var noSt = !st || st.i;\n       if (!st)\n           { st = {}; }\n       // Assumes roughly 33% compression ratio average\n       if (!buf)\n           { buf = new u8(sl * 3); }\n       // ensure buffer can fit at least l elements\n       var cbuf = function (l) {\n           var bl = buf.length;\n           // need to increase size to fit\n           if (l > bl) {\n               // Double or set to necessary, whichever is greater\n               var nbuf = new u8(Math.max(bl * 2, l));\n               nbuf.set(buf);\n               buf = nbuf;\n           }\n       };\n       //  last chunk         bitpos           bytes\n       var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n       // total bits\n       var tbts = sl * 8;\n       do {\n           if (!lm) {\n               // BFINAL - this is only 1 when last chunk is next\n               final = bits(dat, pos, 1);\n               // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n               var type = bits(dat, pos + 1, 3);\n               pos += 3;\n               if (!type) {\n                   // go to end of byte boundary\n                   var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                   if (t > sl) {\n                       if (noSt)\n                           { err(0); }\n                       break;\n                   }\n                   // ensure size\n                   if (noBuf)\n                       { cbuf(bt + l); }\n                   // Copy over uncompressed data\n                   buf.set(dat.subarray(s, t), bt);\n                   // Get new bitpos, update byte count\n                   st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                   continue;\n               }\n               else if (type == 1)\n                   { lm = flrm, dm = fdrm, lbt = 9, dbt = 5; }\n               else if (type == 2) {\n                   //  literal                            lengths\n                   var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                   var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                   pos += 14;\n                   // length+distance tree\n                   var ldt = new u8(tl);\n                   // code length tree\n                   var clt = new u8(19);\n                   for (var i = 0; i < hcLen; ++i) {\n                       // use index map to get real code\n                       clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                   }\n                   pos += hcLen * 3;\n                   // code lengths bits\n                   var clb = max(clt), clbmsk = (1 << clb) - 1;\n                   // code lengths map\n                   var clm = hMap(clt, clb, 1);\n                   for (var i = 0; i < tl;) {\n                       var r = clm[bits(dat, pos, clbmsk)];\n                       // bits read\n                       pos += r & 15;\n                       // symbol\n                       var s = r >>> 4;\n                       // code length to copy\n                       if (s < 16) {\n                           ldt[i++] = s;\n                       }\n                       else {\n                           //  copy   count\n                           var c = 0, n = 0;\n                           if (s == 16)\n                               { n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1]; }\n                           else if (s == 17)\n                               { n = 3 + bits(dat, pos, 7), pos += 3; }\n                           else if (s == 18)\n                               { n = 11 + bits(dat, pos, 127), pos += 7; }\n                           while (n--)\n                               { ldt[i++] = c; }\n                       }\n                   }\n                   //    length tree                 distance tree\n                   var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                   // max length bits\n                   lbt = max(lt);\n                   // max dist bits\n                   dbt = max(dt);\n                   lm = hMap(lt, lbt, 1);\n                   dm = hMap(dt, dbt, 1);\n               }\n               else\n                   { err(1); }\n               if (pos > tbts) {\n                   if (noSt)\n                       { err(0); }\n                   break;\n               }\n           }\n           // Make sure the buffer can hold this + the largest possible addition\n           // Maximum chunk size (practically, theoretically infinite) is 2^17;\n           if (noBuf)\n               { cbuf(bt + 131072); }\n           var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n           var lpos = pos;\n           for (;; lpos = pos) {\n               // bits read, code\n               var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n               pos += c & 15;\n               if (pos > tbts) {\n                   if (noSt)\n                       { err(0); }\n                   break;\n               }\n               if (!c)\n                   { err(2); }\n               if (sym < 256)\n                   { buf[bt++] = sym; }\n               else if (sym == 256) {\n                   lpos = pos, lm = null;\n                   break;\n               }\n               else {\n                   var add = sym - 254;\n                   // no extra bits needed if less\n                   if (sym > 264) {\n                       // index\n                       var i = sym - 257, b = fleb[i];\n                       add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                       pos += b;\n                   }\n                   // dist\n                   var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                   if (!d)\n                       { err(3); }\n                   pos += d & 15;\n                   var dt = fd[dsym];\n                   if (dsym > 3) {\n                       var b = fdeb[dsym];\n                       dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                   }\n                   if (pos > tbts) {\n                       if (noSt)\n                           { err(0); }\n                       break;\n                   }\n                   if (noBuf)\n                       { cbuf(bt + 131072); }\n                   var end = bt + add;\n                   for (; bt < end; bt += 4) {\n                       buf[bt] = buf[bt - dt];\n                       buf[bt + 1] = buf[bt + 1 - dt];\n                       buf[bt + 2] = buf[bt + 2 - dt];\n                       buf[bt + 3] = buf[bt + 3 - dt];\n                   }\n                   bt = end;\n               }\n           }\n           st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n           if (lm)\n               { final = 1, st.m = lbt, st.d = dm, st.n = dbt; }\n       } while (!final);\n       return bt == buf.length ? buf : slc(buf, 0, bt);\n   };\n   // empty\n   var et = /*#__PURE__*/ new u8(0);\n   /**\n    * Expands DEFLATE data with no wrapper\n    * @param data The data to decompress\n    * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n    * @returns The decompressed version of the data\n    */\n   function inflateSync(data, out) {\n       return inflt(data, out);\n   }\n   // text decoder\n   var td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n   // text decoder stream\n   var tds = 0;\n   try {\n       td.decode(et, { stream: true });\n       tds = 1;\n   }\n   catch (e) { }\n\n   // Geometric objects\n\n   // import BoundingBox from './bbox';\n\n   /**\n    * A bézier path containing a set of path commands similar to a SVG path.\n    * Paths can be drawn on a context using `draw`.\n    * @exports opentype.Path\n    * @class\n    * @constructor\n    */\n   function Path() {\n       this.commands = [];\n       this.fill = 'black';\n       this.stroke = null;\n       this.strokeWidth = 1;\n   }\n\n   /**\n    * @param  {number} x\n    * @param  {number} y\n    */\n   Path.prototype.moveTo = function (x, y) {\n       this.commands.push({\n           type: 'M',\n           x: x,\n           y: y,\n       });\n   };\n\n   /**\n    * @param  {number} x\n    * @param  {number} y\n    */\n   Path.prototype.lineTo = function (x, y) {\n       this.commands.push({\n           type: 'L',\n           x: x,\n           y: y,\n       });\n   };\n\n   /**\n    * Draws cubic curve\n    * @function\n    * curveTo\n    * @memberof opentype.Path.prototype\n    * @param  {number} x1 - x of control 1\n    * @param  {number} y1 - y of control 1\n    * @param  {number} x2 - x of control 2\n    * @param  {number} y2 - y of control 2\n    * @param  {number} x - x of path point\n    * @param  {number} y - y of path point\n    */\n\n   /**\n    * Draws cubic curve\n    * @function\n    * bezierCurveTo\n    * @memberof opentype.Path.prototype\n    * @param  {number} x1 - x of control 1\n    * @param  {number} y1 - y of control 1\n    * @param  {number} x2 - x of control 2\n    * @param  {number} y2 - y of control 2\n    * @param  {number} x - x of path point\n    * @param  {number} y - y of path point\n    * @see curveTo\n    */\n   Path.prototype.curveTo = Path.prototype.bezierCurveTo = function (\n       x1,\n       y1,\n       x2,\n       y2,\n       x,\n       y\n   ) {\n       this.commands.push({\n           type: 'C',\n           x1: x1,\n           y1: y1,\n           x2: x2,\n           y2: y2,\n           x: x,\n           y: y,\n       });\n   };\n\n   /**\n    * Draws quadratic curve\n    * @function\n    * quadraticCurveTo\n    * @memberof opentype.Path.prototype\n    * @param  {number} x1 - x of control\n    * @param  {number} y1 - y of control\n    * @param  {number} x - x of path point\n    * @param  {number} y - y of path point\n    */\n\n   /**\n    * Draws quadratic curve\n    * @function\n    * quadTo\n    * @memberof opentype.Path.prototype\n    * @param  {number} x1 - x of control\n    * @param  {number} y1 - y of control\n    * @param  {number} x - x of path point\n    * @param  {number} y - y of path point\n    */\n   Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function (\n       x1,\n       y1,\n       x,\n       y\n   ) {\n       this.commands.push({\n           type: 'Q',\n           x1: x1,\n           y1: y1,\n           x: x,\n           y: y,\n       });\n   };\n\n   /**\n    * Closes the path\n    * @function closePath\n    * @memberof opentype.Path.prototype\n    */\n\n   /**\n    * Close the path\n    * @function close\n    * @memberof opentype.Path.prototype\n    */\n   Path.prototype.close = Path.prototype.closePath = function () {\n       this.commands.push({\n           type: 'Z',\n       });\n   };\n\n   /**\n    * Add the given path or list of commands to the commands of this path.\n    * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.\n    */\n   Path.prototype.extend = function (pathOrCommands) {\n       if (pathOrCommands.commands) {\n           pathOrCommands = pathOrCommands.commands;\n       }\n       // else if (pathOrCommands instanceof BoundingBox) {\n       //     const box = pathOrCommands;\n       //     this.moveTo(box.x1, box.y1);\n       //     this.lineTo(box.x2, box.y1);\n       //     this.lineTo(box.x2, box.y2);\n       //     this.lineTo(box.x1, box.y2);\n       //     this.close();\n       //     return;\n       // }\n\n       Array.prototype.push.apply(this.commands, pathOrCommands);\n   };\n\n   /**\n    * Convert the Path to a string of path data instructions\n    * See http://www.w3.org/TR/SVG/paths.html#PathData\n    * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n    * @return {string}\n    */\n   Path.prototype.toPathData = function (decimalPlaces) {\n       decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n       function floatToString(v) {\n           if (Math.round(v) === v) {\n               return '' + Math.round(v);\n           } else {\n               return v.toFixed(decimalPlaces);\n           }\n       }\n\n       function packValues() {\n           var arguments$1 = arguments;\n\n           var s = '';\n           for (var i = 0; i < arguments.length; i += 1) {\n               var v = arguments$1[i];\n               if (v >= 0 && i > 0) {\n                   s += ' ';\n               }\n\n               s += floatToString(v);\n           }\n\n           return s;\n       }\n\n       var d = '';\n       for (var i = 0; i < this.commands.length; i += 1) {\n           var cmd = this.commands[i];\n           if (cmd.type === 'M') {\n               d += 'M' + packValues(cmd.x, cmd.y);\n           } else if (cmd.type === 'L') {\n               d += 'L' + packValues(cmd.x, cmd.y);\n           } else if (cmd.type === 'C') {\n               d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n           } else if (cmd.type === 'Q') {\n               d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n           } else if (cmd.type === 'Z') {\n               d += 'Z';\n           }\n       }\n\n       return d;\n   };\n\n   // Glyph encoding\n\n   var cffStandardStrings = [\n       '.notdef',\n       'space',\n       'exclam',\n       'quotedbl',\n       'numbersign',\n       'dollar',\n       'percent',\n       'ampersand',\n       'quoteright',\n       'parenleft',\n       'parenright',\n       'asterisk',\n       'plus',\n       'comma',\n       'hyphen',\n       'period',\n       'slash',\n       'zero',\n       'one',\n       'two',\n       'three',\n       'four',\n       'five',\n       'six',\n       'seven',\n       'eight',\n       'nine',\n       'colon',\n       'semicolon',\n       'less',\n       'equal',\n       'greater',\n       'question',\n       'at',\n       'A',\n       'B',\n       'C',\n       'D',\n       'E',\n       'F',\n       'G',\n       'H',\n       'I',\n       'J',\n       'K',\n       'L',\n       'M',\n       'N',\n       'O',\n       'P',\n       'Q',\n       'R',\n       'S',\n       'T',\n       'U',\n       'V',\n       'W',\n       'X',\n       'Y',\n       'Z',\n       'bracketleft',\n       'backslash',\n       'bracketright',\n       'asciicircum',\n       'underscore',\n       'quoteleft',\n       'a',\n       'b',\n       'c',\n       'd',\n       'e',\n       'f',\n       'g',\n       'h',\n       'i',\n       'j',\n       'k',\n       'l',\n       'm',\n       'n',\n       'o',\n       'p',\n       'q',\n       'r',\n       's',\n       't',\n       'u',\n       'v',\n       'w',\n       'x',\n       'y',\n       'z',\n       'braceleft',\n       'bar',\n       'braceright',\n       'asciitilde',\n       'exclamdown',\n       'cent',\n       'sterling',\n       'fraction',\n       'yen',\n       'florin',\n       'section',\n       'currency',\n       'quotesingle',\n       'quotedblleft',\n       'guillemotleft',\n       'guilsinglleft',\n       'guilsinglright',\n       'fi',\n       'fl',\n       'endash',\n       'dagger',\n       'daggerdbl',\n       'periodcentered',\n       'paragraph',\n       'bullet',\n       'quotesinglbase',\n       'quotedblbase',\n       'quotedblright',\n       'guillemotright',\n       'ellipsis',\n       'perthousand',\n       'questiondown',\n       'grave',\n       'acute',\n       'circumflex',\n       'tilde',\n       'macron',\n       'breve',\n       'dotaccent',\n       'dieresis',\n       'ring',\n       'cedilla',\n       'hungarumlaut',\n       'ogonek',\n       'caron',\n       'emdash',\n       'AE',\n       'ordfeminine',\n       'Lslash',\n       'Oslash',\n       'OE',\n       'ordmasculine',\n       'ae',\n       'dotlessi',\n       'lslash',\n       'oslash',\n       'oe',\n       'germandbls',\n       'onesuperior',\n       'logicalnot',\n       'mu',\n       'trademark',\n       'Eth',\n       'onehalf',\n       'plusminus',\n       'Thorn',\n       'onequarter',\n       'divide',\n       'brokenbar',\n       'degree',\n       'thorn',\n       'threequarters',\n       'twosuperior',\n       'registered',\n       'minus',\n       'eth',\n       'multiply',\n       'threesuperior',\n       'copyright',\n       'Aacute',\n       'Acircumflex',\n       'Adieresis',\n       'Agrave',\n       'Aring',\n       'Atilde',\n       'Ccedilla',\n       'Eacute',\n       'Ecircumflex',\n       'Edieresis',\n       'Egrave',\n       'Iacute',\n       'Icircumflex',\n       'Idieresis',\n       'Igrave',\n       'Ntilde',\n       'Oacute',\n       'Ocircumflex',\n       'Odieresis',\n       'Ograve',\n       'Otilde',\n       'Scaron',\n       'Uacute',\n       'Ucircumflex',\n       'Udieresis',\n       'Ugrave',\n       'Yacute',\n       'Ydieresis',\n       'Zcaron',\n       'aacute',\n       'acircumflex',\n       'adieresis',\n       'agrave',\n       'aring',\n       'atilde',\n       'ccedilla',\n       'eacute',\n       'ecircumflex',\n       'edieresis',\n       'egrave',\n       'iacute',\n       'icircumflex',\n       'idieresis',\n       'igrave',\n       'ntilde',\n       'oacute',\n       'ocircumflex',\n       'odieresis',\n       'ograve',\n       'otilde',\n       'scaron',\n       'uacute',\n       'ucircumflex',\n       'udieresis',\n       'ugrave',\n       'yacute',\n       'ydieresis',\n       'zcaron',\n       'exclamsmall',\n       'Hungarumlautsmall',\n       'dollaroldstyle',\n       'dollarsuperior',\n       'ampersandsmall',\n       'Acutesmall',\n       'parenleftsuperior',\n       'parenrightsuperior',\n       '266 ff',\n       'onedotenleader',\n       'zerooldstyle',\n       'oneoldstyle',\n       'twooldstyle',\n       'threeoldstyle',\n       'fouroldstyle',\n       'fiveoldstyle',\n       'sixoldstyle',\n       'sevenoldstyle',\n       'eightoldstyle',\n       'nineoldstyle',\n       'commasuperior',\n       'threequartersemdash',\n       'periodsuperior',\n       'questionsmall',\n       'asuperior',\n       'bsuperior',\n       'centsuperior',\n       'dsuperior',\n       'esuperior',\n       'isuperior',\n       'lsuperior',\n       'msuperior',\n       'nsuperior',\n       'osuperior',\n       'rsuperior',\n       'ssuperior',\n       'tsuperior',\n       'ff',\n       'ffi',\n       'ffl',\n       'parenleftinferior',\n       'parenrightinferior',\n       'Circumflexsmall',\n       'hyphensuperior',\n       'Gravesmall',\n       'Asmall',\n       'Bsmall',\n       'Csmall',\n       'Dsmall',\n       'Esmall',\n       'Fsmall',\n       'Gsmall',\n       'Hsmall',\n       'Ismall',\n       'Jsmall',\n       'Ksmall',\n       'Lsmall',\n       'Msmall',\n       'Nsmall',\n       'Osmall',\n       'Psmall',\n       'Qsmall',\n       'Rsmall',\n       'Ssmall',\n       'Tsmall',\n       'Usmall',\n       'Vsmall',\n       'Wsmall',\n       'Xsmall',\n       'Ysmall',\n       'Zsmall',\n       'colonmonetary',\n       'onefitted',\n       'rupiah',\n       'Tildesmall',\n       'exclamdownsmall',\n       'centoldstyle',\n       'Lslashsmall',\n       'Scaronsmall',\n       'Zcaronsmall',\n       'Dieresissmall',\n       'Brevesmall',\n       'Caronsmall',\n       'Dotaccentsmall',\n       'Macronsmall',\n       'figuredash',\n       'hypheninferior',\n       'Ogoneksmall',\n       'Ringsmall',\n       'Cedillasmall',\n       'questiondownsmall',\n       'oneeighth',\n       'threeeighths',\n       'fiveeighths',\n       'seveneighths',\n       'onethird',\n       'twothirds',\n       'zerosuperior',\n       'foursuperior',\n       'fivesuperior',\n       'sixsuperior',\n       'sevensuperior',\n       'eightsuperior',\n       'ninesuperior',\n       'zeroinferior',\n       'oneinferior',\n       'twoinferior',\n       'threeinferior',\n       'fourinferior',\n       'fiveinferior',\n       'sixinferior',\n       'seveninferior',\n       'eightinferior',\n       'nineinferior',\n       'centinferior',\n       'dollarinferior',\n       'periodinferior',\n       'commainferior',\n       'Agravesmall',\n       'Aacutesmall',\n       'Acircumflexsmall',\n       'Atildesmall',\n       'Adieresissmall',\n       'Aringsmall',\n       'AEsmall',\n       'Ccedillasmall',\n       'Egravesmall',\n       'Eacutesmall',\n       'Ecircumflexsmall',\n       'Edieresissmall',\n       'Igravesmall',\n       'Iacutesmall',\n       'Icircumflexsmall',\n       'Idieresissmall',\n       'Ethsmall',\n       'Ntildesmall',\n       'Ogravesmall',\n       'Oacutesmall',\n       'Ocircumflexsmall',\n       'Otildesmall',\n       'Odieresissmall',\n       'OEsmall',\n       'Oslashsmall',\n       'Ugravesmall',\n       'Uacutesmall',\n       'Ucircumflexsmall',\n       'Udieresissmall',\n       'Yacutesmall',\n       'Thornsmall',\n       'Ydieresissmall',\n       '001.000',\n       '001.001',\n       '001.002',\n       '001.003',\n       'Black',\n       'Bold',\n       'Book',\n       'Light',\n       'Medium',\n       'Regular',\n       'Roman',\n       'Semibold' ];\n\n   var cffStandardEncoding = [\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       'space',\n       'exclam',\n       'quotedbl',\n       'numbersign',\n       'dollar',\n       'percent',\n       'ampersand',\n       'quoteright',\n       'parenleft',\n       'parenright',\n       'asterisk',\n       'plus',\n       'comma',\n       'hyphen',\n       'period',\n       'slash',\n       'zero',\n       'one',\n       'two',\n       'three',\n       'four',\n       'five',\n       'six',\n       'seven',\n       'eight',\n       'nine',\n       'colon',\n       'semicolon',\n       'less',\n       'equal',\n       'greater',\n       'question',\n       'at',\n       'A',\n       'B',\n       'C',\n       'D',\n       'E',\n       'F',\n       'G',\n       'H',\n       'I',\n       'J',\n       'K',\n       'L',\n       'M',\n       'N',\n       'O',\n       'P',\n       'Q',\n       'R',\n       'S',\n       'T',\n       'U',\n       'V',\n       'W',\n       'X',\n       'Y',\n       'Z',\n       'bracketleft',\n       'backslash',\n       'bracketright',\n       'asciicircum',\n       'underscore',\n       'quoteleft',\n       'a',\n       'b',\n       'c',\n       'd',\n       'e',\n       'f',\n       'g',\n       'h',\n       'i',\n       'j',\n       'k',\n       'l',\n       'm',\n       'n',\n       'o',\n       'p',\n       'q',\n       'r',\n       's',\n       't',\n       'u',\n       'v',\n       'w',\n       'x',\n       'y',\n       'z',\n       'braceleft',\n       'bar',\n       'braceright',\n       'asciitilde',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       'exclamdown',\n       'cent',\n       'sterling',\n       'fraction',\n       'yen',\n       'florin',\n       'section',\n       'currency',\n       'quotesingle',\n       'quotedblleft',\n       'guillemotleft',\n       'guilsinglleft',\n       'guilsinglright',\n       'fi',\n       'fl',\n       '',\n       'endash',\n       'dagger',\n       'daggerdbl',\n       'periodcentered',\n       '',\n       'paragraph',\n       'bullet',\n       'quotesinglbase',\n       'quotedblbase',\n       'quotedblright',\n       'guillemotright',\n       'ellipsis',\n       'perthousand',\n       '',\n       'questiondown',\n       '',\n       'grave',\n       'acute',\n       'circumflex',\n       'tilde',\n       'macron',\n       'breve',\n       'dotaccent',\n       'dieresis',\n       '',\n       'ring',\n       'cedilla',\n       '',\n       'hungarumlaut',\n       'ogonek',\n       'caron',\n       'emdash',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       'AE',\n       '',\n       'ordfeminine',\n       '',\n       '',\n       '',\n       '',\n       'Lslash',\n       'Oslash',\n       'OE',\n       'ordmasculine',\n       '',\n       '',\n       '',\n       '',\n       '',\n       'ae',\n       '',\n       '',\n       '',\n       'dotlessi',\n       '',\n       '',\n       'lslash',\n       'oslash',\n       'oe',\n       'germandbls' ];\n\n   var cffExpertEncoding = [\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       'space',\n       'exclamsmall',\n       'Hungarumlautsmall',\n       '',\n       'dollaroldstyle',\n       'dollarsuperior',\n       'ampersandsmall',\n       'Acutesmall',\n       'parenleftsuperior',\n       'parenrightsuperior',\n       'twodotenleader',\n       'onedotenleader',\n       'comma',\n       'hyphen',\n       'period',\n       'fraction',\n       'zerooldstyle',\n       'oneoldstyle',\n       'twooldstyle',\n       'threeoldstyle',\n       'fouroldstyle',\n       'fiveoldstyle',\n       'sixoldstyle',\n       'sevenoldstyle',\n       'eightoldstyle',\n       'nineoldstyle',\n       'colon',\n       'semicolon',\n       'commasuperior',\n       'threequartersemdash',\n       'periodsuperior',\n       'questionsmall',\n       '',\n       'asuperior',\n       'bsuperior',\n       'centsuperior',\n       'dsuperior',\n       'esuperior',\n       '',\n       '',\n       'isuperior',\n       '',\n       '',\n       'lsuperior',\n       'msuperior',\n       'nsuperior',\n       'osuperior',\n       '',\n       '',\n       'rsuperior',\n       'ssuperior',\n       'tsuperior',\n       '',\n       'ff',\n       'fi',\n       'fl',\n       'ffi',\n       'ffl',\n       'parenleftinferior',\n       '',\n       'parenrightinferior',\n       'Circumflexsmall',\n       'hyphensuperior',\n       'Gravesmall',\n       'Asmall',\n       'Bsmall',\n       'Csmall',\n       'Dsmall',\n       'Esmall',\n       'Fsmall',\n       'Gsmall',\n       'Hsmall',\n       'Ismall',\n       'Jsmall',\n       'Ksmall',\n       'Lsmall',\n       'Msmall',\n       'Nsmall',\n       'Osmall',\n       'Psmall',\n       'Qsmall',\n       'Rsmall',\n       'Ssmall',\n       'Tsmall',\n       'Usmall',\n       'Vsmall',\n       'Wsmall',\n       'Xsmall',\n       'Ysmall',\n       'Zsmall',\n       'colonmonetary',\n       'onefitted',\n       'rupiah',\n       'Tildesmall',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       '',\n       'exclamdownsmall',\n       'centoldstyle',\n       'Lslashsmall',\n       '',\n       '',\n       'Scaronsmall',\n       'Zcaronsmall',\n       'Dieresissmall',\n       'Brevesmall',\n       'Caronsmall',\n       '',\n       'Dotaccentsmall',\n       '',\n       '',\n       'Macronsmall',\n       '',\n       '',\n       'figuredash',\n       'hypheninferior',\n       '',\n       '',\n       'Ogoneksmall',\n       'Ringsmall',\n       'Cedillasmall',\n       '',\n       '',\n       '',\n       'onequarter',\n       'onehalf',\n       'threequarters',\n       'questiondownsmall',\n       'oneeighth',\n       'threeeighths',\n       'fiveeighths',\n       'seveneighths',\n       'onethird',\n       'twothirds',\n       '',\n       '',\n       'zerosuperior',\n       'onesuperior',\n       'twosuperior',\n       'threesuperior',\n       'foursuperior',\n       'fivesuperior',\n       'sixsuperior',\n       'sevensuperior',\n       'eightsuperior',\n       'ninesuperior',\n       'zeroinferior',\n       'oneinferior',\n       'twoinferior',\n       'threeinferior',\n       'fourinferior',\n       'fiveinferior',\n       'sixinferior',\n       'seveninferior',\n       'eightinferior',\n       'nineinferior',\n       'centinferior',\n       'dollarinferior',\n       'periodinferior',\n       'commainferior',\n       'Agravesmall',\n       'Aacutesmall',\n       'Acircumflexsmall',\n       'Atildesmall',\n       'Adieresissmall',\n       'Aringsmall',\n       'AEsmall',\n       'Ccedillasmall',\n       'Egravesmall',\n       'Eacutesmall',\n       'Ecircumflexsmall',\n       'Edieresissmall',\n       'Igravesmall',\n       'Iacutesmall',\n       'Icircumflexsmall',\n       'Idieresissmall',\n       'Ethsmall',\n       'Ntildesmall',\n       'Ogravesmall',\n       'Oacutesmall',\n       'Ocircumflexsmall',\n       'Otildesmall',\n       'Odieresissmall',\n       'OEsmall',\n       'Oslashsmall',\n       'Ugravesmall',\n       'Uacutesmall',\n       'Ucircumflexsmall',\n       'Udieresissmall',\n       'Yacutesmall',\n       'Thornsmall',\n       'Ydieresissmall' ];\n\n   /**\n    * This is the encoding used for fonts created from scratch.\n    * It loops through all glyphs and finds the appropriate unicode value.\n    * Since it's linear time, other encodings will be faster.\n    * @exports opentype.DefaultEncoding\n    * @class\n    * @constructor\n    * @param {opentype.Font}\n    */\n   function DefaultEncoding(font) {\n       this.font = font;\n   }\n\n   DefaultEncoding.prototype.charToGlyphIndex = function (c) {\n       var code = c.codePointAt(0);\n       var glyphs = this.font.glyphs;\n       if (glyphs) {\n           for (var i = 0; i < glyphs.length; i += 1) {\n               var glyph = glyphs.get(i);\n               for (var j = 0; j < glyph.unicodes.length; j += 1) {\n                   if (glyph.unicodes[j] === code) {\n                       return i;\n                   }\n               }\n           }\n       }\n       return null;\n   };\n\n   /**\n    * @exports opentype.CmapEncoding\n    * @class\n    * @constructor\n    * @param {Object} cmap - a object with the cmap encoded data\n    */\n   function CmapEncoding(cmap) {\n       this.cmap = cmap;\n   }\n\n   /**\n    * @param  {string} c - the character\n    * @return {number} The glyph index.\n    */\n   CmapEncoding.prototype.charToGlyphIndex = function (c) {\n       return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;\n   };\n\n   /**\n    * @exports opentype.CffEncoding\n    * @class\n    * @constructor\n    * @param {string} encoding - The encoding\n    * @param {Array} charset - The character set.\n    */\n   function CffEncoding(encoding, charset) {\n       this.encoding = encoding;\n       this.charset = charset;\n   }\n\n   /**\n    * @param  {string} s - The character\n    * @return {number} The index.\n    */\n   CffEncoding.prototype.charToGlyphIndex = function (s) {\n       var code = s.codePointAt(0);\n       var charName = this.encoding[code];\n       return this.charset.indexOf(charName);\n   };\n\n   function addGlyphNamesAll(font) {\n       var glyph;\n       var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n       var charCodes = Object.keys(glyphIndexMap);\n\n       for (var i = 0; i < charCodes.length; i += 1) {\n           var c = charCodes[i];\n           var glyphIndex = glyphIndexMap[c];\n           glyph = font.glyphs.get(glyphIndex);\n           glyph.addUnicode(parseInt(c));\n       }\n   }\n\n   function addGlyphNamesToUnicodeMap(font) {\n       font._IndexToUnicodeMap = {};\n\n       var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n       var charCodes = Object.keys(glyphIndexMap);\n\n       for (var i = 0; i < charCodes.length; i += 1) {\n           var c = charCodes[i];\n           var glyphIndex = glyphIndexMap[c];\n           if (font._IndexToUnicodeMap[glyphIndex] === undefined) {\n               font._IndexToUnicodeMap[glyphIndex] = {\n                   unicodes: [parseInt(c)],\n               };\n           } else {\n               font._IndexToUnicodeMap[glyphIndex].unicodes.push(parseInt(c));\n           }\n       }\n   }\n\n   /**\n    * @alias opentype.addGlyphNames\n    * @param {opentype.Font}\n    * @param {Object}\n    */\n   function addGlyphNames(font, opt) {\n       if (opt.lowMemory) {\n           addGlyphNamesToUnicodeMap(font);\n       } else {\n           addGlyphNamesAll(font);\n       }\n   }\n\n   // Run-time checking of preconditions.\n\n   function fail(message) {\n       throw new Error(message);\n   }\n\n   // Precondition function that checks if the given predicate is true.\n   // If not, it will throw an error.\n   function argument(predicate, message) {\n       if (!predicate) {\n           fail(message);\n       }\n   }\n   var check = { fail: fail, argument: argument, assert: argument };\n\n   // The Glyph object\n   // import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency\n\n   function getPathDefinition(glyph, path) {\n       var _path = path || new Path();\n       return {\n           configurable: true,\n\n           get: function () {\n               if (typeof _path === 'function') {\n                   _path = _path();\n               }\n\n               return _path;\n           },\n\n           set: function (p) {\n               _path = p;\n           },\n       };\n   }\n   /**\n    * @typedef GlyphOptions\n    * @type Object\n    * @property {string} [name] - The glyph name\n    * @property {number} [unicode]\n    * @property {Array} [unicodes]\n    * @property {number} [xMin]\n    * @property {number} [yMin]\n    * @property {number} [xMax]\n    * @property {number} [yMax]\n    * @property {number} [advanceWidth]\n    */\n\n   // A Glyph is an individual mark that often corresponds to a character.\n   // Some glyphs, such as ligatures, are a combination of many characters.\n   // Glyphs are the basic building blocks of a font.\n   //\n   // The `Glyph` class contains utility methods for drawing the path and its points.\n   /**\n    * @exports opentype.Glyph\n    * @class\n    * @param {GlyphOptions}\n    * @constructor\n    */\n   function Glyph(options) {\n       // By putting all the code on a prototype function (which is only declared once)\n       // we reduce the memory requirements for larger fonts by some 2%\n       this.bindConstructorValues(options);\n   }\n\n   /**\n    * @param  {GlyphOptions}\n    */\n   Glyph.prototype.bindConstructorValues = function (options) {\n       this.index = options.index || 0;\n\n       // These three values cannot be deferred for memory optimization:\n       this.name = options.name || null;\n       this.unicode = options.unicode || undefined;\n       this.unicodes =\n           options.unicodes || options.unicode !== undefined\n               ? [options.unicode]\n               : [];\n\n       // But by binding these values only when necessary, we reduce can\n       // the memory requirements by almost 3% for larger fonts.\n       if ('xMin' in options) {\n           this.xMin = options.xMin;\n       }\n\n       if ('yMin' in options) {\n           this.yMin = options.yMin;\n       }\n\n       if ('xMax' in options) {\n           this.xMax = options.xMax;\n       }\n\n       if ('yMax' in options) {\n           this.yMax = options.yMax;\n       }\n\n       if ('advanceWidth' in options) {\n           this.advanceWidth = options.advanceWidth;\n       }\n\n       // The path for a glyph is the most memory intensive, and is bound as a value\n       // with a getter/setter to ensure we actually do path parsing only once the\n       // path is actually needed by anything.\n       Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n   };\n\n   /**\n    * @param {number}\n    */\n   Glyph.prototype.addUnicode = function (unicode) {\n       if (this.unicodes.length === 0) {\n           this.unicode = unicode;\n       }\n\n       this.unicodes.push(unicode);\n   };\n\n   // /**\n   //  * Calculate the minimum bounding box for this glyph.\n   //  * @return {opentype.BoundingBox}\n   //  */\n   // Glyph.prototype.getBoundingBox = function() {\n   //     return this.path.getBoundingBox();\n   // };\n\n   /**\n    * Convert the glyph to a Path we can draw on a drawing context.\n    * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n    * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n    * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n    * @param  {Object=} options - xScale, yScale to stretch the glyph.\n    * @param  {opentype.Font} if hinting is to be used, the font\n    * @return {opentype.Path}\n    */\n   Glyph.prototype.getPath = function (x, y, fontSize, options, font) {\n       x = x !== undefined ? x : 0;\n       y = y !== undefined ? y : 0;\n       fontSize = fontSize !== undefined ? fontSize : 72;\n       var commands;\n       var hPoints;\n       if (!options) { options = {}; }\n       var xScale = options.xScale;\n       var yScale = options.yScale;\n\n       if (options.hinting && font && font.hinting) {\n           // in case of hinting, the hinting engine takes care\n           // of scaling the points (not the path) before hinting.\n           hPoints = this.path && font.hinting.exec(this, fontSize);\n           // in case the hinting engine failed hPoints is undefined\n           // and thus reverts to plain rending\n       }\n\n       if (hPoints) {\n           // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency\n           commands = font.hinting.getCommands(hPoints);\n           x = Math.round(x);\n           y = Math.round(y);\n           // TODO in case of hinting xyScaling is not yet supported\n           xScale = yScale = 1;\n       } else {\n           commands = this.path.commands;\n           var scale = (1 / (this.path.unitsPerEm || 1000)) * fontSize;\n           if (xScale === undefined) { xScale = scale; }\n           if (yScale === undefined) { yScale = scale; }\n       }\n\n       var p = new Path();\n       for (var i = 0; i < commands.length; i += 1) {\n           var cmd = commands[i];\n           if (cmd.type === 'M') {\n               p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n           } else if (cmd.type === 'L') {\n               p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n           } else if (cmd.type === 'Q') {\n               p.quadraticCurveTo(\n                   x + cmd.x1 * xScale,\n                   y + -cmd.y1 * yScale,\n                   x + cmd.x * xScale,\n                   y + -cmd.y * yScale\n               );\n           } else if (cmd.type === 'C') {\n               p.curveTo(\n                   x + cmd.x1 * xScale,\n                   y + -cmd.y1 * yScale,\n                   x + cmd.x2 * xScale,\n                   y + -cmd.y2 * yScale,\n                   x + cmd.x * xScale,\n                   y + -cmd.y * yScale\n               );\n           } else if (cmd.type === 'Z') {\n               p.closePath();\n           }\n       }\n\n       return p;\n   };\n\n   /**\n    * Split the glyph into contours.\n    * This function is here for backwards compatibility, and to\n    * provide raw access to the TrueType glyph outlines.\n    * @return {Array}\n    */\n   Glyph.prototype.getContours = function () {\n       if (this.points === undefined) {\n           return [];\n       }\n\n       var contours = [];\n       var currentContour = [];\n       for (var i = 0; i < this.points.length; i += 1) {\n           var pt = this.points[i];\n           currentContour.push(pt);\n           if (pt.lastPointOfContour) {\n               contours.push(currentContour);\n               currentContour = [];\n           }\n       }\n\n       check.argument(\n           currentContour.length === 0,\n           'There are still points left in the current contour.'\n       );\n       return contours;\n   };\n\n   /**\n    * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n    * @return {Object}\n    */\n   Glyph.prototype.getMetrics = function () {\n       var commands = this.path.commands;\n       var xCoords = [];\n       var yCoords = [];\n       for (var i = 0; i < commands.length; i += 1) {\n           var cmd = commands[i];\n           if (cmd.type !== 'Z') {\n               xCoords.push(cmd.x);\n               yCoords.push(cmd.y);\n           }\n\n           if (cmd.type === 'Q' || cmd.type === 'C') {\n               xCoords.push(cmd.x1);\n               yCoords.push(cmd.y1);\n           }\n\n           if (cmd.type === 'C') {\n               xCoords.push(cmd.x2);\n               yCoords.push(cmd.y2);\n           }\n       }\n\n       var metrics = {\n           xMin: Math.min.apply(null, xCoords),\n           yMin: Math.min.apply(null, yCoords),\n           xMax: Math.max.apply(null, xCoords),\n           yMax: Math.max.apply(null, yCoords),\n           leftSideBearing: this.leftSideBearing,\n       };\n\n       if (!isFinite(metrics.xMin)) {\n           metrics.xMin = 0;\n       }\n\n       if (!isFinite(metrics.xMax)) {\n           metrics.xMax = this.advanceWidth;\n       }\n\n       if (!isFinite(metrics.yMin)) {\n           metrics.yMin = 0;\n       }\n\n       if (!isFinite(metrics.yMax)) {\n           metrics.yMax = 0;\n       }\n\n       metrics.rightSideBearing =\n           this.advanceWidth -\n           metrics.leftSideBearing -\n           (metrics.xMax - metrics.xMin);\n       return metrics;\n   };\n\n   // The GlyphSet object\n\n   // Define a property on the glyph that depends on the path being loaded.\n   function defineDependentProperty(glyph, externalName, internalName) {\n       Object.defineProperty(glyph, externalName, {\n           get: function () {\n               // Request the path property to make sure the path is loaded.\n               glyph.path; // jshint ignore:line\n               return glyph[internalName];\n           },\n           set: function (newValue) {\n               glyph[internalName] = newValue;\n           },\n           enumerable: true,\n           configurable: true,\n       });\n   }\n\n   /**\n    * A GlyphSet represents all glyphs available in the font, but modelled using\n    * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n    * necessary, to keep the memory footprint down.\n    * @exports opentype.GlyphSet\n    * @class\n    * @param {opentype.Font}\n    * @param {Array}\n    */\n   function GlyphSet(font, glyphs) {\n       this.font = font;\n       this.glyphs = {};\n       if (Array.isArray(glyphs)) {\n           for (var i = 0; i < glyphs.length; i++) {\n               var glyph = glyphs[i];\n               glyph.path.unitsPerEm = font.unitsPerEm;\n               this.glyphs[i] = glyph;\n           }\n       }\n\n       this.length = (glyphs && glyphs.length) || 0;\n   }\n\n   /**\n    * @param  {number} index\n    * @return {opentype.Glyph}\n    */\n   GlyphSet.prototype.get = function (index) {\n       // this.glyphs[index] is 'undefined' when low memory mode is on. glyph is pushed on request only.\n       if (this.glyphs[index] === undefined) {\n           this.font._push(index);\n           if (typeof this.glyphs[index] === 'function') {\n               this.glyphs[index] = this.glyphs[index]();\n           }\n\n           var glyph = this.glyphs[index];\n           var unicodeObj = this.font._IndexToUnicodeMap[index];\n\n           if (unicodeObj) {\n               for (var j = 0; j < unicodeObj.unicodes.length; j++)\n                   { glyph.addUnicode(unicodeObj.unicodes[j]); }\n           }\n\n           this.glyphs[index].advanceWidth =\n               this.font._hmtxTableData[index].advanceWidth;\n           this.glyphs[index].leftSideBearing =\n               this.font._hmtxTableData[index].leftSideBearing;\n       } else {\n           if (typeof this.glyphs[index] === 'function') {\n               this.glyphs[index] = this.glyphs[index]();\n           }\n       }\n\n       return this.glyphs[index];\n   };\n\n   /**\n    * @param  {number} index\n    * @param  {Object}\n    */\n   GlyphSet.prototype.push = function (index, loader) {\n       this.glyphs[index] = loader;\n       this.length++;\n   };\n\n   /**\n    * @alias opentype.glyphLoader\n    * @param  {opentype.Font} font\n    * @param  {number} index\n    * @return {opentype.Glyph}\n    */\n   function glyphLoader(font, index) {\n       return new Glyph({ index: index, font: font });\n   }\n\n   /**\n    * Generate a stub glyph that can be filled with all metadata *except*\n    * the \"points\" and \"path\" properties, which must be loaded only once\n    * the glyph's path is actually requested for text shaping.\n    * @alias opentype.ttfGlyphLoader\n    * @param  {opentype.Font} font\n    * @param  {number} index\n    * @param  {Function} parseGlyph\n    * @param  {Object} data\n    * @param  {number} position\n    * @param  {Function} buildPath\n    * @return {opentype.Glyph}\n    */\n   function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n       return function () {\n           var glyph = new Glyph({ index: index, font: font });\n\n           glyph.path = function () {\n               parseGlyph(glyph, data, position);\n               var path = buildPath(font.glyphs, glyph);\n               path.unitsPerEm = font.unitsPerEm;\n               return path;\n           };\n\n           defineDependentProperty(glyph, 'xMin', '_xMin');\n           defineDependentProperty(glyph, 'xMax', '_xMax');\n           defineDependentProperty(glyph, 'yMin', '_yMin');\n           defineDependentProperty(glyph, 'yMax', '_yMax');\n\n           return glyph;\n       };\n   }\n   /**\n    * @alias opentype.cffGlyphLoader\n    * @param  {opentype.Font} font\n    * @param  {number} index\n    * @param  {Function} parseCFFCharstring\n    * @param  {string} charstring\n    * @return {opentype.Glyph}\n    */\n   function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n       return function () {\n           var glyph = new Glyph({ index: index, font: font });\n\n           glyph.path = function () {\n               var path = parseCFFCharstring(font, glyph, charstring);\n               path.unitsPerEm = font.unitsPerEm;\n               return path;\n           };\n\n           return glyph;\n       };\n   }\n\n   var glyphset = { GlyphSet: GlyphSet, glyphLoader: glyphLoader, ttfGlyphLoader: ttfGlyphLoader, cffGlyphLoader: cffGlyphLoader };\n\n   // The Layout object is the prototype of Substitution objects, and provides\n\n   function searchTag(arr, tag) {\n       /* jshint bitwise: false */\n       var imin = 0;\n       var imax = arr.length - 1;\n       while (imin <= imax) {\n           var imid = (imin + imax) >>> 1;\n           var val = arr[imid].tag;\n           if (val === tag) {\n               return imid;\n           } else if (val < tag) {\n               imin = imid + 1;\n           } else {\n               imax = imid - 1;\n           }\n       }\n       // Not found: return -1-insertion point\n       return -imin - 1;\n   }\n\n   function binSearch(arr, value) {\n       /* jshint bitwise: false */\n       var imin = 0;\n       var imax = arr.length - 1;\n       while (imin <= imax) {\n           var imid = (imin + imax) >>> 1;\n           var val = arr[imid];\n           if (val === value) {\n               return imid;\n           } else if (val < value) {\n               imin = imid + 1;\n           } else {\n               imax = imid - 1;\n           }\n       }\n       // Not found: return -1-insertion point\n       return -imin - 1;\n   }\n\n   // binary search in a list of ranges (coverage, class definition)\n   function searchRange(ranges, value) {\n       // jshint bitwise: false\n       var range;\n       var imin = 0;\n       var imax = ranges.length - 1;\n       while (imin <= imax) {\n           var imid = (imin + imax) >>> 1;\n           range = ranges[imid];\n           var start = range.start;\n           if (start === value) {\n               return range;\n           } else if (start < value) {\n               imin = imid + 1;\n           } else {\n               imax = imid - 1;\n           }\n       }\n       if (imin > 0) {\n           range = ranges[imin - 1];\n           if (value > range.end) { return 0; }\n           return range;\n       }\n   }\n\n   /**\n    * @exports opentype.Layout\n    * @class\n    */\n   function Layout(font, tableName) {\n       this.font = font;\n       this.tableName = tableName;\n   }\n\n   Layout.prototype = {\n       /**\n        * Binary search an object by \"tag\" property\n        * @instance\n        * @function searchTag\n        * @memberof opentype.Layout\n        * @param  {Array} arr\n        * @param  {string} tag\n        * @return {number}\n        */\n       searchTag: searchTag,\n\n       /**\n        * Binary search in a list of numbers\n        * @instance\n        * @function binSearch\n        * @memberof opentype.Layout\n        * @param  {Array} arr\n        * @param  {number} value\n        * @return {number}\n        */\n       binSearch: binSearch,\n\n       /**\n        * Get or create the Layout table (GSUB, GPOS etc).\n        * @param  {boolean} create - Whether to create a new one.\n        * @return {Object} The GSUB or GPOS table.\n        */\n       getTable: function (create) {\n           var layout = this.font.tables[this.tableName];\n           if (!layout && create) {\n               layout = this.font.tables[this.tableName] =\n                   this.createDefaultTable();\n           }\n           return layout;\n       },\n\n       /**\n        * Returns the best bet for a script name.\n        * Returns 'DFLT' if it exists.\n        * If not, returns 'latn' if it exists.\n        * If neither exist, returns undefined.\n        */\n       getDefaultScriptName: function () {\n           var layout = this.getTable();\n           if (!layout) {\n               return;\n           }\n           var hasLatn = false;\n           for (var i = 0; i < layout.scripts.length; i++) {\n               var name = layout.scripts[i].tag;\n               if (name === 'DFLT') { return name; }\n               if (name === 'latn') { hasLatn = true; }\n           }\n           if (hasLatn) { return 'latn'; }\n       },\n\n       /**\n        * Returns all LangSysRecords in the given script.\n        * @instance\n        * @param {string} [script='DFLT']\n        * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n        * @return {Object} An object with tag and script properties.\n        */\n       getScriptTable: function (script, create) {\n           var layout = this.getTable(create);\n           if (layout) {\n               script = script || 'DFLT';\n               var scripts = layout.scripts;\n               var pos = searchTag(layout.scripts, script);\n               if (pos >= 0) {\n                   return scripts[pos].script;\n               } else if (create) {\n                   var scr = {\n                       tag: script,\n                       script: {\n                           defaultLangSys: {\n                               reserved: 0,\n                               reqFeatureIndex: 0xffff,\n                               featureIndexes: [],\n                           },\n                           langSysRecords: [],\n                       },\n                   };\n                   scripts.splice(-1 - pos, 0, scr);\n                   return scr.script;\n               }\n           }\n       },\n\n       /**\n        * Returns a language system table\n        * @instance\n        * @param {string} [script='DFLT']\n        * @param {string} [language='dlft']\n        * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n        * @return {Object}\n        */\n       getLangSysTable: function (script, language, create) {\n           var scriptTable = this.getScriptTable(script, create);\n           if (scriptTable) {\n               if (!language || language === 'dflt' || language === 'DFLT') {\n                   return scriptTable.defaultLangSys;\n               }\n               var pos = searchTag(scriptTable.langSysRecords, language);\n               if (pos >= 0) {\n                   return scriptTable.langSysRecords[pos].langSys;\n               } else if (create) {\n                   var langSysRecord = {\n                       tag: language,\n                       langSys: {\n                           reserved: 0,\n                           reqFeatureIndex: 0xffff,\n                           featureIndexes: [],\n                       },\n                   };\n                   scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n                   return langSysRecord.langSys;\n               }\n           }\n       },\n\n       /**\n        * Get a specific feature table.\n        * @instance\n        * @param {string} [script='DFLT']\n        * @param {string} [language='dlft']\n        * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n        * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n        * @return {Object}\n        */\n       getFeatureTable: function (script, language, feature, create) {\n           var langSysTable = this.getLangSysTable(script, language, create);\n           if (langSysTable) {\n               var featureRecord;\n               var featIndexes = langSysTable.featureIndexes;\n               var allFeatures = this.font.tables[this.tableName].features;\n               // The FeatureIndex array of indices is in arbitrary order,\n               // even if allFeatures is sorted alphabetically by feature tag.\n               for (var i = 0; i < featIndexes.length; i++) {\n                   featureRecord = allFeatures[featIndexes[i]];\n                   if (featureRecord.tag === feature) {\n                       return featureRecord.feature;\n                   }\n               }\n               if (create) {\n                   var index = allFeatures.length;\n                   // Automatic ordering of features would require to shift feature indexes in the script list.\n                   check.assert(\n                       index === 0 || feature >= allFeatures[index - 1].tag,\n                       'Features must be added in alphabetical order.'\n                   );\n                   featureRecord = {\n                       tag: feature,\n                       feature: { params: 0, lookupListIndexes: [] },\n                   };\n                   allFeatures.push(featureRecord);\n                   featIndexes.push(index);\n                   return featureRecord.feature;\n               }\n           }\n       },\n\n       /**\n        * Get the lookup tables of a given type for a script/language/feature.\n        * @instance\n        * @param {string} [script='DFLT']\n        * @param {string} [language='dlft']\n        * @param {string} feature - 4-letter feature code\n        * @param {number} lookupType - 1 to 9\n        * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n        * @return {Object[]}\n        */\n       getLookupTables: function (script, language, feature, lookupType, create) {\n           var featureTable = this.getFeatureTable(\n               script,\n               language,\n               feature,\n               create\n           );\n           var tables = [];\n           if (featureTable) {\n               var lookupTable;\n               var lookupListIndexes = featureTable.lookupListIndexes;\n               var allLookups = this.font.tables[this.tableName].lookups;\n               // lookupListIndexes are in no particular order, so use naive search.\n               for (var i = 0; i < lookupListIndexes.length; i++) {\n                   lookupTable = allLookups[lookupListIndexes[i]];\n                   if (lookupTable.lookupType === lookupType) {\n                       tables.push(lookupTable);\n                   }\n               }\n               if (tables.length === 0 && create) {\n                   lookupTable = {\n                       lookupType: lookupType,\n                       lookupFlag: 0,\n                       subtables: [],\n                       markFilteringSet: undefined,\n                   };\n                   var index = allLookups.length;\n                   allLookups.push(lookupTable);\n                   lookupListIndexes.push(index);\n                   return [lookupTable];\n               }\n           }\n           return tables;\n       },\n\n       /**\n        * Find a glyph in a class definition table\n        * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table\n        * @param {object} classDefTable - an OpenType Layout class definition table\n        * @param {number} glyphIndex - the index of the glyph to find\n        * @returns {number} -1 if not found\n        */\n       getGlyphClass: function (classDefTable, glyphIndex) {\n           switch (classDefTable.format) {\n               case 1:\n                   if (\n                       classDefTable.startGlyph <= glyphIndex &&\n                       glyphIndex <\n                           classDefTable.startGlyph + classDefTable.classes.length\n                   ) {\n                       return classDefTable.classes[\n                           glyphIndex - classDefTable.startGlyph\n                       ];\n                   }\n                   return 0;\n               case 2:\n                   var range = searchRange(classDefTable.ranges, glyphIndex);\n                   return range ? range.classId : 0;\n           }\n       },\n\n       /**\n        * Find a glyph in a coverage table\n        * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table\n        * @param {object} coverageTable - an OpenType Layout coverage table\n        * @param {number} glyphIndex - the index of the glyph to find\n        * @returns {number} -1 if not found\n        */\n       getCoverageIndex: function (coverageTable, glyphIndex) {\n           switch (coverageTable.format) {\n               case 1:\n                   var index = binSearch(coverageTable.glyphs, glyphIndex);\n                   return index >= 0 ? index : -1;\n               case 2:\n                   var range = searchRange(coverageTable.ranges, glyphIndex);\n                   return range ? range.index + glyphIndex - range.start : -1;\n           }\n       },\n\n       /**\n        * Returns the list of glyph indexes of a coverage table.\n        * Format 1: the list is stored raw\n        * Format 2: compact list as range records.\n        * @instance\n        * @param  {Object} coverageTable\n        * @return {Array}\n        */\n       expandCoverage: function (coverageTable) {\n           if (coverageTable.format === 1) {\n               return coverageTable.glyphs;\n           } else {\n               var glyphs = [];\n               var ranges = coverageTable.ranges;\n               for (var i = 0; i < ranges.length; i++) {\n                   var range = ranges[i];\n                   var start = range.start;\n                   var end = range.end;\n                   for (var j = start; j <= end; j++) {\n                       glyphs.push(j);\n                   }\n               }\n               return glyphs;\n           }\n       },\n   };\n\n   // The Position object provides utility methods to manipulate\n\n   /**\n    * @exports opentype.Position\n    * @class\n    * @extends opentype.Layout\n    * @param {opentype.Font}\n    * @constructor\n    */\n   function Position(font) {\n       Layout.call(this, font, 'gpos');\n   }\n\n   Position.prototype = Layout.prototype;\n\n   /**\n    * Init some data for faster and easier access later.\n    */\n   Position.prototype.init = function() {\n       var script = this.getDefaultScriptName();\n       this.defaultKerningTables = this.getKerningTables(script);\n   };\n\n   /**\n    * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.\n    *\n    * @param {integer} leftIndex - left glyph index\n    * @param {integer} rightIndex - right glyph index\n    * @returns {integer}\n    */\n   Position.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {\n       for (var i = 0; i < kerningLookups.length; i++) {\n           var subtables = kerningLookups[i].subtables;\n           for (var j = 0; j < subtables.length; j++) {\n               var subtable = subtables[j];\n               var covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);\n               if (covIndex < 0) { continue; }\n               switch (subtable.posFormat) {\n                   case 1:\n                       // Search Pair Adjustment Positioning Format 1\n                       var pairSet = subtable.pairSets[covIndex];\n                       for (var k = 0; k < pairSet.length; k++) {\n                           var pair = pairSet[k];\n                           if (pair.secondGlyph === rightIndex) {\n                               return pair.value1 && pair.value1.xAdvance || 0;\n                           }\n                       }\n                       break;      // left glyph found, not right glyph - try next subtable\n                   case 2:\n                       // Search Pair Adjustment Positioning Format 2\n                       var class1 = this.getGlyphClass(subtable.classDef1, leftIndex);\n                       var class2 = this.getGlyphClass(subtable.classDef2, rightIndex);\n                       var pair$1 = subtable.classRecords[class1][class2];\n                       return pair$1.value1 && pair$1.value1.xAdvance || 0;\n               }\n           }\n       }\n       return 0;\n   };\n\n   /**\n    * List all kerning lookup tables.\n    *\n    * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value\n    * @param {string} [language='dflt']\n    * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)\n    */\n   Position.prototype.getKerningTables = function(script, language) {\n       if (this.font.tables.gpos) {\n           return this.getLookupTables(script, language, 'kern', 2);\n       }\n   };\n\n   // The Substitution object provides utility methods to manipulate\n\n   /**\n    * @exports opentype.Substitution\n    * @class\n    * @extends opentype.Layout\n    * @param {opentype.Font}\n    * @constructor\n    */\n   function Substitution(font) {\n       Layout.call(this, font, 'gsub');\n   }\n\n   // Check if 2 arrays of primitives are equal.\n   function arraysEqual(ar1, ar2) {\n       var n = ar1.length;\n       if (n !== ar2.length) {\n           return false;\n       }\n       for (var i = 0; i < n; i++) {\n           if (ar1[i] !== ar2[i]) {\n               return false;\n           }\n       }\n       return true;\n   }\n\n   // Find the first subtable of a lookup table in a particular format.\n   function getSubstFormat(lookupTable, format, defaultSubtable) {\n       var subtables = lookupTable.subtables;\n       for (var i = 0; i < subtables.length; i++) {\n           var subtable = subtables[i];\n           if (subtable.substFormat === format) {\n               return subtable;\n           }\n       }\n       if (defaultSubtable) {\n           subtables.push(defaultSubtable);\n           return defaultSubtable;\n       }\n       return undefined;\n   }\n\n   Substitution.prototype = Layout.prototype;\n\n   /**\n    * Create a default GSUB table.\n    * @return {Object} gsub - The GSUB table.\n    */\n   Substitution.prototype.createDefaultTable = function () {\n       // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n       return {\n           version: 1,\n           scripts: [\n               {\n                   tag: 'DFLT',\n                   script: {\n                       defaultLangSys: {\n                           reserved: 0,\n                           reqFeatureIndex: 0xffff,\n                           featureIndexes: [],\n                       },\n                       langSysRecords: [],\n                   },\n               } ],\n           features: [],\n           lookups: [],\n       };\n   };\n\n   /**\n    * List all single substitutions (lookup type 1) for a given script, language, and feature.\n    * @param {string} [script='DFLT']\n    * @param {string} [language='dflt']\n    * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n    * @return {Array} substitutions - The list of substitutions.\n    */\n   Substitution.prototype.getSingle = function (feature, script, language) {\n       var substitutions = [];\n       var lookupTables = this.getLookupTables(script, language, feature, 1);\n       for (var idx = 0; idx < lookupTables.length; idx++) {\n           var subtables = lookupTables[idx].subtables;\n           for (var i = 0; i < subtables.length; i++) {\n               var subtable = subtables[i];\n               var glyphs = this.expandCoverage(subtable.coverage);\n               var j = (void 0);\n               if (subtable.substFormat === 1) {\n                   var delta = subtable.deltaGlyphId;\n                   for (j = 0; j < glyphs.length; j++) {\n                       var glyph = glyphs[j];\n                       substitutions.push({ sub: glyph, by: glyph + delta });\n                   }\n               } else {\n                   var substitute = subtable.substitute;\n                   for (j = 0; j < glyphs.length; j++) {\n                       substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                   }\n               }\n           }\n       }\n       return substitutions;\n   };\n\n   /**\n    * List all multiple substitutions (lookup type 2) for a given script, language, and feature.\n    * @param {string} [script='DFLT']\n    * @param {string} [language='dflt']\n    * @param {string} feature - 4-character feature name ('ccmp', 'stch')\n    * @return {Array} substitutions - The list of substitutions.\n    */\n   Substitution.prototype.getMultiple = function (feature, script, language) {\n       var substitutions = [];\n       var lookupTables = this.getLookupTables(script, language, feature, 2);\n       for (var idx = 0; idx < lookupTables.length; idx++) {\n           var subtables = lookupTables[idx].subtables;\n           for (var i = 0; i < subtables.length; i++) {\n               var subtable = subtables[i];\n               var glyphs = this.expandCoverage(subtable.coverage);\n               var j = (void 0);\n\n               for (j = 0; j < glyphs.length; j++) {\n                   var glyph = glyphs[j];\n                   var replacements = subtable.sequences[j];\n                   substitutions.push({ sub: glyph, by: replacements });\n               }\n           }\n       }\n       return substitutions;\n   };\n\n   /**\n    * List all alternates (lookup type 3) for a given script, language, and feature.\n    * @param {string} [script='DFLT']\n    * @param {string} [language='dflt']\n    * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n    * @return {Array} alternates - The list of alternates\n    */\n   Substitution.prototype.getAlternates = function (feature, script, language) {\n       var alternates = [];\n       var lookupTables = this.getLookupTables(script, language, feature, 3);\n       for (var idx = 0; idx < lookupTables.length; idx++) {\n           var subtables = lookupTables[idx].subtables;\n           for (var i = 0; i < subtables.length; i++) {\n               var subtable = subtables[i];\n               var glyphs = this.expandCoverage(subtable.coverage);\n               var alternateSets = subtable.alternateSets;\n               for (var j = 0; j < glyphs.length; j++) {\n                   alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n               }\n           }\n       }\n       return alternates;\n   };\n\n   /**\n    * List all ligatures (lookup type 4) for a given script, language, and feature.\n    * The result is an array of ligature objects like { sub: [ids], by: id }\n    * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n    * @param {string} [script='DFLT']\n    * @param {string} [language='dflt']\n    * @return {Array} ligatures - The list of ligatures.\n    */\n   Substitution.prototype.getLigatures = function (feature, script, language) {\n       var ligatures = [];\n       var lookupTables = this.getLookupTables(script, language, feature, 4);\n       for (var idx = 0; idx < lookupTables.length; idx++) {\n           var subtables = lookupTables[idx].subtables;\n           for (var i = 0; i < subtables.length; i++) {\n               var subtable = subtables[i];\n               var glyphs = this.expandCoverage(subtable.coverage);\n               var ligatureSets = subtable.ligatureSets;\n               for (var j = 0; j < glyphs.length; j++) {\n                   var startGlyph = glyphs[j];\n                   var ligSet = ligatureSets[j];\n                   for (var k = 0; k < ligSet.length; k++) {\n                       var lig = ligSet[k];\n                       ligatures.push({\n                           sub: [startGlyph].concat(lig.components),\n                           by: lig.ligGlyph,\n                       });\n                   }\n               }\n           }\n       }\n       return ligatures;\n   };\n\n   /**\n    * Add or modify a single substitution (lookup type 1)\n    * Format 2, more flexible, is always used.\n    * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n    * @param {Object} substitution - { sub: id, by: id } (format 1 is not supported)\n    * @param {string} [script='DFLT']\n    * @param {string} [language='dflt']\n    */\n   Substitution.prototype.addSingle = function (\n       feature,\n       substitution,\n       script,\n       language\n   ) {\n       var lookupTable = this.getLookupTables(\n           script,\n           language,\n           feature,\n           1,\n           true\n       )[0];\n       var subtable = getSubstFormat(lookupTable, 2, {\n           // lookup type 1 subtable, format 2, coverage format 1\n           substFormat: 2,\n           coverage: { format: 1, glyphs: [] },\n           substitute: [],\n       });\n       check.assert(\n           subtable.coverage.format === 1,\n           'Single: unable to modify coverage table format ' +\n               subtable.coverage.format\n       );\n       var coverageGlyph = substitution.sub;\n       var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n       if (pos < 0) {\n           pos = -1 - pos;\n           subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n           subtable.substitute.splice(pos, 0, 0);\n       }\n       subtable.substitute[pos] = substitution.by;\n   };\n\n   /**\n    * Add or modify a multiple substitution (lookup type 2)\n    * @param {string} feature - 4-letter feature name ('ccmp', 'stch')\n    * @param {Object} substitution - { sub: id, by: [id] } for format 2.\n    * @param {string} [script='DFLT']\n    * @param {string} [language='dflt']\n    */\n   Substitution.prototype.addMultiple = function (\n       feature,\n       substitution,\n       script,\n       language\n   ) {\n       check.assert(\n           substitution.by instanceof Array && substitution.by.length > 1,\n           'Multiple: \"by\" must be an array of two or more ids'\n       );\n       var lookupTable = this.getLookupTables(\n           script,\n           language,\n           feature,\n           2,\n           true\n       )[0];\n       var subtable = getSubstFormat(lookupTable, 1, {\n           // lookup type 2 subtable, format 1, coverage format 1\n           substFormat: 1,\n           coverage: { format: 1, glyphs: [] },\n           sequences: [],\n       });\n       check.assert(\n           subtable.coverage.format === 1,\n           'Multiple: unable to modify coverage table format ' +\n               subtable.coverage.format\n       );\n       var coverageGlyph = substitution.sub;\n       var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n       if (pos < 0) {\n           pos = -1 - pos;\n           subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n           subtable.sequences.splice(pos, 0, 0);\n       }\n       subtable.sequences[pos] = substitution.by;\n   };\n\n   /**\n    * Add or modify an alternate substitution (lookup type 3)\n    * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n    * @param {Object} substitution - { sub: id, by: [ids] }\n    * @param {string} [script='DFLT']\n    * @param {string} [language='dflt']\n    */\n   Substitution.prototype.addAlternate = function (\n       feature,\n       substitution,\n       script,\n       language\n   ) {\n       var lookupTable = this.getLookupTables(\n           script,\n           language,\n           feature,\n           3,\n           true\n       )[0];\n       var subtable = getSubstFormat(lookupTable, 1, {\n           // lookup type 3 subtable, format 1, coverage format 1\n           substFormat: 1,\n           coverage: { format: 1, glyphs: [] },\n           alternateSets: [],\n       });\n       check.assert(\n           subtable.coverage.format === 1,\n           'Alternate: unable to modify coverage table format ' +\n               subtable.coverage.format\n       );\n       var coverageGlyph = substitution.sub;\n       var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n       if (pos < 0) {\n           pos = -1 - pos;\n           subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n           subtable.alternateSets.splice(pos, 0, 0);\n       }\n       subtable.alternateSets[pos] = substitution.by;\n   };\n\n   /**\n    * Add a ligature (lookup type 4)\n    * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n    * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n    * @param {Object} ligature - { sub: [ids], by: id }\n    * @param {string} [script='DFLT']\n    * @param {string} [language='dflt']\n    */\n   Substitution.prototype.addLigature = function (\n       feature,\n       ligature,\n       script,\n       language\n   ) {\n       var lookupTable = this.getLookupTables(\n           script,\n           language,\n           feature,\n           4,\n           true\n       )[0];\n       var subtable = lookupTable.subtables[0];\n       if (!subtable) {\n           subtable = {\n               // lookup type 4 subtable, format 1, coverage format 1\n               substFormat: 1,\n               coverage: { format: 1, glyphs: [] },\n               ligatureSets: [],\n           };\n           lookupTable.subtables[0] = subtable;\n       }\n       check.assert(\n           subtable.coverage.format === 1,\n           'Ligature: unable to modify coverage table format ' +\n               subtable.coverage.format\n       );\n       var coverageGlyph = ligature.sub[0];\n       var ligComponents = ligature.sub.slice(1);\n       var ligatureTable = {\n           ligGlyph: ligature.by,\n           components: ligComponents,\n       };\n       var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n       if (pos >= 0) {\n           // ligatureSet already exists\n           var ligatureSet = subtable.ligatureSets[pos];\n           for (var i = 0; i < ligatureSet.length; i++) {\n               // If ligature already exists, return.\n               if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                   return;\n               }\n           }\n           // ligature does not exist: add it.\n           ligatureSet.push(ligatureTable);\n       } else {\n           // Create a new ligatureSet and add coverage for the first glyph.\n           pos = -1 - pos;\n           subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n           subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n       }\n   };\n\n   /**\n    * List all feature data for a given script and language.\n    * @param {string} feature - 4-letter feature name\n    * @param {string} [script='DFLT']\n    * @param {string} [language='dflt']\n    * @return {Array} substitutions - The list of substitutions.\n    */\n   Substitution.prototype.getFeature = function (feature, script, language) {\n       if (/ss\\d\\d/.test(feature)) {\n           // ss01 - ss20\n           return this.getSingle(feature, script, language);\n       }\n       switch (feature) {\n           case 'aalt':\n           case 'salt':\n               return this.getSingle(feature, script, language).concat(\n                   this.getAlternates(feature, script, language)\n               );\n           case 'dlig':\n           case 'liga':\n           case 'rlig':\n               return this.getLigatures(feature, script, language);\n           case 'ccmp':\n               return this.getMultiple(feature, script, language).concat(\n                   this.getLigatures(feature, script, language)\n               );\n           case 'stch':\n               return this.getMultiple(feature, script, language);\n       }\n       return undefined;\n   };\n\n   /**\n    * Add a substitution to a feature for a given script and language.\n    * @param {string} feature - 4-letter feature name\n    * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n    * @param {string} [script='DFLT']\n    * @param {string} [language='dflt']\n    */\n   Substitution.prototype.add = function (feature, sub, script, language) {\n       if (/ss\\d\\d/.test(feature)) {\n           // ss01 - ss20\n           return this.addSingle(feature, sub, script, language);\n       }\n       switch (feature) {\n           case 'aalt':\n           case 'salt':\n               if (typeof sub.by === 'number') {\n                   return this.addSingle(feature, sub, script, language);\n               }\n               return this.addAlternate(feature, sub, script, language);\n           case 'dlig':\n           case 'liga':\n           case 'rlig':\n               return this.addLigature(feature, sub, script, language);\n           case 'ccmp':\n               if (sub.by instanceof Array) {\n                   return this.addMultiple(feature, sub, script, language);\n               }\n               return this.addLigature(feature, sub, script, language);\n       }\n       return undefined;\n   };\n\n   function checkArgument(expression, message) {\n       if (!expression) {\n           throw message;\n       }\n   }\n\n   // Parsing utility functions\n\n   // Retrieve an unsigned byte from the DataView.\n   function getByte(dataView, offset) {\n       return dataView.getUint8(offset);\n   }\n\n   // Retrieve an unsigned 16-bit short from the DataView.\n   // The value is stored in big endian.\n   function getUShort(dataView, offset) {\n       return dataView.getUint16(offset, false);\n   }\n\n   // Retrieve a signed 16-bit short from the DataView.\n   // The value is stored in big endian.\n   function getShort(dataView, offset) {\n       return dataView.getInt16(offset, false);\n   }\n\n   // Retrieve an unsigned 32-bit long from the DataView.\n   // The value is stored in big endian.\n   function getULong(dataView, offset) {\n       return dataView.getUint32(offset, false);\n   }\n\n   // Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n   // The value is stored in big endian.\n   function getFixed(dataView, offset) {\n       var decimal = dataView.getInt16(offset, false);\n       var fraction = dataView.getUint16(offset + 2, false);\n       return decimal + fraction / 65535;\n   }\n\n   // Retrieve a 4-character tag from the DataView.\n   // Tags are used to identify tables.\n   function getTag(dataView, offset) {\n       var tag = '';\n       for (var i = offset; i < offset + 4; i += 1) {\n           tag += String.fromCharCode(dataView.getInt8(i));\n       }\n\n       return tag;\n   }\n\n   // Retrieve an offset from the DataView.\n   // Offsets are 1 to 4 bytes in length, depending on the offSize argument.\n   function getOffset(dataView, offset, offSize) {\n       var v = 0;\n       for (var i = 0; i < offSize; i += 1) {\n           v <<= 8;\n           v += dataView.getUint8(offset + i);\n       }\n\n       return v;\n   }\n\n   // Retrieve a number of bytes from start offset to the end offset from the DataView.\n   function getBytes(dataView, startOffset, endOffset) {\n       var bytes = [];\n       for (var i = startOffset; i < endOffset; i += 1) {\n           bytes.push(dataView.getUint8(i));\n       }\n\n       return bytes;\n   }\n\n   // Convert the list of bytes to a string.\n   function bytesToString(bytes) {\n       var s = '';\n       for (var i = 0; i < bytes.length; i += 1) {\n           s += String.fromCharCode(bytes[i]);\n       }\n\n       return s;\n   }\n\n   var typeOffsets = {\n       byte: 1,\n       uShort: 2,\n       short: 2,\n       uLong: 4,\n       fixed: 4,\n       longDateTime: 8,\n       tag: 4\n   };\n\n   // A stateful parser that changes the offset whenever a value is retrieved.\n   // The data is a DataView.\n   function Parser(data, offset) {\n       this.data = data;\n       this.offset = offset;\n       this.relativeOffset = 0;\n   }\n\n   Parser.prototype.parseByte = function() {\n       var v = this.data.getUint8(this.offset + this.relativeOffset);\n       this.relativeOffset += 1;\n       return v;\n   };\n\n   Parser.prototype.parseChar = function() {\n       var v = this.data.getInt8(this.offset + this.relativeOffset);\n       this.relativeOffset += 1;\n       return v;\n   };\n\n   Parser.prototype.parseCard8 = Parser.prototype.parseByte;\n\n   Parser.prototype.parseUShort = function() {\n       var v = this.data.getUint16(this.offset + this.relativeOffset);\n       this.relativeOffset += 2;\n       return v;\n   };\n\n   Parser.prototype.parseCard16 = Parser.prototype.parseUShort;\n   Parser.prototype.parseSID = Parser.prototype.parseUShort;\n   Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\n   Parser.prototype.parseShort = function() {\n       var v = this.data.getInt16(this.offset + this.relativeOffset);\n       this.relativeOffset += 2;\n       return v;\n   };\n\n   Parser.prototype.parseF2Dot14 = function() {\n       var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n       this.relativeOffset += 2;\n       return v;\n   };\n\n   Parser.prototype.parseULong = function() {\n       var v = getULong(this.data, this.offset + this.relativeOffset);\n       this.relativeOffset += 4;\n       return v;\n   };\n\n   Parser.prototype.parseOffset32 = Parser.prototype.parseULong;\n\n   Parser.prototype.parseFixed = function() {\n       var v = getFixed(this.data, this.offset + this.relativeOffset);\n       this.relativeOffset += 4;\n       return v;\n   };\n\n   Parser.prototype.parseString = function(length) {\n       var dataView = this.data;\n       var offset = this.offset + this.relativeOffset;\n       var string = '';\n       this.relativeOffset += length;\n       for (var i = 0; i < length; i++) {\n           string += String.fromCharCode(dataView.getUint8(offset + i));\n       }\n\n       return string;\n   };\n\n   Parser.prototype.parseTag = function() {\n       return this.parseString(4);\n   };\n\n   // LONGDATETIME is a 64-bit integer.\n   // JavaScript and unix timestamps traditionally use 32 bits, so we\n   // only take the last 32 bits.\n   // + Since until 2038 those bits will be filled by zeros we can ignore them.\n   Parser.prototype.parseLongDateTime = function() {\n       var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n       // Subtract seconds between 01/01/1904 and 01/01/1970\n       // to convert Apple Mac timestamp to Standard Unix timestamp\n       v -= 2082844800;\n       this.relativeOffset += 8;\n       return v;\n   };\n\n   Parser.prototype.parseVersion = function(minorBase) {\n       var major = getUShort(this.data, this.offset + this.relativeOffset);\n\n       // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n       // Default returns the correct number if minor = 0xN000 where N is 0-9\n       // Set minorBase to 1 for tables that use minor = N where N is 0-9\n       var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n       this.relativeOffset += 4;\n       if (minorBase === undefined) { minorBase = 0x1000; }\n       return major + minor / minorBase / 10;\n   };\n\n   Parser.prototype.skip = function(type, amount) {\n       if (amount === undefined) {\n           amount = 1;\n       }\n\n       this.relativeOffset += typeOffsets[type] * amount;\n   };\n\n   ///// Parsing lists and records ///////////////////////////////\n\n   // Parse a list of 32 bit unsigned integers.\n   Parser.prototype.parseULongList = function(count) {\n       if (count === undefined) { count = this.parseULong(); }\n       var offsets = new Array(count);\n       var dataView = this.data;\n       var offset = this.offset + this.relativeOffset;\n       for (var i = 0; i < count; i++) {\n           offsets[i] = dataView.getUint32(offset);\n           offset += 4;\n       }\n\n       this.relativeOffset += count * 4;\n       return offsets;\n   };\n\n   // Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream\n   // or provided as an argument.\n   Parser.prototype.parseOffset16List =\n   Parser.prototype.parseUShortList = function(count) {\n       if (count === undefined) { count = this.parseUShort(); }\n       var offsets = new Array(count);\n       var dataView = this.data;\n       var offset = this.offset + this.relativeOffset;\n       for (var i = 0; i < count; i++) {\n           offsets[i] = dataView.getUint16(offset);\n           offset += 2;\n       }\n\n       this.relativeOffset += count * 2;\n       return offsets;\n   };\n\n   // Parses a list of 16 bit signed integers.\n   Parser.prototype.parseShortList = function(count) {\n       var list = new Array(count);\n       var dataView = this.data;\n       var offset = this.offset + this.relativeOffset;\n       for (var i = 0; i < count; i++) {\n           list[i] = dataView.getInt16(offset);\n           offset += 2;\n       }\n\n       this.relativeOffset += count * 2;\n       return list;\n   };\n\n   // Parses a list of bytes.\n   Parser.prototype.parseByteList = function(count) {\n       var list = new Array(count);\n       var dataView = this.data;\n       var offset = this.offset + this.relativeOffset;\n       for (var i = 0; i < count; i++) {\n           list[i] = dataView.getUint8(offset++);\n       }\n\n       this.relativeOffset += count;\n       return list;\n   };\n\n   /**\n    * Parse a list of items.\n    * Record count is optional, if omitted it is read from the stream.\n    * itemCallback is one of the Parser methods.\n    */\n   Parser.prototype.parseList = function(count, itemCallback) {\n       if (!itemCallback) {\n           itemCallback = count;\n           count = this.parseUShort();\n       }\n       var list = new Array(count);\n       for (var i = 0; i < count; i++) {\n           list[i] = itemCallback.call(this);\n       }\n       return list;\n   };\n\n   Parser.prototype.parseList32 = function(count, itemCallback) {\n       if (!itemCallback) {\n           itemCallback = count;\n           count = this.parseULong();\n       }\n       var list = new Array(count);\n       for (var i = 0; i < count; i++) {\n           list[i] = itemCallback.call(this);\n       }\n       return list;\n   };\n\n   /**\n    * Parse a list of records.\n    * Record count is optional, if omitted it is read from the stream.\n    * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n    */\n   Parser.prototype.parseRecordList = function(count, recordDescription) {\n       // If the count argument is absent, read it in the stream.\n       if (!recordDescription) {\n           recordDescription = count;\n           count = this.parseUShort();\n       }\n       var records = new Array(count);\n       var fields = Object.keys(recordDescription);\n       for (var i = 0; i < count; i++) {\n           var rec = {};\n           for (var j = 0; j < fields.length; j++) {\n               var fieldName = fields[j];\n               var fieldType = recordDescription[fieldName];\n               rec[fieldName] = fieldType.call(this);\n           }\n           records[i] = rec;\n       }\n       return records;\n   };\n\n   Parser.prototype.parseRecordList32 = function(count, recordDescription) {\n       // If the count argument is absent, read it in the stream.\n       if (!recordDescription) {\n           recordDescription = count;\n           count = this.parseULong();\n       }\n       var records = new Array(count);\n       var fields = Object.keys(recordDescription);\n       for (var i = 0; i < count; i++) {\n           var rec = {};\n           for (var j = 0; j < fields.length; j++) {\n               var fieldName = fields[j];\n               var fieldType = recordDescription[fieldName];\n               rec[fieldName] = fieldType.call(this);\n           }\n           records[i] = rec;\n       }\n       return records;\n   };\n\n   // Parse a data structure into an object\n   // Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n   Parser.prototype.parseStruct = function(description) {\n       if (typeof description === 'function') {\n           return description.call(this);\n       } else {\n           var fields = Object.keys(description);\n           var struct = {};\n           for (var j = 0; j < fields.length; j++) {\n               var fieldName = fields[j];\n               var fieldType = description[fieldName];\n               struct[fieldName] = fieldType.call(this);\n           }\n           return struct;\n       }\n   };\n\n   /**\n    * Parse a GPOS valueRecord\n    * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n    * valueFormat is optional, if omitted it is read from the stream.\n    */\n   Parser.prototype.parseValueRecord = function(valueFormat) {\n       if (valueFormat === undefined) {\n           valueFormat = this.parseUShort();\n       }\n       if (valueFormat === 0) {\n           // valueFormat2 in kerning pairs is most often 0\n           // in this case return undefined instead of an empty object, to save space\n           return;\n       }\n       var valueRecord = {};\n\n       if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }\n       if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }\n       if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }\n       if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }\n\n       // Device table (non-variable font) / VariationIndex table (variable font) not supported\n       // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls\n       if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }\n       if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }\n       if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }\n       if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }\n\n       return valueRecord;\n   };\n\n   /**\n    * Parse a list of GPOS valueRecords\n    * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n    * valueFormat and valueCount are read from the stream.\n    */\n   Parser.prototype.parseValueRecordList = function() {\n       var valueFormat = this.parseUShort();\n       var valueCount = this.parseUShort();\n       var values = new Array(valueCount);\n       for (var i = 0; i < valueCount; i++) {\n           values[i] = this.parseValueRecord(valueFormat);\n       }\n       return values;\n   };\n\n   Parser.prototype.parsePointer = function(description) {\n       var structOffset = this.parseOffset16();\n       if (structOffset > 0) {\n           // NULL offset => return undefined\n           return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n       }\n       return undefined;\n   };\n\n   Parser.prototype.parsePointer32 = function(description) {\n       var structOffset = this.parseOffset32();\n       if (structOffset > 0) {\n           // NULL offset => return undefined\n           return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n       }\n       return undefined;\n   };\n\n   /**\n    * Parse a list of offsets to lists of 16-bit integers,\n    * or a list of offsets to lists of offsets to any kind of items.\n    * If itemCallback is not provided, a list of list of UShort is assumed.\n    * If provided, itemCallback is called on each item and must parse the item.\n    * See examples in tables/gsub.js\n    */\n   Parser.prototype.parseListOfLists = function(itemCallback) {\n       var offsets = this.parseOffset16List();\n       var count = offsets.length;\n       var relativeOffset = this.relativeOffset;\n       var list = new Array(count);\n       for (var i = 0; i < count; i++) {\n           var start = offsets[i];\n           if (start === 0) {\n               // NULL offset\n               // Add i as owned property to list. Convenient with assert.\n               list[i] = undefined;\n               continue;\n           }\n           this.relativeOffset = start;\n           if (itemCallback) {\n               var subOffsets = this.parseOffset16List();\n               var subList = new Array(subOffsets.length);\n               for (var j = 0; j < subOffsets.length; j++) {\n                   this.relativeOffset = start + subOffsets[j];\n                   subList[j] = itemCallback.call(this);\n               }\n               list[i] = subList;\n           } else {\n               list[i] = this.parseUShortList();\n           }\n       }\n       this.relativeOffset = relativeOffset;\n       return list;\n   };\n\n   ///// Complex tables parsing //////////////////////////////////\n\n   // Parse a coverage table in a GSUB, GPOS or GDEF table.\n   // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n   // parser.offset must point to the start of the table containing the coverage.\n   Parser.prototype.parseCoverage = function() {\n       var startOffset = this.offset + this.relativeOffset;\n       var format = this.parseUShort();\n       var count = this.parseUShort();\n       if (format === 1) {\n           return {\n               format: 1,\n               glyphs: this.parseUShortList(count)\n           };\n       } else if (format === 2) {\n           var ranges = new Array(count);\n           for (var i = 0; i < count; i++) {\n               ranges[i] = {\n                   start: this.parseUShort(),\n                   end: this.parseUShort(),\n                   index: this.parseUShort()\n               };\n           }\n           return {\n               format: 2,\n               ranges: ranges\n           };\n       }\n       throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');\n   };\n\n   // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n   // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n   Parser.prototype.parseClassDef = function() {\n       var startOffset = this.offset + this.relativeOffset;\n       var format = this.parseUShort();\n       if (format === 1) {\n           return {\n               format: 1,\n               startGlyph: this.parseUShort(),\n               classes: this.parseUShortList()\n           };\n       } else if (format === 2) {\n           return {\n               format: 2,\n               ranges: this.parseRecordList({\n                   start: Parser.uShort,\n                   end: Parser.uShort,\n                   classId: Parser.uShort\n               })\n           };\n       }\n       throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');\n   };\n\n   ///// Static methods ///////////////////////////////////\n   // These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\n   Parser.list = function(count, itemCallback) {\n       return function() {\n           return this.parseList(count, itemCallback);\n       };\n   };\n\n   Parser.list32 = function(count, itemCallback) {\n       return function() {\n           return this.parseList32(count, itemCallback);\n       };\n   };\n\n   Parser.recordList = function(count, recordDescription) {\n       return function() {\n           return this.parseRecordList(count, recordDescription);\n       };\n   };\n\n   Parser.recordList32 = function(count, recordDescription) {\n       return function() {\n           return this.parseRecordList32(count, recordDescription);\n       };\n   };\n\n   Parser.pointer = function(description) {\n       return function() {\n           return this.parsePointer(description);\n       };\n   };\n\n   Parser.pointer32 = function(description) {\n       return function() {\n           return this.parsePointer32(description);\n       };\n   };\n\n   Parser.tag = Parser.prototype.parseTag;\n   Parser.byte = Parser.prototype.parseByte;\n   Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\n   Parser.uShortList = Parser.prototype.parseUShortList;\n   Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;\n   Parser.uLongList = Parser.prototype.parseULongList;\n   Parser.struct = Parser.prototype.parseStruct;\n   Parser.coverage = Parser.prototype.parseCoverage;\n   Parser.classDef = Parser.prototype.parseClassDef;\n\n   ///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n   // https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\n   var langSysTable = {\n       reserved: Parser.uShort,\n       reqFeatureIndex: Parser.uShort,\n       featureIndexes: Parser.uShortList\n   };\n\n   Parser.prototype.parseScriptList = function() {\n       return this.parsePointer(Parser.recordList({\n           tag: Parser.tag,\n           script: Parser.pointer({\n               defaultLangSys: Parser.pointer(langSysTable),\n               langSysRecords: Parser.recordList({\n                   tag: Parser.tag,\n                   langSys: Parser.pointer(langSysTable)\n               })\n           })\n       })) || [];\n   };\n\n   Parser.prototype.parseFeatureList = function() {\n       return this.parsePointer(Parser.recordList({\n           tag: Parser.tag,\n           feature: Parser.pointer({\n               featureParams: Parser.offset16,\n               lookupListIndexes: Parser.uShortList\n           })\n       })) || [];\n   };\n\n   Parser.prototype.parseLookupList = function(lookupTableParsers) {\n       return this.parsePointer(Parser.list(Parser.pointer(function() {\n           var lookupType = this.parseUShort();\n           check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');\n           var lookupFlag = this.parseUShort();\n           var useMarkFilteringSet = lookupFlag & 0x10;\n           return {\n               lookupType: lookupType,\n               lookupFlag: lookupFlag,\n               subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n               markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined\n           };\n       }))) || [];\n   };\n\n   Parser.prototype.parseFeatureVariationsList = function() {\n       return this.parsePointer32(function() {\n           var majorVersion = this.parseUShort();\n           var minorVersion = this.parseUShort();\n           check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');\n           var featureVariations = this.parseRecordList32({\n               conditionSetOffset: Parser.offset32,\n               featureTableSubstitutionOffset: Parser.offset32\n           });\n           return featureVariations;\n       }) || [];\n   };\n\n   var parse = {\n       getByte: getByte,\n       getCard8: getByte,\n       getUShort: getUShort,\n       getCard16: getUShort,\n       getShort: getShort,\n       getULong: getULong,\n       getFixed: getFixed,\n       getTag: getTag,\n       getOffset: getOffset,\n       getBytes: getBytes,\n       bytesToString: bytesToString,\n       Parser: Parser,\n   };\n\n   // The `glyf` table describes the glyphs in TrueType outline format.\n\n   // Parse the coordinate data for a glyph.\n   function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n       var v;\n       if ((flag & shortVectorBitMask) > 0) {\n           // The coordinate is 1 byte long.\n           v = p.parseByte();\n           // The `same` bit is re-used for short values to signify the sign of the value.\n           if ((flag & sameBitMask) === 0) {\n               v = -v;\n           }\n\n           v = previousValue + v;\n       } else {\n           //  The coordinate is 2 bytes long.\n           // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n           if ((flag & sameBitMask) > 0) {\n               v = previousValue;\n           } else {\n               // Parse the coordinate as a signed 16-bit delta value.\n               v = previousValue + p.parseShort();\n           }\n       }\n\n       return v;\n   }\n\n   // Parse a TrueType glyph.\n   function parseGlyph(glyph, data, start) {\n       var p = new parse.Parser(data, start);\n       glyph.numberOfContours = p.parseShort();\n       glyph._xMin = p.parseShort();\n       glyph._yMin = p.parseShort();\n       glyph._xMax = p.parseShort();\n       glyph._yMax = p.parseShort();\n       var flags;\n       var flag;\n\n       if (glyph.numberOfContours > 0) {\n           // This glyph is not a composite.\n           var endPointIndices = glyph.endPointIndices = [];\n           for (var i = 0; i < glyph.numberOfContours; i += 1) {\n               endPointIndices.push(p.parseUShort());\n           }\n\n           glyph.instructionLength = p.parseUShort();\n           glyph.instructions = [];\n           for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {\n               glyph.instructions.push(p.parseByte());\n           }\n\n           var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n           flags = [];\n           for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {\n               flag = p.parseByte();\n               flags.push(flag);\n               // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n               if ((flag & 8) > 0) {\n                   var repeatCount = p.parseByte();\n                   for (var j = 0; j < repeatCount; j += 1) {\n                       flags.push(flag);\n                       i$2 += 1;\n                   }\n               }\n           }\n\n           check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n           if (endPointIndices.length > 0) {\n               var points = [];\n               var point;\n               // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n               if (numberOfCoordinates > 0) {\n                   for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {\n                       flag = flags[i$3];\n                       point = {};\n                       point.onCurve = !!(flag & 1);\n                       point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n                       points.push(point);\n                   }\n\n                   var px = 0;\n                   for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {\n                       flag = flags[i$4];\n                       point = points[i$4];\n                       point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                       px = point.x;\n                   }\n\n                   var py = 0;\n                   for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {\n                       flag = flags[i$5];\n                       point = points[i$5];\n                       point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                       py = point.y;\n                   }\n               }\n\n               glyph.points = points;\n           } else {\n               glyph.points = [];\n           }\n       } else if (glyph.numberOfContours === 0) {\n           glyph.points = [];\n       } else {\n           glyph.isComposite = true;\n           glyph.points = [];\n           glyph.components = [];\n           var moreComponents = true;\n           while (moreComponents) {\n               flags = p.parseUShort();\n               var component = {\n                   glyphIndex: p.parseUShort(),\n                   xScale: 1,\n                   scale01: 0,\n                   scale10: 0,\n                   yScale: 1,\n                   dx: 0,\n                   dy: 0\n               };\n               if ((flags & 1) > 0) {\n                   // The arguments are words\n                   if ((flags & 2) > 0) {\n                       // values are offset\n                       component.dx = p.parseShort();\n                       component.dy = p.parseShort();\n                   } else {\n                       // values are matched points\n                       component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n                   }\n\n               } else {\n                   // The arguments are bytes\n                   if ((flags & 2) > 0) {\n                       // values are offset\n                       component.dx = p.parseChar();\n                       component.dy = p.parseChar();\n                   } else {\n                       // values are matched points\n                       component.matchedPoints = [p.parseByte(), p.parseByte()];\n                   }\n               }\n\n               if ((flags & 8) > 0) {\n                   // We have a scale\n                   component.xScale = component.yScale = p.parseF2Dot14();\n               } else if ((flags & 64) > 0) {\n                   // We have an X / Y scale\n                   component.xScale = p.parseF2Dot14();\n                   component.yScale = p.parseF2Dot14();\n               } else if ((flags & 128) > 0) {\n                   // We have a 2x2 transformation\n                   component.xScale = p.parseF2Dot14();\n                   component.scale01 = p.parseF2Dot14();\n                   component.scale10 = p.parseF2Dot14();\n                   component.yScale = p.parseF2Dot14();\n               }\n\n               glyph.components.push(component);\n               moreComponents = !!(flags & 32);\n           }\n           if (flags & 0x100) {\n               // We have instructions\n               glyph.instructionLength = p.parseUShort();\n               glyph.instructions = [];\n               for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {\n                   glyph.instructions.push(p.parseByte());\n               }\n           }\n       }\n   }\n\n   // Transform an array of points and return a new array.\n   function transformPoints(points, transform) {\n       var newPoints = [];\n       for (var i = 0; i < points.length; i += 1) {\n           var pt = points[i];\n           var newPt = {\n               x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n               y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n               onCurve: pt.onCurve,\n               lastPointOfContour: pt.lastPointOfContour\n           };\n           newPoints.push(newPt);\n       }\n\n       return newPoints;\n   }\n\n   function getContours(points) {\n       var contours = [];\n       var currentContour = [];\n       for (var i = 0; i < points.length; i += 1) {\n           var pt = points[i];\n           currentContour.push(pt);\n           if (pt.lastPointOfContour) {\n               contours.push(currentContour);\n               currentContour = [];\n           }\n       }\n\n       check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n       return contours;\n   }\n\n   // Convert the TrueType glyph outline to a Path.\n   function getPath(points) {\n       var p = new Path();\n       if (!points) {\n           return p;\n       }\n\n       var contours = getContours(points);\n\n       for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n           var contour = contours[contourIndex];\n\n           var prev = null;\n           var curr = contour[contour.length - 1];\n           var next = contour[0];\n\n           if (curr.onCurve) {\n               p.moveTo(curr.x, curr.y);\n           } else {\n               if (next.onCurve) {\n                   p.moveTo(next.x, next.y);\n               } else {\n                   // If both first and last points are off-curve, start at their middle.\n                   var start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};\n                   p.moveTo(start.x, start.y);\n               }\n           }\n\n           for (var i = 0; i < contour.length; ++i) {\n               prev = curr;\n               curr = next;\n               next = contour[(i + 1) % contour.length];\n\n               if (curr.onCurve) {\n                   // This is a straight line.\n                   p.lineTo(curr.x, curr.y);\n               } else {\n                   var prev2 = prev;\n                   var next2 = next;\n\n                   if (!prev.onCurve) {\n                       prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n                   }\n\n                   if (!next.onCurve) {\n                       next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n                   }\n\n                   p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n               }\n           }\n\n           p.closePath();\n       }\n       return p;\n   }\n\n   function buildPath(glyphs, glyph) {\n       if (glyph.isComposite) {\n           for (var j = 0; j < glyph.components.length; j += 1) {\n               var component = glyph.components[j];\n               var componentGlyph = glyphs.get(component.glyphIndex);\n               // Force the ttfGlyphLoader to parse the glyph.\n               componentGlyph.getPath();\n               if (componentGlyph.points) {\n                   var transformedPoints = (void 0);\n                   if (component.matchedPoints === undefined) {\n                       // component positioned by offset\n                       transformedPoints = transformPoints(componentGlyph.points, component);\n                   } else {\n                       // component positioned by matched points\n                       if ((component.matchedPoints[0] > glyph.points.length - 1) ||\n                           (component.matchedPoints[1] > componentGlyph.points.length - 1)) {\n                           throw Error('Matched points out of range in ' + glyph.name);\n                       }\n                       var firstPt = glyph.points[component.matchedPoints[0]];\n                       var secondPt = componentGlyph.points[component.matchedPoints[1]];\n                       var transform = {\n                           xScale: component.xScale, scale01: component.scale01,\n                           scale10: component.scale10, yScale: component.yScale,\n                           dx: 0, dy: 0\n                       };\n                       secondPt = transformPoints([secondPt], transform)[0];\n                       transform.dx = firstPt.x - secondPt.x;\n                       transform.dy = firstPt.y - secondPt.y;\n                       transformedPoints = transformPoints(componentGlyph.points, transform);\n                   }\n                   glyph.points = glyph.points.concat(transformedPoints);\n               }\n           }\n       }\n\n       return getPath(glyph.points);\n   }\n\n   function parseGlyfTableAll(data, start, loca, font) {\n       var glyphs = new glyphset.GlyphSet(font);\n\n       // The last element of the loca table is invalid.\n       for (var i = 0; i < loca.length - 1; i += 1) {\n           var offset = loca[i];\n           var nextOffset = loca[i + 1];\n           if (offset !== nextOffset) {\n               glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n           } else {\n               glyphs.push(i, glyphset.glyphLoader(font, i));\n           }\n       }\n\n       return glyphs;\n   }\n\n   function parseGlyfTableOnLowMemory(data, start, loca, font) {\n       var glyphs = new glyphset.GlyphSet(font);\n\n       font._push = function(i) {\n           var offset = loca[i];\n           var nextOffset = loca[i + 1];\n           if (offset !== nextOffset) {\n               glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n           } else {\n               glyphs.push(i, glyphset.glyphLoader(font, i));\n           }\n       };\n\n       return glyphs;\n   }\n\n   // Parse all the glyphs according to the offsets from the `loca` table.\n   function parseGlyfTable(data, start, loca, font, opt) {\n       if (opt.lowMemory)\n           { return parseGlyfTableOnLowMemory(data, start, loca, font); }\n       else\n           { return parseGlyfTableAll(data, start, loca, font); }\n   }\n\n   var glyf = { getPath: getPath, parse: parseGlyfTable};\n\n   /* A TrueType font hinting interpreter.\n   *\n   * (c) 2017 Axel Kittenberger\n   *\n   * This interpreter has been implemented according to this documentation:\n   * https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html\n   *\n   * According to the documentation F24DOT6 values are used for pixels.\n   * That means calculation is 1/64 pixel accurate and uses integer operations.\n   * However, Javascript has floating point operations by default and only\n   * those are available. One could make a case to simulate the 1/64 accuracy\n   * exactly by truncating after every division operation\n   * (for example with << 0) to get pixel exactly results as other TrueType\n   * implementations. It may make sense since some fonts are pixel optimized\n   * by hand using DELTAP instructions. The current implementation doesn't\n   * and rather uses full floating point precision.\n   *\n   * xScale, yScale and rotation is currently ignored.\n   *\n   * A few non-trivial instructions are missing as I didn't encounter yet\n   * a font that used them to test a possible implementation.\n   *\n   * Some fonts seem to use undocumented features regarding the twilight zone.\n   * Only some of them are implemented as they were encountered.\n   *\n   * The exports.DEBUG statements are removed on the minified distribution file.\n   */\n\n   var instructionTable;\n   var exec;\n   var execGlyph;\n   var execComponent;\n\n   /*\n   * Creates a hinting object.\n   *\n   * There ought to be exactly one\n   * for each truetype font that is used for hinting.\n   */\n   function Hinting(font) {\n       // the font this hinting object is for\n       this.font = font;\n\n       this.getCommands = function (hPoints) {\n           return glyf.getPath(hPoints).commands;\n       };\n\n       // cached states\n       this._fpgmState  =\n       this._prepState  =\n           undefined;\n\n       // errorState\n       // 0 ... all okay\n       // 1 ... had an error in a glyf,\n       //       continue working but stop spamming\n       //       the console\n       // 2 ... error at prep, stop hinting at this ppem\n       // 3 ... error at fpeg, stop hinting for this font at all\n       this._errorState = 0;\n   }\n\n   /*\n   * Not rounding.\n   */\n   function roundOff(v) {\n       return v;\n   }\n\n   /*\n   * Rounding to grid.\n   */\n   function roundToGrid(v) {\n       //Rounding in TT is supposed to \"symmetrical around zero\"\n       return Math.sign(v) * Math.round(Math.abs(v));\n   }\n\n   /*\n   * Rounding to double grid.\n   */\n   function roundToDoubleGrid(v) {\n       return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n   }\n\n   /*\n   * Rounding to half grid.\n   */\n   function roundToHalfGrid(v) {\n       return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n   }\n\n   /*\n   * Rounding to up to grid.\n   */\n   function roundUpToGrid(v) {\n       return Math.sign(v) * Math.ceil(Math.abs(v));\n   }\n\n   /*\n   * Rounding to down to grid.\n   */\n   function roundDownToGrid(v) {\n       return Math.sign(v) * Math.floor(Math.abs(v));\n   }\n\n   /*\n   * Super rounding.\n   */\n   var roundSuper = function (v) {\n       var period = this.srPeriod;\n       var phase = this.srPhase;\n       var threshold = this.srThreshold;\n       var sign = 1;\n\n       if (v < 0) {\n           v = -v;\n           sign = -1;\n       }\n\n       v += threshold - phase;\n\n       v = Math.trunc(v / period) * period;\n\n       v += phase;\n\n       // according to http://xgridfit.sourceforge.net/round.html\n       if (v < 0) { return phase * sign; }\n\n       return v * sign;\n   };\n\n   /*\n   * Unit vector of x-axis.\n   */\n   var xUnitVector = {\n       x: 1,\n\n       y: 0,\n\n       axis: 'x',\n\n       // Gets the projected distance between two points.\n       // o1/o2 ... if true, respective original position is used.\n       distance: function (p1, p2, o1, o2) {\n           return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n       },\n\n       // Moves point p so the moved position has the same relative\n       // position to the moved positions of rp1 and rp2 than the\n       // original positions had.\n       //\n       // See APPENDIX on INTERPOLATE at the bottom of this file.\n       interpolate: function (p, rp1, rp2, pv) {\n           var do1;\n           var do2;\n           var doa1;\n           var doa2;\n           var dm1;\n           var dm2;\n           var dt;\n\n           if (!pv || pv === this) {\n               do1 = p.xo - rp1.xo;\n               do2 = p.xo - rp2.xo;\n               dm1 = rp1.x - rp1.xo;\n               dm2 = rp2.x - rp2.xo;\n               doa1 = Math.abs(do1);\n               doa2 = Math.abs(do2);\n               dt = doa1 + doa2;\n\n               if (dt === 0) {\n                   p.x = p.xo + (dm1 + dm2) / 2;\n                   return;\n               }\n\n               p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n               return;\n           }\n\n           do1 = pv.distance(p, rp1, true, true);\n           do2 = pv.distance(p, rp2, true, true);\n           dm1 = pv.distance(rp1, rp1, false, true);\n           dm2 = pv.distance(rp2, rp2, false, true);\n           doa1 = Math.abs(do1);\n           doa2 = Math.abs(do2);\n           dt = doa1 + doa2;\n\n           if (dt === 0) {\n               xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n               return;\n           }\n\n           xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n       },\n\n       // Slope of line normal to this\n       normalSlope: Number.NEGATIVE_INFINITY,\n\n       // Sets the point 'p' relative to point 'rp'\n       // by the distance 'd'.\n       //\n       // See APPENDIX on SETRELATIVE at the bottom of this file.\n       //\n       // p   ... point to set\n       // rp  ... reference point\n       // d   ... distance on projection vector\n       // pv  ... projection vector (undefined = this)\n       // org ... if true, uses the original position of rp as reference.\n       setRelative: function (p, rp, d, pv, org) {\n           if (!pv || pv === this) {\n               p.x = (org ? rp.xo : rp.x) + d;\n               return;\n           }\n\n           var rpx = org ? rp.xo : rp.x;\n           var rpy = org ? rp.yo : rp.y;\n           var rpdx = rpx + d * pv.x;\n           var rpdy = rpy + d * pv.y;\n\n           p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n       },\n\n       // Slope of vector line.\n       slope: 0,\n\n       // Touches the point p.\n       touch: function (p) {\n           p.xTouched = true;\n       },\n\n       // Tests if a point p is touched.\n       touched: function (p) {\n           return p.xTouched;\n       },\n\n       // Untouches the point p.\n       untouch: function (p) {\n           p.xTouched = false;\n       }\n   };\n\n   /*\n   * Unit vector of y-axis.\n   */\n   var yUnitVector = {\n       x: 0,\n\n       y: 1,\n\n       axis: 'y',\n\n       // Gets the projected distance between two points.\n       // o1/o2 ... if true, respective original position is used.\n       distance: function (p1, p2, o1, o2) {\n           return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n       },\n\n       // Moves point p so the moved position has the same relative\n       // position to the moved positions of rp1 and rp2 than the\n       // original positions had.\n       //\n       // See APPENDIX on INTERPOLATE at the bottom of this file.\n       interpolate: function (p, rp1, rp2, pv) {\n           var do1;\n           var do2;\n           var doa1;\n           var doa2;\n           var dm1;\n           var dm2;\n           var dt;\n\n           if (!pv || pv === this) {\n               do1 = p.yo - rp1.yo;\n               do2 = p.yo - rp2.yo;\n               dm1 = rp1.y - rp1.yo;\n               dm2 = rp2.y - rp2.yo;\n               doa1 = Math.abs(do1);\n               doa2 = Math.abs(do2);\n               dt = doa1 + doa2;\n\n               if (dt === 0) {\n                   p.y = p.yo + (dm1 + dm2) / 2;\n                   return;\n               }\n\n               p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n               return;\n           }\n\n           do1 = pv.distance(p, rp1, true, true);\n           do2 = pv.distance(p, rp2, true, true);\n           dm1 = pv.distance(rp1, rp1, false, true);\n           dm2 = pv.distance(rp2, rp2, false, true);\n           doa1 = Math.abs(do1);\n           doa2 = Math.abs(do2);\n           dt = doa1 + doa2;\n\n           if (dt === 0) {\n               yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n               return;\n           }\n\n           yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n       },\n\n       // Slope of line normal to this.\n       normalSlope: 0,\n\n       // Sets the point 'p' relative to point 'rp'\n       // by the distance 'd'\n       //\n       // See APPENDIX on SETRELATIVE at the bottom of this file.\n       //\n       // p   ... point to set\n       // rp  ... reference point\n       // d   ... distance on projection vector\n       // pv  ... projection vector (undefined = this)\n       // org ... if true, uses the original position of rp as reference.\n       setRelative: function (p, rp, d, pv, org) {\n           if (!pv || pv === this) {\n               p.y = (org ? rp.yo : rp.y) + d;\n               return;\n           }\n\n           var rpx = org ? rp.xo : rp.x;\n           var rpy = org ? rp.yo : rp.y;\n           var rpdx = rpx + d * pv.x;\n           var rpdy = rpy + d * pv.y;\n\n           p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n       },\n\n       // Slope of vector line.\n       slope: Number.POSITIVE_INFINITY,\n\n       // Touches the point p.\n       touch: function (p) {\n           p.yTouched = true;\n       },\n\n       // Tests if a point p is touched.\n       touched: function (p) {\n           return p.yTouched;\n       },\n\n       // Untouches the point p.\n       untouch: function (p) {\n           p.yTouched = false;\n       }\n   };\n\n   Object.freeze(xUnitVector);\n   Object.freeze(yUnitVector);\n\n   /*\n   * Creates a unit vector that is not x- or y-axis.\n   */\n   function UnitVector(x, y) {\n       this.x = x;\n       this.y = y;\n       this.axis = undefined;\n       this.slope = y / x;\n       this.normalSlope = -x / y;\n       Object.freeze(this);\n   }\n\n   /*\n   * Gets the projected distance between two points.\n   * o1/o2 ... if true, respective original position is used.\n   */\n   UnitVector.prototype.distance = function(p1, p2, o1, o2) {\n       return (\n           this.x * xUnitVector.distance(p1, p2, o1, o2) +\n           this.y * yUnitVector.distance(p1, p2, o1, o2)\n       );\n   };\n\n   /*\n   * Moves point p so the moved position has the same relative\n   * position to the moved positions of rp1 and rp2 than the\n   * original positions had.\n   *\n   * See APPENDIX on INTERPOLATE at the bottom of this file.\n   */\n   UnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n       var dm1;\n       var dm2;\n       var do1;\n       var do2;\n       var doa1;\n       var doa2;\n       var dt;\n\n       do1 = pv.distance(p, rp1, true, true);\n       do2 = pv.distance(p, rp2, true, true);\n       dm1 = pv.distance(rp1, rp1, false, true);\n       dm2 = pv.distance(rp2, rp2, false, true);\n       doa1 = Math.abs(do1);\n       doa2 = Math.abs(do2);\n       dt = doa1 + doa2;\n\n       if (dt === 0) {\n           this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n           return;\n       }\n\n       this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n   };\n\n   /*\n   * Sets the point 'p' relative to point 'rp'\n   * by the distance 'd'\n   *\n   * See APPENDIX on SETRELATIVE at the bottom of this file.\n   *\n   * p   ...  point to set\n   * rp  ... reference point\n   * d   ... distance on projection vector\n   * pv  ... projection vector (undefined = this)\n   * org ... if true, uses the original position of rp as reference.\n   */\n   UnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n       pv = pv || this;\n\n       var rpx = org ? rp.xo : rp.x;\n       var rpy = org ? rp.yo : rp.y;\n       var rpdx = rpx + d * pv.x;\n       var rpdy = rpy + d * pv.y;\n\n       var pvns = pv.normalSlope;\n       var fvs = this.slope;\n\n       var px = p.x;\n       var py = p.y;\n\n       p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n       p.y = fvs * (p.x - px) + py;\n   };\n\n   /*\n   * Touches the point p.\n   */\n   UnitVector.prototype.touch = function(p) {\n       p.xTouched = true;\n       p.yTouched = true;\n   };\n\n   /*\n   * Returns a unit vector with x/y coordinates.\n   */\n   function getUnitVector(x, y) {\n       var d = Math.sqrt(x * x + y * y);\n\n       x /= d;\n       y /= d;\n\n       if (x === 1 && y === 0) { return xUnitVector; }\n       else if (x === 0 && y === 1) { return yUnitVector; }\n       else { return new UnitVector(x, y); }\n   }\n\n   /*\n   * Creates a point in the hinting engine.\n   */\n   function HPoint(\n       x,\n       y,\n       lastPointOfContour,\n       onCurve\n   ) {\n       this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value\n       this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value\n\n       this.lastPointOfContour = lastPointOfContour;\n       this.onCurve = onCurve;\n       this.prevPointOnContour = undefined;\n       this.nextPointOnContour = undefined;\n       this.xTouched = false;\n       this.yTouched = false;\n\n       Object.preventExtensions(this);\n   }\n\n   /*\n   * Returns the next touched point on the contour.\n   *\n   * v  ... unit vector to test touch axis.\n   */\n   HPoint.prototype.nextTouched = function(v) {\n       var p = this.nextPointOnContour;\n\n       while (!v.touched(p) && p !== this) { p = p.nextPointOnContour; }\n\n       return p;\n   };\n\n   /*\n   * Returns the previous touched point on the contour\n   *\n   * v  ... unit vector to test touch axis.\n   */\n   HPoint.prototype.prevTouched = function(v) {\n       var p = this.prevPointOnContour;\n\n       while (!v.touched(p) && p !== this) { p = p.prevPointOnContour; }\n\n       return p;\n   };\n\n   /*\n   * The zero point.\n   */\n   var HPZero = Object.freeze(new HPoint(0, 0));\n\n   /*\n   * The default state of the interpreter.\n   *\n   * Note: Freezing the defaultState and then deriving from it\n   * makes the V8 Javascript engine going awkward,\n   * so this is avoided, albeit the defaultState shouldn't\n   * ever change.\n   */\n   var defaultState = {\n       cvCutIn: 17 / 16,    // control value cut in\n       deltaBase: 9,\n       deltaShift: 0.125,\n       loop: 1,             // loops some instructions\n       minDis: 1,           // minimum distance\n       autoFlip: true\n   };\n\n   /*\n   * The current state of the interpreter.\n   *\n   * env  ... 'fpgm' or 'prep' or 'glyf'\n   * prog ... the program\n   */\n   function State(env, prog) {\n       this.env = env;\n       this.stack = [];\n       this.prog = prog;\n\n       switch (env) {\n           case 'glyf' :\n               this.zp0 = this.zp1 = this.zp2 = 1;\n               this.rp0 = this.rp1 = this.rp2 = 0;\n               /* fall through */\n           case 'prep' :\n               this.fv = this.pv = this.dpv = xUnitVector;\n               this.round = roundToGrid;\n       }\n   }\n\n   /*\n   * Executes a glyph program.\n   *\n   * This does the hinting for each glyph.\n   *\n   * Returns an array of moved points.\n   *\n   * glyph: the glyph to hint\n   * ppem: the size the glyph is rendered for\n   */\n   Hinting.prototype.exec = function(glyph, ppem) {\n       if (typeof ppem !== 'number') {\n           throw new Error('Point size is not a number!');\n       }\n\n       // Received a fatal error, don't do any hinting anymore.\n       if (this._errorState > 2) { return; }\n\n       var font = this.font;\n       var prepState = this._prepState;\n\n       if (!prepState || prepState.ppem !== ppem) {\n           var fpgmState = this._fpgmState;\n\n           if (!fpgmState) {\n               // Executes the fpgm state.\n               // This is used by fonts to define functions.\n               State.prototype = defaultState;\n\n               fpgmState =\n               this._fpgmState =\n                   new State('fpgm', font.tables.fpgm);\n\n               fpgmState.funcs = [ ];\n               fpgmState.font = font;\n\n               if (exports.DEBUG) {\n                   console.log('---EXEC FPGM---');\n                   fpgmState.step = -1;\n               }\n\n               try {\n                   exec(fpgmState);\n               } catch (e) {\n                   console.log('Hinting error in FPGM:' + e);\n                   this._errorState = 3;\n                   return;\n               }\n           }\n\n           // Executes the prep program for this ppem setting.\n           // This is used by fonts to set cvt values\n           // depending on to be rendered font size.\n\n           State.prototype = fpgmState;\n           prepState =\n           this._prepState =\n               new State('prep', font.tables.prep);\n\n           prepState.ppem = ppem;\n\n           // Creates a copy of the cvt table\n           // and scales it to the current ppem setting.\n           var oCvt = font.tables.cvt;\n           if (oCvt) {\n               var cvt = prepState.cvt = new Array(oCvt.length);\n               var scale = ppem / font.unitsPerEm;\n               for (var c = 0; c < oCvt.length; c++) {\n                   cvt[c] = oCvt[c] * scale;\n               }\n           } else {\n               prepState.cvt = [];\n           }\n\n           if (exports.DEBUG) {\n               console.log('---EXEC PREP---');\n               prepState.step = -1;\n           }\n\n           try {\n               exec(prepState);\n           } catch (e) {\n               if (this._errorState < 2) {\n                   console.log('Hinting error in PREP:' + e);\n               }\n               this._errorState = 2;\n           }\n       }\n\n       if (this._errorState > 1) { return; }\n\n       try {\n           return execGlyph(glyph, prepState);\n       } catch (e) {\n           if (this._errorState < 1) {\n               console.log('Hinting error:' + e);\n               console.log('Note: further hinting errors are silenced');\n           }\n           this._errorState = 1;\n           return undefined;\n       }\n   };\n\n   /*\n   * Executes the hinting program for a glyph.\n   */\n   execGlyph = function(glyph, prepState) {\n       // original point positions\n       var xScale = prepState.ppem / prepState.font.unitsPerEm;\n       var yScale = xScale;\n       var components = glyph.components;\n       var contours;\n       var gZone;\n       var state;\n\n       State.prototype = prepState;\n       if (!components) {\n           state = new State('glyf', glyph.instructions);\n           if (exports.DEBUG) {\n               console.log('---EXEC GLYPH---');\n               state.step = -1;\n           }\n           execComponent(glyph, state, xScale, yScale);\n           gZone = state.gZone;\n       } else {\n           var font = prepState.font;\n           gZone = [];\n           contours = [];\n           for (var i = 0; i < components.length; i++) {\n               var c = components[i];\n               var cg = font.glyphs.get(c.glyphIndex);\n\n               state = new State('glyf', cg.instructions);\n\n               if (exports.DEBUG) {\n                   console.log('---EXEC COMP ' + i + '---');\n                   state.step = -1;\n               }\n\n               execComponent(cg, state, xScale, yScale);\n               // appends the computed points to the result array\n               // post processes the component points\n               var dx = Math.round(c.dx * xScale);\n               var dy = Math.round(c.dy * yScale);\n               var gz = state.gZone;\n               var cc = state.contours;\n               for (var pi = 0; pi < gz.length; pi++) {\n                   var p = gz[pi];\n                   p.xTouched = p.yTouched = false;\n                   p.xo = p.x = p.x + dx;\n                   p.yo = p.y = p.y + dy;\n               }\n\n               var gLen = gZone.length;\n               gZone.push.apply(gZone, gz);\n               for (var j = 0; j < cc.length; j++) {\n                   contours.push(cc[j] + gLen);\n               }\n           }\n\n           if (glyph.instructions && !state.inhibitGridFit) {\n               // the composite has instructions on its own\n               state = new State('glyf', glyph.instructions);\n\n               state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n\n               state.contours = contours;\n\n               // note: HPZero cannot be used here, since\n               //       the point might be modified\n               gZone.push(\n                   new HPoint(0, 0),\n                   new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n               );\n\n               if (exports.DEBUG) {\n                   console.log('---EXEC COMPOSITE---');\n                   state.step = -1;\n               }\n\n               exec(state);\n\n               gZone.length -= 2;\n           }\n       }\n\n       return gZone;\n   };\n\n   /*\n   * Executes the hinting program for a component of a multi-component glyph\n   * or of the glyph itself for a non-component glyph.\n   */\n   execComponent = function(glyph, state, xScale, yScale)\n   {\n       var points = glyph.points || [];\n       var pLen = points.length;\n       var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n       var contours = state.contours = [];\n\n       // Scales the original points and\n       // makes copies for the hinted points.\n       var cp; // current point\n       for (var i = 0; i < pLen; i++) {\n           cp = points[i];\n\n           gZone[i] = new HPoint(\n               cp.x * xScale,\n               cp.y * yScale,\n               cp.lastPointOfContour,\n               cp.onCurve\n           );\n       }\n\n       // Chain links the contours.\n       var sp; // start point\n       var np; // next point\n\n       for (var i$1 = 0; i$1 < pLen; i$1++) {\n           cp = gZone[i$1];\n\n           if (!sp) {\n               sp = cp;\n               contours.push(i$1);\n           }\n\n           if (cp.lastPointOfContour) {\n               cp.nextPointOnContour = sp;\n               sp.prevPointOnContour = cp;\n               sp = undefined;\n           } else {\n               np = gZone[i$1 + 1];\n               cp.nextPointOnContour = np;\n               np.prevPointOnContour = cp;\n           }\n       }\n\n       if (state.inhibitGridFit) { return; }\n\n       if (exports.DEBUG) {\n           console.log('PROCESSING GLYPH', state.stack);\n           for (var i$2 = 0; i$2 < pLen; i$2++) {\n               console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n           }\n       }\n\n       gZone.push(\n           new HPoint(0, 0),\n           new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n       );\n\n       exec(state);\n\n       // Removes the extra points.\n       gZone.length -= 2;\n\n       if (exports.DEBUG) {\n           console.log('FINISHED GLYPH', state.stack);\n           for (var i$3 = 0; i$3 < pLen; i$3++) {\n               console.log(i$3, gZone[i$3].x, gZone[i$3].y);\n           }\n       }\n   };\n\n   /*\n   * Executes the program loaded in state.\n   */\n   exec = function(state) {\n       var prog = state.prog;\n\n       if (!prog) { return; }\n\n       var pLen = prog.length;\n       var ins;\n\n       for (state.ip = 0; state.ip < pLen; state.ip++) {\n           if (exports.DEBUG) { state.step++; }\n           ins = instructionTable[prog[state.ip]];\n\n           if (!ins) {\n               throw new Error(\n                   'unknown instruction: 0x' +\n                   Number(prog[state.ip]).toString(16)\n               );\n           }\n\n           ins(state);\n\n           // very extensive debugging for each step\n           /*\n           if (exports.DEBUG) {\n               var da;\n               if (state.gZone) {\n                   da = [];\n                   for (let i = 0; i < state.gZone.length; i++)\n                   {\n                       da.push(i + ' ' +\n                           state.gZone[i].x * 64 + ' ' +\n                           state.gZone[i].y * 64 + ' ' +\n                           (state.gZone[i].xTouched ? 'x' : '') +\n                           (state.gZone[i].yTouched ? 'y' : '')\n                       );\n                   }\n                   console.log('GZ', da);\n               }\n\n               if (state.tZone) {\n                   da = [];\n                   for (let i = 0; i < state.tZone.length; i++) {\n                       da.push(i + ' ' +\n                           state.tZone[i].x * 64 + ' ' +\n                           state.tZone[i].y * 64 + ' ' +\n                           (state.tZone[i].xTouched ? 'x' : '') +\n                           (state.tZone[i].yTouched ? 'y' : '')\n                       );\n                   }\n                   console.log('TZ', da);\n               }\n\n               if (state.stack.length > 10) {\n                   console.log(\n                       state.stack.length,\n                       '...', state.stack.slice(state.stack.length - 10)\n                   );\n               } else {\n                   console.log(state.stack.length, state.stack);\n               }\n           }\n           */\n       }\n   };\n\n   /*\n   * Initializes the twilight zone.\n   *\n   * This is only done if a SZPx instruction\n   * refers to the twilight zone.\n   */\n   function initTZone(state)\n   {\n       var tZone = state.tZone = new Array(state.gZone.length);\n\n       // no idea if this is actually correct...\n       for (var i = 0; i < tZone.length; i++)\n       {\n           tZone[i] = new HPoint(0, 0);\n       }\n   }\n\n   /*\n   * Skips the instruction pointer ahead over an IF/ELSE block.\n   * handleElse .. if true breaks on matching ELSE\n   */\n   function skip(state, handleElse)\n   {\n       var prog = state.prog;\n       var ip = state.ip;\n       var nesting = 1;\n       var ins;\n\n       do {\n           ins = prog[++ip];\n           if (ins === 0x58) // IF\n               { nesting++; }\n           else if (ins === 0x59) // EIF\n               { nesting--; }\n           else if (ins === 0x40) // NPUSHB\n               { ip += prog[ip + 1] + 1; }\n           else if (ins === 0x41) // NPUSHW\n               { ip += 2 * prog[ip + 1] + 1; }\n           else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB\n               { ip += ins - 0xB0 + 1; }\n           else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW\n               { ip += (ins - 0xB8 + 1) * 2; }\n           else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE\n               { break; }\n       } while (nesting > 0);\n\n       state.ip = ip;\n   }\n\n   /*----------------------------------------------------------*\n   *          And then a lot of instructions...                *\n   *----------------------------------------------------------*/\n\n   // SVTCA[a] Set freedom and projection Vectors To Coordinate Axis\n   // 0x00-0x01\n   function SVTCA(v, state) {\n       if (exports.DEBUG) { console.log(state.step, 'SVTCA[' + v.axis + ']'); }\n\n       state.fv = state.pv = state.dpv = v;\n   }\n\n   // SPVTCA[a] Set Projection Vector to Coordinate Axis\n   // 0x02-0x03\n   function SPVTCA(v, state) {\n       if (exports.DEBUG) { console.log(state.step, 'SPVTCA[' + v.axis + ']'); }\n\n       state.pv = state.dpv = v;\n   }\n\n   // SFVTCA[a] Set Freedom Vector to Coordinate Axis\n   // 0x04-0x05\n   function SFVTCA(v, state) {\n       if (exports.DEBUG) { console.log(state.step, 'SFVTCA[' + v.axis + ']'); }\n\n       state.fv = v;\n   }\n\n   // SPVTL[a] Set Projection Vector To Line\n   // 0x06-0x07\n   function SPVTL(a, state) {\n       var stack = state.stack;\n       var p2i = stack.pop();\n       var p1i = stack.pop();\n       var p2 = state.z2[p2i];\n       var p1 = state.z1[p1i];\n\n       if (exports.DEBUG) { console.log('SPVTL[' + a + ']', p2i, p1i); }\n\n       var dx;\n       var dy;\n\n       if (!a) {\n           dx = p1.x - p2.x;\n           dy = p1.y - p2.y;\n       } else {\n           dx = p2.y - p1.y;\n           dy = p1.x - p2.x;\n       }\n\n       state.pv = state.dpv = getUnitVector(dx, dy);\n   }\n\n   // SFVTL[a] Set Freedom Vector To Line\n   // 0x08-0x09\n   function SFVTL(a, state) {\n       var stack = state.stack;\n       var p2i = stack.pop();\n       var p1i = stack.pop();\n       var p2 = state.z2[p2i];\n       var p1 = state.z1[p1i];\n\n       if (exports.DEBUG) { console.log('SFVTL[' + a + ']', p2i, p1i); }\n\n       var dx;\n       var dy;\n\n       if (!a) {\n           dx = p1.x - p2.x;\n           dy = p1.y - p2.y;\n       } else {\n           dx = p2.y - p1.y;\n           dy = p1.x - p2.x;\n       }\n\n       state.fv = getUnitVector(dx, dy);\n   }\n\n   // SPVFS[] Set Projection Vector From Stack\n   // 0x0A\n   function SPVFS(state) {\n       var stack = state.stack;\n       var y = stack.pop();\n       var x = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }\n\n       state.pv = state.dpv = getUnitVector(x, y);\n   }\n\n   // SFVFS[] Set Freedom Vector From Stack\n   // 0x0B\n   function SFVFS(state) {\n       var stack = state.stack;\n       var y = stack.pop();\n       var x = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }\n\n       state.fv = getUnitVector(x, y);\n   }\n\n   // GPV[] Get Projection Vector\n   // 0x0C\n   function GPV(state) {\n       var stack = state.stack;\n       var pv = state.pv;\n\n       if (exports.DEBUG) { console.log(state.step, 'GPV[]'); }\n\n       stack.push(pv.x * 0x4000);\n       stack.push(pv.y * 0x4000);\n   }\n\n   // GFV[] Get Freedom Vector\n   // 0x0C\n   function GFV(state) {\n       var stack = state.stack;\n       var fv = state.fv;\n\n       if (exports.DEBUG) { console.log(state.step, 'GFV[]'); }\n\n       stack.push(fv.x * 0x4000);\n       stack.push(fv.y * 0x4000);\n   }\n\n   // SFVTPV[] Set Freedom Vector To Projection Vector\n   // 0x0E\n   function SFVTPV(state) {\n       state.fv = state.pv;\n\n       if (exports.DEBUG) { console.log(state.step, 'SFVTPV[]'); }\n   }\n\n   // ISECT[] moves point p to the InterSECTion of two lines\n   // 0x0F\n   function ISECT(state)\n   {\n       var stack = state.stack;\n       var pa0i = stack.pop();\n       var pa1i = stack.pop();\n       var pb0i = stack.pop();\n       var pb1i = stack.pop();\n       var pi = stack.pop();\n       var z0 = state.z0;\n       var z1 = state.z1;\n       var pa0 = z0[pa0i];\n       var pa1 = z0[pa1i];\n       var pb0 = z1[pb0i];\n       var pb1 = z1[pb1i];\n       var p = state.z2[pi];\n\n       if (exports.DEBUG) { console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi); }\n\n       // math from\n       // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n\n       var x1 = pa0.x;\n       var y1 = pa0.y;\n       var x2 = pa1.x;\n       var y2 = pa1.y;\n       var x3 = pb0.x;\n       var y3 = pb0.y;\n       var x4 = pb1.x;\n       var y4 = pb1.y;\n\n       var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n       var f1 = x1 * y2 - y1 * x2;\n       var f2 = x3 * y4 - y3 * x4;\n\n       p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n       p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n   }\n\n   // SRP0[] Set Reference Point 0\n   // 0x10\n   function SRP0(state) {\n       state.rp0 = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SRP0[]', state.rp0); }\n   }\n\n   // SRP1[] Set Reference Point 1\n   // 0x11\n   function SRP1(state) {\n       state.rp1 = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SRP1[]', state.rp1); }\n   }\n\n   // SRP1[] Set Reference Point 2\n   // 0x12\n   function SRP2(state) {\n       state.rp2 = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SRP2[]', state.rp2); }\n   }\n\n   // SZP0[] Set Zone Pointer 0\n   // 0x13\n   function SZP0(state) {\n       var n = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SZP0[]', n); }\n\n       state.zp0 = n;\n\n       switch (n) {\n           case 0:\n               if (!state.tZone) { initTZone(state); }\n               state.z0 = state.tZone;\n               break;\n           case 1 :\n               state.z0 = state.gZone;\n               break;\n           default :\n               throw new Error('Invalid zone pointer');\n       }\n   }\n\n   // SZP1[] Set Zone Pointer 1\n   // 0x14\n   function SZP1(state) {\n       var n = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SZP1[]', n); }\n\n       state.zp1 = n;\n\n       switch (n) {\n           case 0:\n               if (!state.tZone) { initTZone(state); }\n               state.z1 = state.tZone;\n               break;\n           case 1 :\n               state.z1 = state.gZone;\n               break;\n           default :\n               throw new Error('Invalid zone pointer');\n       }\n   }\n\n   // SZP2[] Set Zone Pointer 2\n   // 0x15\n   function SZP2(state) {\n       var n = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SZP2[]', n); }\n\n       state.zp2 = n;\n\n       switch (n) {\n           case 0:\n               if (!state.tZone) { initTZone(state); }\n               state.z2 = state.tZone;\n               break;\n           case 1 :\n               state.z2 = state.gZone;\n               break;\n           default :\n               throw new Error('Invalid zone pointer');\n       }\n   }\n\n   // SZPS[] Set Zone PointerS\n   // 0x16\n   function SZPS(state) {\n       var n = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SZPS[]', n); }\n\n       state.zp0 = state.zp1 = state.zp2 = n;\n\n       switch (n) {\n           case 0:\n               if (!state.tZone) { initTZone(state); }\n               state.z0 = state.z1 = state.z2 = state.tZone;\n               break;\n           case 1 :\n               state.z0 = state.z1 = state.z2 = state.gZone;\n               break;\n           default :\n               throw new Error('Invalid zone pointer');\n       }\n   }\n\n   // SLOOP[] Set LOOP variable\n   // 0x17\n   function SLOOP(state) {\n       state.loop = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SLOOP[]', state.loop); }\n   }\n\n   // RTG[] Round To Grid\n   // 0x18\n   function RTG(state) {\n       if (exports.DEBUG) { console.log(state.step, 'RTG[]'); }\n\n       state.round = roundToGrid;\n   }\n\n   // RTHG[] Round To Half Grid\n   // 0x19\n   function RTHG(state) {\n       if (exports.DEBUG) { console.log(state.step, 'RTHG[]'); }\n\n       state.round = roundToHalfGrid;\n   }\n\n   // SMD[] Set Minimum Distance\n   // 0x1A\n   function SMD(state) {\n       var d = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SMD[]', d); }\n\n       state.minDis = d / 0x40;\n   }\n\n   // ELSE[] ELSE clause\n   // 0x1B\n   function ELSE(state) {\n       // This instruction has been reached by executing a then branch\n       // so it just skips ahead until matching EIF.\n       //\n       // In case the IF was negative the IF[] instruction already\n       // skipped forward over the ELSE[]\n\n       if (exports.DEBUG) { console.log(state.step, 'ELSE[]'); }\n\n       skip(state, false);\n   }\n\n   // JMPR[] JuMP Relative\n   // 0x1C\n   function JMPR(state) {\n       var o = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'JMPR[]', o); }\n\n       // A jump by 1 would do nothing.\n       state.ip += o - 1;\n   }\n\n   // SCVTCI[] Set Control Value Table Cut-In\n   // 0x1D\n   function SCVTCI(state) {\n       var n = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SCVTCI[]', n); }\n\n       state.cvCutIn = n / 0x40;\n   }\n\n   // DUP[] DUPlicate top stack element\n   // 0x20\n   function DUP(state) {\n       var stack = state.stack;\n\n       if (exports.DEBUG) { console.log(state.step, 'DUP[]'); }\n\n       stack.push(stack[stack.length - 1]);\n   }\n\n   // POP[] POP top stack element\n   // 0x21\n   function POP(state) {\n       if (exports.DEBUG) { console.log(state.step, 'POP[]'); }\n\n       state.stack.pop();\n   }\n\n   // CLEAR[] CLEAR the stack\n   // 0x22\n   function CLEAR(state) {\n       if (exports.DEBUG) { console.log(state.step, 'CLEAR[]'); }\n\n       state.stack.length = 0;\n   }\n\n   // SWAP[] SWAP the top two elements on the stack\n   // 0x23\n   function SWAP(state) {\n       var stack = state.stack;\n\n       var a = stack.pop();\n       var b = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SWAP[]'); }\n\n       stack.push(a);\n       stack.push(b);\n   }\n\n   // DEPTH[] DEPTH of the stack\n   // 0x24\n   function DEPTH(state) {\n       var stack = state.stack;\n\n       if (exports.DEBUG) { console.log(state.step, 'DEPTH[]'); }\n\n       stack.push(stack.length);\n   }\n\n   // LOOPCALL[] LOOPCALL function\n   // 0x2A\n   function LOOPCALL(state) {\n       var stack = state.stack;\n       var fn = stack.pop();\n       var c = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'LOOPCALL[]', fn, c); }\n\n       // saves callers program\n       var cip = state.ip;\n       var cprog = state.prog;\n\n       state.prog = state.funcs[fn];\n\n       // executes the function\n       for (var i = 0; i < c; i++) {\n           exec(state);\n\n           if (exports.DEBUG) { console.log(\n               ++state.step,\n               i + 1 < c ? 'next loopcall' : 'done loopcall',\n               i\n           ); }\n       }\n\n       // restores the callers program\n       state.ip = cip;\n       state.prog = cprog;\n   }\n\n   // CALL[] CALL function\n   // 0x2B\n   function CALL(state) {\n       var fn = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'CALL[]', fn); }\n\n       // saves callers program\n       var cip = state.ip;\n       var cprog = state.prog;\n\n       state.prog = state.funcs[fn];\n\n       // executes the function\n       exec(state);\n\n       // restores the callers program\n       state.ip = cip;\n       state.prog = cprog;\n\n       if (exports.DEBUG) { console.log(++state.step, 'returning from', fn); }\n   }\n\n   // CINDEX[] Copy the INDEXed element to the top of the stack\n   // 0x25\n   function CINDEX(state) {\n       var stack = state.stack;\n       var k = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'CINDEX[]', k); }\n\n       // In case of k == 1, it copies the last element after popping\n       // thus stack.length - k.\n       stack.push(stack[stack.length - k]);\n   }\n\n   // MINDEX[] Move the INDEXed element to the top of the stack\n   // 0x26\n   function MINDEX(state) {\n       var stack = state.stack;\n       var k = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'MINDEX[]', k); }\n\n       stack.push(stack.splice(stack.length - k, 1)[0]);\n   }\n\n   // FDEF[] Function DEFinition\n   // 0x2C\n   function FDEF(state) {\n       if (state.env !== 'fpgm') { throw new Error('FDEF not allowed here'); }\n       var stack = state.stack;\n       var prog = state.prog;\n       var ip = state.ip;\n\n       var fn = stack.pop();\n       var ipBegin = ip;\n\n       if (exports.DEBUG) { console.log(state.step, 'FDEF[]', fn); }\n\n       while (prog[++ip] !== 0x2D){ }\n\n       state.ip = ip;\n       state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n   }\n\n   // MDAP[a] Move Direct Absolute Point\n   // 0x2E-0x2F\n   function MDAP(round, state) {\n       var pi = state.stack.pop();\n       var p = state.z0[pi];\n       var fv = state.fv;\n       var pv = state.pv;\n\n       if (exports.DEBUG) { console.log(state.step, 'MDAP[' + round + ']', pi); }\n\n       var d = pv.distance(p, HPZero);\n\n       if (round) { d = state.round(d); }\n\n       fv.setRelative(p, HPZero, d, pv);\n       fv.touch(p);\n\n       state.rp0 = state.rp1 = pi;\n   }\n\n   // IUP[a] Interpolate Untouched Points through the outline\n   // 0x30\n   function IUP(v, state) {\n       var z2 = state.z2;\n       var pLen = z2.length - 2;\n       var cp;\n       var pp;\n       var np;\n\n       if (exports.DEBUG) { console.log(state.step, 'IUP[' + v.axis + ']'); }\n\n       for (var i = 0; i < pLen; i++) {\n           cp = z2[i]; // current point\n\n           // if this point has been touched go on\n           if (v.touched(cp)) { continue; }\n\n           pp = cp.prevTouched(v);\n\n           // no point on the contour has been touched?\n           if (pp === cp) { continue; }\n\n           np = cp.nextTouched(v);\n\n           if (pp === np) {\n               // only one point on the contour has been touched\n               // so simply moves the point like that\n\n               v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n           }\n\n           v.interpolate(cp, pp, np, v);\n       }\n   }\n\n   // SHP[] SHift Point using reference point\n   // 0x32-0x33\n   function SHP(a, state) {\n       var stack = state.stack;\n       var rpi = a ? state.rp1 : state.rp2;\n       var rp = (a ? state.z0 : state.z1)[rpi];\n       var fv = state.fv;\n       var pv = state.pv;\n       var loop = state.loop;\n       var z2 = state.z2;\n\n       while (loop--)\n       {\n           var pi = stack.pop();\n           var p = z2[pi];\n\n           var d = pv.distance(rp, rp, false, true);\n           fv.setRelative(p, p, d, pv);\n           fv.touch(p);\n\n           if (exports.DEBUG) {\n               console.log(\n                   state.step,\n                   (state.loop > 1 ?\n                      'loop ' + (state.loop - loop) + ': ' :\n                      ''\n                   ) +\n                   'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi\n               );\n           }\n       }\n\n       state.loop = 1;\n   }\n\n   // SHC[] SHift Contour using reference point\n   // 0x36-0x37\n   function SHC(a, state) {\n       var stack = state.stack;\n       var rpi = a ? state.rp1 : state.rp2;\n       var rp = (a ? state.z0 : state.z1)[rpi];\n       var fv = state.fv;\n       var pv = state.pv;\n       var ci = stack.pop();\n       var sp = state.z2[state.contours[ci]];\n       var p = sp;\n\n       if (exports.DEBUG) { console.log(state.step, 'SHC[' + a + ']', ci); }\n\n       var d = pv.distance(rp, rp, false, true);\n\n       do {\n           if (p !== rp) { fv.setRelative(p, p, d, pv); }\n           p = p.nextPointOnContour;\n       } while (p !== sp);\n   }\n\n   // SHZ[] SHift Zone using reference point\n   // 0x36-0x37\n   function SHZ(a, state) {\n       var stack = state.stack;\n       var rpi = a ? state.rp1 : state.rp2;\n       var rp = (a ? state.z0 : state.z1)[rpi];\n       var fv = state.fv;\n       var pv = state.pv;\n\n       var e = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SHZ[' + a + ']', e); }\n\n       var z;\n       switch (e) {\n           case 0 : z = state.tZone; break;\n           case 1 : z = state.gZone; break;\n           default : throw new Error('Invalid zone');\n       }\n\n       var p;\n       var d = pv.distance(rp, rp, false, true);\n       var pLen = z.length - 2;\n       for (var i = 0; i < pLen; i++)\n       {\n           p = z[i];\n           fv.setRelative(p, p, d, pv);\n           //if (p !== rp) fv.setRelative(p, p, d, pv);\n       }\n   }\n\n   // SHPIX[] SHift point by a PIXel amount\n   // 0x38\n   function SHPIX(state) {\n       var stack = state.stack;\n       var loop = state.loop;\n       var fv = state.fv;\n       var d = stack.pop() / 0x40;\n       var z2 = state.z2;\n\n       while (loop--) {\n           var pi = stack.pop();\n           var p = z2[pi];\n\n           if (exports.DEBUG) {\n               console.log(\n                   state.step,\n                   (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                   'SHPIX[]', pi, d\n               );\n           }\n\n           fv.setRelative(p, p, d);\n           fv.touch(p);\n       }\n\n       state.loop = 1;\n   }\n\n   // IP[] Interpolate Point\n   // 0x39\n   function IP(state) {\n       var stack = state.stack;\n       var rp1i = state.rp1;\n       var rp2i = state.rp2;\n       var loop = state.loop;\n       var rp1 = state.z0[rp1i];\n       var rp2 = state.z1[rp2i];\n       var fv = state.fv;\n       var pv = state.dpv;\n       var z2 = state.z2;\n\n       while (loop--) {\n           var pi = stack.pop();\n           var p = z2[pi];\n\n           if (exports.DEBUG) {\n               console.log(\n                   state.step,\n                   (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                   'IP[]', pi, rp1i, '<->', rp2i\n               );\n           }\n\n           fv.interpolate(p, rp1, rp2, pv);\n\n           fv.touch(p);\n       }\n\n       state.loop = 1;\n   }\n\n   // MSIRP[a] Move Stack Indirect Relative Point\n   // 0x3A-0x3B\n   function MSIRP(a, state) {\n       var stack = state.stack;\n       var d = stack.pop() / 64;\n       var pi = stack.pop();\n       var p = state.z1[pi];\n       var rp0 = state.z0[state.rp0];\n       var fv = state.fv;\n       var pv = state.pv;\n\n       fv.setRelative(p, rp0, d, pv);\n       fv.touch(p);\n\n       if (exports.DEBUG) { console.log(state.step, 'MSIRP[' + a + ']', d, pi); }\n\n       state.rp1 = state.rp0;\n       state.rp2 = pi;\n       if (a) { state.rp0 = pi; }\n   }\n\n   // ALIGNRP[] Align to reference point.\n   // 0x3C\n   function ALIGNRP(state) {\n       var stack = state.stack;\n       var rp0i = state.rp0;\n       var rp0 = state.z0[rp0i];\n       var loop = state.loop;\n       var fv = state.fv;\n       var pv = state.pv;\n       var z1 = state.z1;\n\n       while (loop--) {\n           var pi = stack.pop();\n           var p = z1[pi];\n\n           if (exports.DEBUG) {\n               console.log(\n                   state.step,\n                   (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                   'ALIGNRP[]', pi\n               );\n           }\n\n           fv.setRelative(p, rp0, 0, pv);\n           fv.touch(p);\n       }\n\n       state.loop = 1;\n   }\n\n   // RTG[] Round To Double Grid\n   // 0x3D\n   function RTDG(state) {\n       if (exports.DEBUG) { console.log(state.step, 'RTDG[]'); }\n\n       state.round = roundToDoubleGrid;\n   }\n\n   // MIAP[a] Move Indirect Absolute Point\n   // 0x3E-0x3F\n   function MIAP(round, state) {\n       var stack = state.stack;\n       var n = stack.pop();\n       var pi = stack.pop();\n       var p = state.z0[pi];\n       var fv = state.fv;\n       var pv = state.pv;\n       var cv = state.cvt[n];\n\n       if (exports.DEBUG) {\n           console.log(\n               state.step,\n               'MIAP[' + round + ']',\n               n, '(', cv, ')', pi\n           );\n       }\n\n       var d = pv.distance(p, HPZero);\n\n       if (round) {\n           if (Math.abs(d - cv) < state.cvCutIn) { d = cv; }\n\n           d = state.round(d);\n       }\n\n       fv.setRelative(p, HPZero, d, pv);\n\n       if (state.zp0 === 0) {\n           p.xo = p.x;\n           p.yo = p.y;\n       }\n\n       fv.touch(p);\n\n       state.rp0 = state.rp1 = pi;\n   }\n\n   // NPUSB[] PUSH N Bytes\n   // 0x40\n   function NPUSHB(state) {\n       var prog = state.prog;\n       var ip = state.ip;\n       var stack = state.stack;\n\n       var n = prog[++ip];\n\n       if (exports.DEBUG) { console.log(state.step, 'NPUSHB[]', n); }\n\n       for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }\n\n       state.ip = ip;\n   }\n\n   // NPUSHW[] PUSH N Words\n   // 0x41\n   function NPUSHW(state) {\n       var ip = state.ip;\n       var prog = state.prog;\n       var stack = state.stack;\n       var n = prog[++ip];\n\n       if (exports.DEBUG) { console.log(state.step, 'NPUSHW[]', n); }\n\n       for (var i = 0; i < n; i++) {\n           var w = (prog[++ip] << 8) | prog[++ip];\n           if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }\n           stack.push(w);\n       }\n\n       state.ip = ip;\n   }\n\n   // WS[] Write Store\n   // 0x42\n   function WS(state) {\n       var stack = state.stack;\n       var store = state.store;\n\n       if (!store) { store = state.store = []; }\n\n       var v = stack.pop();\n       var l = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'WS', v, l); }\n\n       store[l] = v;\n   }\n\n   // RS[] Read Store\n   // 0x43\n   function RS(state) {\n       var stack = state.stack;\n       var store = state.store;\n\n       var l = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'RS', l); }\n\n       var v = (store && store[l]) || 0;\n\n       stack.push(v);\n   }\n\n   // WCVTP[] Write Control Value Table in Pixel units\n   // 0x44\n   function WCVTP(state) {\n       var stack = state.stack;\n\n       var v = stack.pop();\n       var l = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'WCVTP', v, l); }\n\n       state.cvt[l] = v / 0x40;\n   }\n\n   // RCVT[] Read Control Value Table entry\n   // 0x45\n   function RCVT(state) {\n       var stack = state.stack;\n       var cvte = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'RCVT', cvte); }\n\n       stack.push(state.cvt[cvte] * 0x40);\n   }\n\n   // GC[] Get Coordinate projected onto the projection vector\n   // 0x46-0x47\n   function GC(a, state) {\n       var stack = state.stack;\n       var pi = stack.pop();\n       var p = state.z2[pi];\n\n       if (exports.DEBUG) { console.log(state.step, 'GC[' + a + ']', pi); }\n\n       stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);\n   }\n\n   // MD[a] Measure Distance\n   // 0x49-0x4A\n   function MD(a, state) {\n       var stack = state.stack;\n       var pi2 = stack.pop();\n       var pi1 = stack.pop();\n       var p2 = state.z1[pi2];\n       var p1 = state.z0[pi1];\n       var d = state.dpv.distance(p1, p2, a, a);\n\n       if (exports.DEBUG) { console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d); }\n\n       state.stack.push(Math.round(d * 64));\n   }\n\n   // MPPEM[] Measure Pixels Per EM\n   // 0x4B\n   function MPPEM(state) {\n       if (exports.DEBUG) { console.log(state.step, 'MPPEM[]'); }\n       state.stack.push(state.ppem);\n   }\n\n   // FLIPON[] set the auto FLIP Boolean to ON\n   // 0x4D\n   function FLIPON(state) {\n       if (exports.DEBUG) { console.log(state.step, 'FLIPON[]'); }\n       state.autoFlip = true;\n   }\n\n   // LT[] Less Than\n   // 0x50\n   function LT(state) {\n       var stack = state.stack;\n       var e2 = stack.pop();\n       var e1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'LT[]', e2, e1); }\n\n       stack.push(e1 < e2 ? 1 : 0);\n   }\n\n   // LTEQ[] Less Than or EQual\n   // 0x53\n   function LTEQ(state) {\n       var stack = state.stack;\n       var e2 = stack.pop();\n       var e1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'LTEQ[]', e2, e1); }\n\n       stack.push(e1 <= e2 ? 1 : 0);\n   }\n\n   // GTEQ[] Greater Than\n   // 0x52\n   function GT(state) {\n       var stack = state.stack;\n       var e2 = stack.pop();\n       var e1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'GT[]', e2, e1); }\n\n       stack.push(e1 > e2 ? 1 : 0);\n   }\n\n   // GTEQ[] Greater Than or EQual\n   // 0x53\n   function GTEQ(state) {\n       var stack = state.stack;\n       var e2 = stack.pop();\n       var e1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'GTEQ[]', e2, e1); }\n\n       stack.push(e1 >= e2 ? 1 : 0);\n   }\n\n   // EQ[] EQual\n   // 0x54\n   function EQ(state) {\n       var stack = state.stack;\n       var e2 = stack.pop();\n       var e1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'EQ[]', e2, e1); }\n\n       stack.push(e2 === e1 ? 1 : 0);\n   }\n\n   // NEQ[] Not EQual\n   // 0x55\n   function NEQ(state) {\n       var stack = state.stack;\n       var e2 = stack.pop();\n       var e1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'NEQ[]', e2, e1); }\n\n       stack.push(e2 !== e1 ? 1 : 0);\n   }\n\n   // ODD[] ODD\n   // 0x56\n   function ODD(state) {\n       var stack = state.stack;\n       var n = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'ODD[]', n); }\n\n       stack.push(Math.trunc(n) % 2 ? 1 : 0);\n   }\n\n   // EVEN[] EVEN\n   // 0x57\n   function EVEN(state) {\n       var stack = state.stack;\n       var n = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'EVEN[]', n); }\n\n       stack.push(Math.trunc(n) % 2 ? 0 : 1);\n   }\n\n   // IF[] IF test\n   // 0x58\n   function IF(state) {\n       var test = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'IF[]', test); }\n\n       // if test is true it just continues\n       // if not the ip is skipped until matching ELSE or EIF\n       if (!test) {\n           skip(state, true);\n\n           if (exports.DEBUG) { console.log(state.step,  'EIF[]'); }\n       }\n   }\n\n   // EIF[] End IF\n   // 0x59\n   function EIF(state) {\n       // this can be reached normally when\n       // executing an else branch.\n       // -> just ignore it\n\n       if (exports.DEBUG) { console.log(state.step, 'EIF[]'); }\n   }\n\n   // AND[] logical AND\n   // 0x5A\n   function AND(state) {\n       var stack = state.stack;\n       var e2 = stack.pop();\n       var e1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'AND[]', e2, e1); }\n\n       stack.push(e2 && e1 ? 1 : 0);\n   }\n\n   // OR[] logical OR\n   // 0x5B\n   function OR(state) {\n       var stack = state.stack;\n       var e2 = stack.pop();\n       var e1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'OR[]', e2, e1); }\n\n       stack.push(e2 || e1 ? 1 : 0);\n   }\n\n   // NOT[] logical NOT\n   // 0x5C\n   function NOT(state) {\n       var stack = state.stack;\n       var e = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'NOT[]', e); }\n\n       stack.push(e ? 0 : 1);\n   }\n\n   // DELTAP1[] DELTA exception P1\n   // DELTAP2[] DELTA exception P2\n   // DELTAP3[] DELTA exception P3\n   // 0x5D, 0x71, 0x72\n   function DELTAP123(b, state) {\n       var stack = state.stack;\n       var n = stack.pop();\n       var fv = state.fv;\n       var pv = state.pv;\n       var ppem = state.ppem;\n       var base = state.deltaBase + (b - 1) * 16;\n       var ds = state.deltaShift;\n       var z0 = state.z0;\n\n       if (exports.DEBUG) { console.log(state.step, 'DELTAP[' + b + ']', n, stack); }\n\n       for (var i = 0; i < n; i++) {\n           var pi = stack.pop();\n           var arg = stack.pop();\n           var appem = base + ((arg & 0xF0) >> 4);\n           if (appem !== ppem) { continue; }\n\n           var mag = (arg & 0x0F) - 8;\n           if (mag >= 0) { mag++; }\n           if (exports.DEBUG) { console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds); }\n\n           var p = z0[pi];\n           fv.setRelative(p, p, mag * ds, pv);\n       }\n   }\n\n   // SDB[] Set Delta Base in the graphics state\n   // 0x5E\n   function SDB(state) {\n       var stack = state.stack;\n       var n = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SDB[]', n); }\n\n       state.deltaBase = n;\n   }\n\n   // SDS[] Set Delta Shift in the graphics state\n   // 0x5F\n   function SDS(state) {\n       var stack = state.stack;\n       var n = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SDS[]', n); }\n\n       state.deltaShift = Math.pow(0.5, n);\n   }\n\n   // ADD[] ADD\n   // 0x60\n   function ADD(state) {\n       var stack = state.stack;\n       var n2 = stack.pop();\n       var n1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'ADD[]', n2, n1); }\n\n       stack.push(n1 + n2);\n   }\n\n   // SUB[] SUB\n   // 0x61\n   function SUB(state) {\n       var stack = state.stack;\n       var n2 = stack.pop();\n       var n1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SUB[]', n2, n1); }\n\n       stack.push(n1 - n2);\n   }\n\n   // DIV[] DIV\n   // 0x62\n   function DIV(state) {\n       var stack = state.stack;\n       var n2 = stack.pop();\n       var n1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'DIV[]', n2, n1); }\n\n       stack.push(n1 * 64 / n2);\n   }\n\n   // MUL[] MUL\n   // 0x63\n   function MUL(state) {\n       var stack = state.stack;\n       var n2 = stack.pop();\n       var n1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'MUL[]', n2, n1); }\n\n       stack.push(n1 * n2 / 64);\n   }\n\n   // ABS[] ABSolute value\n   // 0x64\n   function ABS(state) {\n       var stack = state.stack;\n       var n = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'ABS[]', n); }\n\n       stack.push(Math.abs(n));\n   }\n\n   // NEG[] NEGate\n   // 0x65\n   function NEG(state) {\n       var stack = state.stack;\n       var n = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'NEG[]', n); }\n\n       stack.push(-n);\n   }\n\n   // FLOOR[] FLOOR\n   // 0x66\n   function FLOOR(state) {\n       var stack = state.stack;\n       var n = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'FLOOR[]', n); }\n\n       stack.push(Math.floor(n / 0x40) * 0x40);\n   }\n\n   // CEILING[] CEILING\n   // 0x67\n   function CEILING(state) {\n       var stack = state.stack;\n       var n = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'CEILING[]', n); }\n\n       stack.push(Math.ceil(n / 0x40) * 0x40);\n   }\n\n   // ROUND[ab] ROUND value\n   // 0x68-0x6B\n   function ROUND(dt, state) {\n       var stack = state.stack;\n       var n = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'ROUND[]'); }\n\n       stack.push(state.round(n / 0x40) * 0x40);\n   }\n\n   // WCVTF[] Write Control Value Table in Funits\n   // 0x70\n   function WCVTF(state) {\n       var stack = state.stack;\n       var v = stack.pop();\n       var l = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'WCVTF[]', v, l); }\n\n       state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n   }\n\n   // DELTAC1[] DELTA exception C1\n   // DELTAC2[] DELTA exception C2\n   // DELTAC3[] DELTA exception C3\n   // 0x73, 0x74, 0x75\n   function DELTAC123(b, state) {\n       var stack = state.stack;\n       var n = stack.pop();\n       var ppem = state.ppem;\n       var base = state.deltaBase + (b - 1) * 16;\n       var ds = state.deltaShift;\n\n       if (exports.DEBUG) { console.log(state.step, 'DELTAC[' + b + ']', n, stack); }\n\n       for (var i = 0; i < n; i++) {\n           var c = stack.pop();\n           var arg = stack.pop();\n           var appem = base + ((arg & 0xF0) >> 4);\n           if (appem !== ppem) { continue; }\n\n           var mag = (arg & 0x0F) - 8;\n           if (mag >= 0) { mag++; }\n\n           var delta = mag * ds;\n\n           if (exports.DEBUG) { console.log(state.step, 'DELTACFIX', c, 'by', delta); }\n\n           state.cvt[c] += delta;\n       }\n   }\n\n   // SROUND[] Super ROUND\n   // 0x76\n   function SROUND(state) {\n       var n = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'SROUND[]', n); }\n\n       state.round = roundSuper;\n\n       var period;\n\n       switch (n & 0xC0) {\n           case 0x00:\n               period = 0.5;\n               break;\n           case 0x40:\n               period = 1;\n               break;\n           case 0x80:\n               period = 2;\n               break;\n           default:\n               throw new Error('invalid SROUND value');\n       }\n\n       state.srPeriod = period;\n\n       switch (n & 0x30) {\n           case 0x00:\n               state.srPhase = 0;\n               break;\n           case 0x10:\n               state.srPhase = 0.25 * period;\n               break;\n           case 0x20:\n               state.srPhase = 0.5  * period;\n               break;\n           case 0x30:\n               state.srPhase = 0.75 * period;\n               break;\n           default: throw new Error('invalid SROUND value');\n       }\n\n       n &= 0x0F;\n\n       if (n === 0) { state.srThreshold = 0; }\n       else { state.srThreshold = (n / 8 - 0.5) * period; }\n   }\n\n   // S45ROUND[] Super ROUND 45 degrees\n   // 0x77\n   function S45ROUND(state) {\n       var n = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'S45ROUND[]', n); }\n\n       state.round = roundSuper;\n\n       var period;\n\n       switch (n & 0xC0) {\n           case 0x00:\n               period = Math.sqrt(2) / 2;\n               break;\n           case 0x40:\n               period = Math.sqrt(2);\n               break;\n           case 0x80:\n               period = 2 * Math.sqrt(2);\n               break;\n           default:\n               throw new Error('invalid S45ROUND value');\n       }\n\n       state.srPeriod = period;\n\n       switch (n & 0x30) {\n           case 0x00:\n               state.srPhase = 0;\n               break;\n           case 0x10:\n               state.srPhase = 0.25 * period;\n               break;\n           case 0x20:\n               state.srPhase = 0.5  * period;\n               break;\n           case 0x30:\n               state.srPhase = 0.75 * period;\n               break;\n           default:\n               throw new Error('invalid S45ROUND value');\n       }\n\n       n &= 0x0F;\n\n       if (n === 0) { state.srThreshold = 0; }\n       else { state.srThreshold = (n / 8 - 0.5) * period; }\n   }\n\n   // ROFF[] Round Off\n   // 0x7A\n   function ROFF(state) {\n       if (exports.DEBUG) { console.log(state.step, 'ROFF[]'); }\n\n       state.round = roundOff;\n   }\n\n   // RUTG[] Round Up To Grid\n   // 0x7C\n   function RUTG(state) {\n       if (exports.DEBUG) { console.log(state.step, 'RUTG[]'); }\n\n       state.round = roundUpToGrid;\n   }\n\n   // RDTG[] Round Down To Grid\n   // 0x7D\n   function RDTG(state) {\n       if (exports.DEBUG) { console.log(state.step, 'RDTG[]'); }\n\n       state.round = roundDownToGrid;\n   }\n\n   // SCANCTRL[] SCAN conversion ConTRoL\n   // 0x85\n   function SCANCTRL(state) {\n       var n = state.stack.pop();\n\n       // ignored by opentype.js\n\n       if (exports.DEBUG) { console.log(state.step, 'SCANCTRL[]', n); }\n   }\n\n   // SDPVTL[a] Set Dual Projection Vector To Line\n   // 0x86-0x87\n   function SDPVTL(a, state) {\n       var stack = state.stack;\n       var p2i = stack.pop();\n       var p1i = stack.pop();\n       var p2 = state.z2[p2i];\n       var p1 = state.z1[p1i];\n\n       if (exports.DEBUG) { console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i); }\n\n       var dx;\n       var dy;\n\n       if (!a) {\n           dx = p1.x - p2.x;\n           dy = p1.y - p2.y;\n       } else {\n           dx = p2.y - p1.y;\n           dy = p1.x - p2.x;\n       }\n\n       state.dpv = getUnitVector(dx, dy);\n   }\n\n   // GETINFO[] GET INFOrmation\n   // 0x88\n   function GETINFO(state) {\n       var stack = state.stack;\n       var sel = stack.pop();\n       var r = 0;\n\n       if (exports.DEBUG) { console.log(state.step, 'GETINFO[]', sel); }\n\n       // v35 as in no subpixel hinting\n       if (sel & 0x01) { r = 35; }\n\n       // TODO rotation and stretch currently not supported\n       // and thus those GETINFO are always 0.\n\n       // opentype.js is always gray scaling\n       if (sel & 0x20) { r |= 0x1000; }\n\n       stack.push(r);\n   }\n\n   // ROLL[] ROLL the top three stack elements\n   // 0x8A\n   function ROLL(state) {\n       var stack = state.stack;\n       var a = stack.pop();\n       var b = stack.pop();\n       var c = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'ROLL[]'); }\n\n       stack.push(b);\n       stack.push(a);\n       stack.push(c);\n   }\n\n   // MAX[] MAXimum of top two stack elements\n   // 0x8B\n   function MAX(state) {\n       var stack = state.stack;\n       var e2 = stack.pop();\n       var e1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'MAX[]', e2, e1); }\n\n       stack.push(Math.max(e1, e2));\n   }\n\n   // MIN[] MINimum of top two stack elements\n   // 0x8C\n   function MIN(state) {\n       var stack = state.stack;\n       var e2 = stack.pop();\n       var e1 = stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'MIN[]', e2, e1); }\n\n       stack.push(Math.min(e1, e2));\n   }\n\n   // SCANTYPE[] SCANTYPE\n   // 0x8D\n   function SCANTYPE(state) {\n       var n = state.stack.pop();\n       // ignored by opentype.js\n       if (exports.DEBUG) { console.log(state.step, 'SCANTYPE[]', n); }\n   }\n\n   // INSTCTRL[] INSTCTRL\n   // 0x8D\n   function INSTCTRL(state) {\n       var s = state.stack.pop();\n       var v = state.stack.pop();\n\n       if (exports.DEBUG) { console.log(state.step, 'INSTCTRL[]', s, v); }\n\n       switch (s) {\n           case 1 : state.inhibitGridFit = !!v; return;\n           case 2 : state.ignoreCvt = !!v; return;\n           default: throw new Error('invalid INSTCTRL[] selector');\n       }\n   }\n\n   // PUSHB[abc] PUSH Bytes\n   // 0xB0-0xB7\n   function PUSHB(n, state) {\n       var stack = state.stack;\n       var prog = state.prog;\n       var ip = state.ip;\n\n       if (exports.DEBUG) { console.log(state.step, 'PUSHB[' + n + ']'); }\n\n       for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }\n\n       state.ip = ip;\n   }\n\n   // PUSHW[abc] PUSH Words\n   // 0xB8-0xBF\n   function PUSHW(n, state) {\n       var ip = state.ip;\n       var prog = state.prog;\n       var stack = state.stack;\n\n       if (exports.DEBUG) { console.log(state.ip, 'PUSHW[' + n + ']'); }\n\n       for (var i = 0; i < n; i++) {\n           var w = (prog[++ip] << 8) | prog[++ip];\n           if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }\n           stack.push(w);\n       }\n\n       state.ip = ip;\n   }\n\n   // MDRP[abcde] Move Direct Relative Point\n   // 0xD0-0xEF\n   // (if indirect is 0)\n   //\n   // and\n   //\n   // MIRP[abcde] Move Indirect Relative Point\n   // 0xE0-0xFF\n   // (if indirect is 1)\n\n   function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {\n       var stack = state.stack;\n       var cvte = indirect && stack.pop();\n       var pi = stack.pop();\n       var rp0i = state.rp0;\n       var rp = state.z0[rp0i];\n       var p = state.z1[pi];\n\n       var md = state.minDis;\n       var fv = state.fv;\n       var pv = state.dpv;\n       var od; // original distance\n       var d; // moving distance\n       var sign; // sign of distance\n       var cv;\n\n       d = od = pv.distance(p, rp, true, true);\n       sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0\n\n       // TODO consider autoFlip\n       d = Math.abs(d);\n\n       if (indirect) {\n           cv = state.cvt[cvte];\n\n           if (ro && Math.abs(d - cv) < state.cvCutIn) { d = cv; }\n       }\n\n       if (keepD && d < md) { d = md; }\n\n       if (ro) { d = state.round(d); }\n\n       fv.setRelative(p, rp, sign * d, pv);\n       fv.touch(p);\n\n       if (exports.DEBUG) {\n           console.log(\n               state.step,\n               (indirect ? 'MIRP[' : 'MDRP[') +\n               (setRp0 ? 'M' : 'm') +\n               (keepD ? '>' : '_') +\n               (ro ? 'R' : '_') +\n               (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +\n               ']',\n               indirect ?\n                   cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :\n                   '',\n               pi,\n               '(d =', od, '->', sign * d, ')'\n           );\n       }\n\n       state.rp1 = state.rp0;\n       state.rp2 = pi;\n       if (setRp0) { state.rp0 = pi; }\n   }\n\n   /*\n   * The instruction table.\n   */\n   instructionTable = [\n       /* 0x00 */ SVTCA.bind(undefined, yUnitVector),\n       /* 0x01 */ SVTCA.bind(undefined, xUnitVector),\n       /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),\n       /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),\n       /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),\n       /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),\n       /* 0x06 */ SPVTL.bind(undefined, 0),\n       /* 0x07 */ SPVTL.bind(undefined, 1),\n       /* 0x08 */ SFVTL.bind(undefined, 0),\n       /* 0x09 */ SFVTL.bind(undefined, 1),\n       /* 0x0A */ SPVFS,\n       /* 0x0B */ SFVFS,\n       /* 0x0C */ GPV,\n       /* 0x0D */ GFV,\n       /* 0x0E */ SFVTPV,\n       /* 0x0F */ ISECT,\n       /* 0x10 */ SRP0,\n       /* 0x11 */ SRP1,\n       /* 0x12 */ SRP2,\n       /* 0x13 */ SZP0,\n       /* 0x14 */ SZP1,\n       /* 0x15 */ SZP2,\n       /* 0x16 */ SZPS,\n       /* 0x17 */ SLOOP,\n       /* 0x18 */ RTG,\n       /* 0x19 */ RTHG,\n       /* 0x1A */ SMD,\n       /* 0x1B */ ELSE,\n       /* 0x1C */ JMPR,\n       /* 0x1D */ SCVTCI,\n       /* 0x1E */ undefined,   // TODO SSWCI\n       /* 0x1F */ undefined,   // TODO SSW\n       /* 0x20 */ DUP,\n       /* 0x21 */ POP,\n       /* 0x22 */ CLEAR,\n       /* 0x23 */ SWAP,\n       /* 0x24 */ DEPTH,\n       /* 0x25 */ CINDEX,\n       /* 0x26 */ MINDEX,\n       /* 0x27 */ undefined,   // TODO ALIGNPTS\n       /* 0x28 */ undefined,\n       /* 0x29 */ undefined,   // TODO UTP\n       /* 0x2A */ LOOPCALL,\n       /* 0x2B */ CALL,\n       /* 0x2C */ FDEF,\n       /* 0x2D */ undefined,   // ENDF (eaten by FDEF)\n       /* 0x2E */ MDAP.bind(undefined, 0),\n       /* 0x2F */ MDAP.bind(undefined, 1),\n       /* 0x30 */ IUP.bind(undefined, yUnitVector),\n       /* 0x31 */ IUP.bind(undefined, xUnitVector),\n       /* 0x32 */ SHP.bind(undefined, 0),\n       /* 0x33 */ SHP.bind(undefined, 1),\n       /* 0x34 */ SHC.bind(undefined, 0),\n       /* 0x35 */ SHC.bind(undefined, 1),\n       /* 0x36 */ SHZ.bind(undefined, 0),\n       /* 0x37 */ SHZ.bind(undefined, 1),\n       /* 0x38 */ SHPIX,\n       /* 0x39 */ IP,\n       /* 0x3A */ MSIRP.bind(undefined, 0),\n       /* 0x3B */ MSIRP.bind(undefined, 1),\n       /* 0x3C */ ALIGNRP,\n       /* 0x3D */ RTDG,\n       /* 0x3E */ MIAP.bind(undefined, 0),\n       /* 0x3F */ MIAP.bind(undefined, 1),\n       /* 0x40 */ NPUSHB,\n       /* 0x41 */ NPUSHW,\n       /* 0x42 */ WS,\n       /* 0x43 */ RS,\n       /* 0x44 */ WCVTP,\n       /* 0x45 */ RCVT,\n       /* 0x46 */ GC.bind(undefined, 0),\n       /* 0x47 */ GC.bind(undefined, 1),\n       /* 0x48 */ undefined,   // TODO SCFS\n       /* 0x49 */ MD.bind(undefined, 0),\n       /* 0x4A */ MD.bind(undefined, 1),\n       /* 0x4B */ MPPEM,\n       /* 0x4C */ undefined,   // TODO MPS\n       /* 0x4D */ FLIPON,\n       /* 0x4E */ undefined,   // TODO FLIPOFF\n       /* 0x4F */ undefined,   // TODO DEBUG\n       /* 0x50 */ LT,\n       /* 0x51 */ LTEQ,\n       /* 0x52 */ GT,\n       /* 0x53 */ GTEQ,\n       /* 0x54 */ EQ,\n       /* 0x55 */ NEQ,\n       /* 0x56 */ ODD,\n       /* 0x57 */ EVEN,\n       /* 0x58 */ IF,\n       /* 0x59 */ EIF,\n       /* 0x5A */ AND,\n       /* 0x5B */ OR,\n       /* 0x5C */ NOT,\n       /* 0x5D */ DELTAP123.bind(undefined, 1),\n       /* 0x5E */ SDB,\n       /* 0x5F */ SDS,\n       /* 0x60 */ ADD,\n       /* 0x61 */ SUB,\n       /* 0x62 */ DIV,\n       /* 0x63 */ MUL,\n       /* 0x64 */ ABS,\n       /* 0x65 */ NEG,\n       /* 0x66 */ FLOOR,\n       /* 0x67 */ CEILING,\n       /* 0x68 */ ROUND.bind(undefined, 0),\n       /* 0x69 */ ROUND.bind(undefined, 1),\n       /* 0x6A */ ROUND.bind(undefined, 2),\n       /* 0x6B */ ROUND.bind(undefined, 3),\n       /* 0x6C */ undefined,   // TODO NROUND[ab]\n       /* 0x6D */ undefined,   // TODO NROUND[ab]\n       /* 0x6E */ undefined,   // TODO NROUND[ab]\n       /* 0x6F */ undefined,   // TODO NROUND[ab]\n       /* 0x70 */ WCVTF,\n       /* 0x71 */ DELTAP123.bind(undefined, 2),\n       /* 0x72 */ DELTAP123.bind(undefined, 3),\n       /* 0x73 */ DELTAC123.bind(undefined, 1),\n       /* 0x74 */ DELTAC123.bind(undefined, 2),\n       /* 0x75 */ DELTAC123.bind(undefined, 3),\n       /* 0x76 */ SROUND,\n       /* 0x77 */ S45ROUND,\n       /* 0x78 */ undefined,   // TODO JROT[]\n       /* 0x79 */ undefined,   // TODO JROF[]\n       /* 0x7A */ ROFF,\n       /* 0x7B */ undefined,\n       /* 0x7C */ RUTG,\n       /* 0x7D */ RDTG,\n       /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though\n       /* 0x7F */ POP, // actually AA, supposed to do only a pop though\n       /* 0x80 */ undefined,   // TODO FLIPPT\n       /* 0x81 */ undefined,   // TODO FLIPRGON\n       /* 0x82 */ undefined,   // TODO FLIPRGOFF\n       /* 0x83 */ undefined,\n       /* 0x84 */ undefined,\n       /* 0x85 */ SCANCTRL,\n       /* 0x86 */ SDPVTL.bind(undefined, 0),\n       /* 0x87 */ SDPVTL.bind(undefined, 1),\n       /* 0x88 */ GETINFO,\n       /* 0x89 */ undefined,   // TODO IDEF\n       /* 0x8A */ ROLL,\n       /* 0x8B */ MAX,\n       /* 0x8C */ MIN,\n       /* 0x8D */ SCANTYPE,\n       /* 0x8E */ INSTCTRL,\n       /* 0x8F */ undefined,\n       /* 0x90 */ undefined,\n       /* 0x91 */ undefined,\n       /* 0x92 */ undefined,\n       /* 0x93 */ undefined,\n       /* 0x94 */ undefined,\n       /* 0x95 */ undefined,\n       /* 0x96 */ undefined,\n       /* 0x97 */ undefined,\n       /* 0x98 */ undefined,\n       /* 0x99 */ undefined,\n       /* 0x9A */ undefined,\n       /* 0x9B */ undefined,\n       /* 0x9C */ undefined,\n       /* 0x9D */ undefined,\n       /* 0x9E */ undefined,\n       /* 0x9F */ undefined,\n       /* 0xA0 */ undefined,\n       /* 0xA1 */ undefined,\n       /* 0xA2 */ undefined,\n       /* 0xA3 */ undefined,\n       /* 0xA4 */ undefined,\n       /* 0xA5 */ undefined,\n       /* 0xA6 */ undefined,\n       /* 0xA7 */ undefined,\n       /* 0xA8 */ undefined,\n       /* 0xA9 */ undefined,\n       /* 0xAA */ undefined,\n       /* 0xAB */ undefined,\n       /* 0xAC */ undefined,\n       /* 0xAD */ undefined,\n       /* 0xAE */ undefined,\n       /* 0xAF */ undefined,\n       /* 0xB0 */ PUSHB.bind(undefined, 1),\n       /* 0xB1 */ PUSHB.bind(undefined, 2),\n       /* 0xB2 */ PUSHB.bind(undefined, 3),\n       /* 0xB3 */ PUSHB.bind(undefined, 4),\n       /* 0xB4 */ PUSHB.bind(undefined, 5),\n       /* 0xB5 */ PUSHB.bind(undefined, 6),\n       /* 0xB6 */ PUSHB.bind(undefined, 7),\n       /* 0xB7 */ PUSHB.bind(undefined, 8),\n       /* 0xB8 */ PUSHW.bind(undefined, 1),\n       /* 0xB9 */ PUSHW.bind(undefined, 2),\n       /* 0xBA */ PUSHW.bind(undefined, 3),\n       /* 0xBB */ PUSHW.bind(undefined, 4),\n       /* 0xBC */ PUSHW.bind(undefined, 5),\n       /* 0xBD */ PUSHW.bind(undefined, 6),\n       /* 0xBE */ PUSHW.bind(undefined, 7),\n       /* 0xBF */ PUSHW.bind(undefined, 8),\n       /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),\n       /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),\n       /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),\n       /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),\n       /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),\n       /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),\n       /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),\n       /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),\n       /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),\n       /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),\n       /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),\n       /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),\n       /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),\n       /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),\n       /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),\n       /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),\n       /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),\n       /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),\n       /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),\n       /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),\n       /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),\n       /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),\n       /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),\n       /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),\n       /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),\n       /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),\n       /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),\n       /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),\n       /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),\n       /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),\n       /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),\n       /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),\n       /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),\n       /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),\n       /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),\n       /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),\n       /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),\n       /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),\n       /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),\n       /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),\n       /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),\n       /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),\n       /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),\n       /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),\n       /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),\n       /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),\n       /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),\n       /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),\n       /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),\n       /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),\n       /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),\n       /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),\n       /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),\n       /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),\n       /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),\n       /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),\n       /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),\n       /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),\n       /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),\n       /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),\n       /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),\n       /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),\n       /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),\n       /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)\n   ];\n\n   /*****************************\n     Mathematical Considerations\n   ******************************\n\n   fv ... refers to freedom vector\n   pv ... refers to projection vector\n   rp ... refers to reference point\n   p  ... refers to to point being operated on\n   d  ... refers to distance\n\n   SETRELATIVE:\n   ============\n\n   case freedom vector == x-axis:\n   ------------------------------\n\n                           (pv)\n                        .-'\n                 rpd .-'\n                  .-*\n             d .-'90°'\n            .-'       '\n         .-'           '\n      *-'               ' b\n     rp                  '\n                          '\n                           '\n               p *----------*-------------- (fv)\n                             pm\n\n     rpdx = rpx + d * pv.x\n     rpdy = rpy + d * pv.y\n\n     equation of line b\n\n      y - rpdy = pvns * (x- rpdx)\n\n      y = p.y\n\n      x = rpdx + ( p.y - rpdy ) / pvns\n\n\n   case freedom vector == y-axis:\n   ------------------------------\n\n       * pm\n       |\\\n       | \\\n       |  \\\n       |   \\\n       |    \\\n       |     \\\n       |      \\\n       |       \\\n       |        \\\n       |         \\ b\n       |          \\\n       |           \\\n       |            \\    .-' (pv)\n       |         90° \\.-'\n       |           .-'* rpd\n       |        .-'\n       *     *-'  d\n       p     rp\n\n     rpdx = rpx + d * pv.x\n     rpdy = rpy + d * pv.y\n\n     equation of line b:\n              pvns ... normal slope to pv\n\n      y - rpdy = pvns * (x - rpdx)\n\n      x = p.x\n\n      y = rpdy +  pvns * (p.x - rpdx)\n\n\n\n   generic case:\n   -------------\n\n\n                                 .'(fv)\n                               .'\n                             .* pm\n                           .' !\n                         .'    .\n                       .'      !\n                     .'         . b\n                   .'           !\n                  *              .\n                 p               !\n                            90°   .    ... (pv)\n                              ...-*-'''\n                     ...---'''    rpd\n            ...---'''   d\n      *--'''\n     rp\n\n       rpdx = rpx + d * pv.x\n       rpdy = rpy + d * pv.y\n\n    equation of line b:\n       pvns... normal slope to pv\n\n       y - rpdy = pvns * (x - rpdx)\n\n    equation of freedom vector line:\n       fvs ... slope of freedom vector (=fy/fx)\n\n       y - py = fvs * (x - px)\n\n\n     on pm both equations are true for same x/y\n\n       y - rpdy = pvns * (x - rpdx)\n\n       y - py = fvs * (x - px)\n\n     form to y and set equal:\n\n       pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\n     expand:\n\n       pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\n     switch:\n\n       fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\n     solve for x:\n\n       fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n             fvs * px - pvns * rpdx + rpdy - py\n       x =  -----------------------------------\n                    fvs - pvns\n\n     and:\n\n       y = fvs * (x - px) + py\n\n\n\n   INTERPOLATE:\n   ============\n\n   Examples of point interpolation.\n\n   The weight of the movement of the reference point gets bigger\n   the further the other reference point is away, thus the safest\n   option (that is avoiding 0/0 divisions) is to weight the\n   original distance of the other point by the sum of both distances.\n\n   If the sum of both distances is 0, then move the point by the\n   arithmetic average of the movement of both reference points.\n\n\n\n\n              (+6)\n       rp1o *---->*rp1\n            .     .                          (+12)\n            .     .                  rp2o *---------->* rp2\n            .     .                       .           .\n            .     .                       .           .\n            .    10          20           .           .\n            |.........|...................|           .\n                  .   .                               .\n                  .   . (+8)                          .\n                   po *------>*p                      .\n                  .           .                       .\n                  .    12     .          24           .\n                  |...........|.......................|\n                                     36\n\n\n   -------\n\n\n\n              (+10)\n       rp1o *-------->*rp1\n            .         .                      (-10)\n            .         .              rp2 *<---------* rpo2\n            .         .                   .         .\n            .         .                   .         .\n            .    10   .          30       .         .\n            |.........|.............................|\n                      .                   .\n                      . (+5)              .\n                   po *--->* p            .\n                      .    .              .\n                      .    .   20         .\n                      |....|..............|\n                        5        15\n\n\n   -------\n\n\n              (+10)\n       rp1o *-------->*rp1\n            .         .\n            .         .\n       rp2o *-------->*rp2\n\n\n                                  (+10)\n                             po *-------->* p\n\n   -------\n\n\n              (+10)\n       rp1o *-------->*rp1\n            .         .\n            .         .(+30)\n       rp2o *---------------------------->*rp2\n\n\n                                           (+25)\n                             po *----------------------->* p\n\n\n\n   vim: set ts=4 sw=4 expandtab:\n   *****/\n\n   /**\n    * Converts a string into a list of tokens.\n    */\n\n   /**\n    * Create a new token\n    * @param {string} char a single char\n    */\n   function Token(char) {\n       this.char = char;\n       this.state = {};\n       this.activeState = null;\n   }\n\n   /**\n    * Create a new context range\n    * @param {number} startIndex range start index\n    * @param {number} endOffset range end index offset\n    * @param {string} contextName owner context name\n    */\n   function ContextRange(startIndex, endOffset, contextName) {\n       this.contextName = contextName;\n       this.startIndex = startIndex;\n       this.endOffset = endOffset;\n   }\n\n   /**\n    * Check context start and end\n    * @param {string} contextName a unique context name\n    * @param {function} checkStart a predicate function the indicates a context's start\n    * @param {function} checkEnd a predicate function the indicates a context's end\n    */\n   function ContextChecker(contextName, checkStart, checkEnd) {\n       this.contextName = contextName;\n       this.openRange = null;\n       this.ranges = [];\n       this.checkStart = checkStart;\n       this.checkEnd = checkEnd;\n   }\n\n   /**\n    * @typedef ContextParams\n    * @type Object\n    * @property {array} context context items\n    * @property {number} currentIndex current item index\n    */\n\n   /**\n    * Create a context params\n    * @param {array} context a list of items\n    * @param {number} currentIndex current item index\n    */\n   function ContextParams(context, currentIndex) {\n       this.context = context;\n       this.index = currentIndex;\n       this.length = context.length;\n       this.current = context[currentIndex];\n       this.backtrack = context.slice(0, currentIndex);\n       this.lookahead = context.slice(currentIndex + 1);\n   }\n\n   /**\n    * Create an event instance\n    * @param {string} eventId event unique id\n    */\n   function Event(eventId) {\n       this.eventId = eventId;\n       this.subscribers = [];\n   }\n\n   /**\n    * Initialize a core events and auto subscribe required event handlers\n    * @param {any} events an object that enlists core events handlers\n    */\n   function initializeCoreEvents(events) {\n       var this$1 = this;\n\n       var coreEvents = [\n           'start', 'end', 'next', 'newToken', 'contextStart',\n           'contextEnd', 'insertToken', 'removeToken', 'removeRange',\n           'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'\n       ];\n\n       coreEvents.forEach(function (eventId) {\n           Object.defineProperty(this$1.events, eventId, {\n               value: new Event(eventId)\n           });\n       });\n\n       if (!!events) {\n           coreEvents.forEach(function (eventId) {\n               var event = events[eventId];\n               if (typeof event === 'function') {\n                   this$1.events[eventId].subscribe(event);\n               }\n           });\n       }\n       var requiresContextUpdate = [\n           'insertToken', 'removeToken', 'removeRange',\n           'replaceToken', 'replaceRange', 'composeRUD'\n       ];\n       requiresContextUpdate.forEach(function (eventId) {\n           this$1.events[eventId].subscribe(\n               this$1.updateContextsRanges\n           );\n       });\n   }\n\n   /**\n    * Converts a string into a list of tokens\n    * @param {any} events tokenizer core events\n    */\n   function Tokenizer(events) {\n       this.tokens = [];\n       this.registeredContexts = {};\n       this.contextCheckers = [];\n       this.events = {};\n       this.registeredModifiers = [];\n\n       initializeCoreEvents.call(this, events);\n   }\n\n   /**\n    * Sets the state of a token, usually called by a state modifier.\n    * @param {string} key state item key\n    * @param {any} value state item value\n    */\n   Token.prototype.setState = function(key, value) {\n       this.state[key] = value;\n       this.activeState = { key: key, value: this.state[key] };\n       return this.activeState;\n   };\n\n   Token.prototype.getState = function (stateId) {\n       return this.state[stateId] || null;\n   };\n\n   /**\n    * Checks if an index exists in the tokens list.\n    * @param {number} index token index\n    */\n   Tokenizer.prototype.inboundIndex = function(index) {\n       return index >= 0 && index < this.tokens.length;\n   };\n\n   /**\n    * Compose and apply a list of operations (replace, update, delete)\n    * @param {array} RUDs replace, update and delete operations\n    * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)\n    */\n   Tokenizer.prototype.composeRUD = function (RUDs) {\n       var this$1 = this;\n\n       var silent = true;\n       var state = RUDs.map(function (RUD) { return (\n           this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent))\n       ); });\n       var hasFAILObject = function (obj) { return (\n           typeof obj === 'object' &&\n           obj.hasOwnProperty('FAIL')\n       ); };\n       if (state.every(hasFAILObject)) {\n           return {\n               FAIL: \"composeRUD: one or more operations hasn't completed successfully\",\n               report: state.filter(hasFAILObject)\n           };\n       }\n       this.dispatch('composeRUD', [state.filter(function (op) { return !hasFAILObject(op); })]);\n   };\n\n   /**\n    * Replace a range of tokens with a list of tokens\n    * @param {number} startIndex range start index\n    * @param {number} offset range offset\n    * @param {token} tokens a list of tokens to replace\n    * @param {boolean} silent dispatch events and update context ranges\n    */\n   Tokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {\n       offset = offset !== null ? offset : this.tokens.length;\n       var isTokenType = tokens.every(function (token) { return token instanceof Token; });\n       if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {\n           var replaced = this.tokens.splice.apply(\n               this.tokens, [startIndex, offset].concat(tokens)\n           );\n           if (!silent) { this.dispatch('replaceToken', [startIndex, offset, tokens]); }\n           return [replaced, tokens];\n       } else {\n           return { FAIL: 'replaceRange: invalid tokens or startIndex.' };\n       }\n   };\n\n   /**\n    * Replace a token with another token\n    * @param {number} index token index\n    * @param {token} token a token to replace\n    * @param {boolean} silent dispatch events and update context ranges\n    */\n   Tokenizer.prototype.replaceToken = function (index, token, silent) {\n       if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {\n           var replaced = this.tokens.splice(index, 1, token);\n           if (!silent) { this.dispatch('replaceToken', [index, token]); }\n           return [replaced[0], token];\n       } else {\n           return { FAIL: 'replaceToken: invalid token or index.' };\n       }\n   };\n\n   /**\n    * Removes a range of tokens\n    * @param {number} startIndex range start index\n    * @param {number} offset range offset\n    * @param {boolean} silent dispatch events and update context ranges\n    */\n   Tokenizer.prototype.removeRange = function(startIndex, offset, silent) {\n       offset = !isNaN(offset) ? offset : this.tokens.length;\n       var tokens = this.tokens.splice(startIndex, offset);\n       if (!silent) { this.dispatch('removeRange', [tokens, startIndex, offset]); }\n       return tokens;\n   };\n\n   /**\n    * Remove a token at a certain index\n    * @param {number} index token index\n    * @param {boolean} silent dispatch events and update context ranges\n    */\n   Tokenizer.prototype.removeToken = function(index, silent) {\n       if (!isNaN(index) && this.inboundIndex(index)) {\n           var token = this.tokens.splice(index, 1);\n           if (!silent) { this.dispatch('removeToken', [token, index]); }\n           return token;\n       } else {\n           return { FAIL: 'removeToken: invalid token index.' };\n       }\n   };\n\n   /**\n    * Insert a list of tokens at a certain index\n    * @param {array} tokens a list of tokens to insert\n    * @param {number} index insert the list of tokens at index\n    * @param {boolean} silent dispatch events and update context ranges\n    */\n   Tokenizer.prototype.insertToken = function (tokens, index, silent) {\n       var tokenType = tokens.every(\n           function (token) { return token instanceof Token; }\n       );\n       if (tokenType) {\n           this.tokens.splice.apply(\n               this.tokens, [index, 0].concat(tokens)\n           );\n           if (!silent) { this.dispatch('insertToken', [tokens, index]); }\n           return tokens;\n       } else {\n           return { FAIL: 'insertToken: invalid token(s).' };\n       }\n   };\n\n   /**\n    * A state modifier that is called on 'newToken' event\n    * @param {string} modifierId state modifier id\n    * @param {function} condition a predicate function that returns true or false\n    * @param {function} modifier a function to update token state\n    */\n   Tokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {\n       this.events.newToken.subscribe(function(token, contextParams) {\n           var conditionParams = [token, contextParams];\n           var canApplyModifier = (\n               condition === null ||\n               condition.apply(this, conditionParams) === true\n           );\n           var modifierParams = [token, contextParams];\n           if (canApplyModifier) {\n               var newStateValue = modifier.apply(this, modifierParams);\n               token.setState(modifierId, newStateValue);\n           }\n       });\n       this.registeredModifiers.push(modifierId);\n   };\n\n   /**\n    * Subscribe a handler to an event\n    * @param {function} eventHandler an event handler function\n    */\n   Event.prototype.subscribe = function (eventHandler) {\n       if (typeof eventHandler === 'function') {\n           return ((this.subscribers.push(eventHandler)) - 1);\n       } else {\n           return { FAIL: (\"invalid '\" + (this.eventId) + \"' event handler\")};\n       }\n   };\n\n   /**\n    * Unsubscribe an event handler\n    * @param {string} subsId subscription id\n    */\n   Event.prototype.unsubscribe = function (subsId) {\n       this.subscribers.splice(subsId, 1);\n   };\n\n   /**\n    * Sets context params current value index\n    * @param {number} index context params current value index\n    */\n   ContextParams.prototype.setCurrentIndex = function(index) {\n       this.index = index;\n       this.current = this.context[index];\n       this.backtrack = this.context.slice(0, index);\n       this.lookahead = this.context.slice(index + 1);\n   };\n\n   /**\n    * Get an item at an offset from the current value\n    * example (current value is 3):\n    *  1    2   [3]   4    5   |   items values\n    * -2   -1    0    1    2   |   offset values\n    * @param {number} offset an offset from current value index\n    */\n   ContextParams.prototype.get = function (offset) {\n       switch (true) {\n           case (offset === 0):\n               return this.current;\n           case (offset < 0 && Math.abs(offset) <= this.backtrack.length):\n               return this.backtrack.slice(offset)[0];\n           case (offset > 0 && offset <= this.lookahead.length):\n               return this.lookahead[offset - 1];\n           default:\n               return null;\n       }\n   };\n\n   /**\n    * Converts a context range into a string value\n    * @param {contextRange} range a context range\n    */\n   Tokenizer.prototype.rangeToText = function (range) {\n       if (range instanceof ContextRange) {\n           return (\n               this.getRangeTokens(range)\n                   .map(function (token) { return token.char; }).join('')\n           );\n       }\n   };\n\n   /**\n    * Converts all tokens into a string\n    */\n   Tokenizer.prototype.getText = function () {\n       return this.tokens.map(function (token) { return token.char; }).join('');\n   };\n\n   /**\n    * Get a context by name\n    * @param {string} contextName context name to get\n    */\n   Tokenizer.prototype.getContext = function (contextName) {\n       var context = this.registeredContexts[contextName];\n       return !!context ? context : null;\n   };\n\n   /**\n    * Subscribes a new event handler to an event\n    * @param {string} eventName event name to subscribe to\n    * @param {function} eventHandler a function to be invoked on event\n    */\n   Tokenizer.prototype.on = function(eventName, eventHandler) {\n       var event = this.events[eventName];\n       if (!!event) {\n           return event.subscribe(eventHandler);\n       } else {\n           return null;\n       }\n   };\n\n   /**\n    * Dispatches an event\n    * @param {string} eventName event name\n    * @param {any} args event handler arguments\n    */\n   Tokenizer.prototype.dispatch = function(eventName, args) {\n       var this$1 = this;\n\n       var event = this.events[eventName];\n       if (event instanceof Event) {\n           event.subscribers.forEach(function (subscriber) {\n               subscriber.apply(this$1, args || []);\n           });\n       }\n   };\n\n   /**\n    * Register a new context checker\n    * @param {string} contextName a unique context name\n    * @param {function} contextStartCheck a predicate function that returns true on context start\n    * @param {function} contextEndCheck  a predicate function that returns true on context end\n    * TODO: call tokenize on registration to update context ranges with the new context.\n    */\n   Tokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {\n       if (!!this.getContext(contextName)) { return {\n           FAIL:\n           (\"context name '\" + contextName + \"' is already registered.\")\n       }; }\n       if (typeof contextStartCheck !== 'function') { return {\n           FAIL:\n           \"missing context start check.\"\n       }; }\n       if (typeof contextEndCheck !== 'function') { return {\n           FAIL:\n           \"missing context end check.\"\n       }; }\n       var contextCheckers = new ContextChecker(\n           contextName, contextStartCheck, contextEndCheck\n       );\n       this.registeredContexts[contextName] = contextCheckers;\n       this.contextCheckers.push(contextCheckers);\n       return contextCheckers;\n   };\n\n   /**\n    * Gets a context range tokens\n    * @param {contextRange} range a context range\n    */\n   Tokenizer.prototype.getRangeTokens = function(range) {\n       var endIndex = range.startIndex + range.endOffset;\n       return [].concat(\n           this.tokens\n               .slice(range.startIndex, endIndex)\n       );\n   };\n\n   /**\n    * Gets the ranges of a context\n    * @param {string} contextName context name\n    */\n   Tokenizer.prototype.getContextRanges = function(contextName) {\n       var context = this.getContext(contextName);\n       if (!!context) {\n           return context.ranges;\n       } else {\n           return { FAIL: (\"context checker '\" + contextName + \"' is not registered.\") };\n       }\n   };\n\n   /**\n    * Resets context ranges to run context update\n    */\n   Tokenizer.prototype.resetContextsRanges = function () {\n       var registeredContexts = this.registeredContexts;\n       for (var contextName in registeredContexts) {\n           if (registeredContexts.hasOwnProperty(contextName)) {\n               var context = registeredContexts[contextName];\n               context.ranges = [];\n           }\n       }\n   };\n\n   /**\n    * Updates context ranges\n    */\n   Tokenizer.prototype.updateContextsRanges = function () {\n       this.resetContextsRanges();\n       var chars = this.tokens.map(function (token) { return token.char; });\n       for (var i = 0; i < chars.length; i++) {\n           var contextParams = new ContextParams(chars, i);\n           this.runContextCheck(contextParams);\n       }\n       this.dispatch('updateContextsRanges', [this.registeredContexts]);\n   };\n\n   /**\n    * Sets the end offset of an open range\n    * @param {number} offset range end offset\n    * @param {string} contextName context name\n    */\n   Tokenizer.prototype.setEndOffset = function (offset, contextName) {\n       var startIndex = this.getContext(contextName).openRange.startIndex;\n       var range = new ContextRange(startIndex, offset, contextName);\n       var ranges = this.getContext(contextName).ranges;\n       range.rangeId = contextName + \".\" + (ranges.length);\n       ranges.push(range);\n       this.getContext(contextName).openRange = null;\n       return range;\n   };\n\n   /**\n    * Runs a context check on the current context\n    * @param {contextParams} contextParams current context params\n    */\n   Tokenizer.prototype.runContextCheck = function(contextParams) {\n       var this$1 = this;\n\n       var index = contextParams.index;\n       this.contextCheckers.forEach(function (contextChecker) {\n           var contextName = contextChecker.contextName;\n           var openRange = this$1.getContext(contextName).openRange;\n           if (!openRange && contextChecker.checkStart(contextParams)) {\n               openRange = new ContextRange(index, null, contextName);\n               this$1.getContext(contextName).openRange = openRange;\n               this$1.dispatch('contextStart', [contextName, index]);\n           }\n           if (!!openRange && contextChecker.checkEnd(contextParams)) {\n               var offset = (index - openRange.startIndex) + 1;\n               var range = this$1.setEndOffset(offset, contextName);\n               this$1.dispatch('contextEnd', [contextName, range]);\n           }\n       });\n   };\n\n   /**\n    * Converts a text into a list of tokens\n    * @param {string} text a text to tokenize\n    */\n   Tokenizer.prototype.tokenize = function (text) {\n       this.tokens = [];\n       this.resetContextsRanges();\n       var chars = Array.from(text);\n       this.dispatch('start');\n       for (var i = 0; i < chars.length; i++) {\n           var char = chars[i];\n           var contextParams = new ContextParams(chars, i);\n           this.dispatch('next', [contextParams]);\n           this.runContextCheck(contextParams);\n           var token = new Token(char);\n           this.tokens.push(token);\n           this.dispatch('newToken', [token, contextParams]);\n       }\n       this.dispatch('end', [this.tokens]);\n       return this.tokens;\n   };\n\n   // ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮\n   // ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊\n   // ╰─╾──────────────────────────┄─────────────────────────────────────────────╯\n   // jscs:disable maximumLineLength\n   /**\n    * Check if a char is Arabic\n    * @param {string} c a single char\n    */\n   function isArabicChar(c) {\n       return /[\\u0600-\\u065F\\u066A-\\u06D2\\u06FA-\\u06FF]/.test(c);\n   }\n\n   /**\n    * Check if a char is an isolated arabic char\n    * @param {string} c a single char\n    */\n   function isIsolatedArabicChar(char) {\n       return /[\\u0630\\u0690\\u0621\\u0631\\u0661\\u0671\\u0622\\u0632\\u0672\\u0692\\u06C2\\u0623\\u0673\\u0693\\u06C3\\u0624\\u0694\\u06C4\\u0625\\u0675\\u0695\\u06C5\\u06E5\\u0676\\u0696\\u06C6\\u0627\\u0677\\u0697\\u06C7\\u0648\\u0688\\u0698\\u06C8\\u0689\\u0699\\u06C9\\u068A\\u06CA\\u066B\\u068B\\u06CB\\u068C\\u068D\\u06CD\\u06FD\\u068E\\u06EE\\u06FE\\u062F\\u068F\\u06CF\\u06EF]/.test(char);\n   }\n\n   /**\n    * Check if a char is an Arabic Tashkeel char\n    * @param {string} c a single char\n    */\n   function isTashkeelArabicChar(char) {\n       return /[\\u0600-\\u0605\\u060C-\\u060E\\u0610-\\u061B\\u061E\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED]/.test(char);\n   }\n\n   /**\n    * Check if a char is Latin\n    * @param {string} c a single char\n    */\n   function isLatinChar(c) {\n       return /[A-z]/.test(c);\n   }\n\n   /**\n    * Check if a char is whitespace char\n    * @param {string} c a single char\n    */\n   function isWhiteSpace(c) {\n       return /\\s/.test(c);\n   }\n\n   /**\n    * Query a feature by some of it's properties to lookup a glyph substitution.\n    */\n\n   /**\n    * Create feature query instance\n    * @param {Font} font opentype font instance\n    */\n   function FeatureQuery(font) {\n       this.font = font;\n       this.features = {};\n   }\n\n   /**\n    * @typedef SubstitutionAction\n    * @type Object\n    * @property {number} id substitution type\n    * @property {string} tag feature tag\n    * @property {any} substitution substitution value(s)\n    */\n\n   /**\n    * Create a substitution action instance\n    * @param {SubstitutionAction} action\n    */\n   function SubstitutionAction(action) {\n       this.id = action.id;\n       this.tag = action.tag;\n       this.substitution = action.substitution;\n   }\n\n   /**\n    * Lookup a coverage table\n    * @param {number} glyphIndex glyph index\n    * @param {CoverageTable} coverage coverage table\n    */\n   function lookupCoverage(glyphIndex, coverage) {\n       if (!glyphIndex) { return -1; }\n       switch (coverage.format) {\n           case 1:\n               return coverage.glyphs.indexOf(glyphIndex);\n\n           case 2:\n               var ranges = coverage.ranges;\n               for (var i = 0; i < ranges.length; i++) {\n                   var range = ranges[i];\n                   if (glyphIndex >= range.start && glyphIndex <= range.end) {\n                       var offset = glyphIndex - range.start;\n                       return range.index + offset;\n                   }\n               }\n               break;\n           default:\n               return -1; // not found\n       }\n       return -1;\n   }\n\n   /**\n    * Handle a single substitution - format 1\n    * @param {ContextParams} contextParams context params to lookup\n    */\n   function singleSubstitutionFormat1(glyphIndex, subtable) {\n       var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n       if (substituteIndex === -1) { return null; }\n       return glyphIndex + subtable.deltaGlyphId;\n   }\n\n   /**\n    * Handle a single substitution - format 2\n    * @param {ContextParams} contextParams context params to lookup\n    */\n   function singleSubstitutionFormat2(glyphIndex, subtable) {\n       var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n       if (substituteIndex === -1) { return null; }\n       return subtable.substitute[substituteIndex];\n   }\n\n   /**\n    * Lookup a list of coverage tables\n    * @param {any} coverageList a list of coverage tables\n    * @param {ContextParams} contextParams context params to lookup\n    */\n   function lookupCoverageList(coverageList, contextParams) {\n       var lookupList = [];\n       for (var i = 0; i < coverageList.length; i++) {\n           var coverage = coverageList[i];\n           var glyphIndex = contextParams.current;\n           glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n           var lookupIndex = lookupCoverage(glyphIndex, coverage);\n           if (lookupIndex !== -1) {\n               lookupList.push(lookupIndex);\n           }\n       }\n       if (lookupList.length !== coverageList.length) { return -1; }\n       return lookupList;\n   }\n\n   /**\n    * Handle chaining context substitution - format 3\n    * @param {ContextParams} contextParams context params to lookup\n    */\n   function chainingSubstitutionFormat3(contextParams, subtable) {\n       var lookupsCount = (\n           subtable.inputCoverage.length +\n           subtable.lookaheadCoverage.length +\n           subtable.backtrackCoverage.length\n       );\n       if (contextParams.context.length < lookupsCount) { return []; }\n       // INPUT LOOKUP //\n       var inputLookups = lookupCoverageList(\n           subtable.inputCoverage, contextParams\n       );\n       if (inputLookups === -1) { return []; }\n       // LOOKAHEAD LOOKUP //\n       var lookaheadOffset = subtable.inputCoverage.length - 1;\n       if (contextParams.lookahead.length < subtable.lookaheadCoverage.length) { return []; }\n       var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);\n       while (lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)) {\n           lookaheadContext.shift();\n       }\n       var lookaheadParams = new ContextParams(lookaheadContext, 0);\n       var lookaheadLookups = lookupCoverageList(\n           subtable.lookaheadCoverage, lookaheadParams\n       );\n       // BACKTRACK LOOKUP //\n       var backtrackContext = [].concat(contextParams.backtrack);\n       backtrackContext.reverse();\n       while (backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)) {\n           backtrackContext.shift();\n       }\n       if (backtrackContext.length < subtable.backtrackCoverage.length) { return []; }\n       var backtrackParams = new ContextParams(backtrackContext, 0);\n       var backtrackLookups = lookupCoverageList(\n           subtable.backtrackCoverage, backtrackParams\n       );\n       var contextRulesMatch = (\n           inputLookups.length === subtable.inputCoverage.length &&\n           lookaheadLookups.length === subtable.lookaheadCoverage.length &&\n           backtrackLookups.length === subtable.backtrackCoverage.length\n       );\n       var substitutions = [];\n       if (contextRulesMatch) {\n           for (var i = 0; i < subtable.lookupRecords.length; i++) {\n               var lookupRecord = subtable.lookupRecords[i];\n               var lookupListIndex = lookupRecord.lookupListIndex;\n               var lookupTable = this.getLookupByIndex(lookupListIndex);\n               for (var s = 0; s < lookupTable.subtables.length; s++) {\n                   var subtable$1 = lookupTable.subtables[s];\n                   var lookup = this.getLookupMethod(lookupTable, subtable$1);\n                   var substitutionType = this.getSubstitutionType(lookupTable, subtable$1);\n                   if (substitutionType === '12') {\n                       for (var n = 0; n < inputLookups.length; n++) {\n                           var glyphIndex = contextParams.get(n);\n                           var substitution = lookup(glyphIndex);\n                           if (substitution) { substitutions.push(substitution); }\n                       }\n                   }\n               }\n           }\n       }\n       return substitutions;\n   }\n\n   /**\n    * Handle ligature substitution - format 1\n    * @param {ContextParams} contextParams context params to lookup\n    */\n   function ligatureSubstitutionFormat1(contextParams, subtable) {\n       // COVERAGE LOOKUP //\n       var glyphIndex = contextParams.current;\n       var ligSetIndex = lookupCoverage(glyphIndex, subtable.coverage);\n       if (ligSetIndex === -1) { return null; }\n       // COMPONENTS LOOKUP\n       // (!) note, components are ordered in the written direction.\n       var ligature;\n       var ligatureSet = subtable.ligatureSets[ligSetIndex];\n       for (var s = 0; s < ligatureSet.length; s++) {\n           ligature = ligatureSet[s];\n           for (var l = 0; l < ligature.components.length; l++) {\n               var lookaheadItem = contextParams.lookahead[l];\n               var component = ligature.components[l];\n               if (lookaheadItem !== component) { break; }\n               if (l === ligature.components.length - 1) { return ligature; }\n           }\n       }\n       return null;\n   }\n\n   /**\n    * Handle decomposition substitution - format 1\n    * @param {number} glyphIndex glyph index\n    * @param {any} subtable subtable\n    */\n   function decompositionSubstitutionFormat1(glyphIndex, subtable) {\n       var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n       if (substituteIndex === -1) { return null; }\n       return subtable.sequences[substituteIndex];\n   }\n\n   /**\n    * Get default script features indexes\n    */\n   FeatureQuery.prototype.getDefaultScriptFeaturesIndexes = function () {\n       var scripts = this.font.tables.gsub.scripts;\n       for (var s = 0; s < scripts.length; s++) {\n           var script = scripts[s];\n           if (script.tag === 'DFLT') { return (\n               script.script.defaultLangSys.featureIndexes\n           ); }\n       }\n       return [];\n   };\n\n   /**\n    * Get feature indexes of a specific script\n    * @param {string} scriptTag script tag\n    */\n   FeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {\n       var tables = this.font.tables;\n       if (!tables.gsub) { return []; }\n       if (!scriptTag) { return this.getDefaultScriptFeaturesIndexes(); }\n       var scripts = this.font.tables.gsub.scripts;\n       for (var i = 0; i < scripts.length; i++) {\n           var script = scripts[i];\n           if (script.tag === scriptTag && script.script.defaultLangSys) {\n               return script.script.defaultLangSys.featureIndexes;\n           } else {\n               var langSysRecords = script.langSysRecords;\n               if (!!langSysRecords) {\n                   for (var j = 0; j < langSysRecords.length; j++) {\n                       var langSysRecord = langSysRecords[j];\n                       if (langSysRecord.tag === scriptTag) {\n                           var langSys = langSysRecord.langSys;\n                           return langSys.featureIndexes;\n                       }\n                   }\n               }\n           }\n       }\n       return this.getDefaultScriptFeaturesIndexes();\n   };\n\n   /**\n    * Map a feature tag to a gsub feature\n    * @param {any} features gsub features\n    * @param {string} scriptTag script tag\n    */\n   FeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {\n       var tags = {};\n       for (var i = 0; i < features.length; i++) {\n           var tag = features[i].tag;\n           var feature = features[i].feature;\n           tags[tag] = feature;\n       }\n       this.features[scriptTag].tags = tags;\n   };\n\n   /**\n    * Get features of a specific script\n    * @param {string} scriptTag script tag\n    */\n   FeatureQuery.prototype.getScriptFeatures = function (scriptTag) {\n       var features = this.features[scriptTag];\n       if (this.features.hasOwnProperty(scriptTag)) { return features; }\n       var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);\n       if (!featuresIndexes) { return null; }\n       var gsub = this.font.tables.gsub;\n       features = featuresIndexes.map(function (index) { return gsub.features[index]; });\n       this.features[scriptTag] = features;\n       this.mapTagsToFeatures(features, scriptTag);\n       return features;\n   };\n\n   /**\n    * Get substitution type\n    * @param {any} lookupTable lookup table\n    * @param {any} subtable subtable\n    */\n   FeatureQuery.prototype.getSubstitutionType = function(lookupTable, subtable) {\n       var lookupType = lookupTable.lookupType.toString();\n       var substFormat = subtable.substFormat.toString();\n       return lookupType + substFormat;\n   };\n\n   /**\n    * Get lookup method\n    * @param {any} lookupTable lookup table\n    * @param {any} subtable subtable\n    */\n   FeatureQuery.prototype.getLookupMethod = function(lookupTable, subtable) {\n       var this$1 = this;\n\n       var substitutionType = this.getSubstitutionType(lookupTable, subtable);\n       switch (substitutionType) {\n           case '11':\n               return function (glyphIndex) { return singleSubstitutionFormat1.apply(\n                   this$1, [glyphIndex, subtable]\n               ); };\n           case '12':\n               return function (glyphIndex) { return singleSubstitutionFormat2.apply(\n                   this$1, [glyphIndex, subtable]\n               ); };\n           case '63':\n               return function (contextParams) { return chainingSubstitutionFormat3.apply(\n                   this$1, [contextParams, subtable]\n               ); };\n           case '41':\n               return function (contextParams) { return ligatureSubstitutionFormat1.apply(\n                   this$1, [contextParams, subtable]\n               ); };\n           case '21':\n               return function (glyphIndex) { return decompositionSubstitutionFormat1.apply(\n                   this$1, [glyphIndex, subtable]\n               ); };\n           default:\n               throw new Error(\n                   \"lookupType: \" + (lookupTable.lookupType) + \" - \" +\n                   \"substFormat: \" + (subtable.substFormat) + \" \" +\n                   \"is not yet supported\"\n               );\n       }\n   };\n\n   /**\n    * [ LOOKUP TYPES ]\n    * -------------------------------\n    * Single                        1;\n    * Multiple                      2;\n    * Alternate                     3;\n    * Ligature                      4;\n    * Context                       5;\n    * ChainingContext               6;\n    * ExtensionSubstitution         7;\n    * ReverseChainingContext        8;\n    * -------------------------------\n    *\n    */\n\n   /**\n    * @typedef FQuery\n    * @type Object\n    * @param {string} tag feature tag\n    * @param {string} script feature script\n    * @param {ContextParams} contextParams context params\n    */\n\n   /**\n    * Lookup a feature using a query parameters\n    * @param {FQuery} query feature query\n    */\n   FeatureQuery.prototype.lookupFeature = function (query) {\n       var contextParams = query.contextParams;\n       var currentIndex = contextParams.index;\n       var feature = this.getFeature({\n           tag: query.tag, script: query.script\n       });\n       if (!feature) { return new Error(\n           \"font '\" + (this.font.names.fullName.en) + \"' \" +\n           \"doesn't support feature '\" + (query.tag) + \"' \" +\n           \"for script '\" + (query.script) + \"'.\"\n       ); }\n       var lookups = this.getFeatureLookups(feature);\n       var substitutions = [].concat(contextParams.context);\n       for (var l = 0; l < lookups.length; l++) {\n           var lookupTable = lookups[l];\n           var subtables = this.getLookupSubtables(lookupTable);\n           for (var s = 0; s < subtables.length; s++) {\n               var subtable = subtables[s];\n               var substType = this.getSubstitutionType(lookupTable, subtable);\n               var lookup = this.getLookupMethod(lookupTable, subtable);\n               var substitution = (void 0);\n               switch (substType) {\n                   case '11':\n                       substitution = lookup(contextParams.current);\n                       if (substitution) {\n                           substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                               id: 11, tag: query.tag, substitution: substitution\n                           }));\n                       }\n                       break;\n                   case '12':\n                       substitution = lookup(contextParams.current);\n                       if (substitution) {\n                           substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                               id: 12, tag: query.tag, substitution: substitution\n                           }));\n                       }\n                       break;\n                   case '63':\n                       substitution = lookup(contextParams);\n                       if (Array.isArray(substitution) && substitution.length) {\n                           substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                               id: 63, tag: query.tag, substitution: substitution\n                           }));\n                       }\n                       break;\n                   case '41':\n                       substitution = lookup(contextParams);\n                       if (substitution) {\n                           substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                               id: 41, tag: query.tag, substitution: substitution\n                           }));\n                       }\n                       break;\n                   case '21':\n                       substitution = lookup(contextParams.current);\n                       if (substitution) {\n                           substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                               id: 21, tag: query.tag, substitution: substitution\n                           }));\n                       }\n                       break;\n               }\n               contextParams = new ContextParams(substitutions, currentIndex);\n               if (Array.isArray(substitution) && !substitution.length) { continue; }\n               substitution = null;\n           }\n       }\n       return substitutions.length ? substitutions : null;\n   };\n\n   /**\n    * Checks if a font supports a specific features\n    * @param {FQuery} query feature query object\n    */\n   FeatureQuery.prototype.supports = function (query) {\n       if (!query.script) { return false; }\n       this.getScriptFeatures(query.script);\n       var supportedScript = this.features.hasOwnProperty(query.script);\n       if (!query.tag) { return supportedScript; }\n       var supportedFeature = (\n           this.features[query.script].some(function (feature) { return feature.tag === query.tag; })\n       );\n       return supportedScript && supportedFeature;\n   };\n\n   /**\n    * Get lookup table subtables\n    * @param {any} lookupTable lookup table\n    */\n   FeatureQuery.prototype.getLookupSubtables = function (lookupTable) {\n       return lookupTable.subtables || null;\n   };\n\n   /**\n    * Get lookup table by index\n    * @param {number} index lookup table index\n    */\n   FeatureQuery.prototype.getLookupByIndex = function (index) {\n       var lookups = this.font.tables.gsub.lookups;\n       return lookups[index] || null;\n   };\n\n   /**\n    * Get lookup tables for a feature\n    * @param {string} feature\n    */\n   FeatureQuery.prototype.getFeatureLookups = function (feature) {\n       // TODO: memoize\n       return feature.lookupListIndexes.map(this.getLookupByIndex.bind(this));\n   };\n\n   /**\n    * Query a feature by it's properties\n    * @param {any} query an object that describes the properties of a query\n    */\n   FeatureQuery.prototype.getFeature = function getFeature(query) {\n       if (!this.font) { return { FAIL: \"No font was found\"}; }\n       if (!this.features.hasOwnProperty(query.script)) {\n           this.getScriptFeatures(query.script);\n       }\n       var scriptFeatures = this.features[query.script];\n       if (!scriptFeatures) { return (\n           { FAIL: (\"No feature for script \" + (query.script))}\n       ); }\n       if (!scriptFeatures.tags[query.tag]) { return null; }\n       return this.features[query.script].tags[query.tag];\n   };\n\n   /**\n    * Arabic word context checkers\n    */\n\n   function arabicWordStartCheck(contextParams) {\n       var char = contextParams.current;\n       var prevChar = contextParams.get(-1);\n       return (\n           // ? arabic first char\n           (prevChar === null && isArabicChar(char)) ||\n           // ? arabic char preceded with a non arabic char\n           (!isArabicChar(prevChar) && isArabicChar(char))\n       );\n   }\n\n   function arabicWordEndCheck(contextParams) {\n       var nextChar = contextParams.get(1);\n       return (\n           // ? last arabic char\n           (nextChar === null) ||\n           // ? next char is not arabic\n           (!isArabicChar(nextChar))\n       );\n   }\n\n   var arabicWordCheck = {\n       startCheck: arabicWordStartCheck,\n       endCheck: arabicWordEndCheck\n   };\n\n   /**\n    * Arabic sentence context checkers\n    */\n\n   function arabicSentenceStartCheck(contextParams) {\n       var char = contextParams.current;\n       var prevChar = contextParams.get(-1);\n       return (\n           // ? an arabic char preceded with a non arabic char\n           (isArabicChar(char) || isTashkeelArabicChar(char)) &&\n           !isArabicChar(prevChar)\n       );\n   }\n\n   function arabicSentenceEndCheck(contextParams) {\n       var nextChar = contextParams.get(1);\n       switch (true) {\n           case nextChar === null:\n               return true;\n           case (!isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar)):\n               var nextIsWhitespace = isWhiteSpace(nextChar);\n               if (!nextIsWhitespace) { return true; }\n               if (nextIsWhitespace) {\n                   var arabicCharAhead = false;\n                   arabicCharAhead = (\n                       contextParams.lookahead.some(\n                           function (c) { return isArabicChar(c) || isTashkeelArabicChar(c); }\n                       )\n                   );\n                   if (!arabicCharAhead) { return true; }\n               }\n               break;\n           default:\n               return false;\n       }\n   }\n\n   var arabicSentenceCheck = {\n       startCheck: arabicSentenceStartCheck,\n       endCheck: arabicSentenceEndCheck\n   };\n\n   /**\n    * Apply single substitution format 1\n    * @param {Array} substitutions substitutions\n    * @param {any} tokens a list of tokens\n    * @param {number} index token index\n    */\n   function singleSubstitutionFormat1$1(action, tokens, index) {\n       tokens[index].setState(action.tag, action.substitution);\n   }\n\n   /**\n    * Apply single substitution format 2\n    * @param {Array} substitutions substitutions\n    * @param {any} tokens a list of tokens\n    * @param {number} index token index\n    */\n   function singleSubstitutionFormat2$1(action, tokens, index) {\n       tokens[index].setState(action.tag, action.substitution);\n   }\n\n   /**\n    * Apply chaining context substitution format 3\n    * @param {Array} substitutions substitutions\n    * @param {any} tokens a list of tokens\n    * @param {number} index token index\n    */\n   function chainingSubstitutionFormat3$1(action, tokens, index) {\n       action.substitution.forEach(function (subst, offset) {\n           var token = tokens[index + offset];\n           token.setState(action.tag, subst);\n       });\n   }\n\n   /**\n    * Apply ligature substitution format 1\n    * @param {Array} substitutions substitutions\n    * @param {any} tokens a list of tokens\n    * @param {number} index token index\n    */\n   function ligatureSubstitutionFormat1$1(action, tokens, index) {\n       var token = tokens[index];\n       token.setState(action.tag, action.substitution.ligGlyph);\n       var compsCount = action.substitution.components.length;\n       for (var i = 0; i < compsCount; i++) {\n           token = tokens[index + i + 1];\n           token.setState('deleted', true);\n       }\n   }\n\n   /**\n    * Supported substitutions\n    */\n   var SUBSTITUTIONS = {\n       11: singleSubstitutionFormat1$1,\n       12: singleSubstitutionFormat2$1,\n       63: chainingSubstitutionFormat3$1,\n       41: ligatureSubstitutionFormat1$1\n   };\n\n   /**\n    * Apply substitutions to a list of tokens\n    * @param {Array} substitutions substitutions\n    * @param {any} tokens a list of tokens\n    * @param {number} index token index\n    */\n   function applySubstitution(action, tokens, index) {\n       if (action instanceof SubstitutionAction && SUBSTITUTIONS[action.id]) {\n           SUBSTITUTIONS[action.id](action, tokens, index);\n       }\n   }\n\n   /**\n    * Apply Arabic presentation forms to a range of tokens\n    */\n\n   /**\n    * Check if a char can be connected to it's preceding char\n    * @param {ContextParams} charContextParams context params of a char\n    */\n   function willConnectPrev(charContextParams) {\n       var backtrack = [].concat(charContextParams.backtrack);\n       for (var i = backtrack.length - 1; i >= 0; i--) {\n           var prevChar = backtrack[i];\n           var isolated = isIsolatedArabicChar(prevChar);\n           var tashkeel = isTashkeelArabicChar(prevChar);\n           if (!isolated && !tashkeel) { return true; }\n           if (isolated) { return false; }\n       }\n       return false;\n   }\n\n   /**\n    * Check if a char can be connected to it's proceeding char\n    * @param {ContextParams} charContextParams context params of a char\n    */\n   function willConnectNext(charContextParams) {\n       if (isIsolatedArabicChar(charContextParams.current)) { return false; }\n       for (var i = 0; i < charContextParams.lookahead.length; i++) {\n           var nextChar = charContextParams.lookahead[i];\n           var tashkeel = isTashkeelArabicChar(nextChar);\n           if (!tashkeel) { return true; }\n       }\n       return false;\n   }\n\n   /**\n    * Apply arabic presentation forms to a list of tokens\n    * @param {ContextRange} range a range of tokens\n    */\n   function arabicPresentationForms(range) {\n       var this$1 = this;\n\n       var script = 'arab';\n       var tags = this.featuresTags[script];\n       var tokens = this.tokenizer.getRangeTokens(range);\n       if (tokens.length === 1) { return; }\n       var contextParams = new ContextParams(\n           tokens.map(function (token) { return token.getState('glyphIndex'); }\n       ), 0);\n       var charContextParams = new ContextParams(\n           tokens.map(function (token) { return token.char; }\n       ), 0);\n       tokens.forEach(function (token, index) {\n           if (isTashkeelArabicChar(token.char)) { return; }\n           contextParams.setCurrentIndex(index);\n           charContextParams.setCurrentIndex(index);\n           var CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)\n           if (willConnectPrev(charContextParams)) { CONNECT |= 1; }\n           if (willConnectNext(charContextParams)) { CONNECT |= 2; }\n           var tag;\n           switch (CONNECT) {\n               case 1: (tag = 'fina'); break;\n               case 2: (tag = 'init'); break;\n               case 3: (tag = 'medi'); break;\n           }\n           if (tags.indexOf(tag) === -1) { return; }\n           var substitutions = this$1.query.lookupFeature({\n               tag: tag, script: script, contextParams: contextParams\n           });\n           if (substitutions instanceof Error) { return console.info(substitutions.message); }\n           substitutions.forEach(function (action, index) {\n               if (action instanceof SubstitutionAction) {\n                   applySubstitution(action, tokens, index);\n                   contextParams.context[index] = action.substitution;\n               }\n           });\n       });\n   }\n\n   /**\n    * Apply Arabic required ligatures feature to a range of tokens\n    */\n\n   /**\n    * Update context params\n    * @param {any} tokens a list of tokens\n    * @param {number} index current item index\n    */\n   function getContextParams(tokens, index) {\n       var context = tokens.map(function (token) { return token.activeState.value; });\n       return new ContextParams(context, index || 0);\n   }\n\n   /**\n    * Apply Arabic required ligatures to a context range\n    * @param {ContextRange} range a range of tokens\n    */\n   function arabicRequiredLigatures(range) {\n       var this$1 = this;\n\n       var script = 'arab';\n       var tokens = this.tokenizer.getRangeTokens(range);\n       var contextParams = getContextParams(tokens);\n       contextParams.context.forEach(function (glyphIndex, index) {\n           contextParams.setCurrentIndex(index);\n           var substitutions = this$1.query.lookupFeature({\n               tag: 'rlig', script: script, contextParams: contextParams\n           });\n           if (substitutions.length) {\n               substitutions.forEach(\n                   function (action) { return applySubstitution(action, tokens, index); }\n               );\n               contextParams = getContextParams(tokens);\n           }\n       });\n   }\n\n   /**\n    * Latin word context checkers\n    */\n\n   function latinWordStartCheck(contextParams) {\n       var char = contextParams.current;\n       var prevChar = contextParams.get(-1);\n       return (\n           // ? latin first char\n           (prevChar === null && isLatinChar(char)) ||\n           // ? latin char preceded with a non latin char\n           (!isLatinChar(prevChar) && isLatinChar(char))\n       );\n   }\n\n   function latinWordEndCheck(contextParams) {\n       var nextChar = contextParams.get(1);\n       return (\n           // ? last latin char\n           (nextChar === null) ||\n           // ? next char is not latin\n           (!isLatinChar(nextChar))\n       );\n   }\n\n   var latinWordCheck = {\n       startCheck: latinWordStartCheck,\n       endCheck: latinWordEndCheck\n   };\n\n   /**\n    * Apply Latin ligature feature to a range of tokens\n    */\n\n   /**\n    * Update context params\n    * @param {any} tokens a list of tokens\n    * @param {number} index current item index\n    */\n   function getContextParams$1(tokens, index) {\n       var context = tokens.map(function (token) { return token.activeState.value; });\n       return new ContextParams(context, index || 0);\n   }\n\n   /**\n    * Apply Arabic required ligatures to a context range\n    * @param {ContextRange} range a range of tokens\n    */\n   function latinLigature(range) {\n       var this$1 = this;\n\n       var script = 'latn';\n       var tokens = this.tokenizer.getRangeTokens(range);\n       var contextParams = getContextParams$1(tokens);\n       contextParams.context.forEach(function (glyphIndex, index) {\n           contextParams.setCurrentIndex(index);\n           var substitutions = this$1.query.lookupFeature({\n               tag: 'liga', script: script, contextParams: contextParams\n           });\n           if (substitutions.length) {\n               substitutions.forEach(\n                   function (action) { return applySubstitution(action, tokens, index); }\n               );\n               contextParams = getContextParams$1(tokens);\n           }\n       });\n   }\n\n   /**\n    * Infer bidirectional properties for a given text and apply\n    * the corresponding layout rules.\n    */\n\n   /**\n    * Create Bidi. features\n    * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'\n    */\n   function Bidi(baseDir) {\n       this.baseDir = baseDir || 'ltr';\n       this.tokenizer = new Tokenizer();\n       this.featuresTags = {};\n   }\n\n   /**\n    * Sets Bidi text\n    * @param {string} text a text input\n    */\n   Bidi.prototype.setText = function (text) {\n       this.text = text;\n   };\n\n   /**\n    * Store essential context checks:\n    * arabic word check for applying gsub features\n    * arabic sentence check for adjusting arabic layout\n    */\n   Bidi.prototype.contextChecks = ({\n       latinWordCheck: latinWordCheck,\n       arabicWordCheck: arabicWordCheck,\n       arabicSentenceCheck: arabicSentenceCheck\n   });\n\n   /**\n    * Register arabic word check\n    */\n   function registerContextChecker(checkId) {\n       var check = this.contextChecks[(checkId + \"Check\")];\n       return this.tokenizer.registerContextChecker(\n           checkId, check.startCheck, check.endCheck\n       );\n   }\n\n   /**\n    * Perform pre tokenization procedure then\n    * tokenize text input\n    */\n   function tokenizeText() {\n       registerContextChecker.call(this, 'latinWord');\n       registerContextChecker.call(this, 'arabicWord');\n       registerContextChecker.call(this, 'arabicSentence');\n       return this.tokenizer.tokenize(this.text);\n   }\n\n   /**\n    * Reverse arabic sentence layout\n    * TODO: check base dir before applying adjustments - priority low\n    */\n   function reverseArabicSentences() {\n       var this$1 = this;\n\n       var ranges = this.tokenizer.getContextRanges('arabicSentence');\n       ranges.forEach(function (range) {\n           var rangeTokens = this$1.tokenizer.getRangeTokens(range);\n           this$1.tokenizer.replaceRange(\n               range.startIndex,\n               range.endOffset,\n               rangeTokens.reverse()\n           );\n       });\n   }\n\n   /**\n    * Register supported features tags\n    * @param {script} script script tag\n    * @param {Array} tags features tags list\n    */\n   Bidi.prototype.registerFeatures = function (script, tags) {\n       var this$1 = this;\n\n       var supportedTags = tags.filter(\n           function (tag) { return this$1.query.supports({script: script, tag: tag}); }\n       );\n       if (!this.featuresTags.hasOwnProperty(script)) {\n           this.featuresTags[script] = supportedTags;\n       } else {\n           this.featuresTags[script] =\n           this.featuresTags[script].concat(supportedTags);\n       }\n   };\n\n   /**\n    * Apply GSUB features\n    * @param {Array} tagsList a list of features tags\n    * @param {string} script a script tag\n    * @param {Font} font opentype font instance\n    */\n   Bidi.prototype.applyFeatures = function (font, features) {\n       if (!font) { throw new Error(\n           'No valid font was provided to apply features'\n       ); }\n       if (!this.query) { this.query = new FeatureQuery(font); }\n       for (var f = 0; f < features.length; f++) {\n           var feature = features[f];\n           if (!this.query.supports({script: feature.script})) { continue; }\n           this.registerFeatures(feature.script, feature.tags);\n       }\n   };\n\n   /**\n    * Register a state modifier\n    * @param {string} modifierId state modifier id\n    * @param {function} condition a predicate function that returns true or false\n    * @param {function} modifier a modifier function to set token state\n    */\n   Bidi.prototype.registerModifier = function (modifierId, condition, modifier) {\n       this.tokenizer.registerModifier(modifierId, condition, modifier);\n   };\n\n   /**\n    * Check if 'glyphIndex' is registered\n    */\n   function checkGlyphIndexStatus() {\n       if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {\n           throw new Error(\n               'glyphIndex modifier is required to apply ' +\n               'arabic presentation features.'\n           );\n       }\n   }\n\n   /**\n    * Apply arabic presentation forms features\n    */\n   function applyArabicPresentationForms() {\n       var this$1 = this;\n\n       var script = 'arab';\n       if (!this.featuresTags.hasOwnProperty(script)) { return; }\n       checkGlyphIndexStatus.call(this);\n       var ranges = this.tokenizer.getContextRanges('arabicWord');\n       ranges.forEach(function (range) {\n           arabicPresentationForms.call(this$1, range);\n       });\n   }\n\n   /**\n    * Apply required arabic ligatures\n    */\n   function applyArabicRequireLigatures() {\n       var this$1 = this;\n\n       var script = 'arab';\n       if (!this.featuresTags.hasOwnProperty(script)) { return; }\n       var tags = this.featuresTags[script];\n       if (tags.indexOf('rlig') === -1) { return; }\n       checkGlyphIndexStatus.call(this);\n       var ranges = this.tokenizer.getContextRanges('arabicWord');\n       ranges.forEach(function (range) {\n           arabicRequiredLigatures.call(this$1, range);\n       });\n   }\n\n   /**\n    * Apply required arabic ligatures\n    */\n   function applyLatinLigatures() {\n       var this$1 = this;\n\n       var script = 'latn';\n       if (!this.featuresTags.hasOwnProperty(script)) { return; }\n       var tags = this.featuresTags[script];\n       if (tags.indexOf('liga') === -1) { return; }\n       checkGlyphIndexStatus.call(this);\n       var ranges = this.tokenizer.getContextRanges('latinWord');\n       ranges.forEach(function (range) {\n           latinLigature.call(this$1, range);\n       });\n   }\n\n   /**\n    * Check if a context is registered\n    * @param {string} contextId context id\n    */\n   Bidi.prototype.checkContextReady = function (contextId) {\n       return !!this.tokenizer.getContext(contextId);\n   };\n\n   /**\n    * Apply features to registered contexts\n    */\n   Bidi.prototype.applyFeaturesToContexts = function () {\n       if (this.checkContextReady('arabicWord')) {\n           applyArabicPresentationForms.call(this);\n           applyArabicRequireLigatures.call(this);\n       }\n       if (this.checkContextReady('latinWord')) {\n           applyLatinLigatures.call(this);\n       }\n       if (this.checkContextReady('arabicSentence')) {\n           reverseArabicSentences.call(this);\n       }\n   };\n\n   /**\n    * process text input\n    * @param {string} text an input text\n    */\n   Bidi.prototype.processText = function(text) {\n       if (!this.text || this.text !== text) {\n           this.setText(text);\n           tokenizeText.call(this);\n           this.applyFeaturesToContexts();\n       }\n   };\n\n   /**\n    * Process a string of text to identify and adjust\n    * bidirectional text entities.\n    * @param {string} text input text\n    */\n   Bidi.prototype.getBidiText = function (text) {\n       this.processText(text);\n       return this.tokenizer.getText();\n   };\n\n   /**\n    * Get the current state index of each token\n    * @param {text} text an input text\n    */\n   Bidi.prototype.getTextGlyphs = function (text) {\n       this.processText(text);\n       var indexes = [];\n       for (var i = 0; i < this.tokenizer.tokens.length; i++) {\n           var token = this.tokenizer.tokens[i];\n           if (token.state.deleted) { continue; }\n           var index = token.activeState.value;\n           indexes.push(Array.isArray(index) ? index[0] : index);\n       }\n       return indexes;\n   };\n\n   // The Font object\n\n   /**\n    * @typedef FontOptions\n    * @type Object\n    * @property {Boolean} empty - whether to create a new empty font\n    * @property {string} familyName\n    * @property {string} styleName\n    * @property {string=} fullName\n    * @property {string=} postScriptName\n    * @property {string=} designer\n    * @property {string=} designerURL\n    * @property {string=} manufacturer\n    * @property {string=} manufacturerURL\n    * @property {string=} license\n    * @property {string=} licenseURL\n    * @property {string=} version\n    * @property {string=} description\n    * @property {string=} copyright\n    * @property {string=} trademark\n    * @property {Number} unitsPerEm\n    * @property {Number} ascender\n    * @property {Number} descender\n    * @property {Number} createdTimestamp\n    * @property {string=} weightClass\n    * @property {string=} widthClass\n    * @property {string=} fsSelection\n    */\n\n   /**\n    * A Font represents a loaded OpenType font file.\n    * It contains a set of glyphs and methods to draw text on a drawing context,\n    * or to get a path representing the text.\n    * @exports opentype.Font\n    * @class\n    * @param {FontOptions}\n    * @constructor\n    */\n   function Font(options) {\n       options = options || {};\n       options.tables = options.tables || {};\n\n       if (!options.empty) {\n           // Check that we've provided the minimum set of names.\n           checkArgument(\n               options.familyName,\n               'When creating a new Font object, familyName is required.'\n           );\n           checkArgument(\n               options.styleName,\n               'When creating a new Font object, styleName is required.'\n           );\n           checkArgument(\n               options.unitsPerEm,\n               'When creating a new Font object, unitsPerEm is required.'\n           );\n           checkArgument(\n               options.ascender,\n               'When creating a new Font object, ascender is required.'\n           );\n           checkArgument(\n               options.descender <= 0,\n               'When creating a new Font object, negative descender value is required.'\n           );\n\n           this.unitsPerEm = options.unitsPerEm || 1000;\n           this.ascender = options.ascender;\n           this.descender = options.descender;\n           this.createdTimestamp = options.createdTimestamp;\n           this.tables = Object.assign(options.tables, {\n               os2: Object.assign(\n                   {\n                       usWeightClass:\n                           options.weightClass || this.usWeightClasses.MEDIUM,\n                       usWidthClass:\n                           options.widthClass || this.usWidthClasses.MEDIUM,\n                       fsSelection:\n                           options.fsSelection || this.fsSelectionValues.REGULAR,\n                   },\n                   options.tables.os2\n               ),\n           });\n       }\n\n       this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n       this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n       this.encoding = new DefaultEncoding(this);\n       this.position = new Position(this);\n       this.substitution = new Substitution(this);\n       this.tables = this.tables || {};\n\n       // needed for low memory mode only.\n       this._push = null;\n       this._hmtxTableData = {};\n\n       Object.defineProperty(this, 'hinting', {\n           get: function () {\n               if (this._hinting) { return this._hinting; }\n               if (this.outlinesFormat === 'truetype') {\n                   return (this._hinting = new Hinting(this));\n               }\n           },\n       });\n   }\n\n   /**\n    * Check if the font has a glyph for the given character.\n    * @param  {string}\n    * @return {Boolean}\n    */\n   Font.prototype.hasChar = function (c) {\n       return this.encoding.charToGlyphIndex(c) !== null;\n   };\n\n   /**\n    * Convert the given character to a single glyph index.\n    * Note that this function assumes that there is a one-to-one mapping between\n    * the given character and a glyph; for complex scripts this might not be the case.\n    * @param  {string}\n    * @return {Number}\n    */\n   Font.prototype.charToGlyphIndex = function (s) {\n       return this.encoding.charToGlyphIndex(s);\n   };\n\n   /**\n    * Convert the given character to a single Glyph object.\n    * Note that this function assumes that there is a one-to-one mapping between\n    * the given character and a glyph; for complex scripts this might not be the case.\n    * @param  {string}\n    * @return {opentype.Glyph}\n    */\n   Font.prototype.charToGlyph = function (c) {\n       var glyphIndex = this.charToGlyphIndex(c);\n       var glyph = this.glyphs.get(glyphIndex);\n       if (!glyph) {\n           // .notdef\n           glyph = this.glyphs.get(0);\n       }\n\n       return glyph;\n   };\n\n   /**\n    * Update features\n    * @param {any} options features options\n    */\n   Font.prototype.updateFeatures = function (options) {\n       // TODO: update all features options not only 'latn'.\n       return this.defaultRenderOptions.features.map(function (feature) {\n           if (feature.script === 'latn') {\n               return {\n                   script: 'latn',\n                   tags: feature.tags.filter(function (tag) { return options[tag]; }),\n               };\n           } else {\n               return feature;\n           }\n       });\n   };\n\n   /**\n    * Convert the given text to a list of Glyph objects.\n    * Note that there is no strict one-to-one mapping between characters and\n    * glyphs, so the list of returned glyphs can be larger or smaller than the\n    * length of the given string.\n    * @param  {string}\n    * @param  {GlyphRenderOptions} [options]\n    * @return {opentype.Glyph[]}\n    */\n   Font.prototype.stringToGlyphs = function (s, options) {\n       var this$1 = this;\n\n       var bidi = new Bidi();\n\n       // Create and register 'glyphIndex' state modifier\n       var charToGlyphIndexMod = function (token) { return this$1.charToGlyphIndex(token.char); };\n       bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod);\n\n       // roll-back to default features\n       var features = options\n           ? this.updateFeatures(options.features)\n           : this.defaultRenderOptions.features;\n\n       bidi.applyFeatures(this, features);\n\n       var indexes = bidi.getTextGlyphs(s);\n\n       var length = indexes.length;\n\n       // convert glyph indexes to glyph objects\n       var glyphs = new Array(length);\n       var notdef = this.glyphs.get(0);\n       for (var i = 0; i < length; i += 1) {\n           glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n       }\n       return glyphs;\n   };\n\n   /**\n    * Retrieve the value of the kerning pair between the left glyph (or its index)\n    * and the right glyph (or its index). If no kerning pair is found, return 0.\n    * The kerning value gets added to the advance width when calculating the spacing\n    * between glyphs.\n    * For GPOS kerning, this method uses the default script and language, which covers\n    * most use cases. To have greater control, use font.position.getKerningValue .\n    * @param  {opentype.Glyph} leftGlyph\n    * @param  {opentype.Glyph} rightGlyph\n    * @return {Number}\n    */\n   Font.prototype.getKerningValue = function (leftGlyph, rightGlyph) {\n       leftGlyph = leftGlyph.index || leftGlyph;\n       rightGlyph = rightGlyph.index || rightGlyph;\n       var gposKerning = this.position.defaultKerningTables;\n       if (gposKerning) {\n           return this.position.getKerningValue(\n               gposKerning,\n               leftGlyph,\n               rightGlyph\n           );\n       }\n       // \"kern\" table\n       return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n   };\n\n   /**\n    * @typedef GlyphRenderOptions\n    * @type Object\n    * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n    *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n    * @property {string} [language='dflt'] - language system used to determine which features to apply.\n    *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n    * @property {boolean} [kerning=true] - whether to include kerning values\n    * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n    *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n    */\n   Font.prototype.defaultRenderOptions = {\n       kerning: true,\n       features: [\n           /**\n            * these 4 features are required to render Arabic text properly\n            * and shouldn't be turned off when rendering arabic text.\n            */\n           { script: 'arab', tags: ['init', 'medi', 'fina', 'rlig'] },\n           { script: 'latn', tags: ['liga', 'rlig'] } ],\n   };\n\n   /**\n    * Helper function that invokes the given callback for each glyph in the given text.\n    * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n    * @param {string} text - The text to apply.\n    * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n    * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n    * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n    * @param  {GlyphRenderOptions=} options\n    * @param  {Function} callback\n    */\n   Font.prototype.forEachGlyph = function (\n       text,\n       x,\n       y,\n       fontSize,\n       options,\n       callback\n   ) {\n       x = x !== undefined ? x : 0;\n       y = y !== undefined ? y : 0;\n       fontSize = fontSize !== undefined ? fontSize : 72;\n       options = Object.assign({}, this.defaultRenderOptions, options);\n       var fontScale = (1 / this.unitsPerEm) * fontSize;\n       var glyphs = this.stringToGlyphs(text, options);\n       var kerningLookups;\n       if (options.kerning) {\n           var script = options.script || this.position.getDefaultScriptName();\n           kerningLookups = this.position.getKerningTables(\n               script,\n               options.language\n           );\n       }\n       for (var i = 0; i < glyphs.length; i += 1) {\n           var glyph = glyphs[i];\n           callback.call(this, glyph, x, y, fontSize, options);\n           if (glyph.advanceWidth) {\n               x += glyph.advanceWidth * fontScale;\n           }\n\n           if (options.kerning && i < glyphs.length - 1) {\n               // We should apply position adjustment lookups in a more generic way.\n               // Here we only use the xAdvance value.\n               var kerningValue = kerningLookups\n                   ? this.position.getKerningValue(\n                         kerningLookups,\n                         glyph.index,\n                         glyphs[i + 1].index\n                     )\n                   : this.getKerningValue(glyph, glyphs[i + 1]);\n               x += kerningValue * fontScale;\n           }\n\n           if (options.letterSpacing) {\n               x += options.letterSpacing * fontSize;\n           } else if (options.tracking) {\n               x += (options.tracking / 1000) * fontSize;\n           }\n       }\n       return x;\n   };\n\n   /**\n    * Create a Path object that represents the given text.\n    * @param  {string} text - The text to create.\n    * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n    * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n    * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n    * @param  {GlyphRenderOptions=} options\n    * @return {opentype.Path}\n    */\n   Font.prototype.getPath = function (text, x, y, fontSize, options) {\n       var fullPath = new Path();\n       this.forEachGlyph(\n           text,\n           x,\n           y,\n           fontSize,\n           options,\n           function (glyph, gX, gY, gFontSize) {\n               var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n               fullPath.extend(glyphPath);\n           }\n       );\n       return fullPath;\n   };\n\n   /**\n    * Create an array of Path objects that represent the glyphs of a given text.\n    * @param  {string} text - The text to create.\n    * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n    * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n    * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n    * @param  {GlyphRenderOptions=} options\n    * @return {opentype.Path[]}\n    */\n   Font.prototype.getPaths = function (text, x, y, fontSize, options) {\n       var glyphPaths = [];\n       this.forEachGlyph(\n           text,\n           x,\n           y,\n           fontSize,\n           options,\n           function (glyph, gX, gY, gFontSize) {\n               var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n               glyphPaths.push(glyphPath);\n           }\n       );\n\n       return glyphPaths;\n   };\n\n   /**\n    * Returns the advance width of a text.\n    *\n    * This is something different than Path.getBoundingBox() as for example a\n    * suffixed whitespace increases the advanceWidth but not the bounding box\n    * or an overhanging letter like a calligraphic 'f' might have a quite larger\n    * bounding box than its advance width.\n    *\n    * This corresponds to canvas2dContext.measureText(text).width\n    *\n    * @param  {string} text - The text to create.\n    * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n    * @param  {GlyphRenderOptions=} options\n    * @return advance width\n    */\n   Font.prototype.getAdvanceWidth = function (text, fontSize, options) {\n       return this.forEachGlyph(text, 0, 0, fontSize, options, function () {});\n   };\n\n   /**\n    * @private\n    */\n   Font.prototype.fsSelectionValues = {\n       ITALIC: 0x001, //1\n       UNDERSCORE: 0x002, //2\n       NEGATIVE: 0x004, //4\n       OUTLINED: 0x008, //8\n       STRIKEOUT: 0x010, //16\n       BOLD: 0x020, //32\n       REGULAR: 0x040, //64\n       USER_TYPO_METRICS: 0x080, //128\n       WWS: 0x100, //256\n       OBLIQUE: 0x200, //512\n   };\n\n   /**\n    * @private\n    */\n   Font.prototype.usWidthClasses = {\n       ULTRA_CONDENSED: 1,\n       EXTRA_CONDENSED: 2,\n       CONDENSED: 3,\n       SEMI_CONDENSED: 4,\n       MEDIUM: 5,\n       SEMI_EXPANDED: 6,\n       EXPANDED: 7,\n       EXTRA_EXPANDED: 8,\n       ULTRA_EXPANDED: 9,\n   };\n\n   /**\n    * @private\n    */\n   Font.prototype.usWeightClasses = {\n       THIN: 100,\n       EXTRA_LIGHT: 200,\n       LIGHT: 300,\n       NORMAL: 400,\n       MEDIUM: 500,\n       SEMI_BOLD: 600,\n       BOLD: 700,\n       EXTRA_BOLD: 800,\n       BLACK: 900,\n   };\n\n   // The `cmap` table stores the mappings from characters to glyphs.\n\n   function parseCmapTableFormat12(cmap, p) {\n       //Skip reserved.\n       p.parseUShort();\n\n       // Length in bytes of the sub-tables.\n       cmap.length = p.parseULong();\n       cmap.language = p.parseULong();\n\n       var groupCount;\n       cmap.groupCount = groupCount = p.parseULong();\n       cmap.glyphIndexMap = {};\n\n       for (var i = 0; i < groupCount; i += 1) {\n           var startCharCode = p.parseULong();\n           var endCharCode = p.parseULong();\n           var startGlyphId = p.parseULong();\n\n           for (var c = startCharCode; c <= endCharCode; c += 1) {\n               cmap.glyphIndexMap[c] = startGlyphId;\n               startGlyphId++;\n           }\n       }\n   }\n\n   function parseCmapTableFormat4(cmap, p, data, start, offset) {\n       // Length in bytes of the sub-tables.\n       cmap.length = p.parseUShort();\n       cmap.language = p.parseUShort();\n\n       // segCount is stored x 2.\n       var segCount;\n       cmap.segCount = segCount = p.parseUShort() >> 1;\n\n       // Skip searchRange, entrySelector, rangeShift.\n       p.skip('uShort', 3);\n\n       // The \"unrolled\" mapping from character codes to glyph indices.\n       cmap.glyphIndexMap = {};\n       var endCountParser = new parse.Parser(data, start + offset + 14);\n       var startCountParser = new parse.Parser(\n           data,\n           start + offset + 16 + segCount * 2\n       );\n       var idDeltaParser = new parse.Parser(\n           data,\n           start + offset + 16 + segCount * 4\n       );\n       var idRangeOffsetParser = new parse.Parser(\n           data,\n           start + offset + 16 + segCount * 6\n       );\n       var glyphIndexOffset = start + offset + 16 + segCount * 8;\n       for (var i = 0; i < segCount - 1; i += 1) {\n           var glyphIndex = (void 0);\n           var endCount = endCountParser.parseUShort();\n           var startCount = startCountParser.parseUShort();\n           var idDelta = idDeltaParser.parseShort();\n           var idRangeOffset = idRangeOffsetParser.parseUShort();\n           for (var c = startCount; c <= endCount; c += 1) {\n               if (idRangeOffset !== 0) {\n                   // The idRangeOffset is relative to the current position in the idRangeOffset array.\n                   // Take the current offset in the idRangeOffset array.\n                   glyphIndexOffset =\n                       idRangeOffsetParser.offset +\n                       idRangeOffsetParser.relativeOffset -\n                       2;\n\n                   // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n                   glyphIndexOffset += idRangeOffset;\n\n                   // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n                   glyphIndexOffset += (c - startCount) * 2;\n                   glyphIndex = parse.getUShort(data, glyphIndexOffset);\n                   if (glyphIndex !== 0) {\n                       glyphIndex = (glyphIndex + idDelta) & 0xffff;\n                   }\n               } else {\n                   glyphIndex = (c + idDelta) & 0xffff;\n               }\n\n               cmap.glyphIndexMap[c] = glyphIndex;\n           }\n       }\n   }\n\n   // Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n   // There are many available formats, but we only support the Windows format 4 and 12.\n   // This function returns a `CmapEncoding` object or null if no supported format could be found.\n   function parseCmapTable(data, start) {\n       var cmap = {};\n       cmap.version = parse.getUShort(data, start);\n       check.argument(cmap.version === 0, 'cmap table version should be 0.');\n\n       // The cmap table can contain many sub-tables, each with their own format.\n       // We're only interested in a \"platform 0\" (Unicode format) and \"platform 3\" (Windows format) table.\n       cmap.numTables = parse.getUShort(data, start + 2);\n       var offset = -1;\n       for (var i = cmap.numTables - 1; i >= 0; i -= 1) {\n           var platformId = parse.getUShort(data, start + 4 + i * 8);\n           var encodingId = parse.getUShort(data, start + 4 + i * 8 + 2);\n           if (\n               (platformId === 3 &&\n                   (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||\n               (platformId === 0 &&\n                   (encodingId === 0 ||\n                       encodingId === 1 ||\n                       encodingId === 2 ||\n                       encodingId === 3 ||\n                       encodingId === 4))\n           ) {\n               offset = parse.getULong(data, start + 4 + i * 8 + 4);\n               break;\n           }\n       }\n\n       if (offset === -1) {\n           // There is no cmap table in the font that we support.\n           throw new Error('No valid cmap sub-tables found.');\n       }\n\n       var p = new parse.Parser(data, start + offset);\n       cmap.format = p.parseUShort();\n\n       if (cmap.format === 12) {\n           parseCmapTableFormat12(cmap, p);\n       } else if (cmap.format === 4) {\n           parseCmapTableFormat4(cmap, p, data, start, offset);\n       } else {\n           throw new Error(\n               'Only format 4 and 12 cmap tables are supported (found format ' +\n                   cmap.format +\n                   ').'\n           );\n       }\n\n       return cmap;\n   }\n\n   var cmap = { parse: parseCmapTable };\n\n   // The `CFF` table contains the glyph outlines in PostScript format.\n\n   // Subroutines are encoded using the negative half of the number space.\n   // See type 2 chapter 4.7 \"Subroutine operators\".\n   function calcCFFSubroutineBias(subrs) {\n       var bias;\n       if (subrs.length < 1240) {\n           bias = 107;\n       } else if (subrs.length < 33900) {\n           bias = 1131;\n       } else {\n           bias = 32768;\n       }\n\n       return bias;\n   }\n\n   // Parse a `CFF` INDEX array.\n   // An index array consists of a list of offsets, then a list of objects at those offsets.\n   function parseCFFIndex(data, start, conversionFn) {\n       var offsets = [];\n       var objects = [];\n       var count = parse.getCard16(data, start);\n       var objectOffset;\n       var endOffset;\n       if (count !== 0) {\n           var offsetSize = parse.getByte(data, start + 2);\n           objectOffset = start + (count + 1) * offsetSize + 2;\n           var pos = start + 3;\n           for (var i = 0; i < count + 1; i += 1) {\n               offsets.push(parse.getOffset(data, pos, offsetSize));\n               pos += offsetSize;\n           }\n\n           // The total size of the index array is 4 header bytes + the value of the last offset.\n           endOffset = objectOffset + offsets[count];\n       } else {\n           endOffset = start + 2;\n       }\n\n       for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {\n           var value = parse.getBytes(\n               data,\n               objectOffset + offsets[i$1],\n               objectOffset + offsets[i$1 + 1]\n           );\n           if (conversionFn) {\n               value = conversionFn(value);\n           }\n\n           objects.push(value);\n       }\n\n       return { objects: objects, startOffset: start, endOffset: endOffset };\n   }\n\n   function parseCFFIndexLowMemory(data, start) {\n       var offsets = [];\n       var count = parse.getCard16(data, start);\n       var objectOffset;\n       var endOffset;\n       if (count !== 0) {\n           var offsetSize = parse.getByte(data, start + 2);\n           objectOffset = start + (count + 1) * offsetSize + 2;\n           var pos = start + 3;\n           for (var i = 0; i < count + 1; i += 1) {\n               offsets.push(parse.getOffset(data, pos, offsetSize));\n               pos += offsetSize;\n           }\n\n           // The total size of the index array is 4 header bytes + the value of the last offset.\n           endOffset = objectOffset + offsets[count];\n       } else {\n           endOffset = start + 2;\n       }\n\n       return { offsets: offsets, startOffset: start, endOffset: endOffset };\n   }\n   function getCffIndexObject(i, offsets, data, start, conversionFn) {\n       var count = parse.getCard16(data, start);\n       var objectOffset = 0;\n       if (count !== 0) {\n           var offsetSize = parse.getByte(data, start + 2);\n           objectOffset = start + (count + 1) * offsetSize + 2;\n       }\n\n       var value = parse.getBytes(\n           data,\n           objectOffset + offsets[i],\n           objectOffset + offsets[i + 1]\n       );\n       if (conversionFn) {\n           value = conversionFn(value);\n       }\n       return value;\n   }\n\n   // Parse a `CFF` DICT real value.\n   function parseFloatOperand(parser) {\n       var s = '';\n       var eof = 15;\n       var lookup = [\n           '0',\n           '1',\n           '2',\n           '3',\n           '4',\n           '5',\n           '6',\n           '7',\n           '8',\n           '9',\n           '.',\n           'E',\n           'E-',\n           null,\n           '-' ];\n       while (true) {\n           var b = parser.parseByte();\n           var n1 = b >> 4;\n           var n2 = b & 15;\n\n           if (n1 === eof) {\n               break;\n           }\n\n           s += lookup[n1];\n\n           if (n2 === eof) {\n               break;\n           }\n\n           s += lookup[n2];\n       }\n\n       return parseFloat(s);\n   }\n\n   // Parse a `CFF` DICT operand.\n   function parseOperand(parser, b0) {\n       var b1;\n       var b2;\n       var b3;\n       var b4;\n       if (b0 === 28) {\n           b1 = parser.parseByte();\n           b2 = parser.parseByte();\n           return (b1 << 8) | b2;\n       }\n\n       if (b0 === 29) {\n           b1 = parser.parseByte();\n           b2 = parser.parseByte();\n           b3 = parser.parseByte();\n           b4 = parser.parseByte();\n           return (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;\n       }\n\n       if (b0 === 30) {\n           return parseFloatOperand(parser);\n       }\n\n       if (b0 >= 32 && b0 <= 246) {\n           return b0 - 139;\n       }\n\n       if (b0 >= 247 && b0 <= 250) {\n           b1 = parser.parseByte();\n           return (b0 - 247) * 256 + b1 + 108;\n       }\n\n       if (b0 >= 251 && b0 <= 254) {\n           b1 = parser.parseByte();\n           return -(b0 - 251) * 256 - b1 - 108;\n       }\n\n       throw new Error('Invalid b0 ' + b0);\n   }\n\n   // Convert the entries returned by `parseDict` to a proper dictionary.\n   // If a value is a list of one, it is unpacked.\n   function entriesToObject(entries) {\n       var o = {};\n       for (var i = 0; i < entries.length; i += 1) {\n           var key = entries[i][0];\n           var values = entries[i][1];\n           var value = (void 0);\n           if (values.length === 1) {\n               value = values[0];\n           } else {\n               value = values;\n           }\n\n           if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n               throw new Error('Object ' + o + ' already has key ' + key);\n           }\n\n           o[key] = value;\n       }\n\n       return o;\n   }\n\n   // Parse a `CFF` DICT object.\n   // A dictionary contains key-value pairs in a compact tokenized format.\n   function parseCFFDict(data, start, size) {\n       start = start !== undefined ? start : 0;\n       var parser = new parse.Parser(data, start);\n       var entries = [];\n       var operands = [];\n       size = size !== undefined ? size : data.length;\n\n       while (parser.relativeOffset < size) {\n           var op = parser.parseByte();\n\n           // The first byte for each dict item distinguishes between operator (key) and operand (value).\n           // Values <= 21 are operators.\n           if (op <= 21) {\n               // Two-byte operators have an initial escape byte of 12.\n               if (op === 12) {\n                   op = 1200 + parser.parseByte();\n               }\n\n               entries.push([op, operands]);\n               operands = [];\n           } else {\n               // Since the operands (values) come before the operators (keys), we store all operands in a list\n               // until we encounter an operator.\n               operands.push(parseOperand(parser, op));\n           }\n       }\n\n       return entriesToObject(entries);\n   }\n\n   // Given a String Index (SID), return the value of the string.\n   // Strings below index 392 are standard CFF strings and are not encoded in the font.\n   function getCFFString(strings, index) {\n       if (index <= 390) {\n           index = cffStandardStrings[index];\n       } else {\n           index = strings[index - 391];\n       }\n\n       return index;\n   }\n\n   // Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n   // This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\n   function interpretDict(dict, meta, strings) {\n       var newDict = {};\n       var value;\n\n       // Because we also want to include missing values, we start out from the meta list\n       // and lookup values in the dict.\n       for (var i = 0; i < meta.length; i += 1) {\n           var m = meta[i];\n\n           if (Array.isArray(m.type)) {\n               var values = [];\n               values.length = m.type.length;\n               for (var j = 0; j < m.type.length; j++) {\n                   value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;\n                   if (value === undefined) {\n                       value =\n                           m.value !== undefined && m.value[j] !== undefined\n                               ? m.value[j]\n                               : null;\n                   }\n                   if (m.type[j] === 'SID') {\n                       value = getCFFString(strings, value);\n                   }\n                   values[j] = value;\n               }\n               newDict[m.name] = values;\n           } else {\n               value = dict[m.op];\n               if (value === undefined) {\n                   value = m.value !== undefined ? m.value : null;\n               }\n\n               if (m.type === 'SID') {\n                   value = getCFFString(strings, value);\n               }\n               newDict[m.name] = value;\n           }\n       }\n\n       return newDict;\n   }\n\n   // Parse the CFF header.\n   function parseCFFHeader(data, start) {\n       var header = {};\n       header.formatMajor = parse.getCard8(data, start);\n       header.formatMinor = parse.getCard8(data, start + 1);\n       header.size = parse.getCard8(data, start + 2);\n       header.offsetSize = parse.getCard8(data, start + 3);\n       header.startOffset = start;\n       header.endOffset = start + 4;\n       return header;\n   }\n\n   var TOP_DICT_META = [\n       { name: 'version', op: 0, type: 'SID' },\n       { name: 'notice', op: 1, type: 'SID' },\n       { name: 'copyright', op: 1200, type: 'SID' },\n       { name: 'fullName', op: 2, type: 'SID' },\n       { name: 'familyName', op: 3, type: 'SID' },\n       { name: 'weight', op: 4, type: 'SID' },\n       { name: 'isFixedPitch', op: 1201, type: 'number', value: 0 },\n       { name: 'italicAngle', op: 1202, type: 'number', value: 0 },\n       { name: 'underlinePosition', op: 1203, type: 'number', value: -100 },\n       { name: 'underlineThickness', op: 1204, type: 'number', value: 50 },\n       { name: 'paintType', op: 1205, type: 'number', value: 0 },\n       { name: 'charstringType', op: 1206, type: 'number', value: 2 },\n       {\n           name: 'fontMatrix',\n           op: 1207,\n           type: ['real', 'real', 'real', 'real', 'real', 'real'],\n           value: [0.001, 0, 0, 0.001, 0, 0],\n       },\n       { name: 'uniqueId', op: 13, type: 'number' },\n       {\n           name: 'fontBBox',\n           op: 5,\n           type: ['number', 'number', 'number', 'number'],\n           value: [0, 0, 0, 0],\n       },\n       { name: 'strokeWidth', op: 1208, type: 'number', value: 0 },\n       { name: 'xuid', op: 14, type: [], value: null },\n       { name: 'charset', op: 15, type: 'offset', value: 0 },\n       { name: 'encoding', op: 16, type: 'offset', value: 0 },\n       { name: 'charStrings', op: 17, type: 'offset', value: 0 },\n       { name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0] },\n       { name: 'ros', op: 1230, type: ['SID', 'SID', 'number'] },\n       { name: 'cidFontVersion', op: 1231, type: 'number', value: 0 },\n       { name: 'cidFontRevision', op: 1232, type: 'number', value: 0 },\n       { name: 'cidFontType', op: 1233, type: 'number', value: 0 },\n       { name: 'cidCount', op: 1234, type: 'number', value: 8720 },\n       { name: 'uidBase', op: 1235, type: 'number' },\n       { name: 'fdArray', op: 1236, type: 'offset' },\n       { name: 'fdSelect', op: 1237, type: 'offset' },\n       { name: 'fontName', op: 1238, type: 'SID' } ];\n\n   var PRIVATE_DICT_META = [\n       { name: 'subrs', op: 19, type: 'offset', value: 0 },\n       { name: 'defaultWidthX', op: 20, type: 'number', value: 0 },\n       { name: 'nominalWidthX', op: 21, type: 'number', value: 0 } ];\n\n   // Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n   // The top dictionary contains the essential metadata for the font, together with the private dictionary.\n   function parseCFFTopDict(data, strings) {\n       var dict = parseCFFDict(data, 0, data.byteLength);\n       return interpretDict(dict, TOP_DICT_META, strings);\n   }\n\n   // Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\n   function parseCFFPrivateDict(data, start, size, strings) {\n       var dict = parseCFFDict(data, start, size);\n       return interpretDict(dict, PRIVATE_DICT_META, strings);\n   }\n\n   // Returns a list of \"Top DICT\"s found using an INDEX list.\n   // Used to read both the usual high-level Top DICTs and also the FDArray\n   // discovered inside CID-keyed fonts.  When a Top DICT has a reference to\n   // a Private DICT that is read and saved into the Top DICT.\n   //\n   // In addition to the expected/optional values as outlined in TOP_DICT_META\n   // the following values might be saved into the Top DICT.\n   //\n   //    _subrs []        array of local CFF subroutines from Private DICT\n   //    _subrsBias       bias value computed from number of subroutines\n   //                      (see calcCFFSubroutineBias() and parseCFFCharstring())\n   //    _defaultWidthX   default widths for CFF characters\n   //    _nominalWidthX   bias added to width embedded within glyph description\n   //\n   //    _privateDict     saved copy of parsed Private DICT from Top DICT\n   function gatherCFFTopDicts(data, start, cffIndex, strings) {\n       var topDictArray = [];\n       for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n           var topDictData = new DataView(\n               new Uint8Array(cffIndex[iTopDict]).buffer\n           );\n           var topDict = parseCFFTopDict(topDictData, strings);\n           topDict._subrs = [];\n           topDict._subrsBias = 0;\n           topDict._defaultWidthX = 0;\n           topDict._nominalWidthX = 0;\n           var privateSize = topDict.private[0];\n           var privateOffset = topDict.private[1];\n           if (privateSize !== 0 && privateOffset !== 0) {\n               var privateDict = parseCFFPrivateDict(\n                   data,\n                   privateOffset + start,\n                   privateSize,\n                   strings\n               );\n               topDict._defaultWidthX = privateDict.defaultWidthX;\n               topDict._nominalWidthX = privateDict.nominalWidthX;\n               if (privateDict.subrs !== 0) {\n                   var subrOffset = privateOffset + privateDict.subrs;\n                   var subrIndex = parseCFFIndex(data, subrOffset + start);\n                   topDict._subrs = subrIndex.objects;\n                   topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n               }\n               topDict._privateDict = privateDict;\n           }\n           topDictArray.push(topDict);\n       }\n       return topDictArray;\n   }\n\n   // Parse the CFF charset table, which contains internal names for all the glyphs.\n   // This function will return a list of glyph names.\n   // See Adobe TN #5176 chapter 13, \"Charsets\".\n   function parseCFFCharset(data, start, nGlyphs, strings) {\n       var sid;\n       var count;\n       var parser = new parse.Parser(data, start);\n\n       // The .notdef glyph is not included, so subtract 1.\n       nGlyphs -= 1;\n       var charset = ['.notdef'];\n\n       var format = parser.parseCard8();\n       if (format === 0) {\n           for (var i = 0; i < nGlyphs; i += 1) {\n               sid = parser.parseSID();\n               charset.push(getCFFString(strings, sid));\n           }\n       } else if (format === 1) {\n           while (charset.length <= nGlyphs) {\n               sid = parser.parseSID();\n               count = parser.parseCard8();\n               for (var i$1 = 0; i$1 <= count; i$1 += 1) {\n                   charset.push(getCFFString(strings, sid));\n                   sid += 1;\n               }\n           }\n       } else if (format === 2) {\n           while (charset.length <= nGlyphs) {\n               sid = parser.parseSID();\n               count = parser.parseCard16();\n               for (var i$2 = 0; i$2 <= count; i$2 += 1) {\n                   charset.push(getCFFString(strings, sid));\n                   sid += 1;\n               }\n           }\n       } else {\n           throw new Error('Unknown charset format ' + format);\n       }\n\n       return charset;\n   }\n\n   // Parse the CFF encoding data. Only one encoding can be specified per font.\n   // See Adobe TN #5176 chapter 12, \"Encodings\".\n   function parseCFFEncoding(data, start, charset) {\n       var code;\n       var enc = {};\n       var parser = new parse.Parser(data, start);\n       var format = parser.parseCard8();\n       if (format === 0) {\n           var nCodes = parser.parseCard8();\n           for (var i = 0; i < nCodes; i += 1) {\n               code = parser.parseCard8();\n               enc[code] = i;\n           }\n       } else if (format === 1) {\n           var nRanges = parser.parseCard8();\n           code = 1;\n           for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {\n               var first = parser.parseCard8();\n               var nLeft = parser.parseCard8();\n               for (var j = first; j <= first + nLeft; j += 1) {\n                   enc[j] = code;\n                   code += 1;\n               }\n           }\n       } else {\n           throw new Error('Unknown encoding format ' + format);\n       }\n\n       return new CffEncoding(enc, charset);\n   }\n\n   // Take in charstring code and return a Glyph object.\n   // The encoding is described in the Type 2 Charstring Format\n   // https://www.microsoft.com/typography/OTSPEC/charstr2.htm\n   function parseCFFCharstring(font, glyph, code) {\n       var c1x;\n       var c1y;\n       var c2x;\n       var c2y;\n       var p = new Path();\n       var stack = [];\n       var nStems = 0;\n       var haveWidth = false;\n       var open = false;\n       var x = 0;\n       var y = 0;\n       var subrs;\n       var subrsBias;\n       var defaultWidthX;\n       var nominalWidthX;\n       if (font.isCIDFont) {\n           var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n           var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n           subrs = fdDict._subrs;\n           subrsBias = fdDict._subrsBias;\n           defaultWidthX = fdDict._defaultWidthX;\n           nominalWidthX = fdDict._nominalWidthX;\n       } else {\n           subrs = font.tables.cff.topDict._subrs;\n           subrsBias = font.tables.cff.topDict._subrsBias;\n           defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n           nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n       }\n       var width = defaultWidthX;\n\n       function newContour(x, y) {\n           if (open) {\n               p.closePath();\n           }\n\n           p.moveTo(x, y);\n           open = true;\n       }\n\n       function parseStems() {\n           var hasWidthArg;\n\n           // The number of stem operators on the stack is always even.\n           // If the value is uneven, that means a width is specified.\n           hasWidthArg = stack.length % 2 !== 0;\n           if (hasWidthArg && !haveWidth) {\n               width = stack.shift() + nominalWidthX;\n           }\n\n           nStems += stack.length >> 1;\n           stack.length = 0;\n           haveWidth = true;\n       }\n\n       function parse(code) {\n           var b1;\n           var b2;\n           var b3;\n           var b4;\n           var codeIndex;\n           var subrCode;\n           var jpx;\n           var jpy;\n           var c3x;\n           var c3y;\n           var c4x;\n           var c4y;\n\n           var i = 0;\n           while (i < code.length) {\n               var v = code[i];\n               i += 1;\n               switch (v) {\n                   case 1: // hstem\n                       parseStems();\n                       break;\n                   case 3: // vstem\n                       parseStems();\n                       break;\n                   case 4: // vmoveto\n                       if (stack.length > 1 && !haveWidth) {\n                           width = stack.shift() + nominalWidthX;\n                           haveWidth = true;\n                       }\n\n                       y += stack.pop();\n                       newContour(x, y);\n                       break;\n                   case 5: // rlineto\n                       while (stack.length > 0) {\n                           x += stack.shift();\n                           y += stack.shift();\n                           p.lineTo(x, y);\n                       }\n\n                       break;\n                   case 6: // hlineto\n                       while (stack.length > 0) {\n                           x += stack.shift();\n                           p.lineTo(x, y);\n                           if (stack.length === 0) {\n                               break;\n                           }\n\n                           y += stack.shift();\n                           p.lineTo(x, y);\n                       }\n\n                       break;\n                   case 7: // vlineto\n                       while (stack.length > 0) {\n                           y += stack.shift();\n                           p.lineTo(x, y);\n                           if (stack.length === 0) {\n                               break;\n                           }\n\n                           x += stack.shift();\n                           p.lineTo(x, y);\n                       }\n\n                       break;\n                   case 8: // rrcurveto\n                       while (stack.length > 0) {\n                           c1x = x + stack.shift();\n                           c1y = y + stack.shift();\n                           c2x = c1x + stack.shift();\n                           c2y = c1y + stack.shift();\n                           x = c2x + stack.shift();\n                           y = c2y + stack.shift();\n                           p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                       }\n\n                       break;\n                   case 10: // callsubr\n                       codeIndex = stack.pop() + subrsBias;\n                       subrCode = subrs[codeIndex];\n                       if (subrCode) {\n                           parse(subrCode);\n                       }\n\n                       break;\n                   case 11: // return\n                       return;\n                   case 12: // flex operators\n                       v = code[i];\n                       i += 1;\n                       switch (v) {\n                           case 35: // flex\n                               // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n                               c1x = x + stack.shift(); // dx1\n                               c1y = y + stack.shift(); // dy1\n                               c2x = c1x + stack.shift(); // dx2\n                               c2y = c1y + stack.shift(); // dy2\n                               jpx = c2x + stack.shift(); // dx3\n                               jpy = c2y + stack.shift(); // dy3\n                               c3x = jpx + stack.shift(); // dx4\n                               c3y = jpy + stack.shift(); // dy4\n                               c4x = c3x + stack.shift(); // dx5\n                               c4y = c3y + stack.shift(); // dy5\n                               x = c4x + stack.shift(); // dx6\n                               y = c4y + stack.shift(); // dy6\n                               stack.shift(); // flex depth\n                               p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                               p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                               break;\n                           case 34: // hflex\n                               // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n                               c1x = x + stack.shift(); // dx1\n                               c1y = y; // dy1\n                               c2x = c1x + stack.shift(); // dx2\n                               c2y = c1y + stack.shift(); // dy2\n                               jpx = c2x + stack.shift(); // dx3\n                               jpy = c2y; // dy3\n                               c3x = jpx + stack.shift(); // dx4\n                               c3y = c2y; // dy4\n                               c4x = c3x + stack.shift(); // dx5\n                               c4y = y; // dy5\n                               x = c4x + stack.shift(); // dx6\n                               p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                               p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                               break;\n                           case 36: // hflex1\n                               // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n                               c1x = x + stack.shift(); // dx1\n                               c1y = y + stack.shift(); // dy1\n                               c2x = c1x + stack.shift(); // dx2\n                               c2y = c1y + stack.shift(); // dy2\n                               jpx = c2x + stack.shift(); // dx3\n                               jpy = c2y; // dy3\n                               c3x = jpx + stack.shift(); // dx4\n                               c3y = c2y; // dy4\n                               c4x = c3x + stack.shift(); // dx5\n                               c4y = c3y + stack.shift(); // dy5\n                               x = c4x + stack.shift(); // dx6\n                               p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                               p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                               break;\n                           case 37: // flex1\n                               // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n                               c1x = x + stack.shift(); // dx1\n                               c1y = y + stack.shift(); // dy1\n                               c2x = c1x + stack.shift(); // dx2\n                               c2y = c1y + stack.shift(); // dy2\n                               jpx = c2x + stack.shift(); // dx3\n                               jpy = c2y + stack.shift(); // dy3\n                               c3x = jpx + stack.shift(); // dx4\n                               c3y = jpy + stack.shift(); // dy4\n                               c4x = c3x + stack.shift(); // dx5\n                               c4y = c3y + stack.shift(); // dy5\n                               if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                                   x = c4x + stack.shift();\n                               } else {\n                                   y = c4y + stack.shift();\n                               }\n\n                               p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                               p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                               break;\n                           default:\n                               console.log(\n                                   'Glyph ' +\n                                       glyph.index +\n                                       ': unknown operator ' +\n                                       1200 +\n                                       v\n                               );\n                               stack.length = 0;\n                       }\n                       break;\n                   case 14: // endchar\n                       if (stack.length > 0 && !haveWidth) {\n                           width = stack.shift() + nominalWidthX;\n                           haveWidth = true;\n                       }\n\n                       if (open) {\n                           p.closePath();\n                           open = false;\n                       }\n\n                       break;\n                   case 18: // hstemhm\n                       parseStems();\n                       break;\n                   case 19: // hintmask\n                   case 20: // cntrmask\n                       parseStems();\n                       i += (nStems + 7) >> 3;\n                       break;\n                   case 21: // rmoveto\n                       if (stack.length > 2 && !haveWidth) {\n                           width = stack.shift() + nominalWidthX;\n                           haveWidth = true;\n                       }\n\n                       y += stack.pop();\n                       x += stack.pop();\n                       newContour(x, y);\n                       break;\n                   case 22: // hmoveto\n                       if (stack.length > 1 && !haveWidth) {\n                           width = stack.shift() + nominalWidthX;\n                           haveWidth = true;\n                       }\n\n                       x += stack.pop();\n                       newContour(x, y);\n                       break;\n                   case 23: // vstemhm\n                       parseStems();\n                       break;\n                   case 24: // rcurveline\n                       while (stack.length > 2) {\n                           c1x = x + stack.shift();\n                           c1y = y + stack.shift();\n                           c2x = c1x + stack.shift();\n                           c2y = c1y + stack.shift();\n                           x = c2x + stack.shift();\n                           y = c2y + stack.shift();\n                           p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                       }\n\n                       x += stack.shift();\n                       y += stack.shift();\n                       p.lineTo(x, y);\n                       break;\n                   case 25: // rlinecurve\n                       while (stack.length > 6) {\n                           x += stack.shift();\n                           y += stack.shift();\n                           p.lineTo(x, y);\n                       }\n\n                       c1x = x + stack.shift();\n                       c1y = y + stack.shift();\n                       c2x = c1x + stack.shift();\n                       c2y = c1y + stack.shift();\n                       x = c2x + stack.shift();\n                       y = c2y + stack.shift();\n                       p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                       break;\n                   case 26: // vvcurveto\n                       if (stack.length % 2) {\n                           x += stack.shift();\n                       }\n\n                       while (stack.length > 0) {\n                           c1x = x;\n                           c1y = y + stack.shift();\n                           c2x = c1x + stack.shift();\n                           c2y = c1y + stack.shift();\n                           x = c2x;\n                           y = c2y + stack.shift();\n                           p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                       }\n\n                       break;\n                   case 27: // hhcurveto\n                       if (stack.length % 2) {\n                           y += stack.shift();\n                       }\n\n                       while (stack.length > 0) {\n                           c1x = x + stack.shift();\n                           c1y = y;\n                           c2x = c1x + stack.shift();\n                           c2y = c1y + stack.shift();\n                           x = c2x + stack.shift();\n                           y = c2y;\n                           p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                       }\n\n                       break;\n                   case 28: // shortint\n                       b1 = code[i];\n                       b2 = code[i + 1];\n                       stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n                       i += 2;\n                       break;\n                   case 29: // callgsubr\n                       codeIndex = stack.pop() + font.gsubrsBias;\n                       subrCode = font.gsubrs[codeIndex];\n                       if (subrCode) {\n                           parse(subrCode);\n                       }\n\n                       break;\n                   case 30: // vhcurveto\n                       while (stack.length > 0) {\n                           c1x = x;\n                           c1y = y + stack.shift();\n                           c2x = c1x + stack.shift();\n                           c2y = c1y + stack.shift();\n                           x = c2x + stack.shift();\n                           y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                           p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                           if (stack.length === 0) {\n                               break;\n                           }\n\n                           c1x = x + stack.shift();\n                           c1y = y;\n                           c2x = c1x + stack.shift();\n                           c2y = c1y + stack.shift();\n                           y = c2y + stack.shift();\n                           x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                           p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                       }\n\n                       break;\n                   case 31: // hvcurveto\n                       while (stack.length > 0) {\n                           c1x = x + stack.shift();\n                           c1y = y;\n                           c2x = c1x + stack.shift();\n                           c2y = c1y + stack.shift();\n                           y = c2y + stack.shift();\n                           x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                           p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                           if (stack.length === 0) {\n                               break;\n                           }\n\n                           c1x = x;\n                           c1y = y + stack.shift();\n                           c2x = c1x + stack.shift();\n                           c2y = c1y + stack.shift();\n                           x = c2x + stack.shift();\n                           y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                           p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                       }\n\n                       break;\n                   default:\n                       if (v < 32) {\n                           console.log(\n                               'Glyph ' + glyph.index + ': unknown operator ' + v\n                           );\n                       } else if (v < 247) {\n                           stack.push(v - 139);\n                       } else if (v < 251) {\n                           b1 = code[i];\n                           i += 1;\n                           stack.push((v - 247) * 256 + b1 + 108);\n                       } else if (v < 255) {\n                           b1 = code[i];\n                           i += 1;\n                           stack.push(-(v - 251) * 256 - b1 - 108);\n                       } else {\n                           b1 = code[i];\n                           b2 = code[i + 1];\n                           b3 = code[i + 2];\n                           b4 = code[i + 3];\n                           i += 4;\n                           stack.push(\n                               ((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536\n                           );\n                       }\n               }\n           }\n       }\n\n       parse(code);\n\n       glyph.advanceWidth = width;\n       return p;\n   }\n\n   function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n       var fdSelect = [];\n       var fdIndex;\n       var parser = new parse.Parser(data, start);\n       var format = parser.parseCard8();\n       if (format === 0) {\n           // Simple list of nGlyphs elements\n           for (var iGid = 0; iGid < nGlyphs; iGid++) {\n               fdIndex = parser.parseCard8();\n               if (fdIndex >= fdArrayCount) {\n                   throw new Error(\n                       'CFF table CID Font FDSelect has bad FD index value ' +\n                           fdIndex +\n                           ' (FD count ' +\n                           fdArrayCount +\n                           ')'\n                   );\n               }\n               fdSelect.push(fdIndex);\n           }\n       } else if (format === 3) {\n           // Ranges\n           var nRanges = parser.parseCard16();\n           var first = parser.parseCard16();\n           if (first !== 0) {\n               throw new Error(\n                   'CFF Table CID Font FDSelect format 3 range has bad initial GID ' +\n                       first\n               );\n           }\n           var next;\n           for (var iRange = 0; iRange < nRanges; iRange++) {\n               fdIndex = parser.parseCard8();\n               next = parser.parseCard16();\n               if (fdIndex >= fdArrayCount) {\n                   throw new Error(\n                       'CFF table CID Font FDSelect has bad FD index value ' +\n                           fdIndex +\n                           ' (FD count ' +\n                           fdArrayCount +\n                           ')'\n                   );\n               }\n               if (next > nGlyphs) {\n                   throw new Error(\n                       'CFF Table CID Font FDSelect format 3 range has bad GID ' +\n                           next\n                   );\n               }\n               for (; first < next; first++) {\n                   fdSelect.push(fdIndex);\n               }\n               first = next;\n           }\n           if (next !== nGlyphs) {\n               throw new Error(\n                   'CFF Table CID Font FDSelect format 3 range has bad final GID ' +\n                       next\n               );\n           }\n       } else {\n           throw new Error(\n               'CFF Table CID Font FDSelect table has unsupported format ' + format\n           );\n       }\n       return fdSelect;\n   }\n\n   // Parse the `CFF` table, which contains the glyph outlines in PostScript format.\n   function parseCFFTable(data, start, font, opt) {\n       font.tables.cff = {};\n       var header = parseCFFHeader(data, start);\n       var nameIndex = parseCFFIndex(\n           data,\n           header.endOffset,\n           parse.bytesToString\n       );\n       var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n       var stringIndex = parseCFFIndex(\n           data,\n           topDictIndex.endOffset,\n           parse.bytesToString\n       );\n       var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n       font.gsubrs = globalSubrIndex.objects;\n       font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n       var topDictArray = gatherCFFTopDicts(\n           data,\n           start,\n           topDictIndex.objects,\n           stringIndex.objects\n       );\n       if (topDictArray.length !== 1) {\n           throw new Error(\n               \"CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = \" +\n                   topDictArray.length\n           );\n       }\n\n       var topDict = topDictArray[0];\n       font.tables.cff.topDict = topDict;\n\n       if (topDict._privateDict) {\n           font.defaultWidthX = topDict._privateDict.defaultWidthX;\n           font.nominalWidthX = topDict._privateDict.nominalWidthX;\n       }\n\n       if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {\n           font.isCIDFont = true;\n       }\n\n       if (font.isCIDFont) {\n           var fdArrayOffset = topDict.fdArray;\n           var fdSelectOffset = topDict.fdSelect;\n           if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n               throw new Error(\n                   'Font is marked as a CID font, but FDArray and/or FDSelect information is missing'\n               );\n           }\n           fdArrayOffset += start;\n           var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n           var fdArray = gatherCFFTopDicts(\n               data,\n               start,\n               fdArrayIndex.objects,\n               stringIndex.objects\n           );\n           topDict._fdArray = fdArray;\n           fdSelectOffset += start;\n           topDict._fdSelect = parseCFFFDSelect(\n               data,\n               fdSelectOffset,\n               font.numGlyphs,\n               fdArray.length\n           );\n       }\n\n       var privateDictOffset = start + topDict.private[1];\n       var privateDict = parseCFFPrivateDict(\n           data,\n           privateDictOffset,\n           topDict.private[0],\n           stringIndex.objects\n       );\n       font.defaultWidthX = privateDict.defaultWidthX;\n       font.nominalWidthX = privateDict.nominalWidthX;\n\n       if (privateDict.subrs !== 0) {\n           var subrOffset = privateDictOffset + privateDict.subrs;\n           var subrIndex = parseCFFIndex(data, subrOffset);\n           font.subrs = subrIndex.objects;\n           font.subrsBias = calcCFFSubroutineBias(font.subrs);\n       } else {\n           font.subrs = [];\n           font.subrsBias = 0;\n       }\n\n       // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n       var charStringsIndex;\n       if (opt.lowMemory) {\n           charStringsIndex = parseCFFIndexLowMemory(\n               data,\n               start + topDict.charStrings\n           );\n           font.nGlyphs = charStringsIndex.offsets.length;\n       } else {\n           charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n           font.nGlyphs = charStringsIndex.objects.length;\n       }\n\n       var charset = parseCFFCharset(\n           data,\n           start + topDict.charset,\n           font.nGlyphs,\n           stringIndex.objects\n       );\n       if (topDict.encoding === 0) {\n           // Standard encoding\n           font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n       } else if (topDict.encoding === 1) {\n           // Expert encoding\n           font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n       } else {\n           font.cffEncoding = parseCFFEncoding(\n               data,\n               start + topDict.encoding,\n               charset\n           );\n       }\n\n       // Prefer the CMAP encoding to the CFF encoding.\n       font.encoding = font.encoding || font.cffEncoding;\n\n       font.glyphs = new glyphset.GlyphSet(font);\n       if (opt.lowMemory) {\n           font._push = function (i) {\n               var charString = getCffIndexObject(\n                   i,\n                   charStringsIndex.offsets,\n                   data,\n                   start + topDict.charStrings\n               );\n               font.glyphs.push(\n                   i,\n                   glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString)\n               );\n           };\n       } else {\n           for (var i = 0; i < font.nGlyphs; i += 1) {\n               var charString = charStringsIndex.objects[i];\n               font.glyphs.push(\n                   i,\n                   glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString)\n               );\n           }\n       }\n   }\n\n   var cff = { parse: parseCFFTable };\n\n   // The `fvar` table stores font variation axes and instances.\n\n   function parseFvarAxis(data, start, names) {\n       var axis = {};\n       var p = new parse.Parser(data, start);\n       axis.tag = p.parseTag();\n       axis.minValue = p.parseFixed();\n       axis.defaultValue = p.parseFixed();\n       axis.maxValue = p.parseFixed();\n       p.skip('uShort', 1); // reserved for flags; no values defined\n       axis.name = names[p.parseUShort()] || {};\n       return axis;\n   }\n\n   function parseFvarInstance(data, start, axes, names) {\n       var inst = {};\n       var p = new parse.Parser(data, start);\n       inst.name = names[p.parseUShort()] || {};\n       p.skip('uShort', 1); // reserved for flags; no values defined\n\n       inst.coordinates = {};\n       for (var i = 0; i < axes.length; ++i) {\n           inst.coordinates[axes[i].tag] = p.parseFixed();\n       }\n\n       return inst;\n   }\n\n   function parseFvarTable(data, start, names) {\n       var p = new parse.Parser(data, start);\n       var tableVersion = p.parseULong();\n       check.argument(\n           tableVersion === 0x00010000,\n           'Unsupported fvar table version.'\n       );\n       var offsetToData = p.parseOffset16();\n       // Skip countSizePairs.\n       p.skip('uShort', 1);\n       var axisCount = p.parseUShort();\n       var axisSize = p.parseUShort();\n       var instanceCount = p.parseUShort();\n       var instanceSize = p.parseUShort();\n\n       var axes = [];\n       for (var i = 0; i < axisCount; i++) {\n           axes.push(\n               parseFvarAxis(data, start + offsetToData + i * axisSize, names)\n           );\n       }\n\n       var instances = [];\n       var instanceStart = start + offsetToData + axisCount * axisSize;\n       for (var j = 0; j < instanceCount; j++) {\n           instances.push(\n               parseFvarInstance(\n                   data,\n                   instanceStart + j * instanceSize,\n                   axes,\n                   names\n               )\n           );\n       }\n\n       return { axes: axes, instances: instances };\n   }\n\n   var fvar = { parse: parseFvarTable };\n\n   // The `GDEF` table contains various glyph properties\n\n   var attachList = function() {\n       return {\n           coverage: this.parsePointer(Parser.coverage),\n           attachPoints: this.parseList(Parser.pointer(Parser.uShortList))\n       };\n   };\n\n   var caretValue = function() {\n       var format = this.parseUShort();\n       check.argument(format === 1 || format === 2 || format === 3,\n           'Unsupported CaretValue table version.');\n       if (format === 1) {\n           return { coordinate: this.parseShort() };\n       } else if (format === 2) {\n           return { pointindex: this.parseShort() };\n       } else if (format === 3) {\n           // Device / Variation Index tables unsupported\n           return { coordinate: this.parseShort() };\n       }\n   };\n\n   var ligGlyph = function() {\n       return this.parseList(Parser.pointer(caretValue));\n   };\n\n   var ligCaretList = function() {\n       return {\n           coverage: this.parsePointer(Parser.coverage),\n           ligGlyphs: this.parseList(Parser.pointer(ligGlyph))\n       };\n   };\n\n   var markGlyphSets = function() {\n       this.parseUShort(); // Version\n       return this.parseList(Parser.pointer(Parser.coverage));\n   };\n\n   function parseGDEFTable(data, start) {\n       start = start || 0;\n       var p = new Parser(data, start);\n       var tableVersion = p.parseVersion(1);\n       check.argument(tableVersion === 1 || tableVersion === 1.2 || tableVersion === 1.3,\n           'Unsupported GDEF table version.');\n       var gdef = {\n           version: tableVersion,\n           classDef: p.parsePointer(Parser.classDef),\n           attachList: p.parsePointer(attachList),\n           ligCaretList: p.parsePointer(ligCaretList),\n           markAttachClassDef: p.parsePointer(Parser.classDef)\n       };\n       if (tableVersion >= 1.2) {\n           gdef.markGlyphSets = p.parsePointer(markGlyphSets);\n       }\n       return gdef;\n   }\n   var gdef = { parse: parseGDEFTable };\n\n   // The `GPOS` table contains kerning pairs, among other things.\n\n   var subtableParsers = new Array(10); // subtableParsers[0] is unused\n\n   // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable\n   // this = Parser instance\n   subtableParsers[1] = function parseLookup1() {\n       var start = this.offset + this.relativeOffset;\n       var posformat = this.parseUShort();\n       if (posformat === 1) {\n           return {\n               posFormat: 1,\n               coverage: this.parsePointer(Parser.coverage),\n               value: this.parseValueRecord(),\n           };\n       } else if (posformat === 2) {\n           return {\n               posFormat: 2,\n               coverage: this.parsePointer(Parser.coverage),\n               values: this.parseValueRecordList(),\n           };\n       }\n       check.assert(\n           false,\n           '0x' +\n               start.toString(16) +\n               ': GPOS lookup type 1 format must be 1 or 2.'\n       );\n   };\n\n   // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable\n   subtableParsers[2] = function parseLookup2() {\n       var start = this.offset + this.relativeOffset;\n       var posFormat = this.parseUShort();\n       check.assert(\n           posFormat === 1 || posFormat === 2,\n           '0x' +\n               start.toString(16) +\n               ': GPOS lookup type 2 format must be 1 or 2.'\n       );\n       var coverage = this.parsePointer(Parser.coverage);\n       var valueFormat1 = this.parseUShort();\n       var valueFormat2 = this.parseUShort();\n       if (posFormat === 1) {\n           // Adjustments for Glyph Pairs\n           return {\n               posFormat: posFormat,\n               coverage: coverage,\n               valueFormat1: valueFormat1,\n               valueFormat2: valueFormat2,\n               pairSets: this.parseList(\n                   Parser.pointer(\n                       Parser.list(function () {\n                           return {\n                               // pairValueRecord\n                               secondGlyph: this.parseUShort(),\n                               value1: this.parseValueRecord(valueFormat1),\n                               value2: this.parseValueRecord(valueFormat2),\n                           };\n                       })\n                   )\n               ),\n           };\n       } else if (posFormat === 2) {\n           var classDef1 = this.parsePointer(Parser.classDef);\n           var classDef2 = this.parsePointer(Parser.classDef);\n           var class1Count = this.parseUShort();\n           var class2Count = this.parseUShort();\n           return {\n               // Class Pair Adjustment\n               posFormat: posFormat,\n               coverage: coverage,\n               valueFormat1: valueFormat1,\n               valueFormat2: valueFormat2,\n               classDef1: classDef1,\n               classDef2: classDef2,\n               class1Count: class1Count,\n               class2Count: class2Count,\n               classRecords: this.parseList(\n                   class1Count,\n                   Parser.list(class2Count, function () {\n                       return {\n                           value1: this.parseValueRecord(valueFormat1),\n                           value2: this.parseValueRecord(valueFormat2),\n                       };\n                   })\n               ),\n           };\n       }\n   };\n\n   subtableParsers[3] = function parseLookup3() {\n       return { error: 'GPOS Lookup 3 not supported' };\n   };\n   subtableParsers[4] = function parseLookup4() {\n       return { error: 'GPOS Lookup 4 not supported' };\n   };\n   subtableParsers[5] = function parseLookup5() {\n       return { error: 'GPOS Lookup 5 not supported' };\n   };\n   subtableParsers[6] = function parseLookup6() {\n       return { error: 'GPOS Lookup 6 not supported' };\n   };\n   subtableParsers[7] = function parseLookup7() {\n       return { error: 'GPOS Lookup 7 not supported' };\n   };\n   subtableParsers[8] = function parseLookup8() {\n       return { error: 'GPOS Lookup 8 not supported' };\n   };\n   subtableParsers[9] = function parseLookup9() {\n       return { error: 'GPOS Lookup 9 not supported' };\n   };\n\n   // https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\n   function parseGposTable(data, start) {\n       start = start || 0;\n       var p = new Parser(data, start);\n       var tableVersion = p.parseVersion(1);\n       check.argument(\n           tableVersion === 1 || tableVersion === 1.1,\n           'Unsupported GPOS table version ' + tableVersion\n       );\n\n       if (tableVersion === 1) {\n           return {\n               version: tableVersion,\n               scripts: p.parseScriptList(),\n               features: p.parseFeatureList(),\n               lookups: p.parseLookupList(subtableParsers),\n           };\n       } else {\n           return {\n               version: tableVersion,\n               scripts: p.parseScriptList(),\n               features: p.parseFeatureList(),\n               lookups: p.parseLookupList(subtableParsers),\n               variations: p.parseFeatureVariationsList(),\n           };\n       }\n   }\n\n   var gpos = { parse: parseGposTable };\n\n   // The `GSUB` table contains ligatures, among other things.\n\n   var subtableParsers$1 = new Array(9); // subtableParsers[0] is unused\n\n   // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\n   subtableParsers$1[1] = function parseLookup1() {\n       var start = this.offset + this.relativeOffset;\n       var substFormat = this.parseUShort();\n       if (substFormat === 1) {\n           return {\n               substFormat: 1,\n               coverage: this.parsePointer(Parser.coverage),\n               deltaGlyphId: this.parseUShort(),\n           };\n       } else if (substFormat === 2) {\n           return {\n               substFormat: 2,\n               coverage: this.parsePointer(Parser.coverage),\n               substitute: this.parseOffset16List(),\n           };\n       }\n       check.assert(\n           false,\n           '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.'\n       );\n   };\n\n   // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\n   subtableParsers$1[2] = function parseLookup2() {\n       var substFormat = this.parseUShort();\n       check.argument(\n           substFormat === 1,\n           'GSUB Multiple Substitution Subtable identifier-format must be 1'\n       );\n       return {\n           substFormat: substFormat,\n           coverage: this.parsePointer(Parser.coverage),\n           sequences: this.parseListOfLists(),\n       };\n   };\n\n   // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\n   subtableParsers$1[3] = function parseLookup3() {\n       var substFormat = this.parseUShort();\n       check.argument(\n           substFormat === 1,\n           'GSUB Alternate Substitution Subtable identifier-format must be 1'\n       );\n       return {\n           substFormat: substFormat,\n           coverage: this.parsePointer(Parser.coverage),\n           alternateSets: this.parseListOfLists(),\n       };\n   };\n\n   // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\n   subtableParsers$1[4] = function parseLookup4() {\n       var substFormat = this.parseUShort();\n       check.argument(\n           substFormat === 1,\n           'GSUB ligature table identifier-format must be 1'\n       );\n       return {\n           substFormat: substFormat,\n           coverage: this.parsePointer(Parser.coverage),\n           ligatureSets: this.parseListOfLists(function () {\n               return {\n                   ligGlyph: this.parseUShort(),\n                   components: this.parseUShortList(this.parseUShort() - 1),\n               };\n           }),\n       };\n   };\n\n   var lookupRecordDesc = {\n       sequenceIndex: Parser.uShort,\n       lookupListIndex: Parser.uShort,\n   };\n\n   // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\n   subtableParsers$1[5] = function parseLookup5() {\n       var start = this.offset + this.relativeOffset;\n       var substFormat = this.parseUShort();\n\n       if (substFormat === 1) {\n           return {\n               substFormat: substFormat,\n               coverage: this.parsePointer(Parser.coverage),\n               ruleSets: this.parseListOfLists(function () {\n                   var glyphCount = this.parseUShort();\n                   var substCount = this.parseUShort();\n                   return {\n                       input: this.parseUShortList(glyphCount - 1),\n                       lookupRecords: this.parseRecordList(\n                           substCount,\n                           lookupRecordDesc\n                       ),\n                   };\n               }),\n           };\n       } else if (substFormat === 2) {\n           return {\n               substFormat: substFormat,\n               coverage: this.parsePointer(Parser.coverage),\n               classDef: this.parsePointer(Parser.classDef),\n               classSets: this.parseListOfLists(function () {\n                   var glyphCount = this.parseUShort();\n                   var substCount = this.parseUShort();\n                   return {\n                       classes: this.parseUShortList(glyphCount - 1),\n                       lookupRecords: this.parseRecordList(\n                           substCount,\n                           lookupRecordDesc\n                       ),\n                   };\n               }),\n           };\n       } else if (substFormat === 3) {\n           var glyphCount = this.parseUShort();\n           var substCount = this.parseUShort();\n           return {\n               substFormat: substFormat,\n               coverages: this.parseList(\n                   glyphCount,\n                   Parser.pointer(Parser.coverage)\n               ),\n               lookupRecords: this.parseRecordList(substCount, lookupRecordDesc),\n           };\n       }\n       check.assert(\n           false,\n           '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.'\n       );\n   };\n\n   // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\n   subtableParsers$1[6] = function parseLookup6() {\n       var start = this.offset + this.relativeOffset;\n       var substFormat = this.parseUShort();\n       if (substFormat === 1) {\n           return {\n               substFormat: 1,\n               coverage: this.parsePointer(Parser.coverage),\n               chainRuleSets: this.parseListOfLists(function () {\n                   return {\n                       backtrack: this.parseUShortList(),\n                       input: this.parseUShortList(this.parseShort() - 1),\n                       lookahead: this.parseUShortList(),\n                       lookupRecords: this.parseRecordList(lookupRecordDesc),\n                   };\n               }),\n           };\n       } else if (substFormat === 2) {\n           return {\n               substFormat: 2,\n               coverage: this.parsePointer(Parser.coverage),\n               backtrackClassDef: this.parsePointer(Parser.classDef),\n               inputClassDef: this.parsePointer(Parser.classDef),\n               lookaheadClassDef: this.parsePointer(Parser.classDef),\n               chainClassSet: this.parseListOfLists(function () {\n                   return {\n                       backtrack: this.parseUShortList(),\n                       input: this.parseUShortList(this.parseShort() - 1),\n                       lookahead: this.parseUShortList(),\n                       lookupRecords: this.parseRecordList(lookupRecordDesc),\n                   };\n               }),\n           };\n       } else if (substFormat === 3) {\n           return {\n               substFormat: 3,\n               backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n               inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n               lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n               lookupRecords: this.parseRecordList(lookupRecordDesc),\n           };\n       }\n       check.assert(\n           false,\n           '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.'\n       );\n   };\n\n   // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\n   subtableParsers$1[7] = function parseLookup7() {\n       // Extension Substitution subtable\n       var substFormat = this.parseUShort();\n       check.argument(\n           substFormat === 1,\n           'GSUB Extension Substitution subtable identifier-format must be 1'\n       );\n       var extensionLookupType = this.parseUShort();\n       var extensionParser = new Parser(\n           this.data,\n           this.offset + this.parseULong()\n       );\n       return {\n           substFormat: 1,\n           lookupType: extensionLookupType,\n           extension: subtableParsers$1[extensionLookupType].call(extensionParser),\n       };\n   };\n\n   // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\n   subtableParsers$1[8] = function parseLookup8() {\n       var substFormat = this.parseUShort();\n       check.argument(\n           substFormat === 1,\n           'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1'\n       );\n       return {\n           substFormat: substFormat,\n           coverage: this.parsePointer(Parser.coverage),\n           backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n           lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n           substitutes: this.parseUShortList(),\n       };\n   };\n\n   // https://www.microsoft.com/typography/OTSPEC/gsub.htm\n   function parseGsubTable(data, start) {\n       start = start || 0;\n       var p = new Parser(data, start);\n       var tableVersion = p.parseVersion(1);\n       check.argument(\n           tableVersion === 1 || tableVersion === 1.1,\n           'Unsupported GSUB table version.'\n       );\n       if (tableVersion === 1) {\n           return {\n               version: tableVersion,\n               scripts: p.parseScriptList(),\n               features: p.parseFeatureList(),\n               lookups: p.parseLookupList(subtableParsers$1),\n           };\n       } else {\n           return {\n               version: tableVersion,\n               scripts: p.parseScriptList(),\n               features: p.parseFeatureList(),\n               lookups: p.parseLookupList(subtableParsers$1),\n               variations: p.parseFeatureVariationsList(),\n           };\n       }\n   }\n\n   var gsub = { parse: parseGsubTable };\n\n   // The `head` table contains global information about the font.\n\n   // Parse the header `head` table\n   function parseHeadTable(data, start) {\n       var head = {};\n       var p = new parse.Parser(data, start);\n       head.version = p.parseVersion();\n       head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n       head.checkSumAdjustment = p.parseULong();\n       head.magicNumber = p.parseULong();\n       check.argument(\n           head.magicNumber === 0x5f0f3cf5,\n           'Font header has wrong magic number.'\n       );\n       head.flags = p.parseUShort();\n       head.unitsPerEm = p.parseUShort();\n       head.created = p.parseLongDateTime();\n       head.modified = p.parseLongDateTime();\n       head.xMin = p.parseShort();\n       head.yMin = p.parseShort();\n       head.xMax = p.parseShort();\n       head.yMax = p.parseShort();\n       head.macStyle = p.parseUShort();\n       head.lowestRecPPEM = p.parseUShort();\n       head.fontDirectionHint = p.parseShort();\n       head.indexToLocFormat = p.parseShort();\n       head.glyphDataFormat = p.parseShort();\n       return head;\n   }\n\n   var head = { parse: parseHeadTable };\n\n   // The `hhea` table contains information for horizontal layout.\n\n   // Parse the horizontal header `hhea` table\n   function parseHheaTable(data, start) {\n       var hhea = {};\n       var p = new parse.Parser(data, start);\n       hhea.version = p.parseVersion();\n       hhea.ascender = p.parseShort();\n       hhea.descender = p.parseShort();\n       hhea.lineGap = p.parseShort();\n       hhea.advanceWidthMax = p.parseUShort();\n       hhea.minLeftSideBearing = p.parseShort();\n       hhea.minRightSideBearing = p.parseShort();\n       hhea.xMaxExtent = p.parseShort();\n       hhea.caretSlopeRise = p.parseShort();\n       hhea.caretSlopeRun = p.parseShort();\n       hhea.caretOffset = p.parseShort();\n       p.relativeOffset += 8;\n       hhea.metricDataFormat = p.parseShort();\n       hhea.numberOfHMetrics = p.parseUShort();\n       return hhea;\n   }\n\n   var hhea = { parse: parseHheaTable };\n\n   // The `hmtx` table contains the horizontal metrics for all glyphs.\n\n   function parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs) {\n       var advanceWidth;\n       var leftSideBearing;\n       var p = new parse.Parser(data, start);\n       for (var i = 0; i < numGlyphs; i += 1) {\n           // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n           if (i < numMetrics) {\n               advanceWidth = p.parseUShort();\n               leftSideBearing = p.parseShort();\n           }\n\n           var glyph = glyphs.get(i);\n           glyph.advanceWidth = advanceWidth;\n           glyph.leftSideBearing = leftSideBearing;\n       }\n   }\n\n   function parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs) {\n       font._hmtxTableData = {};\n\n       var advanceWidth;\n       var leftSideBearing;\n       var p = new parse.Parser(data, start);\n       for (var i = 0; i < numGlyphs; i += 1) {\n           // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n           if (i < numMetrics) {\n               advanceWidth = p.parseUShort();\n               leftSideBearing = p.parseShort();\n           }\n\n           font._hmtxTableData[i] = {\n               advanceWidth: advanceWidth,\n               leftSideBearing: leftSideBearing,\n           };\n       }\n   }\n\n   // Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n   // This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\n   function parseHmtxTable(font, data, start, numMetrics, numGlyphs, glyphs, opt) {\n       if (opt.lowMemory)\n           { parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs); }\n       else { parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs); }\n   }\n\n   var hmtx = { parse: parseHmtxTable };\n\n   // The `kern` table contains kerning pairs.\n\n   function parseWindowsKernTable(p) {\n       var pairs = {};\n       // Skip nTables.\n       p.skip('uShort');\n       var subtableVersion = p.parseUShort();\n       check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');\n       // Skip subtableLength, subtableCoverage\n       p.skip('uShort', 2);\n       var nPairs = p.parseUShort();\n       // Skip searchRange, entrySelector, rangeShift.\n       p.skip('uShort', 3);\n       for (var i = 0; i < nPairs; i += 1) {\n           var leftIndex = p.parseUShort();\n           var rightIndex = p.parseUShort();\n           var value = p.parseShort();\n           pairs[leftIndex + ',' + rightIndex] = value;\n       }\n       return pairs;\n   }\n\n   function parseMacKernTable(p) {\n       var pairs = {};\n       // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n       // Skip the rest.\n       p.skip('uShort');\n       var nTables = p.parseULong();\n       //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n       if (nTables > 1) {\n           console.warn('Only the first kern subtable is supported.');\n       }\n       p.skip('uLong');\n       var coverage = p.parseUShort();\n       var subtableVersion = coverage & 0xFF;\n       p.skip('uShort');\n       if (subtableVersion === 0) {\n           var nPairs = p.parseUShort();\n           // Skip searchRange, entrySelector, rangeShift.\n           p.skip('uShort', 3);\n           for (var i = 0; i < nPairs; i += 1) {\n               var leftIndex = p.parseUShort();\n               var rightIndex = p.parseUShort();\n               var value = p.parseShort();\n               pairs[leftIndex + ',' + rightIndex] = value;\n           }\n       }\n       return pairs;\n   }\n\n   // Parse the `kern` table which contains kerning pairs.\n   function parseKernTable(data, start) {\n       var p = new parse.Parser(data, start);\n       var tableVersion = p.parseUShort();\n       if (tableVersion === 0) {\n           return parseWindowsKernTable(p);\n       } else if (tableVersion === 1) {\n           return parseMacKernTable(p);\n       } else {\n           throw new Error('Unsupported kern table version (' + tableVersion + ').');\n       }\n   }\n\n   var kern = { parse: parseKernTable };\n\n   // The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n\n   function parseLtagTable(data, start) {\n       var p = new parse.Parser(data, start);\n       var tableVersion = p.parseULong();\n       check.argument(tableVersion === 1, 'Unsupported ltag table version.');\n       // The 'ltag' specification does not define any flags; skip the field.\n       p.skip('uLong', 1);\n       var numTags = p.parseULong();\n\n       var tags = [];\n       for (var i = 0; i < numTags; i++) {\n           var tag = '';\n           var offset = start + p.parseUShort();\n           var length = p.parseUShort();\n           for (var j = offset; j < offset + length; ++j) {\n               tag += String.fromCharCode(data.getInt8(j));\n           }\n\n           tags.push(tag);\n       }\n\n       return tags;\n   }\n\n   var ltag = { parse: parseLtagTable };\n\n   // The `loca` table stores the offsets to the locations of the glyphs in the font.\n\n   // Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n   // relative to the beginning of the glyphData table.\n   // The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n   // The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n   // version where offsets are stored as uLongs. The `head` table specifies which version to use\n   // (under indexToLocFormat).\n   function parseLocaTable(data, start, numGlyphs, shortVersion) {\n       var p = new parse.Parser(data, start);\n       var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n       // There is an extra entry after the last index element to compute the length of the last glyph.\n       // That's why we use numGlyphs + 1.\n       var glyphOffsets = [];\n       for (var i = 0; i < numGlyphs + 1; i += 1) {\n           var glyphOffset = parseFn.call(p);\n           if (shortVersion) {\n               // The short table version stores the actual offset divided by 2.\n               glyphOffset *= 2;\n           }\n\n           glyphOffsets.push(glyphOffset);\n       }\n\n       return glyphOffsets;\n   }\n\n   var loca = { parse: parseLocaTable };\n\n   // The `maxp` table establishes the memory requirements for the font.\n\n   // Parse the maximum profile `maxp` table.\n   function parseMaxpTable(data, start) {\n       var maxp = {};\n       var p = new parse.Parser(data, start);\n       maxp.version = p.parseVersion();\n       maxp.numGlyphs = p.parseUShort();\n       if (maxp.version === 1.0) {\n           maxp.maxPoints = p.parseUShort();\n           maxp.maxContours = p.parseUShort();\n           maxp.maxCompositePoints = p.parseUShort();\n           maxp.maxCompositeContours = p.parseUShort();\n           maxp.maxZones = p.parseUShort();\n           maxp.maxTwilightPoints = p.parseUShort();\n           maxp.maxStorage = p.parseUShort();\n           maxp.maxFunctionDefs = p.parseUShort();\n           maxp.maxInstructionDefs = p.parseUShort();\n           maxp.maxStackElements = p.parseUShort();\n           maxp.maxSizeOfInstructions = p.parseUShort();\n           maxp.maxComponentElements = p.parseUShort();\n           maxp.maxComponentDepth = p.parseUShort();\n       }\n\n       return maxp;\n   }\n\n   var maxp = { parse: parseMaxpTable };\n\n   // The `OS/2` table contains metrics required in OpenType fonts.\n\n   // Parse the OS/2 and Windows metrics `OS/2` table\n   function parseOS2Table(data, start) {\n       var os2 = {};\n       var p = new parse.Parser(data, start);\n       os2.version = p.parseUShort();\n       os2.xAvgCharWidth = p.parseShort();\n       os2.usWeightClass = p.parseUShort();\n       os2.usWidthClass = p.parseUShort();\n       os2.fsType = p.parseUShort();\n       os2.ySubscriptXSize = p.parseShort();\n       os2.ySubscriptYSize = p.parseShort();\n       os2.ySubscriptXOffset = p.parseShort();\n       os2.ySubscriptYOffset = p.parseShort();\n       os2.ySuperscriptXSize = p.parseShort();\n       os2.ySuperscriptYSize = p.parseShort();\n       os2.ySuperscriptXOffset = p.parseShort();\n       os2.ySuperscriptYOffset = p.parseShort();\n       os2.yStrikeoutSize = p.parseShort();\n       os2.yStrikeoutPosition = p.parseShort();\n       os2.sFamilyClass = p.parseShort();\n       os2.panose = [];\n       for (var i = 0; i < 10; i++) {\n           os2.panose[i] = p.parseByte();\n       }\n\n       os2.ulUnicodeRange1 = p.parseULong();\n       os2.ulUnicodeRange2 = p.parseULong();\n       os2.ulUnicodeRange3 = p.parseULong();\n       os2.ulUnicodeRange4 = p.parseULong();\n       os2.achVendID = String.fromCharCode(\n           p.parseByte(),\n           p.parseByte(),\n           p.parseByte(),\n           p.parseByte()\n       );\n       os2.fsSelection = p.parseUShort();\n       os2.usFirstCharIndex = p.parseUShort();\n       os2.usLastCharIndex = p.parseUShort();\n       os2.sTypoAscender = p.parseShort();\n       os2.sTypoDescender = p.parseShort();\n       os2.sTypoLineGap = p.parseShort();\n       os2.usWinAscent = p.parseUShort();\n       os2.usWinDescent = p.parseUShort();\n       if (os2.version >= 1) {\n           os2.ulCodePageRange1 = p.parseULong();\n           os2.ulCodePageRange2 = p.parseULong();\n       }\n\n       if (os2.version >= 2) {\n           os2.sxHeight = p.parseShort();\n           os2.sCapHeight = p.parseShort();\n           os2.usDefaultChar = p.parseUShort();\n           os2.usBreakChar = p.parseUShort();\n           os2.usMaxContent = p.parseUShort();\n       }\n\n       return os2;\n   }\n\n   var os2 = { parse: parseOS2Table };\n\n   // The `post` table stores additional PostScript information, such as glyph names.\n\n   // Parse the PostScript `post` table\n   function parsePostTable(data, start) {\n       var post = {};\n       var p = new parse.Parser(data, start);\n       post.version = p.parseVersion();\n       post.italicAngle = p.parseFixed();\n       post.underlinePosition = p.parseShort();\n       post.underlineThickness = p.parseShort();\n       post.isFixedPitch = p.parseULong();\n       post.minMemType42 = p.parseULong();\n       post.maxMemType42 = p.parseULong();\n       post.minMemType1 = p.parseULong();\n       post.maxMemType1 = p.parseULong();\n       post.names = [];\n       switch (post.version) {\n           case 1:\n               break;\n           case 2:\n               post.numberOfGlyphs = p.parseUShort();\n               post.glyphNameIndex = new Array(post.numberOfGlyphs);\n               for (var i = 0; i < post.numberOfGlyphs; i++) {\n                   post.glyphNameIndex[i] = p.parseUShort();\n               }\n               break;\n           case 2.5:\n               post.numberOfGlyphs = p.parseUShort();\n               post.offset = new Array(post.numberOfGlyphs);\n               for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n                   post.offset[i$1] = p.parseChar();\n               }\n               break;\n       }\n       return post;\n   }\n\n   var post = { parse: parsePostTable };\n\n   // Data types used in the OpenType font file.\n\n   /**\n    * @exports opentype.decode\n    * @class\n    */\n   var decode = {};\n\n   /**\n    * @param {DataView} data\n    * @param {number} offset\n    * @param {number} numBytes\n    * @returns {string}\n    */\n   decode.UTF8 = function(data, offset, numBytes) {\n       var codePoints = [];\n       var numChars = numBytes;\n       for (var j = 0; j < numChars; j++, offset += 1) {\n           codePoints[j] = data.getUint8(offset);\n       }\n\n       return String.fromCharCode.apply(null, codePoints);\n   };\n\n   /**\n    * @param {DataView} data\n    * @param {number} offset\n    * @param {number} numBytes\n    * @returns {string}\n    */\n   decode.UTF16 = function(data, offset, numBytes) {\n       var codePoints = [];\n       var numChars = numBytes / 2;\n       for (var j = 0; j < numChars; j++, offset += 2) {\n           codePoints[j] = data.getUint16(offset);\n       }\n\n       return String.fromCharCode.apply(null, codePoints);\n   };\n\n   // Data for converting old eight-bit Macintosh encodings to Unicode.\n   // This representation is optimized for decoding; encoding is slower\n   // and needs more memory. The assumption is that all opentype.js users\n   // want to open fonts, but saving a font will be comparatively rare\n   // so it can be more expensive. Keyed by IANA character set name.\n   //\n   // Python script for generating these strings:\n   //\n   //     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n   //     print(s.encode('utf-8'))\n   /**\n    * @private\n    */\n   var eightBitMacEncodings = {\n       'x-mac-croatian':  // Python: 'mac_croatian'\n       'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +\n       '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n       'x-mac-cyrillic':  // Python: 'mac_cyrillic'\n       'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +\n       'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n       'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n       'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +\n       'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n       'x-mac-greek':  // Python: 'mac_greek'\n       'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +\n       'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n       'x-mac-icelandic':  // Python: 'mac_iceland'\n       'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n       '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n       'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n       'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +\n       'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n       'x-mac-ce':  // Python: 'mac_latin2'\n       'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +\n       'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n       macintosh:  // Python: 'mac_roman'\n       'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n       '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n       'x-mac-romanian':  // Python: 'mac_romanian'\n       'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +\n       '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n       'x-mac-turkish':  // Python: 'mac_turkish'\n       'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n       '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n   };\n\n   /**\n    * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n    * string, or 'undefined' if the encoding is unsupported. For example, we do\n    * not support Chinese, Japanese or Korean because these would need large\n    * mapping tables.\n    * @param {DataView} dataView\n    * @param {number} offset\n    * @param {number} dataLength\n    * @param {string} encoding\n    * @returns {string}\n    */\n   decode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n       var table = eightBitMacEncodings[encoding];\n       if (table === undefined) {\n           return undefined;\n       }\n\n       var result = '';\n       for (var i = 0; i < dataLength; i++) {\n           var c = dataView.getUint8(offset + i);\n           // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n           // mapped to U+0000..U+007F; we only need to look up the others.\n           if (c <= 0x7F) {\n               result += String.fromCharCode(c);\n           } else {\n               result += table[c & 0x7F];\n           }\n       }\n\n       return result;\n   };\n\n   // The `GPOS` table contains kerning pairs, among other things.\n\n   // Parse the metadata `meta` table.\n   // https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\n   function parseMetaTable(data, start) {\n       var p = new parse.Parser(data, start);\n       var tableVersion = p.parseULong();\n       check.argument(tableVersion === 1, 'Unsupported META table version.');\n       p.parseULong(); // flags - currently unused and set to 0\n       p.parseULong(); // tableOffset\n       var numDataMaps = p.parseULong();\n\n       var tags = {};\n       for (var i = 0; i < numDataMaps; i++) {\n           var tag = p.parseTag();\n           var dataOffset = p.parseULong();\n           var dataLength = p.parseULong();\n           var text = decode.UTF8(data, start + dataOffset, dataLength);\n\n           tags[tag] = text;\n       }\n       return tags;\n   }\n\n   var meta = { parse: parseMetaTable };\n\n   // opentype.js\n\n   /**\n    * The opentype library.\n    * @namespace opentype\n    */\n\n   // Table Directory Entries //////////////////////////////////////////////\n   /**\n    * Parses OpenType table entries.\n    * @param  {DataView}\n    * @param  {Number}\n    * @return {Object[]}\n    */\n   function parseOpenTypeTableEntries(data, numTables) {\n       var tableEntries = [];\n       var p = 12;\n       for (var i = 0; i < numTables; i += 1) {\n           var tag = parse.getTag(data, p);\n           var checksum = parse.getULong(data, p + 4);\n           var offset = parse.getULong(data, p + 8);\n           var length = parse.getULong(data, p + 12);\n           tableEntries.push({\n               tag: tag,\n               checksum: checksum,\n               offset: offset,\n               length: length,\n               compression: false,\n           });\n           p += 16;\n       }\n\n       return tableEntries;\n   }\n\n   /**\n    * Parses WOFF table entries.\n    * @param  {DataView}\n    * @param  {Number}\n    * @return {Object[]}\n    */\n   function parseWOFFTableEntries(data, numTables) {\n       var tableEntries = [];\n       var p = 44; // offset to the first table directory entry.\n       for (var i = 0; i < numTables; i += 1) {\n           var tag = parse.getTag(data, p);\n           var offset = parse.getULong(data, p + 4);\n           var compLength = parse.getULong(data, p + 8);\n           var origLength = parse.getULong(data, p + 12);\n           var compression = (void 0);\n           if (compLength < origLength) {\n               compression = 'WOFF';\n           } else {\n               compression = false;\n           }\n\n           tableEntries.push({\n               tag: tag,\n               offset: offset,\n               compression: compression,\n               compressedLength: compLength,\n               length: origLength,\n           });\n           p += 20;\n       }\n\n       return tableEntries;\n   }\n\n   /**\n    * @typedef TableData\n    * @type Object\n    * @property {DataView} data - The DataView\n    * @property {number} offset - The data offset.\n    */\n\n   /**\n    * @param  {DataView}\n    * @param  {Object}\n    * @return {TableData}\n    */\n   function uncompressTable(data, tableEntry) {\n       if (tableEntry.compression === 'WOFF') {\n           var inBuffer = new Uint8Array(\n               data.buffer,\n               tableEntry.offset + 2,\n               tableEntry.compressedLength - 2\n           );\n           var outBuffer = new Uint8Array(tableEntry.length);\n           inflateSync(inBuffer, outBuffer);\n           if (outBuffer.byteLength !== tableEntry.length) {\n               throw new Error(\n                   'Decompression error: ' +\n                       tableEntry.tag +\n                       \" decompressed length doesn't match recorded length\"\n               );\n           }\n\n           var view = new DataView(outBuffer.buffer, 0);\n           return { data: view, offset: 0 };\n       } else {\n           return { data: data, offset: tableEntry.offset };\n       }\n   }\n\n   // Public API ///////////////////////////////////////////////////////////\n\n   /**\n    * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n    * Throws an error if the font could not be parsed.\n    * @param  {ArrayBuffer}\n    * @param  {Object} opt - options for parsing\n    * @return {opentype.Font}\n    */\n   function parseBuffer(buffer, opt) {\n       opt = opt === undefined || opt === null ? {} : opt;\n\n       var indexToLocFormat;\n\n       // Since the constructor can also be called to create new fonts from scratch, we indicate this\n       // should be an empty font that we'll fill with our own data.\n       var font = new Font({ empty: true });\n\n       // OpenType fonts use big endian byte ordering.\n       // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n       // Instead we use DataViews where we can specify endianness.\n       var data = new DataView(buffer, 0);\n       var numTables;\n       var tableEntries = [];\n       var signature = parse.getTag(data, 0);\n       if (\n           signature === String.fromCharCode(0, 1, 0, 0) ||\n           signature === 'true' ||\n           signature === 'typ1'\n       ) {\n           font.outlinesFormat = 'truetype';\n           numTables = parse.getUShort(data, 4);\n           tableEntries = parseOpenTypeTableEntries(data, numTables);\n       } else if (signature === 'OTTO') {\n           font.outlinesFormat = 'cff';\n           numTables = parse.getUShort(data, 4);\n           tableEntries = parseOpenTypeTableEntries(data, numTables);\n       } else if (signature === 'wOFF') {\n           var flavor = parse.getTag(data, 4);\n           if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n               font.outlinesFormat = 'truetype';\n           } else if (flavor === 'OTTO') {\n               font.outlinesFormat = 'cff';\n           } else {\n               throw new Error('Unsupported OpenType flavor ' + signature);\n           }\n\n           numTables = parse.getUShort(data, 12);\n           tableEntries = parseWOFFTableEntries(data, numTables);\n       } else {\n           throw new Error('Unsupported OpenType signature ' + signature);\n       }\n\n       var cffTableEntry;\n       var fvarTableEntry;\n       var glyfTableEntry;\n       var gdefTableEntry;\n       var gposTableEntry;\n       var gsubTableEntry;\n       var hmtxTableEntry;\n       var kernTableEntry;\n       var locaTableEntry;\n       var metaTableEntry;\n       var p;\n\n       for (var i = 0; i < numTables; i += 1) {\n           var tableEntry = tableEntries[i];\n           var table = (void 0);\n           switch (tableEntry.tag) {\n               case 'cmap':\n                   table = uncompressTable(data, tableEntry);\n                   font.tables.cmap = cmap.parse(table.data, table.offset);\n                   font.encoding = new CmapEncoding(font.tables.cmap);\n                   break;\n               case 'cvt ':\n                   table = uncompressTable(data, tableEntry);\n                   p = new parse.Parser(table.data, table.offset);\n                   font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n                   break;\n               case 'fvar':\n                   fvarTableEntry = tableEntry;\n                   break;\n               case 'fpgm':\n                   table = uncompressTable(data, tableEntry);\n                   p = new parse.Parser(table.data, table.offset);\n                   font.tables.fpgm = p.parseByteList(tableEntry.length);\n                   break;\n               case 'head':\n                   table = uncompressTable(data, tableEntry);\n                   font.tables.head = head.parse(table.data, table.offset);\n                   font.unitsPerEm = font.tables.head.unitsPerEm;\n                   indexToLocFormat = font.tables.head.indexToLocFormat;\n                   break;\n               case 'hhea':\n                   table = uncompressTable(data, tableEntry);\n                   font.tables.hhea = hhea.parse(table.data, table.offset);\n                   font.ascender = font.tables.hhea.ascender;\n                   font.descender = font.tables.hhea.descender;\n                   font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n                   break;\n               case 'hmtx':\n                   hmtxTableEntry = tableEntry;\n                   break;\n               case 'ltag':\n                   table = uncompressTable(data, tableEntry);\n                   ltagTable = ltag.parse(table.data, table.offset);\n                   break;\n               case 'maxp':\n                   table = uncompressTable(data, tableEntry);\n                   font.tables.maxp = maxp.parse(table.data, table.offset);\n                   font.numGlyphs = font.tables.maxp.numGlyphs;\n                   break;\n               case 'OS/2':\n                   table = uncompressTable(data, tableEntry);\n                   font.tables.os2 = os2.parse(table.data, table.offset);\n                   break;\n               case 'post':\n                   table = uncompressTable(data, tableEntry);\n                   font.tables.post = post.parse(table.data, table.offset);\n                   break;\n               case 'prep':\n                   table = uncompressTable(data, tableEntry);\n                   p = new parse.Parser(table.data, table.offset);\n                   font.tables.prep = p.parseByteList(tableEntry.length);\n                   break;\n               case 'glyf':\n                   glyfTableEntry = tableEntry;\n                   break;\n               case 'loca':\n                   locaTableEntry = tableEntry;\n                   break;\n               case 'CFF ':\n                   cffTableEntry = tableEntry;\n                   break;\n               case 'kern':\n                   kernTableEntry = tableEntry;\n                   break;\n               case 'GDEF':\n                   gdefTableEntry = tableEntry;\n                   break;\n               case 'GPOS':\n                   gposTableEntry = tableEntry;\n                   break;\n               case 'GSUB':\n                   gsubTableEntry = tableEntry;\n                   break;\n               case 'meta':\n                   metaTableEntry = tableEntry;\n                   break;\n           }\n       }\n\n       if (glyfTableEntry && locaTableEntry) {\n           var shortVersion = indexToLocFormat === 0;\n           var locaTable = uncompressTable(data, locaTableEntry);\n           var locaOffsets = loca.parse(\n               locaTable.data,\n               locaTable.offset,\n               font.numGlyphs,\n               shortVersion\n           );\n           var glyfTable = uncompressTable(data, glyfTableEntry);\n           font.glyphs = glyf.parse(\n               glyfTable.data,\n               glyfTable.offset,\n               locaOffsets,\n               font,\n               opt\n           );\n       } else if (cffTableEntry) {\n           var cffTable = uncompressTable(data, cffTableEntry);\n           cff.parse(cffTable.data, cffTable.offset, font, opt);\n       } else {\n           throw new Error(\"Font doesn't contain TrueType or CFF outlines.\");\n       }\n\n       var hmtxTable = uncompressTable(data, hmtxTableEntry);\n       hmtx.parse(\n           font,\n           hmtxTable.data,\n           hmtxTable.offset,\n           font.numberOfHMetrics,\n           font.numGlyphs,\n           font.glyphs,\n           opt\n       );\n       addGlyphNames(font, opt);\n\n       if (kernTableEntry) {\n           var kernTable = uncompressTable(data, kernTableEntry);\n           font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n       } else {\n           font.kerningPairs = {};\n       }\n\n       if (gdefTableEntry) {\n           var gdefTable = uncompressTable(data, gdefTableEntry);\n           font.tables.gdef = gdef.parse(gdefTable.data, gdefTable.offset);\n       }\n\n       if (gposTableEntry) {\n           var gposTable = uncompressTable(data, gposTableEntry);\n           font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);\n           font.position.init();\n       }\n\n       if (gsubTableEntry) {\n           var gsubTable = uncompressTable(data, gsubTableEntry);\n           font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n       }\n\n       if (fvarTableEntry) {\n           var fvarTable = uncompressTable(data, fvarTableEntry);\n           font.tables.fvar = fvar.parse(\n               fvarTable.data,\n               fvarTable.offset,\n               font.names\n           );\n       }\n\n       if (metaTableEntry) {\n           var metaTable = uncompressTable(data, metaTableEntry);\n           font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n           font.metas = font.tables.meta;\n       }\n\n       return font;\n   }\n\n   function load() {}\n   function loadSync() {}\n\n   var opentype = /*#__PURE__*/Object.freeze({\n      __proto__: null,\n      Font: Font,\n      Glyph: Glyph,\n      Path: Path,\n      _parse: parse,\n      parse: parseBuffer,\n      load: load,\n      loadSync: loadSync\n   });\n\n   exports.Font = Font;\n   exports.Glyph = Glyph;\n   exports.Path = Path;\n   exports._parse = parse;\n   exports.default = opentype;\n   exports.load = load;\n   exports.loadSync = loadSync;\n   exports.parse = parseBuffer;\n\n   Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=opentype.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@shuding/opentype.js/dist/opentype.js\n");

/***/ })

};
;