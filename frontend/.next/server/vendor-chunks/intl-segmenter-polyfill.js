/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/intl-segmenter-polyfill";
exports.ids = ["vendor-chunks/intl-segmenter-polyfill"];
exports.modules = {

/***/ "(ssr)/./node_modules/intl-segmenter-polyfill/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/intl-segmenter-polyfill/dist/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! @babel/runtime/regenerator */ \"(ssr)/./node_modules/@babel/runtime/regenerator/index.js\"), __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/slicedToArray.js\"), __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"), __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"), __webpack_require__(/*! fast-text-encoding */ \"(ssr)/./node_modules/fast-text-encoding/text.min.js\")) :\n  0;\n}(this, (function (exports, _regeneratorRuntime, _slicedToArray, _classCallCheck, _createClass, _asyncToGenerator) { 'use strict';\n\n  _regeneratorRuntime = _regeneratorRuntime && Object.prototype.hasOwnProperty.call(_regeneratorRuntime, 'default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;\n  _slicedToArray = _slicedToArray && Object.prototype.hasOwnProperty.call(_slicedToArray, 'default') ? _slicedToArray['default'] : _slicedToArray;\n  _classCallCheck = _classCallCheck && Object.prototype.hasOwnProperty.call(_classCallCheck, 'default') ? _classCallCheck['default'] : _classCallCheck;\n  _createClass = _createClass && Object.prototype.hasOwnProperty.call(_createClass, 'default') ? _createClass['default'] : _createClass;\n  _asyncToGenerator = _asyncToGenerator && Object.prototype.hasOwnProperty.call(_asyncToGenerator, 'default') ? _asyncToGenerator['default'] : _asyncToGenerator;\n\n  var BREAK_TYPES = {\n    grapheme: 0,\n    word: 1,\n    sentence: 3\n  };\n\n  var getSegmentType = function getSegmentType(type) {\n    if (type < 100) {\n      return 'none';\n    } else if (type >= 100 && type < 200) {\n      return 'number';\n    } else if (type >= 200 && type < 300) {\n      return 'word';\n    } else if (type >= 300 && type < 400) {\n      return 'kana';\n    } else if (type >= 400 && type < 500) {\n      return 'ideo';\n    }\n  };\n\n  var instantiateWasmModule = function instantiateWasmModule(wasm, imports) {\n    if (typeof wasm.then === 'function') {\n      if (WebAssembly.instantiateStreaming != null) {\n        return wasm.then(function (response) {\n          return WebAssembly.instantiateStreaming(response, imports);\n        });\n      }\n\n      return wasm.then(function (response) {\n        return response.arrayBuffer();\n      }).then(function (buffer) {\n        return WebAssembly.instantiate(buffer, imports);\n      });\n    } else {\n      return WebAssembly.instantiate(wasm, imports);\n    }\n  };\n\n  var createIntlSegmenterPolyfillFromInstance = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(wasmInstance, values) {\n      var allocStr;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              allocStr = function allocStr(str) {\n                var encoder = new TextEncoder();\n                var view = encoder.encode(str + '\\0'); // typescript does not play well with webassembly\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n                var exports = wasmInstance.exports;\n                var ptr = exports.malloc(view.length);\n                var memory = new Uint8Array(exports.memory.buffer, ptr, view.length);\n                memory.set(view);\n                return [ptr, view];\n              };\n\n              return _context.abrupt(\"return\", /*#__PURE__*/function () {\n                function Segmenter(locale, options) {\n                  _classCallCheck(this, Segmenter);\n\n                  this.locale = locale;\n                  this.options = options || {};\n                }\n\n                _createClass(Segmenter, [{\n                  key: \"segment\",\n                  value: function segment(input) {\n                    var locale = this.locale;\n                    var granularity = this.options.granularity || 'grapheme';\n                    var exports = wasmInstance.exports;\n                    values.current = [];\n\n                    var _allocStr = allocStr(input),\n                        _allocStr2 = _slicedToArray(_allocStr, 2),\n                        inputPtr = _allocStr2[0],\n                        inputView = _allocStr2[1];\n\n                    var _allocStr3 = allocStr(locale),\n                        _allocStr4 = _slicedToArray(_allocStr3, 1),\n                        localePtr = _allocStr4[0];\n\n                    exports.utf8_break_iterator(BREAK_TYPES[granularity], localePtr, inputPtr, inputView.length);\n                    exports.free(localePtr);\n                    exports.free(inputPtr);\n                    var index = 0;\n                    var segments = values.current.map(function (_ref2) {\n                      var _ref3 = _slicedToArray(_ref2, 3),\n                          start = _ref3[0],\n                          end = _ref3[1],\n                          segmentType = _ref3[2];\n\n                      var segment = input.slice(start, end);\n                      var returnValue = {\n                        segment: segment,\n                        index: index,\n                        isWordLike: granularity === 'word' ? getSegmentType(segmentType) !== 'none' : undefined,\n                        breakType: granularity === 'word' ? getSegmentType(segmentType) : undefined\n                      };\n                      index += segment.length;\n                      return returnValue;\n                    });\n\n                    segments.containing = function (indexToFind) {\n                      return segments.find(function (_ref4) {\n                        var index = _ref4.index,\n                            segment = _ref4.segment;\n                        return indexToFind >= index && indexToFind <= index + segment.length - 1;\n                      });\n                    };\n\n                    return segments;\n                  }\n                }]);\n\n                return Segmenter;\n              }());\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function createIntlSegmenterPolyfillFromInstance(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getImports = function getImports(callback) {\n    return {\n      env: {\n        push: function push(start, end, segmentType) {\n          callback([start, end, segmentType]);\n        },\n        __sys_stat64: function __sys_stat64() {}\n      },\n      wasi_snapshot_preview1: {\n        proc_exit: function proc_exit() {},\n        fd_close: function fd_close() {},\n        environ_sizes_get: function environ_sizes_get() {},\n        environ_get: function environ_get() {}\n      }\n    };\n  };\n\n  var createIntlSegmenterPolyfillFromFactory = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(wasmFactory) {\n      var values, _yield$wasmFactory, instance;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              values = {\n                current: []\n              };\n              _context2.next = 3;\n              return wasmFactory(getImports(function (value) {\n                values.current.push(value);\n              }));\n\n            case 3:\n              _yield$wasmFactory = _context2.sent;\n              instance = _yield$wasmFactory.instance;\n              return _context2.abrupt(\"return\", createIntlSegmenterPolyfillFromInstance(instance, values));\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function createIntlSegmenterPolyfillFromFactory(_x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var createIntlSegmenterPolyfill = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(wasm) {\n      var values, _yield$instantiateWas, instance;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              values = {\n                current: []\n              };\n              _context3.next = 3;\n              return instantiateWasmModule(wasm, getImports(function (value) {\n                values.current.push(value);\n              }));\n\n            case 3:\n              _yield$instantiateWas = _context3.sent;\n              instance = _yield$instantiateWas.instance;\n              return _context3.abrupt(\"return\", createIntlSegmenterPolyfillFromInstance(instance, values));\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function createIntlSegmenterPolyfill(_x4) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  exports.createIntlSegmenterPolyfill = createIntlSegmenterPolyfill;\n  exports.createIntlSegmenterPolyfillFromFactory = createIntlSegmenterPolyfillFromFactory;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/intl-segmenter-polyfill/dist/index.js\n");

/***/ })

};
;