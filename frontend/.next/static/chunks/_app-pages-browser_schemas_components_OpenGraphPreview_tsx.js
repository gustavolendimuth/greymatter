/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_schemas_components_OpenGraphPreview_tsx"],{

/***/ "(app-pages-browser)/./public/Inter-Bold.woff":
/*!********************************!*\
  !*** ./public/Inter-Bold.woff ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "static/media/Inter-Bold.b1234477.woff";

/***/ }),

/***/ "(app-pages-browser)/./public/break_iterator.wasm":
/*!************************************!*\
  !*** ./public/break_iterator.wasm ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "static/media/break_iterator.819c05c7.wasm";

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@shuding/opentype.js/dist/opentype.module.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@shuding/opentype.js/dist/opentype.module.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Font: function() { return /* binding */ Font; },\n/* harmony export */   Glyph: function() { return /* binding */ Glyph; },\n/* harmony export */   Path: function() { return /* binding */ Path; },\n/* harmony export */   _parse: function() { return /* binding */ parse; },\n/* harmony export */   load: function() { return /* binding */ load; },\n/* harmony export */   loadSync: function() { return /* binding */ loadSync; },\n/* harmony export */   parse: function() { return /* binding */ parseBuffer; }\n/* harmony export */ });\n/**\n * https://opentype.js.org v1.3.5 | (c) Frederik De Bleser and other contributors | MIT License | Uses fflate by 101arrowz and string.prototype.codepointat polyfill by Mathias Bynens\n */\n\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            { ++l[cd[i] - 1]; }\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    { flt[i] = 8; }\nfor (var i = 144; i < 256; ++i)\n    { flt[i] = 9; }\nfor (var i = 256; i < 280; ++i)\n    { flt[i] = 7; }\nfor (var i = 280; i < 288; ++i)\n    { flt[i] = 8; }\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    { fdt[i] = 5; }\n// fixed length map\nvar flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            { m = a[i]; }\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        { s = 0; }\n    if (e == null || e > v.length)\n        { e = v.length; }\n    // can't use .constructor in case user-supplied\n    var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        { Error.captureStackTrace(e, err); }\n    if (!nt)\n        { throw e; }\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    if (!sl || (st && st.f && !st.l))\n        { return buf || new u8(0); }\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        { st = {}; }\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        { buf = new u8(sl * 3); }\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        { err(0); }\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    { cbuf(bt + l); }\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                { lm = flrm, dm = fdrm, lbt = 9, dbt = 5; }\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            { n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1]; }\n                        else if (s == 17)\n                            { n = 3 + bits(dat, pos, 7), pos += 3; }\n                        else if (s == 18)\n                            { n = 11 + bits(dat, pos, 127), pos += 7; }\n                        while (n--)\n                            { ldt[i++] = c; }\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                { err(1); }\n            if (pos > tbts) {\n                if (noSt)\n                    { err(0); }\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            { cbuf(bt + 131072); }\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    { err(0); }\n                break;\n            }\n            if (!c)\n                { err(2); }\n            if (sym < 256)\n                { buf[bt++] = sym; }\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    { err(3); }\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        { err(0); }\n                    break;\n                }\n                if (noBuf)\n                    { cbuf(bt + 131072); }\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            { final = 1, st.m = lbt, st.d = dm, st.n = dbt; }\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, out) {\n    return inflt(data, out);\n}\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n\n// Geometric objects\n\n// import BoundingBox from './bbox';\n\n/**\n * A bézier path containing a set of path commands similar to a SVG path.\n * Paths can be drawn on a context using `draw`.\n * @exports opentype.Path\n * @class\n * @constructor\n */\nfunction Path() {\n    this.commands = [];\n    this.fill = 'black';\n    this.stroke = null;\n    this.strokeWidth = 1;\n}\n\n/**\n * @param  {number} x\n * @param  {number} y\n */\nPath.prototype.moveTo = function (x, y) {\n    this.commands.push({\n        type: 'M',\n        x: x,\n        y: y,\n    });\n};\n\n/**\n * @param  {number} x\n * @param  {number} y\n */\nPath.prototype.lineTo = function (x, y) {\n    this.commands.push({\n        type: 'L',\n        x: x,\n        y: y,\n    });\n};\n\n/**\n * Draws cubic curve\n * @function\n * curveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control 1\n * @param  {number} y1 - y of control 1\n * @param  {number} x2 - x of control 2\n * @param  {number} y2 - y of control 2\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\n\n/**\n * Draws cubic curve\n * @function\n * bezierCurveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control 1\n * @param  {number} y1 - y of control 1\n * @param  {number} x2 - x of control 2\n * @param  {number} y2 - y of control 2\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n * @see curveTo\n */\nPath.prototype.curveTo = Path.prototype.bezierCurveTo = function (\n    x1,\n    y1,\n    x2,\n    y2,\n    x,\n    y\n) {\n    this.commands.push({\n        type: 'C',\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        x: x,\n        y: y,\n    });\n};\n\n/**\n * Draws quadratic curve\n * @function\n * quadraticCurveTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control\n * @param  {number} y1 - y of control\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\n\n/**\n * Draws quadratic curve\n * @function\n * quadTo\n * @memberof opentype.Path.prototype\n * @param  {number} x1 - x of control\n * @param  {number} y1 - y of control\n * @param  {number} x - x of path point\n * @param  {number} y - y of path point\n */\nPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function (\n    x1,\n    y1,\n    x,\n    y\n) {\n    this.commands.push({\n        type: 'Q',\n        x1: x1,\n        y1: y1,\n        x: x,\n        y: y,\n    });\n};\n\n/**\n * Closes the path\n * @function closePath\n * @memberof opentype.Path.prototype\n */\n\n/**\n * Close the path\n * @function close\n * @memberof opentype.Path.prototype\n */\nPath.prototype.close = Path.prototype.closePath = function () {\n    this.commands.push({\n        type: 'Z',\n    });\n};\n\n/**\n * Add the given path or list of commands to the commands of this path.\n * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.\n */\nPath.prototype.extend = function (pathOrCommands) {\n    if (pathOrCommands.commands) {\n        pathOrCommands = pathOrCommands.commands;\n    }\n    // else if (pathOrCommands instanceof BoundingBox) {\n    //     const box = pathOrCommands;\n    //     this.moveTo(box.x1, box.y1);\n    //     this.lineTo(box.x2, box.y1);\n    //     this.lineTo(box.x2, box.y2);\n    //     this.lineTo(box.x1, box.y2);\n    //     this.close();\n    //     return;\n    // }\n\n    Array.prototype.push.apply(this.commands, pathOrCommands);\n};\n\n/**\n * Convert the Path to a string of path data instructions\n * See http://www.w3.org/TR/SVG/paths.html#PathData\n * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n * @return {string}\n */\nPath.prototype.toPathData = function (decimalPlaces) {\n    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n    function floatToString(v) {\n        if (Math.round(v) === v) {\n            return '' + Math.round(v);\n        } else {\n            return v.toFixed(decimalPlaces);\n        }\n    }\n\n    function packValues() {\n        var arguments$1 = arguments;\n\n        var s = '';\n        for (var i = 0; i < arguments.length; i += 1) {\n            var v = arguments$1[i];\n            if (v >= 0 && i > 0) {\n                s += ' ';\n            }\n\n            s += floatToString(v);\n        }\n\n        return s;\n    }\n\n    var d = '';\n    for (var i = 0; i < this.commands.length; i += 1) {\n        var cmd = this.commands[i];\n        if (cmd.type === 'M') {\n            d += 'M' + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === 'L') {\n            d += 'L' + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === 'C') {\n            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === 'Q') {\n            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === 'Z') {\n            d += 'Z';\n        }\n    }\n\n    return d;\n};\n\n// Glyph encoding\n\nvar cffStandardStrings = [\n    '.notdef',\n    'space',\n    'exclam',\n    'quotedbl',\n    'numbersign',\n    'dollar',\n    'percent',\n    'ampersand',\n    'quoteright',\n    'parenleft',\n    'parenright',\n    'asterisk',\n    'plus',\n    'comma',\n    'hyphen',\n    'period',\n    'slash',\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine',\n    'colon',\n    'semicolon',\n    'less',\n    'equal',\n    'greater',\n    'question',\n    'at',\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'bracketleft',\n    'backslash',\n    'bracketright',\n    'asciicircum',\n    'underscore',\n    'quoteleft',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    'braceleft',\n    'bar',\n    'braceright',\n    'asciitilde',\n    'exclamdown',\n    'cent',\n    'sterling',\n    'fraction',\n    'yen',\n    'florin',\n    'section',\n    'currency',\n    'quotesingle',\n    'quotedblleft',\n    'guillemotleft',\n    'guilsinglleft',\n    'guilsinglright',\n    'fi',\n    'fl',\n    'endash',\n    'dagger',\n    'daggerdbl',\n    'periodcentered',\n    'paragraph',\n    'bullet',\n    'quotesinglbase',\n    'quotedblbase',\n    'quotedblright',\n    'guillemotright',\n    'ellipsis',\n    'perthousand',\n    'questiondown',\n    'grave',\n    'acute',\n    'circumflex',\n    'tilde',\n    'macron',\n    'breve',\n    'dotaccent',\n    'dieresis',\n    'ring',\n    'cedilla',\n    'hungarumlaut',\n    'ogonek',\n    'caron',\n    'emdash',\n    'AE',\n    'ordfeminine',\n    'Lslash',\n    'Oslash',\n    'OE',\n    'ordmasculine',\n    'ae',\n    'dotlessi',\n    'lslash',\n    'oslash',\n    'oe',\n    'germandbls',\n    'onesuperior',\n    'logicalnot',\n    'mu',\n    'trademark',\n    'Eth',\n    'onehalf',\n    'plusminus',\n    'Thorn',\n    'onequarter',\n    'divide',\n    'brokenbar',\n    'degree',\n    'thorn',\n    'threequarters',\n    'twosuperior',\n    'registered',\n    'minus',\n    'eth',\n    'multiply',\n    'threesuperior',\n    'copyright',\n    'Aacute',\n    'Acircumflex',\n    'Adieresis',\n    'Agrave',\n    'Aring',\n    'Atilde',\n    'Ccedilla',\n    'Eacute',\n    'Ecircumflex',\n    'Edieresis',\n    'Egrave',\n    'Iacute',\n    'Icircumflex',\n    'Idieresis',\n    'Igrave',\n    'Ntilde',\n    'Oacute',\n    'Ocircumflex',\n    'Odieresis',\n    'Ograve',\n    'Otilde',\n    'Scaron',\n    'Uacute',\n    'Ucircumflex',\n    'Udieresis',\n    'Ugrave',\n    'Yacute',\n    'Ydieresis',\n    'Zcaron',\n    'aacute',\n    'acircumflex',\n    'adieresis',\n    'agrave',\n    'aring',\n    'atilde',\n    'ccedilla',\n    'eacute',\n    'ecircumflex',\n    'edieresis',\n    'egrave',\n    'iacute',\n    'icircumflex',\n    'idieresis',\n    'igrave',\n    'ntilde',\n    'oacute',\n    'ocircumflex',\n    'odieresis',\n    'ograve',\n    'otilde',\n    'scaron',\n    'uacute',\n    'ucircumflex',\n    'udieresis',\n    'ugrave',\n    'yacute',\n    'ydieresis',\n    'zcaron',\n    'exclamsmall',\n    'Hungarumlautsmall',\n    'dollaroldstyle',\n    'dollarsuperior',\n    'ampersandsmall',\n    'Acutesmall',\n    'parenleftsuperior',\n    'parenrightsuperior',\n    '266 ff',\n    'onedotenleader',\n    'zerooldstyle',\n    'oneoldstyle',\n    'twooldstyle',\n    'threeoldstyle',\n    'fouroldstyle',\n    'fiveoldstyle',\n    'sixoldstyle',\n    'sevenoldstyle',\n    'eightoldstyle',\n    'nineoldstyle',\n    'commasuperior',\n    'threequartersemdash',\n    'periodsuperior',\n    'questionsmall',\n    'asuperior',\n    'bsuperior',\n    'centsuperior',\n    'dsuperior',\n    'esuperior',\n    'isuperior',\n    'lsuperior',\n    'msuperior',\n    'nsuperior',\n    'osuperior',\n    'rsuperior',\n    'ssuperior',\n    'tsuperior',\n    'ff',\n    'ffi',\n    'ffl',\n    'parenleftinferior',\n    'parenrightinferior',\n    'Circumflexsmall',\n    'hyphensuperior',\n    'Gravesmall',\n    'Asmall',\n    'Bsmall',\n    'Csmall',\n    'Dsmall',\n    'Esmall',\n    'Fsmall',\n    'Gsmall',\n    'Hsmall',\n    'Ismall',\n    'Jsmall',\n    'Ksmall',\n    'Lsmall',\n    'Msmall',\n    'Nsmall',\n    'Osmall',\n    'Psmall',\n    'Qsmall',\n    'Rsmall',\n    'Ssmall',\n    'Tsmall',\n    'Usmall',\n    'Vsmall',\n    'Wsmall',\n    'Xsmall',\n    'Ysmall',\n    'Zsmall',\n    'colonmonetary',\n    'onefitted',\n    'rupiah',\n    'Tildesmall',\n    'exclamdownsmall',\n    'centoldstyle',\n    'Lslashsmall',\n    'Scaronsmall',\n    'Zcaronsmall',\n    'Dieresissmall',\n    'Brevesmall',\n    'Caronsmall',\n    'Dotaccentsmall',\n    'Macronsmall',\n    'figuredash',\n    'hypheninferior',\n    'Ogoneksmall',\n    'Ringsmall',\n    'Cedillasmall',\n    'questiondownsmall',\n    'oneeighth',\n    'threeeighths',\n    'fiveeighths',\n    'seveneighths',\n    'onethird',\n    'twothirds',\n    'zerosuperior',\n    'foursuperior',\n    'fivesuperior',\n    'sixsuperior',\n    'sevensuperior',\n    'eightsuperior',\n    'ninesuperior',\n    'zeroinferior',\n    'oneinferior',\n    'twoinferior',\n    'threeinferior',\n    'fourinferior',\n    'fiveinferior',\n    'sixinferior',\n    'seveninferior',\n    'eightinferior',\n    'nineinferior',\n    'centinferior',\n    'dollarinferior',\n    'periodinferior',\n    'commainferior',\n    'Agravesmall',\n    'Aacutesmall',\n    'Acircumflexsmall',\n    'Atildesmall',\n    'Adieresissmall',\n    'Aringsmall',\n    'AEsmall',\n    'Ccedillasmall',\n    'Egravesmall',\n    'Eacutesmall',\n    'Ecircumflexsmall',\n    'Edieresissmall',\n    'Igravesmall',\n    'Iacutesmall',\n    'Icircumflexsmall',\n    'Idieresissmall',\n    'Ethsmall',\n    'Ntildesmall',\n    'Ogravesmall',\n    'Oacutesmall',\n    'Ocircumflexsmall',\n    'Otildesmall',\n    'Odieresissmall',\n    'OEsmall',\n    'Oslashsmall',\n    'Ugravesmall',\n    'Uacutesmall',\n    'Ucircumflexsmall',\n    'Udieresissmall',\n    'Yacutesmall',\n    'Thornsmall',\n    'Ydieresissmall',\n    '001.000',\n    '001.001',\n    '001.002',\n    '001.003',\n    'Black',\n    'Bold',\n    'Book',\n    'Light',\n    'Medium',\n    'Regular',\n    'Roman',\n    'Semibold' ];\n\nvar cffStandardEncoding = [\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'space',\n    'exclam',\n    'quotedbl',\n    'numbersign',\n    'dollar',\n    'percent',\n    'ampersand',\n    'quoteright',\n    'parenleft',\n    'parenright',\n    'asterisk',\n    'plus',\n    'comma',\n    'hyphen',\n    'period',\n    'slash',\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine',\n    'colon',\n    'semicolon',\n    'less',\n    'equal',\n    'greater',\n    'question',\n    'at',\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'bracketleft',\n    'backslash',\n    'bracketright',\n    'asciicircum',\n    'underscore',\n    'quoteleft',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    'braceleft',\n    'bar',\n    'braceright',\n    'asciitilde',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'exclamdown',\n    'cent',\n    'sterling',\n    'fraction',\n    'yen',\n    'florin',\n    'section',\n    'currency',\n    'quotesingle',\n    'quotedblleft',\n    'guillemotleft',\n    'guilsinglleft',\n    'guilsinglright',\n    'fi',\n    'fl',\n    '',\n    'endash',\n    'dagger',\n    'daggerdbl',\n    'periodcentered',\n    '',\n    'paragraph',\n    'bullet',\n    'quotesinglbase',\n    'quotedblbase',\n    'quotedblright',\n    'guillemotright',\n    'ellipsis',\n    'perthousand',\n    '',\n    'questiondown',\n    '',\n    'grave',\n    'acute',\n    'circumflex',\n    'tilde',\n    'macron',\n    'breve',\n    'dotaccent',\n    'dieresis',\n    '',\n    'ring',\n    'cedilla',\n    '',\n    'hungarumlaut',\n    'ogonek',\n    'caron',\n    'emdash',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'AE',\n    '',\n    'ordfeminine',\n    '',\n    '',\n    '',\n    '',\n    'Lslash',\n    'Oslash',\n    'OE',\n    'ordmasculine',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'ae',\n    '',\n    '',\n    '',\n    'dotlessi',\n    '',\n    '',\n    'lslash',\n    'oslash',\n    'oe',\n    'germandbls' ];\n\nvar cffExpertEncoding = [\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'space',\n    'exclamsmall',\n    'Hungarumlautsmall',\n    '',\n    'dollaroldstyle',\n    'dollarsuperior',\n    'ampersandsmall',\n    'Acutesmall',\n    'parenleftsuperior',\n    'parenrightsuperior',\n    'twodotenleader',\n    'onedotenleader',\n    'comma',\n    'hyphen',\n    'period',\n    'fraction',\n    'zerooldstyle',\n    'oneoldstyle',\n    'twooldstyle',\n    'threeoldstyle',\n    'fouroldstyle',\n    'fiveoldstyle',\n    'sixoldstyle',\n    'sevenoldstyle',\n    'eightoldstyle',\n    'nineoldstyle',\n    'colon',\n    'semicolon',\n    'commasuperior',\n    'threequartersemdash',\n    'periodsuperior',\n    'questionsmall',\n    '',\n    'asuperior',\n    'bsuperior',\n    'centsuperior',\n    'dsuperior',\n    'esuperior',\n    '',\n    '',\n    'isuperior',\n    '',\n    '',\n    'lsuperior',\n    'msuperior',\n    'nsuperior',\n    'osuperior',\n    '',\n    '',\n    'rsuperior',\n    'ssuperior',\n    'tsuperior',\n    '',\n    'ff',\n    'fi',\n    'fl',\n    'ffi',\n    'ffl',\n    'parenleftinferior',\n    '',\n    'parenrightinferior',\n    'Circumflexsmall',\n    'hyphensuperior',\n    'Gravesmall',\n    'Asmall',\n    'Bsmall',\n    'Csmall',\n    'Dsmall',\n    'Esmall',\n    'Fsmall',\n    'Gsmall',\n    'Hsmall',\n    'Ismall',\n    'Jsmall',\n    'Ksmall',\n    'Lsmall',\n    'Msmall',\n    'Nsmall',\n    'Osmall',\n    'Psmall',\n    'Qsmall',\n    'Rsmall',\n    'Ssmall',\n    'Tsmall',\n    'Usmall',\n    'Vsmall',\n    'Wsmall',\n    'Xsmall',\n    'Ysmall',\n    'Zsmall',\n    'colonmonetary',\n    'onefitted',\n    'rupiah',\n    'Tildesmall',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'exclamdownsmall',\n    'centoldstyle',\n    'Lslashsmall',\n    '',\n    '',\n    'Scaronsmall',\n    'Zcaronsmall',\n    'Dieresissmall',\n    'Brevesmall',\n    'Caronsmall',\n    '',\n    'Dotaccentsmall',\n    '',\n    '',\n    'Macronsmall',\n    '',\n    '',\n    'figuredash',\n    'hypheninferior',\n    '',\n    '',\n    'Ogoneksmall',\n    'Ringsmall',\n    'Cedillasmall',\n    '',\n    '',\n    '',\n    'onequarter',\n    'onehalf',\n    'threequarters',\n    'questiondownsmall',\n    'oneeighth',\n    'threeeighths',\n    'fiveeighths',\n    'seveneighths',\n    'onethird',\n    'twothirds',\n    '',\n    '',\n    'zerosuperior',\n    'onesuperior',\n    'twosuperior',\n    'threesuperior',\n    'foursuperior',\n    'fivesuperior',\n    'sixsuperior',\n    'sevensuperior',\n    'eightsuperior',\n    'ninesuperior',\n    'zeroinferior',\n    'oneinferior',\n    'twoinferior',\n    'threeinferior',\n    'fourinferior',\n    'fiveinferior',\n    'sixinferior',\n    'seveninferior',\n    'eightinferior',\n    'nineinferior',\n    'centinferior',\n    'dollarinferior',\n    'periodinferior',\n    'commainferior',\n    'Agravesmall',\n    'Aacutesmall',\n    'Acircumflexsmall',\n    'Atildesmall',\n    'Adieresissmall',\n    'Aringsmall',\n    'AEsmall',\n    'Ccedillasmall',\n    'Egravesmall',\n    'Eacutesmall',\n    'Ecircumflexsmall',\n    'Edieresissmall',\n    'Igravesmall',\n    'Iacutesmall',\n    'Icircumflexsmall',\n    'Idieresissmall',\n    'Ethsmall',\n    'Ntildesmall',\n    'Ogravesmall',\n    'Oacutesmall',\n    'Ocircumflexsmall',\n    'Otildesmall',\n    'Odieresissmall',\n    'OEsmall',\n    'Oslashsmall',\n    'Ugravesmall',\n    'Uacutesmall',\n    'Ucircumflexsmall',\n    'Udieresissmall',\n    'Yacutesmall',\n    'Thornsmall',\n    'Ydieresissmall' ];\n\n/**\n * This is the encoding used for fonts created from scratch.\n * It loops through all glyphs and finds the appropriate unicode value.\n * Since it's linear time, other encodings will be faster.\n * @exports opentype.DefaultEncoding\n * @class\n * @constructor\n * @param {opentype.Font}\n */\nfunction DefaultEncoding(font) {\n    this.font = font;\n}\n\nDefaultEncoding.prototype.charToGlyphIndex = function (c) {\n    var code = c.codePointAt(0);\n    var glyphs = this.font.glyphs;\n    if (glyphs) {\n        for (var i = 0; i < glyphs.length; i += 1) {\n            var glyph = glyphs.get(i);\n            for (var j = 0; j < glyph.unicodes.length; j += 1) {\n                if (glyph.unicodes[j] === code) {\n                    return i;\n                }\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * @exports opentype.CmapEncoding\n * @class\n * @constructor\n * @param {Object} cmap - a object with the cmap encoded data\n */\nfunction CmapEncoding(cmap) {\n    this.cmap = cmap;\n}\n\n/**\n * @param  {string} c - the character\n * @return {number} The glyph index.\n */\nCmapEncoding.prototype.charToGlyphIndex = function (c) {\n    return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;\n};\n\n/**\n * @exports opentype.CffEncoding\n * @class\n * @constructor\n * @param {string} encoding - The encoding\n * @param {Array} charset - The character set.\n */\nfunction CffEncoding(encoding, charset) {\n    this.encoding = encoding;\n    this.charset = charset;\n}\n\n/**\n * @param  {string} s - The character\n * @return {number} The index.\n */\nCffEncoding.prototype.charToGlyphIndex = function (s) {\n    var code = s.codePointAt(0);\n    var charName = this.encoding[code];\n    return this.charset.indexOf(charName);\n};\n\nfunction addGlyphNamesAll(font) {\n    var glyph;\n    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    var charCodes = Object.keys(glyphIndexMap);\n\n    for (var i = 0; i < charCodes.length; i += 1) {\n        var c = charCodes[i];\n        var glyphIndex = glyphIndexMap[c];\n        glyph = font.glyphs.get(glyphIndex);\n        glyph.addUnicode(parseInt(c));\n    }\n}\n\nfunction addGlyphNamesToUnicodeMap(font) {\n    font._IndexToUnicodeMap = {};\n\n    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    var charCodes = Object.keys(glyphIndexMap);\n\n    for (var i = 0; i < charCodes.length; i += 1) {\n        var c = charCodes[i];\n        var glyphIndex = glyphIndexMap[c];\n        if (font._IndexToUnicodeMap[glyphIndex] === undefined) {\n            font._IndexToUnicodeMap[glyphIndex] = {\n                unicodes: [parseInt(c)],\n            };\n        } else {\n            font._IndexToUnicodeMap[glyphIndex].unicodes.push(parseInt(c));\n        }\n    }\n}\n\n/**\n * @alias opentype.addGlyphNames\n * @param {opentype.Font}\n * @param {Object}\n */\nfunction addGlyphNames(font, opt) {\n    if (opt.lowMemory) {\n        addGlyphNamesToUnicodeMap(font);\n    } else {\n        addGlyphNamesAll(font);\n    }\n}\n\n// Run-time checking of preconditions.\n\nfunction fail(message) {\n    throw new Error(message);\n}\n\n// Precondition function that checks if the given predicate is true.\n// If not, it will throw an error.\nfunction argument(predicate, message) {\n    if (!predicate) {\n        fail(message);\n    }\n}\nvar check = { fail: fail, argument: argument, assert: argument };\n\n// The Glyph object\n// import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency\n\nfunction getPathDefinition(glyph, path) {\n    var _path = path || new Path();\n    return {\n        configurable: true,\n\n        get: function () {\n            if (typeof _path === 'function') {\n                _path = _path();\n            }\n\n            return _path;\n        },\n\n        set: function (p) {\n            _path = p;\n        },\n    };\n}\n/**\n * @typedef GlyphOptions\n * @type Object\n * @property {string} [name] - The glyph name\n * @property {number} [unicode]\n * @property {Array} [unicodes]\n * @property {number} [xMin]\n * @property {number} [yMin]\n * @property {number} [xMax]\n * @property {number} [yMax]\n * @property {number} [advanceWidth]\n */\n\n// A Glyph is an individual mark that often corresponds to a character.\n// Some glyphs, such as ligatures, are a combination of many characters.\n// Glyphs are the basic building blocks of a font.\n//\n// The `Glyph` class contains utility methods for drawing the path and its points.\n/**\n * @exports opentype.Glyph\n * @class\n * @param {GlyphOptions}\n * @constructor\n */\nfunction Glyph(options) {\n    // By putting all the code on a prototype function (which is only declared once)\n    // we reduce the memory requirements for larger fonts by some 2%\n    this.bindConstructorValues(options);\n}\n\n/**\n * @param  {GlyphOptions}\n */\nGlyph.prototype.bindConstructorValues = function (options) {\n    this.index = options.index || 0;\n\n    // These three values cannot be deferred for memory optimization:\n    this.name = options.name || null;\n    this.unicode = options.unicode || undefined;\n    this.unicodes =\n        options.unicodes || options.unicode !== undefined\n            ? [options.unicode]\n            : [];\n\n    // But by binding these values only when necessary, we reduce can\n    // the memory requirements by almost 3% for larger fonts.\n    if ('xMin' in options) {\n        this.xMin = options.xMin;\n    }\n\n    if ('yMin' in options) {\n        this.yMin = options.yMin;\n    }\n\n    if ('xMax' in options) {\n        this.xMax = options.xMax;\n    }\n\n    if ('yMax' in options) {\n        this.yMax = options.yMax;\n    }\n\n    if ('advanceWidth' in options) {\n        this.advanceWidth = options.advanceWidth;\n    }\n\n    // The path for a glyph is the most memory intensive, and is bound as a value\n    // with a getter/setter to ensure we actually do path parsing only once the\n    // path is actually needed by anything.\n    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n};\n\n/**\n * @param {number}\n */\nGlyph.prototype.addUnicode = function (unicode) {\n    if (this.unicodes.length === 0) {\n        this.unicode = unicode;\n    }\n\n    this.unicodes.push(unicode);\n};\n\n// /**\n//  * Calculate the minimum bounding box for this glyph.\n//  * @return {opentype.BoundingBox}\n//  */\n// Glyph.prototype.getBoundingBox = function() {\n//     return this.path.getBoundingBox();\n// };\n\n/**\n * Convert the glyph to a Path we can draw on a drawing context.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n * @param  {opentype.Font} if hinting is to be used, the font\n * @return {opentype.Path}\n */\nGlyph.prototype.getPath = function (x, y, fontSize, options, font) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    var commands;\n    var hPoints;\n    if (!options) { options = {}; }\n    var xScale = options.xScale;\n    var yScale = options.yScale;\n\n    if (options.hinting && font && font.hinting) {\n        // in case of hinting, the hinting engine takes care\n        // of scaling the points (not the path) before hinting.\n        hPoints = this.path && font.hinting.exec(this, fontSize);\n        // in case the hinting engine failed hPoints is undefined\n        // and thus reverts to plain rending\n    }\n\n    if (hPoints) {\n        // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency\n        commands = font.hinting.getCommands(hPoints);\n        x = Math.round(x);\n        y = Math.round(y);\n        // TODO in case of hinting xyScaling is not yet supported\n        xScale = yScale = 1;\n    } else {\n        commands = this.path.commands;\n        var scale = (1 / (this.path.unitsPerEm || 1000)) * fontSize;\n        if (xScale === undefined) { xScale = scale; }\n        if (yScale === undefined) { yScale = scale; }\n    }\n\n    var p = new Path();\n    for (var i = 0; i < commands.length; i += 1) {\n        var cmd = commands[i];\n        if (cmd.type === 'M') {\n            p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n        } else if (cmd.type === 'L') {\n            p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n        } else if (cmd.type === 'Q') {\n            p.quadraticCurveTo(\n                x + cmd.x1 * xScale,\n                y + -cmd.y1 * yScale,\n                x + cmd.x * xScale,\n                y + -cmd.y * yScale\n            );\n        } else if (cmd.type === 'C') {\n            p.curveTo(\n                x + cmd.x1 * xScale,\n                y + -cmd.y1 * yScale,\n                x + cmd.x2 * xScale,\n                y + -cmd.y2 * yScale,\n                x + cmd.x * xScale,\n                y + -cmd.y * yScale\n            );\n        } else if (cmd.type === 'Z') {\n            p.closePath();\n        }\n    }\n\n    return p;\n};\n\n/**\n * Split the glyph into contours.\n * This function is here for backwards compatibility, and to\n * provide raw access to the TrueType glyph outlines.\n * @return {Array}\n */\nGlyph.prototype.getContours = function () {\n    if (this.points === undefined) {\n        return [];\n    }\n\n    var contours = [];\n    var currentContour = [];\n    for (var i = 0; i < this.points.length; i += 1) {\n        var pt = this.points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    check.argument(\n        currentContour.length === 0,\n        'There are still points left in the current contour.'\n    );\n    return contours;\n};\n\n/**\n * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n * @return {Object}\n */\nGlyph.prototype.getMetrics = function () {\n    var commands = this.path.commands;\n    var xCoords = [];\n    var yCoords = [];\n    for (var i = 0; i < commands.length; i += 1) {\n        var cmd = commands[i];\n        if (cmd.type !== 'Z') {\n            xCoords.push(cmd.x);\n            yCoords.push(cmd.y);\n        }\n\n        if (cmd.type === 'Q' || cmd.type === 'C') {\n            xCoords.push(cmd.x1);\n            yCoords.push(cmd.y1);\n        }\n\n        if (cmd.type === 'C') {\n            xCoords.push(cmd.x2);\n            yCoords.push(cmd.y2);\n        }\n    }\n\n    var metrics = {\n        xMin: Math.min.apply(null, xCoords),\n        yMin: Math.min.apply(null, yCoords),\n        xMax: Math.max.apply(null, xCoords),\n        yMax: Math.max.apply(null, yCoords),\n        leftSideBearing: this.leftSideBearing,\n    };\n\n    if (!isFinite(metrics.xMin)) {\n        metrics.xMin = 0;\n    }\n\n    if (!isFinite(metrics.xMax)) {\n        metrics.xMax = this.advanceWidth;\n    }\n\n    if (!isFinite(metrics.yMin)) {\n        metrics.yMin = 0;\n    }\n\n    if (!isFinite(metrics.yMax)) {\n        metrics.yMax = 0;\n    }\n\n    metrics.rightSideBearing =\n        this.advanceWidth -\n        metrics.leftSideBearing -\n        (metrics.xMax - metrics.xMin);\n    return metrics;\n};\n\n// The GlyphSet object\n\n// Define a property on the glyph that depends on the path being loaded.\nfunction defineDependentProperty(glyph, externalName, internalName) {\n    Object.defineProperty(glyph, externalName, {\n        get: function () {\n            // Request the path property to make sure the path is loaded.\n            glyph.path; // jshint ignore:line\n            return glyph[internalName];\n        },\n        set: function (newValue) {\n            glyph[internalName] = newValue;\n        },\n        enumerable: true,\n        configurable: true,\n    });\n}\n\n/**\n * A GlyphSet represents all glyphs available in the font, but modelled using\n * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n * necessary, to keep the memory footprint down.\n * @exports opentype.GlyphSet\n * @class\n * @param {opentype.Font}\n * @param {Array}\n */\nfunction GlyphSet(font, glyphs) {\n    this.font = font;\n    this.glyphs = {};\n    if (Array.isArray(glyphs)) {\n        for (var i = 0; i < glyphs.length; i++) {\n            var glyph = glyphs[i];\n            glyph.path.unitsPerEm = font.unitsPerEm;\n            this.glyphs[i] = glyph;\n        }\n    }\n\n    this.length = (glyphs && glyphs.length) || 0;\n}\n\n/**\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nGlyphSet.prototype.get = function (index) {\n    // this.glyphs[index] is 'undefined' when low memory mode is on. glyph is pushed on request only.\n    if (this.glyphs[index] === undefined) {\n        this.font._push(index);\n        if (typeof this.glyphs[index] === 'function') {\n            this.glyphs[index] = this.glyphs[index]();\n        }\n\n        var glyph = this.glyphs[index];\n        var unicodeObj = this.font._IndexToUnicodeMap[index];\n\n        if (unicodeObj) {\n            for (var j = 0; j < unicodeObj.unicodes.length; j++)\n                { glyph.addUnicode(unicodeObj.unicodes[j]); }\n        }\n\n        this.glyphs[index].advanceWidth =\n            this.font._hmtxTableData[index].advanceWidth;\n        this.glyphs[index].leftSideBearing =\n            this.font._hmtxTableData[index].leftSideBearing;\n    } else {\n        if (typeof this.glyphs[index] === 'function') {\n            this.glyphs[index] = this.glyphs[index]();\n        }\n    }\n\n    return this.glyphs[index];\n};\n\n/**\n * @param  {number} index\n * @param  {Object}\n */\nGlyphSet.prototype.push = function (index, loader) {\n    this.glyphs[index] = loader;\n    this.length++;\n};\n\n/**\n * @alias opentype.glyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nfunction glyphLoader(font, index) {\n    return new Glyph({ index: index, font: font });\n}\n\n/**\n * Generate a stub glyph that can be filled with all metadata *except*\n * the \"points\" and \"path\" properties, which must be loaded only once\n * the glyph's path is actually requested for text shaping.\n * @alias opentype.ttfGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseGlyph\n * @param  {Object} data\n * @param  {number} position\n * @param  {Function} buildPath\n * @return {opentype.Glyph}\n */\nfunction ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n    return function () {\n        var glyph = new Glyph({ index: index, font: font });\n\n        glyph.path = function () {\n            parseGlyph(glyph, data, position);\n            var path = buildPath(font.glyphs, glyph);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n\n        defineDependentProperty(glyph, 'xMin', '_xMin');\n        defineDependentProperty(glyph, 'xMax', '_xMax');\n        defineDependentProperty(glyph, 'yMin', '_yMin');\n        defineDependentProperty(glyph, 'yMax', '_yMax');\n\n        return glyph;\n    };\n}\n/**\n * @alias opentype.cffGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseCFFCharstring\n * @param  {string} charstring\n * @return {opentype.Glyph}\n */\nfunction cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n    return function () {\n        var glyph = new Glyph({ index: index, font: font });\n\n        glyph.path = function () {\n            var path = parseCFFCharstring(font, glyph, charstring);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n\n        return glyph;\n    };\n}\n\nvar glyphset = { GlyphSet: GlyphSet, glyphLoader: glyphLoader, ttfGlyphLoader: ttfGlyphLoader, cffGlyphLoader: cffGlyphLoader };\n\n// The Layout object is the prototype of Substitution objects, and provides\n\nfunction searchTag(arr, tag) {\n    /* jshint bitwise: false */\n    var imin = 0;\n    var imax = arr.length - 1;\n    while (imin <= imax) {\n        var imid = (imin + imax) >>> 1;\n        var val = arr[imid].tag;\n        if (val === tag) {\n            return imid;\n        } else if (val < tag) {\n            imin = imid + 1;\n        } else {\n            imax = imid - 1;\n        }\n    }\n    // Not found: return -1-insertion point\n    return -imin - 1;\n}\n\nfunction binSearch(arr, value) {\n    /* jshint bitwise: false */\n    var imin = 0;\n    var imax = arr.length - 1;\n    while (imin <= imax) {\n        var imid = (imin + imax) >>> 1;\n        var val = arr[imid];\n        if (val === value) {\n            return imid;\n        } else if (val < value) {\n            imin = imid + 1;\n        } else {\n            imax = imid - 1;\n        }\n    }\n    // Not found: return -1-insertion point\n    return -imin - 1;\n}\n\n// binary search in a list of ranges (coverage, class definition)\nfunction searchRange(ranges, value) {\n    // jshint bitwise: false\n    var range;\n    var imin = 0;\n    var imax = ranges.length - 1;\n    while (imin <= imax) {\n        var imid = (imin + imax) >>> 1;\n        range = ranges[imid];\n        var start = range.start;\n        if (start === value) {\n            return range;\n        } else if (start < value) {\n            imin = imid + 1;\n        } else {\n            imax = imid - 1;\n        }\n    }\n    if (imin > 0) {\n        range = ranges[imin - 1];\n        if (value > range.end) { return 0; }\n        return range;\n    }\n}\n\n/**\n * @exports opentype.Layout\n * @class\n */\nfunction Layout(font, tableName) {\n    this.font = font;\n    this.tableName = tableName;\n}\n\nLayout.prototype = {\n    /**\n     * Binary search an object by \"tag\" property\n     * @instance\n     * @function searchTag\n     * @memberof opentype.Layout\n     * @param  {Array} arr\n     * @param  {string} tag\n     * @return {number}\n     */\n    searchTag: searchTag,\n\n    /**\n     * Binary search in a list of numbers\n     * @instance\n     * @function binSearch\n     * @memberof opentype.Layout\n     * @param  {Array} arr\n     * @param  {number} value\n     * @return {number}\n     */\n    binSearch: binSearch,\n\n    /**\n     * Get or create the Layout table (GSUB, GPOS etc).\n     * @param  {boolean} create - Whether to create a new one.\n     * @return {Object} The GSUB or GPOS table.\n     */\n    getTable: function (create) {\n        var layout = this.font.tables[this.tableName];\n        if (!layout && create) {\n            layout = this.font.tables[this.tableName] =\n                this.createDefaultTable();\n        }\n        return layout;\n    },\n\n    /**\n     * Returns the best bet for a script name.\n     * Returns 'DFLT' if it exists.\n     * If not, returns 'latn' if it exists.\n     * If neither exist, returns undefined.\n     */\n    getDefaultScriptName: function () {\n        var layout = this.getTable();\n        if (!layout) {\n            return;\n        }\n        var hasLatn = false;\n        for (var i = 0; i < layout.scripts.length; i++) {\n            var name = layout.scripts[i].tag;\n            if (name === 'DFLT') { return name; }\n            if (name === 'latn') { hasLatn = true; }\n        }\n        if (hasLatn) { return 'latn'; }\n    },\n\n    /**\n     * Returns all LangSysRecords in the given script.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n     * @return {Object} An object with tag and script properties.\n     */\n    getScriptTable: function (script, create) {\n        var layout = this.getTable(create);\n        if (layout) {\n            script = script || 'DFLT';\n            var scripts = layout.scripts;\n            var pos = searchTag(layout.scripts, script);\n            if (pos >= 0) {\n                return scripts[pos].script;\n            } else if (create) {\n                var scr = {\n                    tag: script,\n                    script: {\n                        defaultLangSys: {\n                            reserved: 0,\n                            reqFeatureIndex: 0xffff,\n                            featureIndexes: [],\n                        },\n                        langSysRecords: [],\n                    },\n                };\n                scripts.splice(-1 - pos, 0, scr);\n                return scr.script;\n            }\n        }\n    },\n\n    /**\n     * Returns a language system table\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n     * @return {Object}\n     */\n    getLangSysTable: function (script, language, create) {\n        var scriptTable = this.getScriptTable(script, create);\n        if (scriptTable) {\n            if (!language || language === 'dflt' || language === 'DFLT') {\n                return scriptTable.defaultLangSys;\n            }\n            var pos = searchTag(scriptTable.langSysRecords, language);\n            if (pos >= 0) {\n                return scriptTable.langSysRecords[pos].langSys;\n            } else if (create) {\n                var langSysRecord = {\n                    tag: language,\n                    langSys: {\n                        reserved: 0,\n                        reqFeatureIndex: 0xffff,\n                        featureIndexes: [],\n                    },\n                };\n                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n                return langSysRecord.langSys;\n            }\n        }\n    },\n\n    /**\n     * Get a specific feature table.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n     * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n     * @return {Object}\n     */\n    getFeatureTable: function (script, language, feature, create) {\n        var langSysTable = this.getLangSysTable(script, language, create);\n        if (langSysTable) {\n            var featureRecord;\n            var featIndexes = langSysTable.featureIndexes;\n            var allFeatures = this.font.tables[this.tableName].features;\n            // The FeatureIndex array of indices is in arbitrary order,\n            // even if allFeatures is sorted alphabetically by feature tag.\n            for (var i = 0; i < featIndexes.length; i++) {\n                featureRecord = allFeatures[featIndexes[i]];\n                if (featureRecord.tag === feature) {\n                    return featureRecord.feature;\n                }\n            }\n            if (create) {\n                var index = allFeatures.length;\n                // Automatic ordering of features would require to shift feature indexes in the script list.\n                check.assert(\n                    index === 0 || feature >= allFeatures[index - 1].tag,\n                    'Features must be added in alphabetical order.'\n                );\n                featureRecord = {\n                    tag: feature,\n                    feature: { params: 0, lookupListIndexes: [] },\n                };\n                allFeatures.push(featureRecord);\n                featIndexes.push(index);\n                return featureRecord.feature;\n            }\n        }\n    },\n\n    /**\n     * Get the lookup tables of a given type for a script/language/feature.\n     * @instance\n     * @param {string} [script='DFLT']\n     * @param {string} [language='dlft']\n     * @param {string} feature - 4-letter feature code\n     * @param {number} lookupType - 1 to 9\n     * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n     * @return {Object[]}\n     */\n    getLookupTables: function (script, language, feature, lookupType, create) {\n        var featureTable = this.getFeatureTable(\n            script,\n            language,\n            feature,\n            create\n        );\n        var tables = [];\n        if (featureTable) {\n            var lookupTable;\n            var lookupListIndexes = featureTable.lookupListIndexes;\n            var allLookups = this.font.tables[this.tableName].lookups;\n            // lookupListIndexes are in no particular order, so use naive search.\n            for (var i = 0; i < lookupListIndexes.length; i++) {\n                lookupTable = allLookups[lookupListIndexes[i]];\n                if (lookupTable.lookupType === lookupType) {\n                    tables.push(lookupTable);\n                }\n            }\n            if (tables.length === 0 && create) {\n                lookupTable = {\n                    lookupType: lookupType,\n                    lookupFlag: 0,\n                    subtables: [],\n                    markFilteringSet: undefined,\n                };\n                var index = allLookups.length;\n                allLookups.push(lookupTable);\n                lookupListIndexes.push(index);\n                return [lookupTable];\n            }\n        }\n        return tables;\n    },\n\n    /**\n     * Find a glyph in a class definition table\n     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table\n     * @param {object} classDefTable - an OpenType Layout class definition table\n     * @param {number} glyphIndex - the index of the glyph to find\n     * @returns {number} -1 if not found\n     */\n    getGlyphClass: function (classDefTable, glyphIndex) {\n        switch (classDefTable.format) {\n            case 1:\n                if (\n                    classDefTable.startGlyph <= glyphIndex &&\n                    glyphIndex <\n                        classDefTable.startGlyph + classDefTable.classes.length\n                ) {\n                    return classDefTable.classes[\n                        glyphIndex - classDefTable.startGlyph\n                    ];\n                }\n                return 0;\n            case 2:\n                var range = searchRange(classDefTable.ranges, glyphIndex);\n                return range ? range.classId : 0;\n        }\n    },\n\n    /**\n     * Find a glyph in a coverage table\n     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table\n     * @param {object} coverageTable - an OpenType Layout coverage table\n     * @param {number} glyphIndex - the index of the glyph to find\n     * @returns {number} -1 if not found\n     */\n    getCoverageIndex: function (coverageTable, glyphIndex) {\n        switch (coverageTable.format) {\n            case 1:\n                var index = binSearch(coverageTable.glyphs, glyphIndex);\n                return index >= 0 ? index : -1;\n            case 2:\n                var range = searchRange(coverageTable.ranges, glyphIndex);\n                return range ? range.index + glyphIndex - range.start : -1;\n        }\n    },\n\n    /**\n     * Returns the list of glyph indexes of a coverage table.\n     * Format 1: the list is stored raw\n     * Format 2: compact list as range records.\n     * @instance\n     * @param  {Object} coverageTable\n     * @return {Array}\n     */\n    expandCoverage: function (coverageTable) {\n        if (coverageTable.format === 1) {\n            return coverageTable.glyphs;\n        } else {\n            var glyphs = [];\n            var ranges = coverageTable.ranges;\n            for (var i = 0; i < ranges.length; i++) {\n                var range = ranges[i];\n                var start = range.start;\n                var end = range.end;\n                for (var j = start; j <= end; j++) {\n                    glyphs.push(j);\n                }\n            }\n            return glyphs;\n        }\n    },\n};\n\n// The Position object provides utility methods to manipulate\n\n/**\n * @exports opentype.Position\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nfunction Position(font) {\n    Layout.call(this, font, 'gpos');\n}\n\nPosition.prototype = Layout.prototype;\n\n/**\n * Init some data for faster and easier access later.\n */\nPosition.prototype.init = function() {\n    var script = this.getDefaultScriptName();\n    this.defaultKerningTables = this.getKerningTables(script);\n};\n\n/**\n * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.\n *\n * @param {integer} leftIndex - left glyph index\n * @param {integer} rightIndex - right glyph index\n * @returns {integer}\n */\nPosition.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {\n    for (var i = 0; i < kerningLookups.length; i++) {\n        var subtables = kerningLookups[i].subtables;\n        for (var j = 0; j < subtables.length; j++) {\n            var subtable = subtables[j];\n            var covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);\n            if (covIndex < 0) { continue; }\n            switch (subtable.posFormat) {\n                case 1:\n                    // Search Pair Adjustment Positioning Format 1\n                    var pairSet = subtable.pairSets[covIndex];\n                    for (var k = 0; k < pairSet.length; k++) {\n                        var pair = pairSet[k];\n                        if (pair.secondGlyph === rightIndex) {\n                            return pair.value1 && pair.value1.xAdvance || 0;\n                        }\n                    }\n                    break;      // left glyph found, not right glyph - try next subtable\n                case 2:\n                    // Search Pair Adjustment Positioning Format 2\n                    var class1 = this.getGlyphClass(subtable.classDef1, leftIndex);\n                    var class2 = this.getGlyphClass(subtable.classDef2, rightIndex);\n                    var pair$1 = subtable.classRecords[class1][class2];\n                    return pair$1.value1 && pair$1.value1.xAdvance || 0;\n            }\n        }\n    }\n    return 0;\n};\n\n/**\n * List all kerning lookup tables.\n *\n * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value\n * @param {string} [language='dflt']\n * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)\n */\nPosition.prototype.getKerningTables = function(script, language) {\n    if (this.font.tables.gpos) {\n        return this.getLookupTables(script, language, 'kern', 2);\n    }\n};\n\n// The Substitution object provides utility methods to manipulate\n\n/**\n * @exports opentype.Substitution\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nfunction Substitution(font) {\n    Layout.call(this, font, 'gsub');\n}\n\n// Check if 2 arrays of primitives are equal.\nfunction arraysEqual(ar1, ar2) {\n    var n = ar1.length;\n    if (n !== ar2.length) {\n        return false;\n    }\n    for (var i = 0; i < n; i++) {\n        if (ar1[i] !== ar2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Find the first subtable of a lookup table in a particular format.\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n    var subtables = lookupTable.subtables;\n    for (var i = 0; i < subtables.length; i++) {\n        var subtable = subtables[i];\n        if (subtable.substFormat === format) {\n            return subtable;\n        }\n    }\n    if (defaultSubtable) {\n        subtables.push(defaultSubtable);\n        return defaultSubtable;\n    }\n    return undefined;\n}\n\nSubstitution.prototype = Layout.prototype;\n\n/**\n * Create a default GSUB table.\n * @return {Object} gsub - The GSUB table.\n */\nSubstitution.prototype.createDefaultTable = function () {\n    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n    return {\n        version: 1,\n        scripts: [\n            {\n                tag: 'DFLT',\n                script: {\n                    defaultLangSys: {\n                        reserved: 0,\n                        reqFeatureIndex: 0xffff,\n                        featureIndexes: [],\n                    },\n                    langSysRecords: [],\n                },\n            } ],\n        features: [],\n        lookups: [],\n    };\n};\n\n/**\n * List all single substitutions (lookup type 1) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getSingle = function (feature, script, language) {\n    var substitutions = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 1);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var j = (void 0);\n            if (subtable.substFormat === 1) {\n                var delta = subtable.deltaGlyphId;\n                for (j = 0; j < glyphs.length; j++) {\n                    var glyph = glyphs[j];\n                    substitutions.push({ sub: glyph, by: glyph + delta });\n                }\n            } else {\n                var substitute = subtable.substitute;\n                for (j = 0; j < glyphs.length; j++) {\n                    substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                }\n            }\n        }\n    }\n    return substitutions;\n};\n\n/**\n * List all multiple substitutions (lookup type 2) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('ccmp', 'stch')\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getMultiple = function (feature, script, language) {\n    var substitutions = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 2);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var j = (void 0);\n\n            for (j = 0; j < glyphs.length; j++) {\n                var glyph = glyphs[j];\n                var replacements = subtable.sequences[j];\n                substitutions.push({ sub: glyph, by: replacements });\n            }\n        }\n    }\n    return substitutions;\n};\n\n/**\n * List all alternates (lookup type 3) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n * @return {Array} alternates - The list of alternates\n */\nSubstitution.prototype.getAlternates = function (feature, script, language) {\n    var alternates = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 3);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var alternateSets = subtable.alternateSets;\n            for (var j = 0; j < glyphs.length; j++) {\n                alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n            }\n        }\n    }\n    return alternates;\n};\n\n/**\n * List all ligatures (lookup type 4) for a given script, language, and feature.\n * The result is an array of ligature objects like { sub: [ids], by: id }\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} ligatures - The list of ligatures.\n */\nSubstitution.prototype.getLigatures = function (feature, script, language) {\n    var ligatures = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 4);\n    for (var idx = 0; idx < lookupTables.length; idx++) {\n        var subtables = lookupTables[idx].subtables;\n        for (var i = 0; i < subtables.length; i++) {\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var ligatureSets = subtable.ligatureSets;\n            for (var j = 0; j < glyphs.length; j++) {\n                var startGlyph = glyphs[j];\n                var ligSet = ligatureSets[j];\n                for (var k = 0; k < ligSet.length; k++) {\n                    var lig = ligSet[k];\n                    ligatures.push({\n                        sub: [startGlyph].concat(lig.components),\n                        by: lig.ligGlyph,\n                    });\n                }\n            }\n        }\n    }\n    return ligatures;\n};\n\n/**\n * Add or modify a single substitution (lookup type 1)\n * Format 2, more flexible, is always used.\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: id } (format 1 is not supported)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addSingle = function (\n    feature,\n    substitution,\n    script,\n    language\n) {\n    var lookupTable = this.getLookupTables(\n        script,\n        language,\n        feature,\n        1,\n        true\n    )[0];\n    var subtable = getSubstFormat(lookupTable, 2, {\n        // lookup type 1 subtable, format 2, coverage format 1\n        substFormat: 2,\n        coverage: { format: 1, glyphs: [] },\n        substitute: [],\n    });\n    check.assert(\n        subtable.coverage.format === 1,\n        'Single: unable to modify coverage table format ' +\n            subtable.coverage.format\n    );\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.substitute.splice(pos, 0, 0);\n    }\n    subtable.substitute[pos] = substitution.by;\n};\n\n/**\n * Add or modify a multiple substitution (lookup type 2)\n * @param {string} feature - 4-letter feature name ('ccmp', 'stch')\n * @param {Object} substitution - { sub: id, by: [id] } for format 2.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addMultiple = function (\n    feature,\n    substitution,\n    script,\n    language\n) {\n    check.assert(\n        substitution.by instanceof Array && substitution.by.length > 1,\n        'Multiple: \"by\" must be an array of two or more ids'\n    );\n    var lookupTable = this.getLookupTables(\n        script,\n        language,\n        feature,\n        2,\n        true\n    )[0];\n    var subtable = getSubstFormat(lookupTable, 1, {\n        // lookup type 2 subtable, format 1, coverage format 1\n        substFormat: 1,\n        coverage: { format: 1, glyphs: [] },\n        sequences: [],\n    });\n    check.assert(\n        subtable.coverage.format === 1,\n        'Multiple: unable to modify coverage table format ' +\n            subtable.coverage.format\n    );\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.sequences.splice(pos, 0, 0);\n    }\n    subtable.sequences[pos] = substitution.by;\n};\n\n/**\n * Add or modify an alternate substitution (lookup type 3)\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: [ids] }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addAlternate = function (\n    feature,\n    substitution,\n    script,\n    language\n) {\n    var lookupTable = this.getLookupTables(\n        script,\n        language,\n        feature,\n        3,\n        true\n    )[0];\n    var subtable = getSubstFormat(lookupTable, 1, {\n        // lookup type 3 subtable, format 1, coverage format 1\n        substFormat: 1,\n        coverage: { format: 1, glyphs: [] },\n        alternateSets: [],\n    });\n    check.assert(\n        subtable.coverage.format === 1,\n        'Alternate: unable to modify coverage table format ' +\n            subtable.coverage.format\n    );\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.alternateSets.splice(pos, 0, 0);\n    }\n    subtable.alternateSets[pos] = substitution.by;\n};\n\n/**\n * Add a ligature (lookup type 4)\n * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} ligature - { sub: [ids], by: id }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addLigature = function (\n    feature,\n    ligature,\n    script,\n    language\n) {\n    var lookupTable = this.getLookupTables(\n        script,\n        language,\n        feature,\n        4,\n        true\n    )[0];\n    var subtable = lookupTable.subtables[0];\n    if (!subtable) {\n        subtable = {\n            // lookup type 4 subtable, format 1, coverage format 1\n            substFormat: 1,\n            coverage: { format: 1, glyphs: [] },\n            ligatureSets: [],\n        };\n        lookupTable.subtables[0] = subtable;\n    }\n    check.assert(\n        subtable.coverage.format === 1,\n        'Ligature: unable to modify coverage table format ' +\n            subtable.coverage.format\n    );\n    var coverageGlyph = ligature.sub[0];\n    var ligComponents = ligature.sub.slice(1);\n    var ligatureTable = {\n        ligGlyph: ligature.by,\n        components: ligComponents,\n    };\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos >= 0) {\n        // ligatureSet already exists\n        var ligatureSet = subtable.ligatureSets[pos];\n        for (var i = 0; i < ligatureSet.length; i++) {\n            // If ligature already exists, return.\n            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                return;\n            }\n        }\n        // ligature does not exist: add it.\n        ligatureSet.push(ligatureTable);\n    } else {\n        // Create a new ligatureSet and add coverage for the first glyph.\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n    }\n};\n\n/**\n * List all feature data for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getFeature = function (feature, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        // ss01 - ss20\n        return this.getSingle(feature, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            return this.getSingle(feature, script, language).concat(\n                this.getAlternates(feature, script, language)\n            );\n        case 'dlig':\n        case 'liga':\n        case 'rlig':\n            return this.getLigatures(feature, script, language);\n        case 'ccmp':\n            return this.getMultiple(feature, script, language).concat(\n                this.getLigatures(feature, script, language)\n            );\n        case 'stch':\n            return this.getMultiple(feature, script, language);\n    }\n    return undefined;\n};\n\n/**\n * Add a substitution to a feature for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.add = function (feature, sub, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        // ss01 - ss20\n        return this.addSingle(feature, sub, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            if (typeof sub.by === 'number') {\n                return this.addSingle(feature, sub, script, language);\n            }\n            return this.addAlternate(feature, sub, script, language);\n        case 'dlig':\n        case 'liga':\n        case 'rlig':\n            return this.addLigature(feature, sub, script, language);\n        case 'ccmp':\n            if (sub.by instanceof Array) {\n                return this.addMultiple(feature, sub, script, language);\n            }\n            return this.addLigature(feature, sub, script, language);\n    }\n    return undefined;\n};\n\nfunction checkArgument(expression, message) {\n    if (!expression) {\n        throw message;\n    }\n}\n\n// Parsing utility functions\n\n// Retrieve an unsigned byte from the DataView.\nfunction getByte(dataView, offset) {\n    return dataView.getUint8(offset);\n}\n\n// Retrieve an unsigned 16-bit short from the DataView.\n// The value is stored in big endian.\nfunction getUShort(dataView, offset) {\n    return dataView.getUint16(offset, false);\n}\n\n// Retrieve a signed 16-bit short from the DataView.\n// The value is stored in big endian.\nfunction getShort(dataView, offset) {\n    return dataView.getInt16(offset, false);\n}\n\n// Retrieve an unsigned 32-bit long from the DataView.\n// The value is stored in big endian.\nfunction getULong(dataView, offset) {\n    return dataView.getUint32(offset, false);\n}\n\n// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n// The value is stored in big endian.\nfunction getFixed(dataView, offset) {\n    var decimal = dataView.getInt16(offset, false);\n    var fraction = dataView.getUint16(offset + 2, false);\n    return decimal + fraction / 65535;\n}\n\n// Retrieve a 4-character tag from the DataView.\n// Tags are used to identify tables.\nfunction getTag(dataView, offset) {\n    var tag = '';\n    for (var i = offset; i < offset + 4; i += 1) {\n        tag += String.fromCharCode(dataView.getInt8(i));\n    }\n\n    return tag;\n}\n\n// Retrieve an offset from the DataView.\n// Offsets are 1 to 4 bytes in length, depending on the offSize argument.\nfunction getOffset(dataView, offset, offSize) {\n    var v = 0;\n    for (var i = 0; i < offSize; i += 1) {\n        v <<= 8;\n        v += dataView.getUint8(offset + i);\n    }\n\n    return v;\n}\n\n// Retrieve a number of bytes from start offset to the end offset from the DataView.\nfunction getBytes(dataView, startOffset, endOffset) {\n    var bytes = [];\n    for (var i = startOffset; i < endOffset; i += 1) {\n        bytes.push(dataView.getUint8(i));\n    }\n\n    return bytes;\n}\n\n// Convert the list of bytes to a string.\nfunction bytesToString(bytes) {\n    var s = '';\n    for (var i = 0; i < bytes.length; i += 1) {\n        s += String.fromCharCode(bytes[i]);\n    }\n\n    return s;\n}\n\nvar typeOffsets = {\n    byte: 1,\n    uShort: 2,\n    short: 2,\n    uLong: 4,\n    fixed: 4,\n    longDateTime: 8,\n    tag: 4\n};\n\n// A stateful parser that changes the offset whenever a value is retrieved.\n// The data is a DataView.\nfunction Parser(data, offset) {\n    this.data = data;\n    this.offset = offset;\n    this.relativeOffset = 0;\n}\n\nParser.prototype.parseByte = function() {\n    var v = this.data.getUint8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\n\nParser.prototype.parseChar = function() {\n    var v = this.data.getInt8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\n\nParser.prototype.parseCard8 = Parser.prototype.parseByte;\n\nParser.prototype.parseUShort = function() {\n    var v = this.data.getUint16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseCard16 = Parser.prototype.parseUShort;\nParser.prototype.parseSID = Parser.prototype.parseUShort;\nParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\nParser.prototype.parseShort = function() {\n    var v = this.data.getInt16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseF2Dot14 = function() {\n    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseULong = function() {\n    var v = getULong(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\n\nParser.prototype.parseOffset32 = Parser.prototype.parseULong;\n\nParser.prototype.parseFixed = function() {\n    var v = getFixed(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\n\nParser.prototype.parseString = function(length) {\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    var string = '';\n    this.relativeOffset += length;\n    for (var i = 0; i < length; i++) {\n        string += String.fromCharCode(dataView.getUint8(offset + i));\n    }\n\n    return string;\n};\n\nParser.prototype.parseTag = function() {\n    return this.parseString(4);\n};\n\n// LONGDATETIME is a 64-bit integer.\n// JavaScript and unix timestamps traditionally use 32 bits, so we\n// only take the last 32 bits.\n// + Since until 2038 those bits will be filled by zeros we can ignore them.\nParser.prototype.parseLongDateTime = function() {\n    var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n    // Subtract seconds between 01/01/1904 and 01/01/1970\n    // to convert Apple Mac timestamp to Standard Unix timestamp\n    v -= 2082844800;\n    this.relativeOffset += 8;\n    return v;\n};\n\nParser.prototype.parseVersion = function(minorBase) {\n    var major = getUShort(this.data, this.offset + this.relativeOffset);\n\n    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n    // Default returns the correct number if minor = 0xN000 where N is 0-9\n    // Set minorBase to 1 for tables that use minor = N where N is 0-9\n    var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n    this.relativeOffset += 4;\n    if (minorBase === undefined) { minorBase = 0x1000; }\n    return major + minor / minorBase / 10;\n};\n\nParser.prototype.skip = function(type, amount) {\n    if (amount === undefined) {\n        amount = 1;\n    }\n\n    this.relativeOffset += typeOffsets[type] * amount;\n};\n\n///// Parsing lists and records ///////////////////////////////\n\n// Parse a list of 32 bit unsigned integers.\nParser.prototype.parseULongList = function(count) {\n    if (count === undefined) { count = this.parseULong(); }\n    var offsets = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for (var i = 0; i < count; i++) {\n        offsets[i] = dataView.getUint32(offset);\n        offset += 4;\n    }\n\n    this.relativeOffset += count * 4;\n    return offsets;\n};\n\n// Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream\n// or provided as an argument.\nParser.prototype.parseOffset16List =\nParser.prototype.parseUShortList = function(count) {\n    if (count === undefined) { count = this.parseUShort(); }\n    var offsets = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for (var i = 0; i < count; i++) {\n        offsets[i] = dataView.getUint16(offset);\n        offset += 2;\n    }\n\n    this.relativeOffset += count * 2;\n    return offsets;\n};\n\n// Parses a list of 16 bit signed integers.\nParser.prototype.parseShortList = function(count) {\n    var list = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for (var i = 0; i < count; i++) {\n        list[i] = dataView.getInt16(offset);\n        offset += 2;\n    }\n\n    this.relativeOffset += count * 2;\n    return list;\n};\n\n// Parses a list of bytes.\nParser.prototype.parseByteList = function(count) {\n    var list = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for (var i = 0; i < count; i++) {\n        list[i] = dataView.getUint8(offset++);\n    }\n\n    this.relativeOffset += count;\n    return list;\n};\n\n/**\n * Parse a list of items.\n * Record count is optional, if omitted it is read from the stream.\n * itemCallback is one of the Parser methods.\n */\nParser.prototype.parseList = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseUShort();\n    }\n    var list = new Array(count);\n    for (var i = 0; i < count; i++) {\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\n\nParser.prototype.parseList32 = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseULong();\n    }\n    var list = new Array(count);\n    for (var i = 0; i < count; i++) {\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\n\n/**\n * Parse a list of records.\n * Record count is optional, if omitted it is read from the stream.\n * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n */\nParser.prototype.parseRecordList = function(count, recordDescription) {\n    // If the count argument is absent, read it in the stream.\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseUShort();\n    }\n    var records = new Array(count);\n    var fields = Object.keys(recordDescription);\n    for (var i = 0; i < count; i++) {\n        var rec = {};\n        for (var j = 0; j < fields.length; j++) {\n            var fieldName = fields[j];\n            var fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\n\nParser.prototype.parseRecordList32 = function(count, recordDescription) {\n    // If the count argument is absent, read it in the stream.\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseULong();\n    }\n    var records = new Array(count);\n    var fields = Object.keys(recordDescription);\n    for (var i = 0; i < count; i++) {\n        var rec = {};\n        for (var j = 0; j < fields.length; j++) {\n            var fieldName = fields[j];\n            var fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\n\n// Parse a data structure into an object\n// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\nParser.prototype.parseStruct = function(description) {\n    if (typeof description === 'function') {\n        return description.call(this);\n    } else {\n        var fields = Object.keys(description);\n        var struct = {};\n        for (var j = 0; j < fields.length; j++) {\n            var fieldName = fields[j];\n            var fieldType = description[fieldName];\n            struct[fieldName] = fieldType.call(this);\n        }\n        return struct;\n    }\n};\n\n/**\n * Parse a GPOS valueRecord\n * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n * valueFormat is optional, if omitted it is read from the stream.\n */\nParser.prototype.parseValueRecord = function(valueFormat) {\n    if (valueFormat === undefined) {\n        valueFormat = this.parseUShort();\n    }\n    if (valueFormat === 0) {\n        // valueFormat2 in kerning pairs is most often 0\n        // in this case return undefined instead of an empty object, to save space\n        return;\n    }\n    var valueRecord = {};\n\n    if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }\n    if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }\n    if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }\n    if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }\n\n    // Device table (non-variable font) / VariationIndex table (variable font) not supported\n    // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls\n    if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }\n    if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }\n\n    return valueRecord;\n};\n\n/**\n * Parse a list of GPOS valueRecords\n * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n * valueFormat and valueCount are read from the stream.\n */\nParser.prototype.parseValueRecordList = function() {\n    var valueFormat = this.parseUShort();\n    var valueCount = this.parseUShort();\n    var values = new Array(valueCount);\n    for (var i = 0; i < valueCount; i++) {\n        values[i] = this.parseValueRecord(valueFormat);\n    }\n    return values;\n};\n\nParser.prototype.parsePointer = function(description) {\n    var structOffset = this.parseOffset16();\n    if (structOffset > 0) {\n        // NULL offset => return undefined\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return undefined;\n};\n\nParser.prototype.parsePointer32 = function(description) {\n    var structOffset = this.parseOffset32();\n    if (structOffset > 0) {\n        // NULL offset => return undefined\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return undefined;\n};\n\n/**\n * Parse a list of offsets to lists of 16-bit integers,\n * or a list of offsets to lists of offsets to any kind of items.\n * If itemCallback is not provided, a list of list of UShort is assumed.\n * If provided, itemCallback is called on each item and must parse the item.\n * See examples in tables/gsub.js\n */\nParser.prototype.parseListOfLists = function(itemCallback) {\n    var offsets = this.parseOffset16List();\n    var count = offsets.length;\n    var relativeOffset = this.relativeOffset;\n    var list = new Array(count);\n    for (var i = 0; i < count; i++) {\n        var start = offsets[i];\n        if (start === 0) {\n            // NULL offset\n            // Add i as owned property to list. Convenient with assert.\n            list[i] = undefined;\n            continue;\n        }\n        this.relativeOffset = start;\n        if (itemCallback) {\n            var subOffsets = this.parseOffset16List();\n            var subList = new Array(subOffsets.length);\n            for (var j = 0; j < subOffsets.length; j++) {\n                this.relativeOffset = start + subOffsets[j];\n                subList[j] = itemCallback.call(this);\n            }\n            list[i] = subList;\n        } else {\n            list[i] = this.parseUShortList();\n        }\n    }\n    this.relativeOffset = relativeOffset;\n    return list;\n};\n\n///// Complex tables parsing //////////////////////////////////\n\n// Parse a coverage table in a GSUB, GPOS or GDEF table.\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n// parser.offset must point to the start of the table containing the coverage.\nParser.prototype.parseCoverage = function() {\n    var startOffset = this.offset + this.relativeOffset;\n    var format = this.parseUShort();\n    var count = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            glyphs: this.parseUShortList(count)\n        };\n    } else if (format === 2) {\n        var ranges = new Array(count);\n        for (var i = 0; i < count; i++) {\n            ranges[i] = {\n                start: this.parseUShort(),\n                end: this.parseUShort(),\n                index: this.parseUShort()\n            };\n        }\n        return {\n            format: 2,\n            ranges: ranges\n        };\n    }\n    throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');\n};\n\n// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\nParser.prototype.parseClassDef = function() {\n    var startOffset = this.offset + this.relativeOffset;\n    var format = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            startGlyph: this.parseUShort(),\n            classes: this.parseUShortList()\n        };\n    } else if (format === 2) {\n        return {\n            format: 2,\n            ranges: this.parseRecordList({\n                start: Parser.uShort,\n                end: Parser.uShort,\n                classId: Parser.uShort\n            })\n        };\n    }\n    throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');\n};\n\n///// Static methods ///////////////////////////////////\n// These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\nParser.list = function(count, itemCallback) {\n    return function() {\n        return this.parseList(count, itemCallback);\n    };\n};\n\nParser.list32 = function(count, itemCallback) {\n    return function() {\n        return this.parseList32(count, itemCallback);\n    };\n};\n\nParser.recordList = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList(count, recordDescription);\n    };\n};\n\nParser.recordList32 = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList32(count, recordDescription);\n    };\n};\n\nParser.pointer = function(description) {\n    return function() {\n        return this.parsePointer(description);\n    };\n};\n\nParser.pointer32 = function(description) {\n    return function() {\n        return this.parsePointer32(description);\n    };\n};\n\nParser.tag = Parser.prototype.parseTag;\nParser.byte = Parser.prototype.parseByte;\nParser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\nParser.uShortList = Parser.prototype.parseUShortList;\nParser.uLong = Parser.offset32 = Parser.prototype.parseULong;\nParser.uLongList = Parser.prototype.parseULongList;\nParser.struct = Parser.prototype.parseStruct;\nParser.coverage = Parser.prototype.parseCoverage;\nParser.classDef = Parser.prototype.parseClassDef;\n\n///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\nvar langSysTable = {\n    reserved: Parser.uShort,\n    reqFeatureIndex: Parser.uShort,\n    featureIndexes: Parser.uShortList\n};\n\nParser.prototype.parseScriptList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        script: Parser.pointer({\n            defaultLangSys: Parser.pointer(langSysTable),\n            langSysRecords: Parser.recordList({\n                tag: Parser.tag,\n                langSys: Parser.pointer(langSysTable)\n            })\n        })\n    })) || [];\n};\n\nParser.prototype.parseFeatureList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        feature: Parser.pointer({\n            featureParams: Parser.offset16,\n            lookupListIndexes: Parser.uShortList\n        })\n    })) || [];\n};\n\nParser.prototype.parseLookupList = function(lookupTableParsers) {\n    return this.parsePointer(Parser.list(Parser.pointer(function() {\n        var lookupType = this.parseUShort();\n        check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');\n        var lookupFlag = this.parseUShort();\n        var useMarkFilteringSet = lookupFlag & 0x10;\n        return {\n            lookupType: lookupType,\n            lookupFlag: lookupFlag,\n            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined\n        };\n    }))) || [];\n};\n\nParser.prototype.parseFeatureVariationsList = function() {\n    return this.parsePointer32(function() {\n        var majorVersion = this.parseUShort();\n        var minorVersion = this.parseUShort();\n        check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');\n        var featureVariations = this.parseRecordList32({\n            conditionSetOffset: Parser.offset32,\n            featureTableSubstitutionOffset: Parser.offset32\n        });\n        return featureVariations;\n    }) || [];\n};\n\nvar parse = {\n    getByte: getByte,\n    getCard8: getByte,\n    getUShort: getUShort,\n    getCard16: getUShort,\n    getShort: getShort,\n    getULong: getULong,\n    getFixed: getFixed,\n    getTag: getTag,\n    getOffset: getOffset,\n    getBytes: getBytes,\n    bytesToString: bytesToString,\n    Parser: Parser,\n};\n\n// The `glyf` table describes the glyphs in TrueType outline format.\n\n// Parse the coordinate data for a glyph.\nfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n    var v;\n    if ((flag & shortVectorBitMask) > 0) {\n        // The coordinate is 1 byte long.\n        v = p.parseByte();\n        // The `same` bit is re-used for short values to signify the sign of the value.\n        if ((flag & sameBitMask) === 0) {\n            v = -v;\n        }\n\n        v = previousValue + v;\n    } else {\n        //  The coordinate is 2 bytes long.\n        // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n        if ((flag & sameBitMask) > 0) {\n            v = previousValue;\n        } else {\n            // Parse the coordinate as a signed 16-bit delta value.\n            v = previousValue + p.parseShort();\n        }\n    }\n\n    return v;\n}\n\n// Parse a TrueType glyph.\nfunction parseGlyph(glyph, data, start) {\n    var p = new parse.Parser(data, start);\n    glyph.numberOfContours = p.parseShort();\n    glyph._xMin = p.parseShort();\n    glyph._yMin = p.parseShort();\n    glyph._xMax = p.parseShort();\n    glyph._yMax = p.parseShort();\n    var flags;\n    var flag;\n\n    if (glyph.numberOfContours > 0) {\n        // This glyph is not a composite.\n        var endPointIndices = glyph.endPointIndices = [];\n        for (var i = 0; i < glyph.numberOfContours; i += 1) {\n            endPointIndices.push(p.parseUShort());\n        }\n\n        glyph.instructionLength = p.parseUShort();\n        glyph.instructions = [];\n        for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {\n            glyph.instructions.push(p.parseByte());\n        }\n\n        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n        flags = [];\n        for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {\n            flag = p.parseByte();\n            flags.push(flag);\n            // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n            if ((flag & 8) > 0) {\n                var repeatCount = p.parseByte();\n                for (var j = 0; j < repeatCount; j += 1) {\n                    flags.push(flag);\n                    i$2 += 1;\n                }\n            }\n        }\n\n        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n        if (endPointIndices.length > 0) {\n            var points = [];\n            var point;\n            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n            if (numberOfCoordinates > 0) {\n                for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {\n                    flag = flags[i$3];\n                    point = {};\n                    point.onCurve = !!(flag & 1);\n                    point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n                    points.push(point);\n                }\n\n                var px = 0;\n                for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {\n                    flag = flags[i$4];\n                    point = points[i$4];\n                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                    px = point.x;\n                }\n\n                var py = 0;\n                for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {\n                    flag = flags[i$5];\n                    point = points[i$5];\n                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                    py = point.y;\n                }\n            }\n\n            glyph.points = points;\n        } else {\n            glyph.points = [];\n        }\n    } else if (glyph.numberOfContours === 0) {\n        glyph.points = [];\n    } else {\n        glyph.isComposite = true;\n        glyph.points = [];\n        glyph.components = [];\n        var moreComponents = true;\n        while (moreComponents) {\n            flags = p.parseUShort();\n            var component = {\n                glyphIndex: p.parseUShort(),\n                xScale: 1,\n                scale01: 0,\n                scale10: 0,\n                yScale: 1,\n                dx: 0,\n                dy: 0\n            };\n            if ((flags & 1) > 0) {\n                // The arguments are words\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseShort();\n                    component.dy = p.parseShort();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n                }\n\n            } else {\n                // The arguments are bytes\n                if ((flags & 2) > 0) {\n                    // values are offset\n                    component.dx = p.parseChar();\n                    component.dy = p.parseChar();\n                } else {\n                    // values are matched points\n                    component.matchedPoints = [p.parseByte(), p.parseByte()];\n                }\n            }\n\n            if ((flags & 8) > 0) {\n                // We have a scale\n                component.xScale = component.yScale = p.parseF2Dot14();\n            } else if ((flags & 64) > 0) {\n                // We have an X / Y scale\n                component.xScale = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            } else if ((flags & 128) > 0) {\n                // We have a 2x2 transformation\n                component.xScale = p.parseF2Dot14();\n                component.scale01 = p.parseF2Dot14();\n                component.scale10 = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            }\n\n            glyph.components.push(component);\n            moreComponents = !!(flags & 32);\n        }\n        if (flags & 0x100) {\n            // We have instructions\n            glyph.instructionLength = p.parseUShort();\n            glyph.instructions = [];\n            for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {\n                glyph.instructions.push(p.parseByte());\n            }\n        }\n    }\n}\n\n// Transform an array of points and return a new array.\nfunction transformPoints(points, transform) {\n    var newPoints = [];\n    for (var i = 0; i < points.length; i += 1) {\n        var pt = points[i];\n        var newPt = {\n            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n            onCurve: pt.onCurve,\n            lastPointOfContour: pt.lastPointOfContour\n        };\n        newPoints.push(newPt);\n    }\n\n    return newPoints;\n}\n\nfunction getContours(points) {\n    var contours = [];\n    var currentContour = [];\n    for (var i = 0; i < points.length; i += 1) {\n        var pt = points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n}\n\n// Convert the TrueType glyph outline to a Path.\nfunction getPath(points) {\n    var p = new Path();\n    if (!points) {\n        return p;\n    }\n\n    var contours = getContours(points);\n\n    for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n        var contour = contours[contourIndex];\n\n        var prev = null;\n        var curr = contour[contour.length - 1];\n        var next = contour[0];\n\n        if (curr.onCurve) {\n            p.moveTo(curr.x, curr.y);\n        } else {\n            if (next.onCurve) {\n                p.moveTo(next.x, next.y);\n            } else {\n                // If both first and last points are off-curve, start at their middle.\n                var start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};\n                p.moveTo(start.x, start.y);\n            }\n        }\n\n        for (var i = 0; i < contour.length; ++i) {\n            prev = curr;\n            curr = next;\n            next = contour[(i + 1) % contour.length];\n\n            if (curr.onCurve) {\n                // This is a straight line.\n                p.lineTo(curr.x, curr.y);\n            } else {\n                var prev2 = prev;\n                var next2 = next;\n\n                if (!prev.onCurve) {\n                    prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n                }\n\n                if (!next.onCurve) {\n                    next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n                }\n\n                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n            }\n        }\n\n        p.closePath();\n    }\n    return p;\n}\n\nfunction buildPath(glyphs, glyph) {\n    if (glyph.isComposite) {\n        for (var j = 0; j < glyph.components.length; j += 1) {\n            var component = glyph.components[j];\n            var componentGlyph = glyphs.get(component.glyphIndex);\n            // Force the ttfGlyphLoader to parse the glyph.\n            componentGlyph.getPath();\n            if (componentGlyph.points) {\n                var transformedPoints = (void 0);\n                if (component.matchedPoints === undefined) {\n                    // component positioned by offset\n                    transformedPoints = transformPoints(componentGlyph.points, component);\n                } else {\n                    // component positioned by matched points\n                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||\n                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {\n                        throw Error('Matched points out of range in ' + glyph.name);\n                    }\n                    var firstPt = glyph.points[component.matchedPoints[0]];\n                    var secondPt = componentGlyph.points[component.matchedPoints[1]];\n                    var transform = {\n                        xScale: component.xScale, scale01: component.scale01,\n                        scale10: component.scale10, yScale: component.yScale,\n                        dx: 0, dy: 0\n                    };\n                    secondPt = transformPoints([secondPt], transform)[0];\n                    transform.dx = firstPt.x - secondPt.x;\n                    transform.dy = firstPt.y - secondPt.y;\n                    transformedPoints = transformPoints(componentGlyph.points, transform);\n                }\n                glyph.points = glyph.points.concat(transformedPoints);\n            }\n        }\n    }\n\n    return getPath(glyph.points);\n}\n\nfunction parseGlyfTableAll(data, start, loca, font) {\n    var glyphs = new glyphset.GlyphSet(font);\n\n    // The last element of the loca table is invalid.\n    for (var i = 0; i < loca.length - 1; i += 1) {\n        var offset = loca[i];\n        var nextOffset = loca[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, glyphset.glyphLoader(font, i));\n        }\n    }\n\n    return glyphs;\n}\n\nfunction parseGlyfTableOnLowMemory(data, start, loca, font) {\n    var glyphs = new glyphset.GlyphSet(font);\n\n    font._push = function(i) {\n        var offset = loca[i];\n        var nextOffset = loca[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, glyphset.glyphLoader(font, i));\n        }\n    };\n\n    return glyphs;\n}\n\n// Parse all the glyphs according to the offsets from the `loca` table.\nfunction parseGlyfTable(data, start, loca, font, opt) {\n    if (opt.lowMemory)\n        { return parseGlyfTableOnLowMemory(data, start, loca, font); }\n    else\n        { return parseGlyfTableAll(data, start, loca, font); }\n}\n\nvar glyf = { getPath: getPath, parse: parseGlyfTable};\n\n/* A TrueType font hinting interpreter.\n*\n* (c) 2017 Axel Kittenberger\n*\n* This interpreter has been implemented according to this documentation:\n* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html\n*\n* According to the documentation F24DOT6 values are used for pixels.\n* That means calculation is 1/64 pixel accurate and uses integer operations.\n* However, Javascript has floating point operations by default and only\n* those are available. One could make a case to simulate the 1/64 accuracy\n* exactly by truncating after every division operation\n* (for example with << 0) to get pixel exactly results as other TrueType\n* implementations. It may make sense since some fonts are pixel optimized\n* by hand using DELTAP instructions. The current implementation doesn't\n* and rather uses full floating point precision.\n*\n* xScale, yScale and rotation is currently ignored.\n*\n* A few non-trivial instructions are missing as I didn't encounter yet\n* a font that used them to test a possible implementation.\n*\n* Some fonts seem to use undocumented features regarding the twilight zone.\n* Only some of them are implemented as they were encountered.\n*\n* The exports.DEBUG statements are removed on the minified distribution file.\n*/\n\nvar instructionTable;\nvar exec;\nvar execGlyph;\nvar execComponent;\n\n/*\n* Creates a hinting object.\n*\n* There ought to be exactly one\n* for each truetype font that is used for hinting.\n*/\nfunction Hinting(font) {\n    // the font this hinting object is for\n    this.font = font;\n\n    this.getCommands = function (hPoints) {\n        return glyf.getPath(hPoints).commands;\n    };\n\n    // cached states\n    this._fpgmState  =\n    this._prepState  =\n        undefined;\n\n    // errorState\n    // 0 ... all okay\n    // 1 ... had an error in a glyf,\n    //       continue working but stop spamming\n    //       the console\n    // 2 ... error at prep, stop hinting at this ppem\n    // 3 ... error at fpeg, stop hinting for this font at all\n    this._errorState = 0;\n}\n\n/*\n* Not rounding.\n*/\nfunction roundOff(v) {\n    return v;\n}\n\n/*\n* Rounding to grid.\n*/\nfunction roundToGrid(v) {\n    //Rounding in TT is supposed to \"symmetrical around zero\"\n    return Math.sign(v) * Math.round(Math.abs(v));\n}\n\n/*\n* Rounding to double grid.\n*/\nfunction roundToDoubleGrid(v) {\n    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n}\n\n/*\n* Rounding to half grid.\n*/\nfunction roundToHalfGrid(v) {\n    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n}\n\n/*\n* Rounding to up to grid.\n*/\nfunction roundUpToGrid(v) {\n    return Math.sign(v) * Math.ceil(Math.abs(v));\n}\n\n/*\n* Rounding to down to grid.\n*/\nfunction roundDownToGrid(v) {\n    return Math.sign(v) * Math.floor(Math.abs(v));\n}\n\n/*\n* Super rounding.\n*/\nvar roundSuper = function (v) {\n    var period = this.srPeriod;\n    var phase = this.srPhase;\n    var threshold = this.srThreshold;\n    var sign = 1;\n\n    if (v < 0) {\n        v = -v;\n        sign = -1;\n    }\n\n    v += threshold - phase;\n\n    v = Math.trunc(v / period) * period;\n\n    v += phase;\n\n    // according to http://xgridfit.sourceforge.net/round.html\n    if (v < 0) { return phase * sign; }\n\n    return v * sign;\n};\n\n/*\n* Unit vector of x-axis.\n*/\nvar xUnitVector = {\n    x: 1,\n\n    y: 0,\n\n    axis: 'x',\n\n    // Gets the projected distance between two points.\n    // o1/o2 ... if true, respective original position is used.\n    distance: function (p1, p2, o1, o2) {\n        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n    },\n\n    // Moves point p so the moved position has the same relative\n    // position to the moved positions of rp1 and rp2 than the\n    // original positions had.\n    //\n    // See APPENDIX on INTERPOLATE at the bottom of this file.\n    interpolate: function (p, rp1, rp2, pv) {\n        var do1;\n        var do2;\n        var doa1;\n        var doa2;\n        var dm1;\n        var dm2;\n        var dt;\n\n        if (!pv || pv === this) {\n            do1 = p.xo - rp1.xo;\n            do2 = p.xo - rp2.xo;\n            dm1 = rp1.x - rp1.xo;\n            dm2 = rp2.x - rp2.xo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n\n            if (dt === 0) {\n                p.x = p.xo + (dm1 + dm2) / 2;\n                return;\n            }\n\n            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n            return;\n        }\n\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n\n        if (dt === 0) {\n            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n\n        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    },\n\n    // Slope of line normal to this\n    normalSlope: Number.NEGATIVE_INFINITY,\n\n    // Sets the point 'p' relative to point 'rp'\n    // by the distance 'd'.\n    //\n    // See APPENDIX on SETRELATIVE at the bottom of this file.\n    //\n    // p   ... point to set\n    // rp  ... reference point\n    // d   ... distance on projection vector\n    // pv  ... projection vector (undefined = this)\n    // org ... if true, uses the original position of rp as reference.\n    setRelative: function (p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.x = (org ? rp.xo : rp.x) + d;\n            return;\n        }\n\n        var rpx = org ? rp.xo : rp.x;\n        var rpy = org ? rp.yo : rp.y;\n        var rpdx = rpx + d * pv.x;\n        var rpdy = rpy + d * pv.y;\n\n        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n    },\n\n    // Slope of vector line.\n    slope: 0,\n\n    // Touches the point p.\n    touch: function (p) {\n        p.xTouched = true;\n    },\n\n    // Tests if a point p is touched.\n    touched: function (p) {\n        return p.xTouched;\n    },\n\n    // Untouches the point p.\n    untouch: function (p) {\n        p.xTouched = false;\n    }\n};\n\n/*\n* Unit vector of y-axis.\n*/\nvar yUnitVector = {\n    x: 0,\n\n    y: 1,\n\n    axis: 'y',\n\n    // Gets the projected distance between two points.\n    // o1/o2 ... if true, respective original position is used.\n    distance: function (p1, p2, o1, o2) {\n        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n    },\n\n    // Moves point p so the moved position has the same relative\n    // position to the moved positions of rp1 and rp2 than the\n    // original positions had.\n    //\n    // See APPENDIX on INTERPOLATE at the bottom of this file.\n    interpolate: function (p, rp1, rp2, pv) {\n        var do1;\n        var do2;\n        var doa1;\n        var doa2;\n        var dm1;\n        var dm2;\n        var dt;\n\n        if (!pv || pv === this) {\n            do1 = p.yo - rp1.yo;\n            do2 = p.yo - rp2.yo;\n            dm1 = rp1.y - rp1.yo;\n            dm2 = rp2.y - rp2.yo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n\n            if (dt === 0) {\n                p.y = p.yo + (dm1 + dm2) / 2;\n                return;\n            }\n\n            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n            return;\n        }\n\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n\n        if (dt === 0) {\n            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n\n        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    },\n\n    // Slope of line normal to this.\n    normalSlope: 0,\n\n    // Sets the point 'p' relative to point 'rp'\n    // by the distance 'd'\n    //\n    // See APPENDIX on SETRELATIVE at the bottom of this file.\n    //\n    // p   ... point to set\n    // rp  ... reference point\n    // d   ... distance on projection vector\n    // pv  ... projection vector (undefined = this)\n    // org ... if true, uses the original position of rp as reference.\n    setRelative: function (p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.y = (org ? rp.yo : rp.y) + d;\n            return;\n        }\n\n        var rpx = org ? rp.xo : rp.x;\n        var rpy = org ? rp.yo : rp.y;\n        var rpdx = rpx + d * pv.x;\n        var rpdy = rpy + d * pv.y;\n\n        p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n    },\n\n    // Slope of vector line.\n    slope: Number.POSITIVE_INFINITY,\n\n    // Touches the point p.\n    touch: function (p) {\n        p.yTouched = true;\n    },\n\n    // Tests if a point p is touched.\n    touched: function (p) {\n        return p.yTouched;\n    },\n\n    // Untouches the point p.\n    untouch: function (p) {\n        p.yTouched = false;\n    }\n};\n\nObject.freeze(xUnitVector);\nObject.freeze(yUnitVector);\n\n/*\n* Creates a unit vector that is not x- or y-axis.\n*/\nfunction UnitVector(x, y) {\n    this.x = x;\n    this.y = y;\n    this.axis = undefined;\n    this.slope = y / x;\n    this.normalSlope = -x / y;\n    Object.freeze(this);\n}\n\n/*\n* Gets the projected distance between two points.\n* o1/o2 ... if true, respective original position is used.\n*/\nUnitVector.prototype.distance = function(p1, p2, o1, o2) {\n    return (\n        this.x * xUnitVector.distance(p1, p2, o1, o2) +\n        this.y * yUnitVector.distance(p1, p2, o1, o2)\n    );\n};\n\n/*\n* Moves point p so the moved position has the same relative\n* position to the moved positions of rp1 and rp2 than the\n* original positions had.\n*\n* See APPENDIX on INTERPOLATE at the bottom of this file.\n*/\nUnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n    var dm1;\n    var dm2;\n    var do1;\n    var do2;\n    var doa1;\n    var doa2;\n    var dt;\n\n    do1 = pv.distance(p, rp1, true, true);\n    do2 = pv.distance(p, rp2, true, true);\n    dm1 = pv.distance(rp1, rp1, false, true);\n    dm2 = pv.distance(rp2, rp2, false, true);\n    doa1 = Math.abs(do1);\n    doa2 = Math.abs(do2);\n    dt = doa1 + doa2;\n\n    if (dt === 0) {\n        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n        return;\n    }\n\n    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n};\n\n/*\n* Sets the point 'p' relative to point 'rp'\n* by the distance 'd'\n*\n* See APPENDIX on SETRELATIVE at the bottom of this file.\n*\n* p   ...  point to set\n* rp  ... reference point\n* d   ... distance on projection vector\n* pv  ... projection vector (undefined = this)\n* org ... if true, uses the original position of rp as reference.\n*/\nUnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n    pv = pv || this;\n\n    var rpx = org ? rp.xo : rp.x;\n    var rpy = org ? rp.yo : rp.y;\n    var rpdx = rpx + d * pv.x;\n    var rpdy = rpy + d * pv.y;\n\n    var pvns = pv.normalSlope;\n    var fvs = this.slope;\n\n    var px = p.x;\n    var py = p.y;\n\n    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n    p.y = fvs * (p.x - px) + py;\n};\n\n/*\n* Touches the point p.\n*/\nUnitVector.prototype.touch = function(p) {\n    p.xTouched = true;\n    p.yTouched = true;\n};\n\n/*\n* Returns a unit vector with x/y coordinates.\n*/\nfunction getUnitVector(x, y) {\n    var d = Math.sqrt(x * x + y * y);\n\n    x /= d;\n    y /= d;\n\n    if (x === 1 && y === 0) { return xUnitVector; }\n    else if (x === 0 && y === 1) { return yUnitVector; }\n    else { return new UnitVector(x, y); }\n}\n\n/*\n* Creates a point in the hinting engine.\n*/\nfunction HPoint(\n    x,\n    y,\n    lastPointOfContour,\n    onCurve\n) {\n    this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value\n    this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value\n\n    this.lastPointOfContour = lastPointOfContour;\n    this.onCurve = onCurve;\n    this.prevPointOnContour = undefined;\n    this.nextPointOnContour = undefined;\n    this.xTouched = false;\n    this.yTouched = false;\n\n    Object.preventExtensions(this);\n}\n\n/*\n* Returns the next touched point on the contour.\n*\n* v  ... unit vector to test touch axis.\n*/\nHPoint.prototype.nextTouched = function(v) {\n    var p = this.nextPointOnContour;\n\n    while (!v.touched(p) && p !== this) { p = p.nextPointOnContour; }\n\n    return p;\n};\n\n/*\n* Returns the previous touched point on the contour\n*\n* v  ... unit vector to test touch axis.\n*/\nHPoint.prototype.prevTouched = function(v) {\n    var p = this.prevPointOnContour;\n\n    while (!v.touched(p) && p !== this) { p = p.prevPointOnContour; }\n\n    return p;\n};\n\n/*\n* The zero point.\n*/\nvar HPZero = Object.freeze(new HPoint(0, 0));\n\n/*\n* The default state of the interpreter.\n*\n* Note: Freezing the defaultState and then deriving from it\n* makes the V8 Javascript engine going awkward,\n* so this is avoided, albeit the defaultState shouldn't\n* ever change.\n*/\nvar defaultState = {\n    cvCutIn: 17 / 16,    // control value cut in\n    deltaBase: 9,\n    deltaShift: 0.125,\n    loop: 1,             // loops some instructions\n    minDis: 1,           // minimum distance\n    autoFlip: true\n};\n\n/*\n* The current state of the interpreter.\n*\n* env  ... 'fpgm' or 'prep' or 'glyf'\n* prog ... the program\n*/\nfunction State(env, prog) {\n    this.env = env;\n    this.stack = [];\n    this.prog = prog;\n\n    switch (env) {\n        case 'glyf' :\n            this.zp0 = this.zp1 = this.zp2 = 1;\n            this.rp0 = this.rp1 = this.rp2 = 0;\n            /* fall through */\n        case 'prep' :\n            this.fv = this.pv = this.dpv = xUnitVector;\n            this.round = roundToGrid;\n    }\n}\n\n/*\n* Executes a glyph program.\n*\n* This does the hinting for each glyph.\n*\n* Returns an array of moved points.\n*\n* glyph: the glyph to hint\n* ppem: the size the glyph is rendered for\n*/\nHinting.prototype.exec = function(glyph, ppem) {\n    if (typeof ppem !== 'number') {\n        throw new Error('Point size is not a number!');\n    }\n\n    // Received a fatal error, don't do any hinting anymore.\n    if (this._errorState > 2) { return; }\n\n    var font = this.font;\n    var prepState = this._prepState;\n\n    if (!prepState || prepState.ppem !== ppem) {\n        var fpgmState = this._fpgmState;\n\n        if (!fpgmState) {\n            // Executes the fpgm state.\n            // This is used by fonts to define functions.\n            State.prototype = defaultState;\n\n            fpgmState =\n            this._fpgmState =\n                new State('fpgm', font.tables.fpgm);\n\n            fpgmState.funcs = [ ];\n            fpgmState.font = font;\n\n            if (exports.DEBUG) {\n                console.log('---EXEC FPGM---');\n                fpgmState.step = -1;\n            }\n\n            try {\n                exec(fpgmState);\n            } catch (e) {\n                console.log('Hinting error in FPGM:' + e);\n                this._errorState = 3;\n                return;\n            }\n        }\n\n        // Executes the prep program for this ppem setting.\n        // This is used by fonts to set cvt values\n        // depending on to be rendered font size.\n\n        State.prototype = fpgmState;\n        prepState =\n        this._prepState =\n            new State('prep', font.tables.prep);\n\n        prepState.ppem = ppem;\n\n        // Creates a copy of the cvt table\n        // and scales it to the current ppem setting.\n        var oCvt = font.tables.cvt;\n        if (oCvt) {\n            var cvt = prepState.cvt = new Array(oCvt.length);\n            var scale = ppem / font.unitsPerEm;\n            for (var c = 0; c < oCvt.length; c++) {\n                cvt[c] = oCvt[c] * scale;\n            }\n        } else {\n            prepState.cvt = [];\n        }\n\n        if (exports.DEBUG) {\n            console.log('---EXEC PREP---');\n            prepState.step = -1;\n        }\n\n        try {\n            exec(prepState);\n        } catch (e) {\n            if (this._errorState < 2) {\n                console.log('Hinting error in PREP:' + e);\n            }\n            this._errorState = 2;\n        }\n    }\n\n    if (this._errorState > 1) { return; }\n\n    try {\n        return execGlyph(glyph, prepState);\n    } catch (e) {\n        if (this._errorState < 1) {\n            console.log('Hinting error:' + e);\n            console.log('Note: further hinting errors are silenced');\n        }\n        this._errorState = 1;\n        return undefined;\n    }\n};\n\n/*\n* Executes the hinting program for a glyph.\n*/\nexecGlyph = function(glyph, prepState) {\n    // original point positions\n    var xScale = prepState.ppem / prepState.font.unitsPerEm;\n    var yScale = xScale;\n    var components = glyph.components;\n    var contours;\n    var gZone;\n    var state;\n\n    State.prototype = prepState;\n    if (!components) {\n        state = new State('glyf', glyph.instructions);\n        if (exports.DEBUG) {\n            console.log('---EXEC GLYPH---');\n            state.step = -1;\n        }\n        execComponent(glyph, state, xScale, yScale);\n        gZone = state.gZone;\n    } else {\n        var font = prepState.font;\n        gZone = [];\n        contours = [];\n        for (var i = 0; i < components.length; i++) {\n            var c = components[i];\n            var cg = font.glyphs.get(c.glyphIndex);\n\n            state = new State('glyf', cg.instructions);\n\n            if (exports.DEBUG) {\n                console.log('---EXEC COMP ' + i + '---');\n                state.step = -1;\n            }\n\n            execComponent(cg, state, xScale, yScale);\n            // appends the computed points to the result array\n            // post processes the component points\n            var dx = Math.round(c.dx * xScale);\n            var dy = Math.round(c.dy * yScale);\n            var gz = state.gZone;\n            var cc = state.contours;\n            for (var pi = 0; pi < gz.length; pi++) {\n                var p = gz[pi];\n                p.xTouched = p.yTouched = false;\n                p.xo = p.x = p.x + dx;\n                p.yo = p.y = p.y + dy;\n            }\n\n            var gLen = gZone.length;\n            gZone.push.apply(gZone, gz);\n            for (var j = 0; j < cc.length; j++) {\n                contours.push(cc[j] + gLen);\n            }\n        }\n\n        if (glyph.instructions && !state.inhibitGridFit) {\n            // the composite has instructions on its own\n            state = new State('glyf', glyph.instructions);\n\n            state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n\n            state.contours = contours;\n\n            // note: HPZero cannot be used here, since\n            //       the point might be modified\n            gZone.push(\n                new HPoint(0, 0),\n                new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n            );\n\n            if (exports.DEBUG) {\n                console.log('---EXEC COMPOSITE---');\n                state.step = -1;\n            }\n\n            exec(state);\n\n            gZone.length -= 2;\n        }\n    }\n\n    return gZone;\n};\n\n/*\n* Executes the hinting program for a component of a multi-component glyph\n* or of the glyph itself for a non-component glyph.\n*/\nexecComponent = function(glyph, state, xScale, yScale)\n{\n    var points = glyph.points || [];\n    var pLen = points.length;\n    var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n    var contours = state.contours = [];\n\n    // Scales the original points and\n    // makes copies for the hinted points.\n    var cp; // current point\n    for (var i = 0; i < pLen; i++) {\n        cp = points[i];\n\n        gZone[i] = new HPoint(\n            cp.x * xScale,\n            cp.y * yScale,\n            cp.lastPointOfContour,\n            cp.onCurve\n        );\n    }\n\n    // Chain links the contours.\n    var sp; // start point\n    var np; // next point\n\n    for (var i$1 = 0; i$1 < pLen; i$1++) {\n        cp = gZone[i$1];\n\n        if (!sp) {\n            sp = cp;\n            contours.push(i$1);\n        }\n\n        if (cp.lastPointOfContour) {\n            cp.nextPointOnContour = sp;\n            sp.prevPointOnContour = cp;\n            sp = undefined;\n        } else {\n            np = gZone[i$1 + 1];\n            cp.nextPointOnContour = np;\n            np.prevPointOnContour = cp;\n        }\n    }\n\n    if (state.inhibitGridFit) { return; }\n\n    if (exports.DEBUG) {\n        console.log('PROCESSING GLYPH', state.stack);\n        for (var i$2 = 0; i$2 < pLen; i$2++) {\n            console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n        }\n    }\n\n    gZone.push(\n        new HPoint(0, 0),\n        new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n    );\n\n    exec(state);\n\n    // Removes the extra points.\n    gZone.length -= 2;\n\n    if (exports.DEBUG) {\n        console.log('FINISHED GLYPH', state.stack);\n        for (var i$3 = 0; i$3 < pLen; i$3++) {\n            console.log(i$3, gZone[i$3].x, gZone[i$3].y);\n        }\n    }\n};\n\n/*\n* Executes the program loaded in state.\n*/\nexec = function(state) {\n    var prog = state.prog;\n\n    if (!prog) { return; }\n\n    var pLen = prog.length;\n    var ins;\n\n    for (state.ip = 0; state.ip < pLen; state.ip++) {\n        if (exports.DEBUG) { state.step++; }\n        ins = instructionTable[prog[state.ip]];\n\n        if (!ins) {\n            throw new Error(\n                'unknown instruction: 0x' +\n                Number(prog[state.ip]).toString(16)\n            );\n        }\n\n        ins(state);\n\n        // very extensive debugging for each step\n        /*\n        if (exports.DEBUG) {\n            var da;\n            if (state.gZone) {\n                da = [];\n                for (let i = 0; i < state.gZone.length; i++)\n                {\n                    da.push(i + ' ' +\n                        state.gZone[i].x * 64 + ' ' +\n                        state.gZone[i].y * 64 + ' ' +\n                        (state.gZone[i].xTouched ? 'x' : '') +\n                        (state.gZone[i].yTouched ? 'y' : '')\n                    );\n                }\n                console.log('GZ', da);\n            }\n\n            if (state.tZone) {\n                da = [];\n                for (let i = 0; i < state.tZone.length; i++) {\n                    da.push(i + ' ' +\n                        state.tZone[i].x * 64 + ' ' +\n                        state.tZone[i].y * 64 + ' ' +\n                        (state.tZone[i].xTouched ? 'x' : '') +\n                        (state.tZone[i].yTouched ? 'y' : '')\n                    );\n                }\n                console.log('TZ', da);\n            }\n\n            if (state.stack.length > 10) {\n                console.log(\n                    state.stack.length,\n                    '...', state.stack.slice(state.stack.length - 10)\n                );\n            } else {\n                console.log(state.stack.length, state.stack);\n            }\n        }\n        */\n    }\n};\n\n/*\n* Initializes the twilight zone.\n*\n* This is only done if a SZPx instruction\n* refers to the twilight zone.\n*/\nfunction initTZone(state)\n{\n    var tZone = state.tZone = new Array(state.gZone.length);\n\n    // no idea if this is actually correct...\n    for (var i = 0; i < tZone.length; i++)\n    {\n        tZone[i] = new HPoint(0, 0);\n    }\n}\n\n/*\n* Skips the instruction pointer ahead over an IF/ELSE block.\n* handleElse .. if true breaks on matching ELSE\n*/\nfunction skip(state, handleElse)\n{\n    var prog = state.prog;\n    var ip = state.ip;\n    var nesting = 1;\n    var ins;\n\n    do {\n        ins = prog[++ip];\n        if (ins === 0x58) // IF\n            { nesting++; }\n        else if (ins === 0x59) // EIF\n            { nesting--; }\n        else if (ins === 0x40) // NPUSHB\n            { ip += prog[ip + 1] + 1; }\n        else if (ins === 0x41) // NPUSHW\n            { ip += 2 * prog[ip + 1] + 1; }\n        else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB\n            { ip += ins - 0xB0 + 1; }\n        else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW\n            { ip += (ins - 0xB8 + 1) * 2; }\n        else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE\n            { break; }\n    } while (nesting > 0);\n\n    state.ip = ip;\n}\n\n/*----------------------------------------------------------*\n*          And then a lot of instructions...                *\n*----------------------------------------------------------*/\n\n// SVTCA[a] Set freedom and projection Vectors To Coordinate Axis\n// 0x00-0x01\nfunction SVTCA(v, state) {\n    if (exports.DEBUG) { console.log(state.step, 'SVTCA[' + v.axis + ']'); }\n\n    state.fv = state.pv = state.dpv = v;\n}\n\n// SPVTCA[a] Set Projection Vector to Coordinate Axis\n// 0x02-0x03\nfunction SPVTCA(v, state) {\n    if (exports.DEBUG) { console.log(state.step, 'SPVTCA[' + v.axis + ']'); }\n\n    state.pv = state.dpv = v;\n}\n\n// SFVTCA[a] Set Freedom Vector to Coordinate Axis\n// 0x04-0x05\nfunction SFVTCA(v, state) {\n    if (exports.DEBUG) { console.log(state.step, 'SFVTCA[' + v.axis + ']'); }\n\n    state.fv = v;\n}\n\n// SPVTL[a] Set Projection Vector To Line\n// 0x06-0x07\nfunction SPVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n\n    if (exports.DEBUG) { console.log('SPVTL[' + a + ']', p2i, p1i); }\n\n    var dx;\n    var dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.pv = state.dpv = getUnitVector(dx, dy);\n}\n\n// SFVTL[a] Set Freedom Vector To Line\n// 0x08-0x09\nfunction SFVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n\n    if (exports.DEBUG) { console.log('SFVTL[' + a + ']', p2i, p1i); }\n\n    var dx;\n    var dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.fv = getUnitVector(dx, dy);\n}\n\n// SPVFS[] Set Projection Vector From Stack\n// 0x0A\nfunction SPVFS(state) {\n    var stack = state.stack;\n    var y = stack.pop();\n    var x = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }\n\n    state.pv = state.dpv = getUnitVector(x, y);\n}\n\n// SFVFS[] Set Freedom Vector From Stack\n// 0x0B\nfunction SFVFS(state) {\n    var stack = state.stack;\n    var y = stack.pop();\n    var x = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }\n\n    state.fv = getUnitVector(x, y);\n}\n\n// GPV[] Get Projection Vector\n// 0x0C\nfunction GPV(state) {\n    var stack = state.stack;\n    var pv = state.pv;\n\n    if (exports.DEBUG) { console.log(state.step, 'GPV[]'); }\n\n    stack.push(pv.x * 0x4000);\n    stack.push(pv.y * 0x4000);\n}\n\n// GFV[] Get Freedom Vector\n// 0x0C\nfunction GFV(state) {\n    var stack = state.stack;\n    var fv = state.fv;\n\n    if (exports.DEBUG) { console.log(state.step, 'GFV[]'); }\n\n    stack.push(fv.x * 0x4000);\n    stack.push(fv.y * 0x4000);\n}\n\n// SFVTPV[] Set Freedom Vector To Projection Vector\n// 0x0E\nfunction SFVTPV(state) {\n    state.fv = state.pv;\n\n    if (exports.DEBUG) { console.log(state.step, 'SFVTPV[]'); }\n}\n\n// ISECT[] moves point p to the InterSECTion of two lines\n// 0x0F\nfunction ISECT(state)\n{\n    var stack = state.stack;\n    var pa0i = stack.pop();\n    var pa1i = stack.pop();\n    var pb0i = stack.pop();\n    var pb1i = stack.pop();\n    var pi = stack.pop();\n    var z0 = state.z0;\n    var z1 = state.z1;\n    var pa0 = z0[pa0i];\n    var pa1 = z0[pa1i];\n    var pb0 = z1[pb0i];\n    var pb1 = z1[pb1i];\n    var p = state.z2[pi];\n\n    if (exports.DEBUG) { console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi); }\n\n    // math from\n    // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n\n    var x1 = pa0.x;\n    var y1 = pa0.y;\n    var x2 = pa1.x;\n    var y2 = pa1.y;\n    var x3 = pb0.x;\n    var y3 = pb0.y;\n    var x4 = pb1.x;\n    var y4 = pb1.y;\n\n    var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    var f1 = x1 * y2 - y1 * x2;\n    var f2 = x3 * y4 - y3 * x4;\n\n    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n}\n\n// SRP0[] Set Reference Point 0\n// 0x10\nfunction SRP0(state) {\n    state.rp0 = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SRP0[]', state.rp0); }\n}\n\n// SRP1[] Set Reference Point 1\n// 0x11\nfunction SRP1(state) {\n    state.rp1 = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SRP1[]', state.rp1); }\n}\n\n// SRP1[] Set Reference Point 2\n// 0x12\nfunction SRP2(state) {\n    state.rp2 = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SRP2[]', state.rp2); }\n}\n\n// SZP0[] Set Zone Pointer 0\n// 0x13\nfunction SZP0(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SZP0[]', n); }\n\n    state.zp0 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) { initTZone(state); }\n            state.z0 = state.tZone;\n            break;\n        case 1 :\n            state.z0 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZP1[] Set Zone Pointer 1\n// 0x14\nfunction SZP1(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SZP1[]', n); }\n\n    state.zp1 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) { initTZone(state); }\n            state.z1 = state.tZone;\n            break;\n        case 1 :\n            state.z1 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZP2[] Set Zone Pointer 2\n// 0x15\nfunction SZP2(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SZP2[]', n); }\n\n    state.zp2 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) { initTZone(state); }\n            state.z2 = state.tZone;\n            break;\n        case 1 :\n            state.z2 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SZPS[] Set Zone PointerS\n// 0x16\nfunction SZPS(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SZPS[]', n); }\n\n    state.zp0 = state.zp1 = state.zp2 = n;\n\n    switch (n) {\n        case 0:\n            if (!state.tZone) { initTZone(state); }\n            state.z0 = state.z1 = state.z2 = state.tZone;\n            break;\n        case 1 :\n            state.z0 = state.z1 = state.z2 = state.gZone;\n            break;\n        default :\n            throw new Error('Invalid zone pointer');\n    }\n}\n\n// SLOOP[] Set LOOP variable\n// 0x17\nfunction SLOOP(state) {\n    state.loop = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SLOOP[]', state.loop); }\n}\n\n// RTG[] Round To Grid\n// 0x18\nfunction RTG(state) {\n    if (exports.DEBUG) { console.log(state.step, 'RTG[]'); }\n\n    state.round = roundToGrid;\n}\n\n// RTHG[] Round To Half Grid\n// 0x19\nfunction RTHG(state) {\n    if (exports.DEBUG) { console.log(state.step, 'RTHG[]'); }\n\n    state.round = roundToHalfGrid;\n}\n\n// SMD[] Set Minimum Distance\n// 0x1A\nfunction SMD(state) {\n    var d = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SMD[]', d); }\n\n    state.minDis = d / 0x40;\n}\n\n// ELSE[] ELSE clause\n// 0x1B\nfunction ELSE(state) {\n    // This instruction has been reached by executing a then branch\n    // so it just skips ahead until matching EIF.\n    //\n    // In case the IF was negative the IF[] instruction already\n    // skipped forward over the ELSE[]\n\n    if (exports.DEBUG) { console.log(state.step, 'ELSE[]'); }\n\n    skip(state, false);\n}\n\n// JMPR[] JuMP Relative\n// 0x1C\nfunction JMPR(state) {\n    var o = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'JMPR[]', o); }\n\n    // A jump by 1 would do nothing.\n    state.ip += o - 1;\n}\n\n// SCVTCI[] Set Control Value Table Cut-In\n// 0x1D\nfunction SCVTCI(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SCVTCI[]', n); }\n\n    state.cvCutIn = n / 0x40;\n}\n\n// DUP[] DUPlicate top stack element\n// 0x20\nfunction DUP(state) {\n    var stack = state.stack;\n\n    if (exports.DEBUG) { console.log(state.step, 'DUP[]'); }\n\n    stack.push(stack[stack.length - 1]);\n}\n\n// POP[] POP top stack element\n// 0x21\nfunction POP(state) {\n    if (exports.DEBUG) { console.log(state.step, 'POP[]'); }\n\n    state.stack.pop();\n}\n\n// CLEAR[] CLEAR the stack\n// 0x22\nfunction CLEAR(state) {\n    if (exports.DEBUG) { console.log(state.step, 'CLEAR[]'); }\n\n    state.stack.length = 0;\n}\n\n// SWAP[] SWAP the top two elements on the stack\n// 0x23\nfunction SWAP(state) {\n    var stack = state.stack;\n\n    var a = stack.pop();\n    var b = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SWAP[]'); }\n\n    stack.push(a);\n    stack.push(b);\n}\n\n// DEPTH[] DEPTH of the stack\n// 0x24\nfunction DEPTH(state) {\n    var stack = state.stack;\n\n    if (exports.DEBUG) { console.log(state.step, 'DEPTH[]'); }\n\n    stack.push(stack.length);\n}\n\n// LOOPCALL[] LOOPCALL function\n// 0x2A\nfunction LOOPCALL(state) {\n    var stack = state.stack;\n    var fn = stack.pop();\n    var c = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'LOOPCALL[]', fn, c); }\n\n    // saves callers program\n    var cip = state.ip;\n    var cprog = state.prog;\n\n    state.prog = state.funcs[fn];\n\n    // executes the function\n    for (var i = 0; i < c; i++) {\n        exec(state);\n\n        if (exports.DEBUG) { console.log(\n            ++state.step,\n            i + 1 < c ? 'next loopcall' : 'done loopcall',\n            i\n        ); }\n    }\n\n    // restores the callers program\n    state.ip = cip;\n    state.prog = cprog;\n}\n\n// CALL[] CALL function\n// 0x2B\nfunction CALL(state) {\n    var fn = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'CALL[]', fn); }\n\n    // saves callers program\n    var cip = state.ip;\n    var cprog = state.prog;\n\n    state.prog = state.funcs[fn];\n\n    // executes the function\n    exec(state);\n\n    // restores the callers program\n    state.ip = cip;\n    state.prog = cprog;\n\n    if (exports.DEBUG) { console.log(++state.step, 'returning from', fn); }\n}\n\n// CINDEX[] Copy the INDEXed element to the top of the stack\n// 0x25\nfunction CINDEX(state) {\n    var stack = state.stack;\n    var k = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'CINDEX[]', k); }\n\n    // In case of k == 1, it copies the last element after popping\n    // thus stack.length - k.\n    stack.push(stack[stack.length - k]);\n}\n\n// MINDEX[] Move the INDEXed element to the top of the stack\n// 0x26\nfunction MINDEX(state) {\n    var stack = state.stack;\n    var k = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'MINDEX[]', k); }\n\n    stack.push(stack.splice(stack.length - k, 1)[0]);\n}\n\n// FDEF[] Function DEFinition\n// 0x2C\nfunction FDEF(state) {\n    if (state.env !== 'fpgm') { throw new Error('FDEF not allowed here'); }\n    var stack = state.stack;\n    var prog = state.prog;\n    var ip = state.ip;\n\n    var fn = stack.pop();\n    var ipBegin = ip;\n\n    if (exports.DEBUG) { console.log(state.step, 'FDEF[]', fn); }\n\n    while (prog[++ip] !== 0x2D){ }\n\n    state.ip = ip;\n    state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n}\n\n// MDAP[a] Move Direct Absolute Point\n// 0x2E-0x2F\nfunction MDAP(round, state) {\n    var pi = state.stack.pop();\n    var p = state.z0[pi];\n    var fv = state.fv;\n    var pv = state.pv;\n\n    if (exports.DEBUG) { console.log(state.step, 'MDAP[' + round + ']', pi); }\n\n    var d = pv.distance(p, HPZero);\n\n    if (round) { d = state.round(d); }\n\n    fv.setRelative(p, HPZero, d, pv);\n    fv.touch(p);\n\n    state.rp0 = state.rp1 = pi;\n}\n\n// IUP[a] Interpolate Untouched Points through the outline\n// 0x30\nfunction IUP(v, state) {\n    var z2 = state.z2;\n    var pLen = z2.length - 2;\n    var cp;\n    var pp;\n    var np;\n\n    if (exports.DEBUG) { console.log(state.step, 'IUP[' + v.axis + ']'); }\n\n    for (var i = 0; i < pLen; i++) {\n        cp = z2[i]; // current point\n\n        // if this point has been touched go on\n        if (v.touched(cp)) { continue; }\n\n        pp = cp.prevTouched(v);\n\n        // no point on the contour has been touched?\n        if (pp === cp) { continue; }\n\n        np = cp.nextTouched(v);\n\n        if (pp === np) {\n            // only one point on the contour has been touched\n            // so simply moves the point like that\n\n            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n        }\n\n        v.interpolate(cp, pp, np, v);\n    }\n}\n\n// SHP[] SHift Point using reference point\n// 0x32-0x33\nfunction SHP(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var loop = state.loop;\n    var z2 = state.z2;\n\n    while (loop--)\n    {\n        var pi = stack.pop();\n        var p = z2[pi];\n\n        var d = pv.distance(rp, rp, false, true);\n        fv.setRelative(p, p, d, pv);\n        fv.touch(p);\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ?\n                   'loop ' + (state.loop - loop) + ': ' :\n                   ''\n                ) +\n                'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi\n            );\n        }\n    }\n\n    state.loop = 1;\n}\n\n// SHC[] SHift Contour using reference point\n// 0x36-0x37\nfunction SHC(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var ci = stack.pop();\n    var sp = state.z2[state.contours[ci]];\n    var p = sp;\n\n    if (exports.DEBUG) { console.log(state.step, 'SHC[' + a + ']', ci); }\n\n    var d = pv.distance(rp, rp, false, true);\n\n    do {\n        if (p !== rp) { fv.setRelative(p, p, d, pv); }\n        p = p.nextPointOnContour;\n    } while (p !== sp);\n}\n\n// SHZ[] SHift Zone using reference point\n// 0x36-0x37\nfunction SHZ(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n\n    var e = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SHZ[' + a + ']', e); }\n\n    var z;\n    switch (e) {\n        case 0 : z = state.tZone; break;\n        case 1 : z = state.gZone; break;\n        default : throw new Error('Invalid zone');\n    }\n\n    var p;\n    var d = pv.distance(rp, rp, false, true);\n    var pLen = z.length - 2;\n    for (var i = 0; i < pLen; i++)\n    {\n        p = z[i];\n        fv.setRelative(p, p, d, pv);\n        //if (p !== rp) fv.setRelative(p, p, d, pv);\n    }\n}\n\n// SHPIX[] SHift point by a PIXel amount\n// 0x38\nfunction SHPIX(state) {\n    var stack = state.stack;\n    var loop = state.loop;\n    var fv = state.fv;\n    var d = stack.pop() / 0x40;\n    var z2 = state.z2;\n\n    while (loop--) {\n        var pi = stack.pop();\n        var p = z2[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'SHPIX[]', pi, d\n            );\n        }\n\n        fv.setRelative(p, p, d);\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// IP[] Interpolate Point\n// 0x39\nfunction IP(state) {\n    var stack = state.stack;\n    var rp1i = state.rp1;\n    var rp2i = state.rp2;\n    var loop = state.loop;\n    var rp1 = state.z0[rp1i];\n    var rp2 = state.z1[rp2i];\n    var fv = state.fv;\n    var pv = state.dpv;\n    var z2 = state.z2;\n\n    while (loop--) {\n        var pi = stack.pop();\n        var p = z2[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'IP[]', pi, rp1i, '<->', rp2i\n            );\n        }\n\n        fv.interpolate(p, rp1, rp2, pv);\n\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// MSIRP[a] Move Stack Indirect Relative Point\n// 0x3A-0x3B\nfunction MSIRP(a, state) {\n    var stack = state.stack;\n    var d = stack.pop() / 64;\n    var pi = stack.pop();\n    var p = state.z1[pi];\n    var rp0 = state.z0[state.rp0];\n    var fv = state.fv;\n    var pv = state.pv;\n\n    fv.setRelative(p, rp0, d, pv);\n    fv.touch(p);\n\n    if (exports.DEBUG) { console.log(state.step, 'MSIRP[' + a + ']', d, pi); }\n\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (a) { state.rp0 = pi; }\n}\n\n// ALIGNRP[] Align to reference point.\n// 0x3C\nfunction ALIGNRP(state) {\n    var stack = state.stack;\n    var rp0i = state.rp0;\n    var rp0 = state.z0[rp0i];\n    var loop = state.loop;\n    var fv = state.fv;\n    var pv = state.pv;\n    var z1 = state.z1;\n\n    while (loop--) {\n        var pi = stack.pop();\n        var p = z1[pi];\n\n        if (exports.DEBUG) {\n            console.log(\n                state.step,\n                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n                'ALIGNRP[]', pi\n            );\n        }\n\n        fv.setRelative(p, rp0, 0, pv);\n        fv.touch(p);\n    }\n\n    state.loop = 1;\n}\n\n// RTG[] Round To Double Grid\n// 0x3D\nfunction RTDG(state) {\n    if (exports.DEBUG) { console.log(state.step, 'RTDG[]'); }\n\n    state.round = roundToDoubleGrid;\n}\n\n// MIAP[a] Move Indirect Absolute Point\n// 0x3E-0x3F\nfunction MIAP(round, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var pi = stack.pop();\n    var p = state.z0[pi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var cv = state.cvt[n];\n\n    if (exports.DEBUG) {\n        console.log(\n            state.step,\n            'MIAP[' + round + ']',\n            n, '(', cv, ')', pi\n        );\n    }\n\n    var d = pv.distance(p, HPZero);\n\n    if (round) {\n        if (Math.abs(d - cv) < state.cvCutIn) { d = cv; }\n\n        d = state.round(d);\n    }\n\n    fv.setRelative(p, HPZero, d, pv);\n\n    if (state.zp0 === 0) {\n        p.xo = p.x;\n        p.yo = p.y;\n    }\n\n    fv.touch(p);\n\n    state.rp0 = state.rp1 = pi;\n}\n\n// NPUSB[] PUSH N Bytes\n// 0x40\nfunction NPUSHB(state) {\n    var prog = state.prog;\n    var ip = state.ip;\n    var stack = state.stack;\n\n    var n = prog[++ip];\n\n    if (exports.DEBUG) { console.log(state.step, 'NPUSHB[]', n); }\n\n    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }\n\n    state.ip = ip;\n}\n\n// NPUSHW[] PUSH N Words\n// 0x41\nfunction NPUSHW(state) {\n    var ip = state.ip;\n    var prog = state.prog;\n    var stack = state.stack;\n    var n = prog[++ip];\n\n    if (exports.DEBUG) { console.log(state.step, 'NPUSHW[]', n); }\n\n    for (var i = 0; i < n; i++) {\n        var w = (prog[++ip] << 8) | prog[++ip];\n        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }\n        stack.push(w);\n    }\n\n    state.ip = ip;\n}\n\n// WS[] Write Store\n// 0x42\nfunction WS(state) {\n    var stack = state.stack;\n    var store = state.store;\n\n    if (!store) { store = state.store = []; }\n\n    var v = stack.pop();\n    var l = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'WS', v, l); }\n\n    store[l] = v;\n}\n\n// RS[] Read Store\n// 0x43\nfunction RS(state) {\n    var stack = state.stack;\n    var store = state.store;\n\n    var l = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'RS', l); }\n\n    var v = (store && store[l]) || 0;\n\n    stack.push(v);\n}\n\n// WCVTP[] Write Control Value Table in Pixel units\n// 0x44\nfunction WCVTP(state) {\n    var stack = state.stack;\n\n    var v = stack.pop();\n    var l = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'WCVTP', v, l); }\n\n    state.cvt[l] = v / 0x40;\n}\n\n// RCVT[] Read Control Value Table entry\n// 0x45\nfunction RCVT(state) {\n    var stack = state.stack;\n    var cvte = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'RCVT', cvte); }\n\n    stack.push(state.cvt[cvte] * 0x40);\n}\n\n// GC[] Get Coordinate projected onto the projection vector\n// 0x46-0x47\nfunction GC(a, state) {\n    var stack = state.stack;\n    var pi = stack.pop();\n    var p = state.z2[pi];\n\n    if (exports.DEBUG) { console.log(state.step, 'GC[' + a + ']', pi); }\n\n    stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);\n}\n\n// MD[a] Measure Distance\n// 0x49-0x4A\nfunction MD(a, state) {\n    var stack = state.stack;\n    var pi2 = stack.pop();\n    var pi1 = stack.pop();\n    var p2 = state.z1[pi2];\n    var p1 = state.z0[pi1];\n    var d = state.dpv.distance(p1, p2, a, a);\n\n    if (exports.DEBUG) { console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d); }\n\n    state.stack.push(Math.round(d * 64));\n}\n\n// MPPEM[] Measure Pixels Per EM\n// 0x4B\nfunction MPPEM(state) {\n    if (exports.DEBUG) { console.log(state.step, 'MPPEM[]'); }\n    state.stack.push(state.ppem);\n}\n\n// FLIPON[] set the auto FLIP Boolean to ON\n// 0x4D\nfunction FLIPON(state) {\n    if (exports.DEBUG) { console.log(state.step, 'FLIPON[]'); }\n    state.autoFlip = true;\n}\n\n// LT[] Less Than\n// 0x50\nfunction LT(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'LT[]', e2, e1); }\n\n    stack.push(e1 < e2 ? 1 : 0);\n}\n\n// LTEQ[] Less Than or EQual\n// 0x53\nfunction LTEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'LTEQ[]', e2, e1); }\n\n    stack.push(e1 <= e2 ? 1 : 0);\n}\n\n// GTEQ[] Greater Than\n// 0x52\nfunction GT(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'GT[]', e2, e1); }\n\n    stack.push(e1 > e2 ? 1 : 0);\n}\n\n// GTEQ[] Greater Than or EQual\n// 0x53\nfunction GTEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'GTEQ[]', e2, e1); }\n\n    stack.push(e1 >= e2 ? 1 : 0);\n}\n\n// EQ[] EQual\n// 0x54\nfunction EQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'EQ[]', e2, e1); }\n\n    stack.push(e2 === e1 ? 1 : 0);\n}\n\n// NEQ[] Not EQual\n// 0x55\nfunction NEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'NEQ[]', e2, e1); }\n\n    stack.push(e2 !== e1 ? 1 : 0);\n}\n\n// ODD[] ODD\n// 0x56\nfunction ODD(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'ODD[]', n); }\n\n    stack.push(Math.trunc(n) % 2 ? 1 : 0);\n}\n\n// EVEN[] EVEN\n// 0x57\nfunction EVEN(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'EVEN[]', n); }\n\n    stack.push(Math.trunc(n) % 2 ? 0 : 1);\n}\n\n// IF[] IF test\n// 0x58\nfunction IF(state) {\n    var test = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'IF[]', test); }\n\n    // if test is true it just continues\n    // if not the ip is skipped until matching ELSE or EIF\n    if (!test) {\n        skip(state, true);\n\n        if (exports.DEBUG) { console.log(state.step,  'EIF[]'); }\n    }\n}\n\n// EIF[] End IF\n// 0x59\nfunction EIF(state) {\n    // this can be reached normally when\n    // executing an else branch.\n    // -> just ignore it\n\n    if (exports.DEBUG) { console.log(state.step, 'EIF[]'); }\n}\n\n// AND[] logical AND\n// 0x5A\nfunction AND(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'AND[]', e2, e1); }\n\n    stack.push(e2 && e1 ? 1 : 0);\n}\n\n// OR[] logical OR\n// 0x5B\nfunction OR(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'OR[]', e2, e1); }\n\n    stack.push(e2 || e1 ? 1 : 0);\n}\n\n// NOT[] logical NOT\n// 0x5C\nfunction NOT(state) {\n    var stack = state.stack;\n    var e = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'NOT[]', e); }\n\n    stack.push(e ? 0 : 1);\n}\n\n// DELTAP1[] DELTA exception P1\n// DELTAP2[] DELTA exception P2\n// DELTAP3[] DELTA exception P3\n// 0x5D, 0x71, 0x72\nfunction DELTAP123(b, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var fv = state.fv;\n    var pv = state.pv;\n    var ppem = state.ppem;\n    var base = state.deltaBase + (b - 1) * 16;\n    var ds = state.deltaShift;\n    var z0 = state.z0;\n\n    if (exports.DEBUG) { console.log(state.step, 'DELTAP[' + b + ']', n, stack); }\n\n    for (var i = 0; i < n; i++) {\n        var pi = stack.pop();\n        var arg = stack.pop();\n        var appem = base + ((arg & 0xF0) >> 4);\n        if (appem !== ppem) { continue; }\n\n        var mag = (arg & 0x0F) - 8;\n        if (mag >= 0) { mag++; }\n        if (exports.DEBUG) { console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds); }\n\n        var p = z0[pi];\n        fv.setRelative(p, p, mag * ds, pv);\n    }\n}\n\n// SDB[] Set Delta Base in the graphics state\n// 0x5E\nfunction SDB(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SDB[]', n); }\n\n    state.deltaBase = n;\n}\n\n// SDS[] Set Delta Shift in the graphics state\n// 0x5F\nfunction SDS(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SDS[]', n); }\n\n    state.deltaShift = Math.pow(0.5, n);\n}\n\n// ADD[] ADD\n// 0x60\nfunction ADD(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'ADD[]', n2, n1); }\n\n    stack.push(n1 + n2);\n}\n\n// SUB[] SUB\n// 0x61\nfunction SUB(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SUB[]', n2, n1); }\n\n    stack.push(n1 - n2);\n}\n\n// DIV[] DIV\n// 0x62\nfunction DIV(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'DIV[]', n2, n1); }\n\n    stack.push(n1 * 64 / n2);\n}\n\n// MUL[] MUL\n// 0x63\nfunction MUL(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'MUL[]', n2, n1); }\n\n    stack.push(n1 * n2 / 64);\n}\n\n// ABS[] ABSolute value\n// 0x64\nfunction ABS(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'ABS[]', n); }\n\n    stack.push(Math.abs(n));\n}\n\n// NEG[] NEGate\n// 0x65\nfunction NEG(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'NEG[]', n); }\n\n    stack.push(-n);\n}\n\n// FLOOR[] FLOOR\n// 0x66\nfunction FLOOR(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'FLOOR[]', n); }\n\n    stack.push(Math.floor(n / 0x40) * 0x40);\n}\n\n// CEILING[] CEILING\n// 0x67\nfunction CEILING(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'CEILING[]', n); }\n\n    stack.push(Math.ceil(n / 0x40) * 0x40);\n}\n\n// ROUND[ab] ROUND value\n// 0x68-0x6B\nfunction ROUND(dt, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'ROUND[]'); }\n\n    stack.push(state.round(n / 0x40) * 0x40);\n}\n\n// WCVTF[] Write Control Value Table in Funits\n// 0x70\nfunction WCVTF(state) {\n    var stack = state.stack;\n    var v = stack.pop();\n    var l = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'WCVTF[]', v, l); }\n\n    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n}\n\n// DELTAC1[] DELTA exception C1\n// DELTAC2[] DELTA exception C2\n// DELTAC3[] DELTA exception C3\n// 0x73, 0x74, 0x75\nfunction DELTAC123(b, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var ppem = state.ppem;\n    var base = state.deltaBase + (b - 1) * 16;\n    var ds = state.deltaShift;\n\n    if (exports.DEBUG) { console.log(state.step, 'DELTAC[' + b + ']', n, stack); }\n\n    for (var i = 0; i < n; i++) {\n        var c = stack.pop();\n        var arg = stack.pop();\n        var appem = base + ((arg & 0xF0) >> 4);\n        if (appem !== ppem) { continue; }\n\n        var mag = (arg & 0x0F) - 8;\n        if (mag >= 0) { mag++; }\n\n        var delta = mag * ds;\n\n        if (exports.DEBUG) { console.log(state.step, 'DELTACFIX', c, 'by', delta); }\n\n        state.cvt[c] += delta;\n    }\n}\n\n// SROUND[] Super ROUND\n// 0x76\nfunction SROUND(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'SROUND[]', n); }\n\n    state.round = roundSuper;\n\n    var period;\n\n    switch (n & 0xC0) {\n        case 0x00:\n            period = 0.5;\n            break;\n        case 0x40:\n            period = 1;\n            break;\n        case 0x80:\n            period = 2;\n            break;\n        default:\n            throw new Error('invalid SROUND value');\n    }\n\n    state.srPeriod = period;\n\n    switch (n & 0x30) {\n        case 0x00:\n            state.srPhase = 0;\n            break;\n        case 0x10:\n            state.srPhase = 0.25 * period;\n            break;\n        case 0x20:\n            state.srPhase = 0.5  * period;\n            break;\n        case 0x30:\n            state.srPhase = 0.75 * period;\n            break;\n        default: throw new Error('invalid SROUND value');\n    }\n\n    n &= 0x0F;\n\n    if (n === 0) { state.srThreshold = 0; }\n    else { state.srThreshold = (n / 8 - 0.5) * period; }\n}\n\n// S45ROUND[] Super ROUND 45 degrees\n// 0x77\nfunction S45ROUND(state) {\n    var n = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'S45ROUND[]', n); }\n\n    state.round = roundSuper;\n\n    var period;\n\n    switch (n & 0xC0) {\n        case 0x00:\n            period = Math.sqrt(2) / 2;\n            break;\n        case 0x40:\n            period = Math.sqrt(2);\n            break;\n        case 0x80:\n            period = 2 * Math.sqrt(2);\n            break;\n        default:\n            throw new Error('invalid S45ROUND value');\n    }\n\n    state.srPeriod = period;\n\n    switch (n & 0x30) {\n        case 0x00:\n            state.srPhase = 0;\n            break;\n        case 0x10:\n            state.srPhase = 0.25 * period;\n            break;\n        case 0x20:\n            state.srPhase = 0.5  * period;\n            break;\n        case 0x30:\n            state.srPhase = 0.75 * period;\n            break;\n        default:\n            throw new Error('invalid S45ROUND value');\n    }\n\n    n &= 0x0F;\n\n    if (n === 0) { state.srThreshold = 0; }\n    else { state.srThreshold = (n / 8 - 0.5) * period; }\n}\n\n// ROFF[] Round Off\n// 0x7A\nfunction ROFF(state) {\n    if (exports.DEBUG) { console.log(state.step, 'ROFF[]'); }\n\n    state.round = roundOff;\n}\n\n// RUTG[] Round Up To Grid\n// 0x7C\nfunction RUTG(state) {\n    if (exports.DEBUG) { console.log(state.step, 'RUTG[]'); }\n\n    state.round = roundUpToGrid;\n}\n\n// RDTG[] Round Down To Grid\n// 0x7D\nfunction RDTG(state) {\n    if (exports.DEBUG) { console.log(state.step, 'RDTG[]'); }\n\n    state.round = roundDownToGrid;\n}\n\n// SCANCTRL[] SCAN conversion ConTRoL\n// 0x85\nfunction SCANCTRL(state) {\n    var n = state.stack.pop();\n\n    // ignored by opentype.js\n\n    if (exports.DEBUG) { console.log(state.step, 'SCANCTRL[]', n); }\n}\n\n// SDPVTL[a] Set Dual Projection Vector To Line\n// 0x86-0x87\nfunction SDPVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n\n    if (exports.DEBUG) { console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i); }\n\n    var dx;\n    var dy;\n\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n\n    state.dpv = getUnitVector(dx, dy);\n}\n\n// GETINFO[] GET INFOrmation\n// 0x88\nfunction GETINFO(state) {\n    var stack = state.stack;\n    var sel = stack.pop();\n    var r = 0;\n\n    if (exports.DEBUG) { console.log(state.step, 'GETINFO[]', sel); }\n\n    // v35 as in no subpixel hinting\n    if (sel & 0x01) { r = 35; }\n\n    // TODO rotation and stretch currently not supported\n    // and thus those GETINFO are always 0.\n\n    // opentype.js is always gray scaling\n    if (sel & 0x20) { r |= 0x1000; }\n\n    stack.push(r);\n}\n\n// ROLL[] ROLL the top three stack elements\n// 0x8A\nfunction ROLL(state) {\n    var stack = state.stack;\n    var a = stack.pop();\n    var b = stack.pop();\n    var c = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'ROLL[]'); }\n\n    stack.push(b);\n    stack.push(a);\n    stack.push(c);\n}\n\n// MAX[] MAXimum of top two stack elements\n// 0x8B\nfunction MAX(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'MAX[]', e2, e1); }\n\n    stack.push(Math.max(e1, e2));\n}\n\n// MIN[] MINimum of top two stack elements\n// 0x8C\nfunction MIN(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'MIN[]', e2, e1); }\n\n    stack.push(Math.min(e1, e2));\n}\n\n// SCANTYPE[] SCANTYPE\n// 0x8D\nfunction SCANTYPE(state) {\n    var n = state.stack.pop();\n    // ignored by opentype.js\n    if (exports.DEBUG) { console.log(state.step, 'SCANTYPE[]', n); }\n}\n\n// INSTCTRL[] INSTCTRL\n// 0x8D\nfunction INSTCTRL(state) {\n    var s = state.stack.pop();\n    var v = state.stack.pop();\n\n    if (exports.DEBUG) { console.log(state.step, 'INSTCTRL[]', s, v); }\n\n    switch (s) {\n        case 1 : state.inhibitGridFit = !!v; return;\n        case 2 : state.ignoreCvt = !!v; return;\n        default: throw new Error('invalid INSTCTRL[] selector');\n    }\n}\n\n// PUSHB[abc] PUSH Bytes\n// 0xB0-0xB7\nfunction PUSHB(n, state) {\n    var stack = state.stack;\n    var prog = state.prog;\n    var ip = state.ip;\n\n    if (exports.DEBUG) { console.log(state.step, 'PUSHB[' + n + ']'); }\n\n    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }\n\n    state.ip = ip;\n}\n\n// PUSHW[abc] PUSH Words\n// 0xB8-0xBF\nfunction PUSHW(n, state) {\n    var ip = state.ip;\n    var prog = state.prog;\n    var stack = state.stack;\n\n    if (exports.DEBUG) { console.log(state.ip, 'PUSHW[' + n + ']'); }\n\n    for (var i = 0; i < n; i++) {\n        var w = (prog[++ip] << 8) | prog[++ip];\n        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }\n        stack.push(w);\n    }\n\n    state.ip = ip;\n}\n\n// MDRP[abcde] Move Direct Relative Point\n// 0xD0-0xEF\n// (if indirect is 0)\n//\n// and\n//\n// MIRP[abcde] Move Indirect Relative Point\n// 0xE0-0xFF\n// (if indirect is 1)\n\nfunction MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {\n    var stack = state.stack;\n    var cvte = indirect && stack.pop();\n    var pi = stack.pop();\n    var rp0i = state.rp0;\n    var rp = state.z0[rp0i];\n    var p = state.z1[pi];\n\n    var md = state.minDis;\n    var fv = state.fv;\n    var pv = state.dpv;\n    var od; // original distance\n    var d; // moving distance\n    var sign; // sign of distance\n    var cv;\n\n    d = od = pv.distance(p, rp, true, true);\n    sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0\n\n    // TODO consider autoFlip\n    d = Math.abs(d);\n\n    if (indirect) {\n        cv = state.cvt[cvte];\n\n        if (ro && Math.abs(d - cv) < state.cvCutIn) { d = cv; }\n    }\n\n    if (keepD && d < md) { d = md; }\n\n    if (ro) { d = state.round(d); }\n\n    fv.setRelative(p, rp, sign * d, pv);\n    fv.touch(p);\n\n    if (exports.DEBUG) {\n        console.log(\n            state.step,\n            (indirect ? 'MIRP[' : 'MDRP[') +\n            (setRp0 ? 'M' : 'm') +\n            (keepD ? '>' : '_') +\n            (ro ? 'R' : '_') +\n            (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +\n            ']',\n            indirect ?\n                cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :\n                '',\n            pi,\n            '(d =', od, '->', sign * d, ')'\n        );\n    }\n\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (setRp0) { state.rp0 = pi; }\n}\n\n/*\n* The instruction table.\n*/\ninstructionTable = [\n    /* 0x00 */ SVTCA.bind(undefined, yUnitVector),\n    /* 0x01 */ SVTCA.bind(undefined, xUnitVector),\n    /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),\n    /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),\n    /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),\n    /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),\n    /* 0x06 */ SPVTL.bind(undefined, 0),\n    /* 0x07 */ SPVTL.bind(undefined, 1),\n    /* 0x08 */ SFVTL.bind(undefined, 0),\n    /* 0x09 */ SFVTL.bind(undefined, 1),\n    /* 0x0A */ SPVFS,\n    /* 0x0B */ SFVFS,\n    /* 0x0C */ GPV,\n    /* 0x0D */ GFV,\n    /* 0x0E */ SFVTPV,\n    /* 0x0F */ ISECT,\n    /* 0x10 */ SRP0,\n    /* 0x11 */ SRP1,\n    /* 0x12 */ SRP2,\n    /* 0x13 */ SZP0,\n    /* 0x14 */ SZP1,\n    /* 0x15 */ SZP2,\n    /* 0x16 */ SZPS,\n    /* 0x17 */ SLOOP,\n    /* 0x18 */ RTG,\n    /* 0x19 */ RTHG,\n    /* 0x1A */ SMD,\n    /* 0x1B */ ELSE,\n    /* 0x1C */ JMPR,\n    /* 0x1D */ SCVTCI,\n    /* 0x1E */ undefined,   // TODO SSWCI\n    /* 0x1F */ undefined,   // TODO SSW\n    /* 0x20 */ DUP,\n    /* 0x21 */ POP,\n    /* 0x22 */ CLEAR,\n    /* 0x23 */ SWAP,\n    /* 0x24 */ DEPTH,\n    /* 0x25 */ CINDEX,\n    /* 0x26 */ MINDEX,\n    /* 0x27 */ undefined,   // TODO ALIGNPTS\n    /* 0x28 */ undefined,\n    /* 0x29 */ undefined,   // TODO UTP\n    /* 0x2A */ LOOPCALL,\n    /* 0x2B */ CALL,\n    /* 0x2C */ FDEF,\n    /* 0x2D */ undefined,   // ENDF (eaten by FDEF)\n    /* 0x2E */ MDAP.bind(undefined, 0),\n    /* 0x2F */ MDAP.bind(undefined, 1),\n    /* 0x30 */ IUP.bind(undefined, yUnitVector),\n    /* 0x31 */ IUP.bind(undefined, xUnitVector),\n    /* 0x32 */ SHP.bind(undefined, 0),\n    /* 0x33 */ SHP.bind(undefined, 1),\n    /* 0x34 */ SHC.bind(undefined, 0),\n    /* 0x35 */ SHC.bind(undefined, 1),\n    /* 0x36 */ SHZ.bind(undefined, 0),\n    /* 0x37 */ SHZ.bind(undefined, 1),\n    /* 0x38 */ SHPIX,\n    /* 0x39 */ IP,\n    /* 0x3A */ MSIRP.bind(undefined, 0),\n    /* 0x3B */ MSIRP.bind(undefined, 1),\n    /* 0x3C */ ALIGNRP,\n    /* 0x3D */ RTDG,\n    /* 0x3E */ MIAP.bind(undefined, 0),\n    /* 0x3F */ MIAP.bind(undefined, 1),\n    /* 0x40 */ NPUSHB,\n    /* 0x41 */ NPUSHW,\n    /* 0x42 */ WS,\n    /* 0x43 */ RS,\n    /* 0x44 */ WCVTP,\n    /* 0x45 */ RCVT,\n    /* 0x46 */ GC.bind(undefined, 0),\n    /* 0x47 */ GC.bind(undefined, 1),\n    /* 0x48 */ undefined,   // TODO SCFS\n    /* 0x49 */ MD.bind(undefined, 0),\n    /* 0x4A */ MD.bind(undefined, 1),\n    /* 0x4B */ MPPEM,\n    /* 0x4C */ undefined,   // TODO MPS\n    /* 0x4D */ FLIPON,\n    /* 0x4E */ undefined,   // TODO FLIPOFF\n    /* 0x4F */ undefined,   // TODO DEBUG\n    /* 0x50 */ LT,\n    /* 0x51 */ LTEQ,\n    /* 0x52 */ GT,\n    /* 0x53 */ GTEQ,\n    /* 0x54 */ EQ,\n    /* 0x55 */ NEQ,\n    /* 0x56 */ ODD,\n    /* 0x57 */ EVEN,\n    /* 0x58 */ IF,\n    /* 0x59 */ EIF,\n    /* 0x5A */ AND,\n    /* 0x5B */ OR,\n    /* 0x5C */ NOT,\n    /* 0x5D */ DELTAP123.bind(undefined, 1),\n    /* 0x5E */ SDB,\n    /* 0x5F */ SDS,\n    /* 0x60 */ ADD,\n    /* 0x61 */ SUB,\n    /* 0x62 */ DIV,\n    /* 0x63 */ MUL,\n    /* 0x64 */ ABS,\n    /* 0x65 */ NEG,\n    /* 0x66 */ FLOOR,\n    /* 0x67 */ CEILING,\n    /* 0x68 */ ROUND.bind(undefined, 0),\n    /* 0x69 */ ROUND.bind(undefined, 1),\n    /* 0x6A */ ROUND.bind(undefined, 2),\n    /* 0x6B */ ROUND.bind(undefined, 3),\n    /* 0x6C */ undefined,   // TODO NROUND[ab]\n    /* 0x6D */ undefined,   // TODO NROUND[ab]\n    /* 0x6E */ undefined,   // TODO NROUND[ab]\n    /* 0x6F */ undefined,   // TODO NROUND[ab]\n    /* 0x70 */ WCVTF,\n    /* 0x71 */ DELTAP123.bind(undefined, 2),\n    /* 0x72 */ DELTAP123.bind(undefined, 3),\n    /* 0x73 */ DELTAC123.bind(undefined, 1),\n    /* 0x74 */ DELTAC123.bind(undefined, 2),\n    /* 0x75 */ DELTAC123.bind(undefined, 3),\n    /* 0x76 */ SROUND,\n    /* 0x77 */ S45ROUND,\n    /* 0x78 */ undefined,   // TODO JROT[]\n    /* 0x79 */ undefined,   // TODO JROF[]\n    /* 0x7A */ ROFF,\n    /* 0x7B */ undefined,\n    /* 0x7C */ RUTG,\n    /* 0x7D */ RDTG,\n    /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though\n    /* 0x7F */ POP, // actually AA, supposed to do only a pop though\n    /* 0x80 */ undefined,   // TODO FLIPPT\n    /* 0x81 */ undefined,   // TODO FLIPRGON\n    /* 0x82 */ undefined,   // TODO FLIPRGOFF\n    /* 0x83 */ undefined,\n    /* 0x84 */ undefined,\n    /* 0x85 */ SCANCTRL,\n    /* 0x86 */ SDPVTL.bind(undefined, 0),\n    /* 0x87 */ SDPVTL.bind(undefined, 1),\n    /* 0x88 */ GETINFO,\n    /* 0x89 */ undefined,   // TODO IDEF\n    /* 0x8A */ ROLL,\n    /* 0x8B */ MAX,\n    /* 0x8C */ MIN,\n    /* 0x8D */ SCANTYPE,\n    /* 0x8E */ INSTCTRL,\n    /* 0x8F */ undefined,\n    /* 0x90 */ undefined,\n    /* 0x91 */ undefined,\n    /* 0x92 */ undefined,\n    /* 0x93 */ undefined,\n    /* 0x94 */ undefined,\n    /* 0x95 */ undefined,\n    /* 0x96 */ undefined,\n    /* 0x97 */ undefined,\n    /* 0x98 */ undefined,\n    /* 0x99 */ undefined,\n    /* 0x9A */ undefined,\n    /* 0x9B */ undefined,\n    /* 0x9C */ undefined,\n    /* 0x9D */ undefined,\n    /* 0x9E */ undefined,\n    /* 0x9F */ undefined,\n    /* 0xA0 */ undefined,\n    /* 0xA1 */ undefined,\n    /* 0xA2 */ undefined,\n    /* 0xA3 */ undefined,\n    /* 0xA4 */ undefined,\n    /* 0xA5 */ undefined,\n    /* 0xA6 */ undefined,\n    /* 0xA7 */ undefined,\n    /* 0xA8 */ undefined,\n    /* 0xA9 */ undefined,\n    /* 0xAA */ undefined,\n    /* 0xAB */ undefined,\n    /* 0xAC */ undefined,\n    /* 0xAD */ undefined,\n    /* 0xAE */ undefined,\n    /* 0xAF */ undefined,\n    /* 0xB0 */ PUSHB.bind(undefined, 1),\n    /* 0xB1 */ PUSHB.bind(undefined, 2),\n    /* 0xB2 */ PUSHB.bind(undefined, 3),\n    /* 0xB3 */ PUSHB.bind(undefined, 4),\n    /* 0xB4 */ PUSHB.bind(undefined, 5),\n    /* 0xB5 */ PUSHB.bind(undefined, 6),\n    /* 0xB6 */ PUSHB.bind(undefined, 7),\n    /* 0xB7 */ PUSHB.bind(undefined, 8),\n    /* 0xB8 */ PUSHW.bind(undefined, 1),\n    /* 0xB9 */ PUSHW.bind(undefined, 2),\n    /* 0xBA */ PUSHW.bind(undefined, 3),\n    /* 0xBB */ PUSHW.bind(undefined, 4),\n    /* 0xBC */ PUSHW.bind(undefined, 5),\n    /* 0xBD */ PUSHW.bind(undefined, 6),\n    /* 0xBE */ PUSHW.bind(undefined, 7),\n    /* 0xBF */ PUSHW.bind(undefined, 8),\n    /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),\n    /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),\n    /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),\n    /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),\n    /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),\n    /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),\n    /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),\n    /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),\n    /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),\n    /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),\n    /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),\n    /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),\n    /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),\n    /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),\n    /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),\n    /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),\n    /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),\n    /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),\n    /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),\n    /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),\n    /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),\n    /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),\n    /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),\n    /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),\n    /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),\n    /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),\n    /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),\n    /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),\n    /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),\n    /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),\n    /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),\n    /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),\n    /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),\n    /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),\n    /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),\n    /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),\n    /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),\n    /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),\n    /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),\n    /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),\n    /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),\n    /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),\n    /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),\n    /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),\n    /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),\n    /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),\n    /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),\n    /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),\n    /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),\n    /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),\n    /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),\n    /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),\n    /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),\n    /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),\n    /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),\n    /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),\n    /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),\n    /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),\n    /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),\n    /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),\n    /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),\n    /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),\n    /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),\n    /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)\n];\n\n/*****************************\n  Mathematical Considerations\n******************************\n\nfv ... refers to freedom vector\npv ... refers to projection vector\nrp ... refers to reference point\np  ... refers to to point being operated on\nd  ... refers to distance\n\nSETRELATIVE:\n============\n\ncase freedom vector == x-axis:\n------------------------------\n\n                        (pv)\n                     .-'\n              rpd .-'\n               .-*\n          d .-'90°'\n         .-'       '\n      .-'           '\n   *-'               ' b\n  rp                  '\n                       '\n                        '\n            p *----------*-------------- (fv)\n                          pm\n\n  rpdx = rpx + d * pv.x\n  rpdy = rpy + d * pv.y\n\n  equation of line b\n\n   y - rpdy = pvns * (x- rpdx)\n\n   y = p.y\n\n   x = rpdx + ( p.y - rpdy ) / pvns\n\n\ncase freedom vector == y-axis:\n------------------------------\n\n    * pm\n    |\\\n    | \\\n    |  \\\n    |   \\\n    |    \\\n    |     \\\n    |      \\\n    |       \\\n    |        \\\n    |         \\ b\n    |          \\\n    |           \\\n    |            \\    .-' (pv)\n    |         90° \\.-'\n    |           .-'* rpd\n    |        .-'\n    *     *-'  d\n    p     rp\n\n  rpdx = rpx + d * pv.x\n  rpdy = rpy + d * pv.y\n\n  equation of line b:\n           pvns ... normal slope to pv\n\n   y - rpdy = pvns * (x - rpdx)\n\n   x = p.x\n\n   y = rpdy +  pvns * (p.x - rpdx)\n\n\n\ngeneric case:\n-------------\n\n\n                              .'(fv)\n                            .'\n                          .* pm\n                        .' !\n                      .'    .\n                    .'      !\n                  .'         . b\n                .'           !\n               *              .\n              p               !\n                         90°   .    ... (pv)\n                           ...-*-'''\n                  ...---'''    rpd\n         ...---'''   d\n   *--'''\n  rp\n\n    rpdx = rpx + d * pv.x\n    rpdy = rpy + d * pv.y\n\n equation of line b:\n    pvns... normal slope to pv\n\n    y - rpdy = pvns * (x - rpdx)\n\n equation of freedom vector line:\n    fvs ... slope of freedom vector (=fy/fx)\n\n    y - py = fvs * (x - px)\n\n\n  on pm both equations are true for same x/y\n\n    y - rpdy = pvns * (x - rpdx)\n\n    y - py = fvs * (x - px)\n\n  form to y and set equal:\n\n    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\n  expand:\n\n    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\n  switch:\n\n    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\n  solve for x:\n\n    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n          fvs * px - pvns * rpdx + rpdy - py\n    x =  -----------------------------------\n                 fvs - pvns\n\n  and:\n\n    y = fvs * (x - px) + py\n\n\n\nINTERPOLATE:\n============\n\nExamples of point interpolation.\n\nThe weight of the movement of the reference point gets bigger\nthe further the other reference point is away, thus the safest\noption (that is avoiding 0/0 divisions) is to weight the\noriginal distance of the other point by the sum of both distances.\n\nIf the sum of both distances is 0, then move the point by the\narithmetic average of the movement of both reference points.\n\n\n\n\n           (+6)\n    rp1o *---->*rp1\n         .     .                          (+12)\n         .     .                  rp2o *---------->* rp2\n         .     .                       .           .\n         .     .                       .           .\n         .    10          20           .           .\n         |.........|...................|           .\n               .   .                               .\n               .   . (+8)                          .\n                po *------>*p                      .\n               .           .                       .\n               .    12     .          24           .\n               |...........|.......................|\n                                  36\n\n\n-------\n\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .                      (-10)\n         .         .              rp2 *<---------* rpo2\n         .         .                   .         .\n         .         .                   .         .\n         .    10   .          30       .         .\n         |.........|.............................|\n                   .                   .\n                   . (+5)              .\n                po *--->* p            .\n                   .    .              .\n                   .    .   20         .\n                   |....|..............|\n                     5        15\n\n\n-------\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .\n         .         .\n    rp2o *-------->*rp2\n\n\n                               (+10)\n                          po *-------->* p\n\n-------\n\n\n           (+10)\n    rp1o *-------->*rp1\n         .         .\n         .         .(+30)\n    rp2o *---------------------------->*rp2\n\n\n                                        (+25)\n                          po *----------------------->* p\n\n\n\nvim: set ts=4 sw=4 expandtab:\n*****/\n\n/**\n * Converts a string into a list of tokens.\n */\n\n/**\n * Create a new token\n * @param {string} char a single char\n */\nfunction Token(char) {\n    this.char = char;\n    this.state = {};\n    this.activeState = null;\n}\n\n/**\n * Create a new context range\n * @param {number} startIndex range start index\n * @param {number} endOffset range end index offset\n * @param {string} contextName owner context name\n */\nfunction ContextRange(startIndex, endOffset, contextName) {\n    this.contextName = contextName;\n    this.startIndex = startIndex;\n    this.endOffset = endOffset;\n}\n\n/**\n * Check context start and end\n * @param {string} contextName a unique context name\n * @param {function} checkStart a predicate function the indicates a context's start\n * @param {function} checkEnd a predicate function the indicates a context's end\n */\nfunction ContextChecker(contextName, checkStart, checkEnd) {\n    this.contextName = contextName;\n    this.openRange = null;\n    this.ranges = [];\n    this.checkStart = checkStart;\n    this.checkEnd = checkEnd;\n}\n\n/**\n * @typedef ContextParams\n * @type Object\n * @property {array} context context items\n * @property {number} currentIndex current item index\n */\n\n/**\n * Create a context params\n * @param {array} context a list of items\n * @param {number} currentIndex current item index\n */\nfunction ContextParams(context, currentIndex) {\n    this.context = context;\n    this.index = currentIndex;\n    this.length = context.length;\n    this.current = context[currentIndex];\n    this.backtrack = context.slice(0, currentIndex);\n    this.lookahead = context.slice(currentIndex + 1);\n}\n\n/**\n * Create an event instance\n * @param {string} eventId event unique id\n */\nfunction Event(eventId) {\n    this.eventId = eventId;\n    this.subscribers = [];\n}\n\n/**\n * Initialize a core events and auto subscribe required event handlers\n * @param {any} events an object that enlists core events handlers\n */\nfunction initializeCoreEvents(events) {\n    var this$1 = this;\n\n    var coreEvents = [\n        'start', 'end', 'next', 'newToken', 'contextStart',\n        'contextEnd', 'insertToken', 'removeToken', 'removeRange',\n        'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'\n    ];\n\n    coreEvents.forEach(function (eventId) {\n        Object.defineProperty(this$1.events, eventId, {\n            value: new Event(eventId)\n        });\n    });\n\n    if (!!events) {\n        coreEvents.forEach(function (eventId) {\n            var event = events[eventId];\n            if (typeof event === 'function') {\n                this$1.events[eventId].subscribe(event);\n            }\n        });\n    }\n    var requiresContextUpdate = [\n        'insertToken', 'removeToken', 'removeRange',\n        'replaceToken', 'replaceRange', 'composeRUD'\n    ];\n    requiresContextUpdate.forEach(function (eventId) {\n        this$1.events[eventId].subscribe(\n            this$1.updateContextsRanges\n        );\n    });\n}\n\n/**\n * Converts a string into a list of tokens\n * @param {any} events tokenizer core events\n */\nfunction Tokenizer(events) {\n    this.tokens = [];\n    this.registeredContexts = {};\n    this.contextCheckers = [];\n    this.events = {};\n    this.registeredModifiers = [];\n\n    initializeCoreEvents.call(this, events);\n}\n\n/**\n * Sets the state of a token, usually called by a state modifier.\n * @param {string} key state item key\n * @param {any} value state item value\n */\nToken.prototype.setState = function(key, value) {\n    this.state[key] = value;\n    this.activeState = { key: key, value: this.state[key] };\n    return this.activeState;\n};\n\nToken.prototype.getState = function (stateId) {\n    return this.state[stateId] || null;\n};\n\n/**\n * Checks if an index exists in the tokens list.\n * @param {number} index token index\n */\nTokenizer.prototype.inboundIndex = function(index) {\n    return index >= 0 && index < this.tokens.length;\n};\n\n/**\n * Compose and apply a list of operations (replace, update, delete)\n * @param {array} RUDs replace, update and delete operations\n * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)\n */\nTokenizer.prototype.composeRUD = function (RUDs) {\n    var this$1 = this;\n\n    var silent = true;\n    var state = RUDs.map(function (RUD) { return (\n        this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent))\n    ); });\n    var hasFAILObject = function (obj) { return (\n        typeof obj === 'object' &&\n        obj.hasOwnProperty('FAIL')\n    ); };\n    if (state.every(hasFAILObject)) {\n        return {\n            FAIL: \"composeRUD: one or more operations hasn't completed successfully\",\n            report: state.filter(hasFAILObject)\n        };\n    }\n    this.dispatch('composeRUD', [state.filter(function (op) { return !hasFAILObject(op); })]);\n};\n\n/**\n * Replace a range of tokens with a list of tokens\n * @param {number} startIndex range start index\n * @param {number} offset range offset\n * @param {token} tokens a list of tokens to replace\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {\n    offset = offset !== null ? offset : this.tokens.length;\n    var isTokenType = tokens.every(function (token) { return token instanceof Token; });\n    if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {\n        var replaced = this.tokens.splice.apply(\n            this.tokens, [startIndex, offset].concat(tokens)\n        );\n        if (!silent) { this.dispatch('replaceToken', [startIndex, offset, tokens]); }\n        return [replaced, tokens];\n    } else {\n        return { FAIL: 'replaceRange: invalid tokens or startIndex.' };\n    }\n};\n\n/**\n * Replace a token with another token\n * @param {number} index token index\n * @param {token} token a token to replace\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.replaceToken = function (index, token, silent) {\n    if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {\n        var replaced = this.tokens.splice(index, 1, token);\n        if (!silent) { this.dispatch('replaceToken', [index, token]); }\n        return [replaced[0], token];\n    } else {\n        return { FAIL: 'replaceToken: invalid token or index.' };\n    }\n};\n\n/**\n * Removes a range of tokens\n * @param {number} startIndex range start index\n * @param {number} offset range offset\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.removeRange = function(startIndex, offset, silent) {\n    offset = !isNaN(offset) ? offset : this.tokens.length;\n    var tokens = this.tokens.splice(startIndex, offset);\n    if (!silent) { this.dispatch('removeRange', [tokens, startIndex, offset]); }\n    return tokens;\n};\n\n/**\n * Remove a token at a certain index\n * @param {number} index token index\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.removeToken = function(index, silent) {\n    if (!isNaN(index) && this.inboundIndex(index)) {\n        var token = this.tokens.splice(index, 1);\n        if (!silent) { this.dispatch('removeToken', [token, index]); }\n        return token;\n    } else {\n        return { FAIL: 'removeToken: invalid token index.' };\n    }\n};\n\n/**\n * Insert a list of tokens at a certain index\n * @param {array} tokens a list of tokens to insert\n * @param {number} index insert the list of tokens at index\n * @param {boolean} silent dispatch events and update context ranges\n */\nTokenizer.prototype.insertToken = function (tokens, index, silent) {\n    var tokenType = tokens.every(\n        function (token) { return token instanceof Token; }\n    );\n    if (tokenType) {\n        this.tokens.splice.apply(\n            this.tokens, [index, 0].concat(tokens)\n        );\n        if (!silent) { this.dispatch('insertToken', [tokens, index]); }\n        return tokens;\n    } else {\n        return { FAIL: 'insertToken: invalid token(s).' };\n    }\n};\n\n/**\n * A state modifier that is called on 'newToken' event\n * @param {string} modifierId state modifier id\n * @param {function} condition a predicate function that returns true or false\n * @param {function} modifier a function to update token state\n */\nTokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {\n    this.events.newToken.subscribe(function(token, contextParams) {\n        var conditionParams = [token, contextParams];\n        var canApplyModifier = (\n            condition === null ||\n            condition.apply(this, conditionParams) === true\n        );\n        var modifierParams = [token, contextParams];\n        if (canApplyModifier) {\n            var newStateValue = modifier.apply(this, modifierParams);\n            token.setState(modifierId, newStateValue);\n        }\n    });\n    this.registeredModifiers.push(modifierId);\n};\n\n/**\n * Subscribe a handler to an event\n * @param {function} eventHandler an event handler function\n */\nEvent.prototype.subscribe = function (eventHandler) {\n    if (typeof eventHandler === 'function') {\n        return ((this.subscribers.push(eventHandler)) - 1);\n    } else {\n        return { FAIL: (\"invalid '\" + (this.eventId) + \"' event handler\")};\n    }\n};\n\n/**\n * Unsubscribe an event handler\n * @param {string} subsId subscription id\n */\nEvent.prototype.unsubscribe = function (subsId) {\n    this.subscribers.splice(subsId, 1);\n};\n\n/**\n * Sets context params current value index\n * @param {number} index context params current value index\n */\nContextParams.prototype.setCurrentIndex = function(index) {\n    this.index = index;\n    this.current = this.context[index];\n    this.backtrack = this.context.slice(0, index);\n    this.lookahead = this.context.slice(index + 1);\n};\n\n/**\n * Get an item at an offset from the current value\n * example (current value is 3):\n *  1    2   [3]   4    5   |   items values\n * -2   -1    0    1    2   |   offset values\n * @param {number} offset an offset from current value index\n */\nContextParams.prototype.get = function (offset) {\n    switch (true) {\n        case (offset === 0):\n            return this.current;\n        case (offset < 0 && Math.abs(offset) <= this.backtrack.length):\n            return this.backtrack.slice(offset)[0];\n        case (offset > 0 && offset <= this.lookahead.length):\n            return this.lookahead[offset - 1];\n        default:\n            return null;\n    }\n};\n\n/**\n * Converts a context range into a string value\n * @param {contextRange} range a context range\n */\nTokenizer.prototype.rangeToText = function (range) {\n    if (range instanceof ContextRange) {\n        return (\n            this.getRangeTokens(range)\n                .map(function (token) { return token.char; }).join('')\n        );\n    }\n};\n\n/**\n * Converts all tokens into a string\n */\nTokenizer.prototype.getText = function () {\n    return this.tokens.map(function (token) { return token.char; }).join('');\n};\n\n/**\n * Get a context by name\n * @param {string} contextName context name to get\n */\nTokenizer.prototype.getContext = function (contextName) {\n    var context = this.registeredContexts[contextName];\n    return !!context ? context : null;\n};\n\n/**\n * Subscribes a new event handler to an event\n * @param {string} eventName event name to subscribe to\n * @param {function} eventHandler a function to be invoked on event\n */\nTokenizer.prototype.on = function(eventName, eventHandler) {\n    var event = this.events[eventName];\n    if (!!event) {\n        return event.subscribe(eventHandler);\n    } else {\n        return null;\n    }\n};\n\n/**\n * Dispatches an event\n * @param {string} eventName event name\n * @param {any} args event handler arguments\n */\nTokenizer.prototype.dispatch = function(eventName, args) {\n    var this$1 = this;\n\n    var event = this.events[eventName];\n    if (event instanceof Event) {\n        event.subscribers.forEach(function (subscriber) {\n            subscriber.apply(this$1, args || []);\n        });\n    }\n};\n\n/**\n * Register a new context checker\n * @param {string} contextName a unique context name\n * @param {function} contextStartCheck a predicate function that returns true on context start\n * @param {function} contextEndCheck  a predicate function that returns true on context end\n * TODO: call tokenize on registration to update context ranges with the new context.\n */\nTokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {\n    if (!!this.getContext(contextName)) { return {\n        FAIL:\n        (\"context name '\" + contextName + \"' is already registered.\")\n    }; }\n    if (typeof contextStartCheck !== 'function') { return {\n        FAIL:\n        \"missing context start check.\"\n    }; }\n    if (typeof contextEndCheck !== 'function') { return {\n        FAIL:\n        \"missing context end check.\"\n    }; }\n    var contextCheckers = new ContextChecker(\n        contextName, contextStartCheck, contextEndCheck\n    );\n    this.registeredContexts[contextName] = contextCheckers;\n    this.contextCheckers.push(contextCheckers);\n    return contextCheckers;\n};\n\n/**\n * Gets a context range tokens\n * @param {contextRange} range a context range\n */\nTokenizer.prototype.getRangeTokens = function(range) {\n    var endIndex = range.startIndex + range.endOffset;\n    return [].concat(\n        this.tokens\n            .slice(range.startIndex, endIndex)\n    );\n};\n\n/**\n * Gets the ranges of a context\n * @param {string} contextName context name\n */\nTokenizer.prototype.getContextRanges = function(contextName) {\n    var context = this.getContext(contextName);\n    if (!!context) {\n        return context.ranges;\n    } else {\n        return { FAIL: (\"context checker '\" + contextName + \"' is not registered.\") };\n    }\n};\n\n/**\n * Resets context ranges to run context update\n */\nTokenizer.prototype.resetContextsRanges = function () {\n    var registeredContexts = this.registeredContexts;\n    for (var contextName in registeredContexts) {\n        if (registeredContexts.hasOwnProperty(contextName)) {\n            var context = registeredContexts[contextName];\n            context.ranges = [];\n        }\n    }\n};\n\n/**\n * Updates context ranges\n */\nTokenizer.prototype.updateContextsRanges = function () {\n    this.resetContextsRanges();\n    var chars = this.tokens.map(function (token) { return token.char; });\n    for (var i = 0; i < chars.length; i++) {\n        var contextParams = new ContextParams(chars, i);\n        this.runContextCheck(contextParams);\n    }\n    this.dispatch('updateContextsRanges', [this.registeredContexts]);\n};\n\n/**\n * Sets the end offset of an open range\n * @param {number} offset range end offset\n * @param {string} contextName context name\n */\nTokenizer.prototype.setEndOffset = function (offset, contextName) {\n    var startIndex = this.getContext(contextName).openRange.startIndex;\n    var range = new ContextRange(startIndex, offset, contextName);\n    var ranges = this.getContext(contextName).ranges;\n    range.rangeId = contextName + \".\" + (ranges.length);\n    ranges.push(range);\n    this.getContext(contextName).openRange = null;\n    return range;\n};\n\n/**\n * Runs a context check on the current context\n * @param {contextParams} contextParams current context params\n */\nTokenizer.prototype.runContextCheck = function(contextParams) {\n    var this$1 = this;\n\n    var index = contextParams.index;\n    this.contextCheckers.forEach(function (contextChecker) {\n        var contextName = contextChecker.contextName;\n        var openRange = this$1.getContext(contextName).openRange;\n        if (!openRange && contextChecker.checkStart(contextParams)) {\n            openRange = new ContextRange(index, null, contextName);\n            this$1.getContext(contextName).openRange = openRange;\n            this$1.dispatch('contextStart', [contextName, index]);\n        }\n        if (!!openRange && contextChecker.checkEnd(contextParams)) {\n            var offset = (index - openRange.startIndex) + 1;\n            var range = this$1.setEndOffset(offset, contextName);\n            this$1.dispatch('contextEnd', [contextName, range]);\n        }\n    });\n};\n\n/**\n * Converts a text into a list of tokens\n * @param {string} text a text to tokenize\n */\nTokenizer.prototype.tokenize = function (text) {\n    this.tokens = [];\n    this.resetContextsRanges();\n    var chars = Array.from(text);\n    this.dispatch('start');\n    for (var i = 0; i < chars.length; i++) {\n        var char = chars[i];\n        var contextParams = new ContextParams(chars, i);\n        this.dispatch('next', [contextParams]);\n        this.runContextCheck(contextParams);\n        var token = new Token(char);\n        this.tokens.push(token);\n        this.dispatch('newToken', [token, contextParams]);\n    }\n    this.dispatch('end', [this.tokens]);\n    return this.tokens;\n};\n\n// ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮\n// ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊\n// ╰─╾──────────────────────────┄─────────────────────────────────────────────╯\n// jscs:disable maximumLineLength\n/**\n * Check if a char is Arabic\n * @param {string} c a single char\n */\nfunction isArabicChar(c) {\n    return /[\\u0600-\\u065F\\u066A-\\u06D2\\u06FA-\\u06FF]/.test(c);\n}\n\n/**\n * Check if a char is an isolated arabic char\n * @param {string} c a single char\n */\nfunction isIsolatedArabicChar(char) {\n    return /[\\u0630\\u0690\\u0621\\u0631\\u0661\\u0671\\u0622\\u0632\\u0672\\u0692\\u06C2\\u0623\\u0673\\u0693\\u06C3\\u0624\\u0694\\u06C4\\u0625\\u0675\\u0695\\u06C5\\u06E5\\u0676\\u0696\\u06C6\\u0627\\u0677\\u0697\\u06C7\\u0648\\u0688\\u0698\\u06C8\\u0689\\u0699\\u06C9\\u068A\\u06CA\\u066B\\u068B\\u06CB\\u068C\\u068D\\u06CD\\u06FD\\u068E\\u06EE\\u06FE\\u062F\\u068F\\u06CF\\u06EF]/.test(char);\n}\n\n/**\n * Check if a char is an Arabic Tashkeel char\n * @param {string} c a single char\n */\nfunction isTashkeelArabicChar(char) {\n    return /[\\u0600-\\u0605\\u060C-\\u060E\\u0610-\\u061B\\u061E\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED]/.test(char);\n}\n\n/**\n * Check if a char is Latin\n * @param {string} c a single char\n */\nfunction isLatinChar(c) {\n    return /[A-z]/.test(c);\n}\n\n/**\n * Check if a char is whitespace char\n * @param {string} c a single char\n */\nfunction isWhiteSpace(c) {\n    return /\\s/.test(c);\n}\n\n/**\n * Query a feature by some of it's properties to lookup a glyph substitution.\n */\n\n/**\n * Create feature query instance\n * @param {Font} font opentype font instance\n */\nfunction FeatureQuery(font) {\n    this.font = font;\n    this.features = {};\n}\n\n/**\n * @typedef SubstitutionAction\n * @type Object\n * @property {number} id substitution type\n * @property {string} tag feature tag\n * @property {any} substitution substitution value(s)\n */\n\n/**\n * Create a substitution action instance\n * @param {SubstitutionAction} action\n */\nfunction SubstitutionAction(action) {\n    this.id = action.id;\n    this.tag = action.tag;\n    this.substitution = action.substitution;\n}\n\n/**\n * Lookup a coverage table\n * @param {number} glyphIndex glyph index\n * @param {CoverageTable} coverage coverage table\n */\nfunction lookupCoverage(glyphIndex, coverage) {\n    if (!glyphIndex) { return -1; }\n    switch (coverage.format) {\n        case 1:\n            return coverage.glyphs.indexOf(glyphIndex);\n\n        case 2:\n            var ranges = coverage.ranges;\n            for (var i = 0; i < ranges.length; i++) {\n                var range = ranges[i];\n                if (glyphIndex >= range.start && glyphIndex <= range.end) {\n                    var offset = glyphIndex - range.start;\n                    return range.index + offset;\n                }\n            }\n            break;\n        default:\n            return -1; // not found\n    }\n    return -1;\n}\n\n/**\n * Handle a single substitution - format 1\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction singleSubstitutionFormat1(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) { return null; }\n    return glyphIndex + subtable.deltaGlyphId;\n}\n\n/**\n * Handle a single substitution - format 2\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction singleSubstitutionFormat2(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) { return null; }\n    return subtable.substitute[substituteIndex];\n}\n\n/**\n * Lookup a list of coverage tables\n * @param {any} coverageList a list of coverage tables\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction lookupCoverageList(coverageList, contextParams) {\n    var lookupList = [];\n    for (var i = 0; i < coverageList.length; i++) {\n        var coverage = coverageList[i];\n        var glyphIndex = contextParams.current;\n        glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n        var lookupIndex = lookupCoverage(glyphIndex, coverage);\n        if (lookupIndex !== -1) {\n            lookupList.push(lookupIndex);\n        }\n    }\n    if (lookupList.length !== coverageList.length) { return -1; }\n    return lookupList;\n}\n\n/**\n * Handle chaining context substitution - format 3\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction chainingSubstitutionFormat3(contextParams, subtable) {\n    var lookupsCount = (\n        subtable.inputCoverage.length +\n        subtable.lookaheadCoverage.length +\n        subtable.backtrackCoverage.length\n    );\n    if (contextParams.context.length < lookupsCount) { return []; }\n    // INPUT LOOKUP //\n    var inputLookups = lookupCoverageList(\n        subtable.inputCoverage, contextParams\n    );\n    if (inputLookups === -1) { return []; }\n    // LOOKAHEAD LOOKUP //\n    var lookaheadOffset = subtable.inputCoverage.length - 1;\n    if (contextParams.lookahead.length < subtable.lookaheadCoverage.length) { return []; }\n    var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);\n    while (lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)) {\n        lookaheadContext.shift();\n    }\n    var lookaheadParams = new ContextParams(lookaheadContext, 0);\n    var lookaheadLookups = lookupCoverageList(\n        subtable.lookaheadCoverage, lookaheadParams\n    );\n    // BACKTRACK LOOKUP //\n    var backtrackContext = [].concat(contextParams.backtrack);\n    backtrackContext.reverse();\n    while (backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)) {\n        backtrackContext.shift();\n    }\n    if (backtrackContext.length < subtable.backtrackCoverage.length) { return []; }\n    var backtrackParams = new ContextParams(backtrackContext, 0);\n    var backtrackLookups = lookupCoverageList(\n        subtable.backtrackCoverage, backtrackParams\n    );\n    var contextRulesMatch = (\n        inputLookups.length === subtable.inputCoverage.length &&\n        lookaheadLookups.length === subtable.lookaheadCoverage.length &&\n        backtrackLookups.length === subtable.backtrackCoverage.length\n    );\n    var substitutions = [];\n    if (contextRulesMatch) {\n        for (var i = 0; i < subtable.lookupRecords.length; i++) {\n            var lookupRecord = subtable.lookupRecords[i];\n            var lookupListIndex = lookupRecord.lookupListIndex;\n            var lookupTable = this.getLookupByIndex(lookupListIndex);\n            for (var s = 0; s < lookupTable.subtables.length; s++) {\n                var subtable$1 = lookupTable.subtables[s];\n                var lookup = this.getLookupMethod(lookupTable, subtable$1);\n                var substitutionType = this.getSubstitutionType(lookupTable, subtable$1);\n                if (substitutionType === '12') {\n                    for (var n = 0; n < inputLookups.length; n++) {\n                        var glyphIndex = contextParams.get(n);\n                        var substitution = lookup(glyphIndex);\n                        if (substitution) { substitutions.push(substitution); }\n                    }\n                }\n            }\n        }\n    }\n    return substitutions;\n}\n\n/**\n * Handle ligature substitution - format 1\n * @param {ContextParams} contextParams context params to lookup\n */\nfunction ligatureSubstitutionFormat1(contextParams, subtable) {\n    // COVERAGE LOOKUP //\n    var glyphIndex = contextParams.current;\n    var ligSetIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (ligSetIndex === -1) { return null; }\n    // COMPONENTS LOOKUP\n    // (!) note, components are ordered in the written direction.\n    var ligature;\n    var ligatureSet = subtable.ligatureSets[ligSetIndex];\n    for (var s = 0; s < ligatureSet.length; s++) {\n        ligature = ligatureSet[s];\n        for (var l = 0; l < ligature.components.length; l++) {\n            var lookaheadItem = contextParams.lookahead[l];\n            var component = ligature.components[l];\n            if (lookaheadItem !== component) { break; }\n            if (l === ligature.components.length - 1) { return ligature; }\n        }\n    }\n    return null;\n}\n\n/**\n * Handle decomposition substitution - format 1\n * @param {number} glyphIndex glyph index\n * @param {any} subtable subtable\n */\nfunction decompositionSubstitutionFormat1(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) { return null; }\n    return subtable.sequences[substituteIndex];\n}\n\n/**\n * Get default script features indexes\n */\nFeatureQuery.prototype.getDefaultScriptFeaturesIndexes = function () {\n    var scripts = this.font.tables.gsub.scripts;\n    for (var s = 0; s < scripts.length; s++) {\n        var script = scripts[s];\n        if (script.tag === 'DFLT') { return (\n            script.script.defaultLangSys.featureIndexes\n        ); }\n    }\n    return [];\n};\n\n/**\n * Get feature indexes of a specific script\n * @param {string} scriptTag script tag\n */\nFeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {\n    var tables = this.font.tables;\n    if (!tables.gsub) { return []; }\n    if (!scriptTag) { return this.getDefaultScriptFeaturesIndexes(); }\n    var scripts = this.font.tables.gsub.scripts;\n    for (var i = 0; i < scripts.length; i++) {\n        var script = scripts[i];\n        if (script.tag === scriptTag && script.script.defaultLangSys) {\n            return script.script.defaultLangSys.featureIndexes;\n        } else {\n            var langSysRecords = script.langSysRecords;\n            if (!!langSysRecords) {\n                for (var j = 0; j < langSysRecords.length; j++) {\n                    var langSysRecord = langSysRecords[j];\n                    if (langSysRecord.tag === scriptTag) {\n                        var langSys = langSysRecord.langSys;\n                        return langSys.featureIndexes;\n                    }\n                }\n            }\n        }\n    }\n    return this.getDefaultScriptFeaturesIndexes();\n};\n\n/**\n * Map a feature tag to a gsub feature\n * @param {any} features gsub features\n * @param {string} scriptTag script tag\n */\nFeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {\n    var tags = {};\n    for (var i = 0; i < features.length; i++) {\n        var tag = features[i].tag;\n        var feature = features[i].feature;\n        tags[tag] = feature;\n    }\n    this.features[scriptTag].tags = tags;\n};\n\n/**\n * Get features of a specific script\n * @param {string} scriptTag script tag\n */\nFeatureQuery.prototype.getScriptFeatures = function (scriptTag) {\n    var features = this.features[scriptTag];\n    if (this.features.hasOwnProperty(scriptTag)) { return features; }\n    var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);\n    if (!featuresIndexes) { return null; }\n    var gsub = this.font.tables.gsub;\n    features = featuresIndexes.map(function (index) { return gsub.features[index]; });\n    this.features[scriptTag] = features;\n    this.mapTagsToFeatures(features, scriptTag);\n    return features;\n};\n\n/**\n * Get substitution type\n * @param {any} lookupTable lookup table\n * @param {any} subtable subtable\n */\nFeatureQuery.prototype.getSubstitutionType = function(lookupTable, subtable) {\n    var lookupType = lookupTable.lookupType.toString();\n    var substFormat = subtable.substFormat.toString();\n    return lookupType + substFormat;\n};\n\n/**\n * Get lookup method\n * @param {any} lookupTable lookup table\n * @param {any} subtable subtable\n */\nFeatureQuery.prototype.getLookupMethod = function(lookupTable, subtable) {\n    var this$1 = this;\n\n    var substitutionType = this.getSubstitutionType(lookupTable, subtable);\n    switch (substitutionType) {\n        case '11':\n            return function (glyphIndex) { return singleSubstitutionFormat1.apply(\n                this$1, [glyphIndex, subtable]\n            ); };\n        case '12':\n            return function (glyphIndex) { return singleSubstitutionFormat2.apply(\n                this$1, [glyphIndex, subtable]\n            ); };\n        case '63':\n            return function (contextParams) { return chainingSubstitutionFormat3.apply(\n                this$1, [contextParams, subtable]\n            ); };\n        case '41':\n            return function (contextParams) { return ligatureSubstitutionFormat1.apply(\n                this$1, [contextParams, subtable]\n            ); };\n        case '21':\n            return function (glyphIndex) { return decompositionSubstitutionFormat1.apply(\n                this$1, [glyphIndex, subtable]\n            ); };\n        default:\n            throw new Error(\n                \"lookupType: \" + (lookupTable.lookupType) + \" - \" +\n                \"substFormat: \" + (subtable.substFormat) + \" \" +\n                \"is not yet supported\"\n            );\n    }\n};\n\n/**\n * [ LOOKUP TYPES ]\n * -------------------------------\n * Single                        1;\n * Multiple                      2;\n * Alternate                     3;\n * Ligature                      4;\n * Context                       5;\n * ChainingContext               6;\n * ExtensionSubstitution         7;\n * ReverseChainingContext        8;\n * -------------------------------\n *\n */\n\n/**\n * @typedef FQuery\n * @type Object\n * @param {string} tag feature tag\n * @param {string} script feature script\n * @param {ContextParams} contextParams context params\n */\n\n/**\n * Lookup a feature using a query parameters\n * @param {FQuery} query feature query\n */\nFeatureQuery.prototype.lookupFeature = function (query) {\n    var contextParams = query.contextParams;\n    var currentIndex = contextParams.index;\n    var feature = this.getFeature({\n        tag: query.tag, script: query.script\n    });\n    if (!feature) { return new Error(\n        \"font '\" + (this.font.names.fullName.en) + \"' \" +\n        \"doesn't support feature '\" + (query.tag) + \"' \" +\n        \"for script '\" + (query.script) + \"'.\"\n    ); }\n    var lookups = this.getFeatureLookups(feature);\n    var substitutions = [].concat(contextParams.context);\n    for (var l = 0; l < lookups.length; l++) {\n        var lookupTable = lookups[l];\n        var subtables = this.getLookupSubtables(lookupTable);\n        for (var s = 0; s < subtables.length; s++) {\n            var subtable = subtables[s];\n            var substType = this.getSubstitutionType(lookupTable, subtable);\n            var lookup = this.getLookupMethod(lookupTable, subtable);\n            var substitution = (void 0);\n            switch (substType) {\n                case '11':\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 11, tag: query.tag, substitution: substitution\n                        }));\n                    }\n                    break;\n                case '12':\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 12, tag: query.tag, substitution: substitution\n                        }));\n                    }\n                    break;\n                case '63':\n                    substitution = lookup(contextParams);\n                    if (Array.isArray(substitution) && substitution.length) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 63, tag: query.tag, substitution: substitution\n                        }));\n                    }\n                    break;\n                case '41':\n                    substitution = lookup(contextParams);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 41, tag: query.tag, substitution: substitution\n                        }));\n                    }\n                    break;\n                case '21':\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 21, tag: query.tag, substitution: substitution\n                        }));\n                    }\n                    break;\n            }\n            contextParams = new ContextParams(substitutions, currentIndex);\n            if (Array.isArray(substitution) && !substitution.length) { continue; }\n            substitution = null;\n        }\n    }\n    return substitutions.length ? substitutions : null;\n};\n\n/**\n * Checks if a font supports a specific features\n * @param {FQuery} query feature query object\n */\nFeatureQuery.prototype.supports = function (query) {\n    if (!query.script) { return false; }\n    this.getScriptFeatures(query.script);\n    var supportedScript = this.features.hasOwnProperty(query.script);\n    if (!query.tag) { return supportedScript; }\n    var supportedFeature = (\n        this.features[query.script].some(function (feature) { return feature.tag === query.tag; })\n    );\n    return supportedScript && supportedFeature;\n};\n\n/**\n * Get lookup table subtables\n * @param {any} lookupTable lookup table\n */\nFeatureQuery.prototype.getLookupSubtables = function (lookupTable) {\n    return lookupTable.subtables || null;\n};\n\n/**\n * Get lookup table by index\n * @param {number} index lookup table index\n */\nFeatureQuery.prototype.getLookupByIndex = function (index) {\n    var lookups = this.font.tables.gsub.lookups;\n    return lookups[index] || null;\n};\n\n/**\n * Get lookup tables for a feature\n * @param {string} feature\n */\nFeatureQuery.prototype.getFeatureLookups = function (feature) {\n    // TODO: memoize\n    return feature.lookupListIndexes.map(this.getLookupByIndex.bind(this));\n};\n\n/**\n * Query a feature by it's properties\n * @param {any} query an object that describes the properties of a query\n */\nFeatureQuery.prototype.getFeature = function getFeature(query) {\n    if (!this.font) { return { FAIL: \"No font was found\"}; }\n    if (!this.features.hasOwnProperty(query.script)) {\n        this.getScriptFeatures(query.script);\n    }\n    var scriptFeatures = this.features[query.script];\n    if (!scriptFeatures) { return (\n        { FAIL: (\"No feature for script \" + (query.script))}\n    ); }\n    if (!scriptFeatures.tags[query.tag]) { return null; }\n    return this.features[query.script].tags[query.tag];\n};\n\n/**\n * Arabic word context checkers\n */\n\nfunction arabicWordStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return (\n        // ? arabic first char\n        (prevChar === null && isArabicChar(char)) ||\n        // ? arabic char preceded with a non arabic char\n        (!isArabicChar(prevChar) && isArabicChar(char))\n    );\n}\n\nfunction arabicWordEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    return (\n        // ? last arabic char\n        (nextChar === null) ||\n        // ? next char is not arabic\n        (!isArabicChar(nextChar))\n    );\n}\n\nvar arabicWordCheck = {\n    startCheck: arabicWordStartCheck,\n    endCheck: arabicWordEndCheck\n};\n\n/**\n * Arabic sentence context checkers\n */\n\nfunction arabicSentenceStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return (\n        // ? an arabic char preceded with a non arabic char\n        (isArabicChar(char) || isTashkeelArabicChar(char)) &&\n        !isArabicChar(prevChar)\n    );\n}\n\nfunction arabicSentenceEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    switch (true) {\n        case nextChar === null:\n            return true;\n        case (!isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar)):\n            var nextIsWhitespace = isWhiteSpace(nextChar);\n            if (!nextIsWhitespace) { return true; }\n            if (nextIsWhitespace) {\n                var arabicCharAhead = false;\n                arabicCharAhead = (\n                    contextParams.lookahead.some(\n                        function (c) { return isArabicChar(c) || isTashkeelArabicChar(c); }\n                    )\n                );\n                if (!arabicCharAhead) { return true; }\n            }\n            break;\n        default:\n            return false;\n    }\n}\n\nvar arabicSentenceCheck = {\n    startCheck: arabicSentenceStartCheck,\n    endCheck: arabicSentenceEndCheck\n};\n\n/**\n * Apply single substitution format 1\n * @param {Array} substitutions substitutions\n * @param {any} tokens a list of tokens\n * @param {number} index token index\n */\nfunction singleSubstitutionFormat1$1(action, tokens, index) {\n    tokens[index].setState(action.tag, action.substitution);\n}\n\n/**\n * Apply single substitution format 2\n * @param {Array} substitutions substitutions\n * @param {any} tokens a list of tokens\n * @param {number} index token index\n */\nfunction singleSubstitutionFormat2$1(action, tokens, index) {\n    tokens[index].setState(action.tag, action.substitution);\n}\n\n/**\n * Apply chaining context substitution format 3\n * @param {Array} substitutions substitutions\n * @param {any} tokens a list of tokens\n * @param {number} index token index\n */\nfunction chainingSubstitutionFormat3$1(action, tokens, index) {\n    action.substitution.forEach(function (subst, offset) {\n        var token = tokens[index + offset];\n        token.setState(action.tag, subst);\n    });\n}\n\n/**\n * Apply ligature substitution format 1\n * @param {Array} substitutions substitutions\n * @param {any} tokens a list of tokens\n * @param {number} index token index\n */\nfunction ligatureSubstitutionFormat1$1(action, tokens, index) {\n    var token = tokens[index];\n    token.setState(action.tag, action.substitution.ligGlyph);\n    var compsCount = action.substitution.components.length;\n    for (var i = 0; i < compsCount; i++) {\n        token = tokens[index + i + 1];\n        token.setState('deleted', true);\n    }\n}\n\n/**\n * Supported substitutions\n */\nvar SUBSTITUTIONS = {\n    11: singleSubstitutionFormat1$1,\n    12: singleSubstitutionFormat2$1,\n    63: chainingSubstitutionFormat3$1,\n    41: ligatureSubstitutionFormat1$1\n};\n\n/**\n * Apply substitutions to a list of tokens\n * @param {Array} substitutions substitutions\n * @param {any} tokens a list of tokens\n * @param {number} index token index\n */\nfunction applySubstitution(action, tokens, index) {\n    if (action instanceof SubstitutionAction && SUBSTITUTIONS[action.id]) {\n        SUBSTITUTIONS[action.id](action, tokens, index);\n    }\n}\n\n/**\n * Apply Arabic presentation forms to a range of tokens\n */\n\n/**\n * Check if a char can be connected to it's preceding char\n * @param {ContextParams} charContextParams context params of a char\n */\nfunction willConnectPrev(charContextParams) {\n    var backtrack = [].concat(charContextParams.backtrack);\n    for (var i = backtrack.length - 1; i >= 0; i--) {\n        var prevChar = backtrack[i];\n        var isolated = isIsolatedArabicChar(prevChar);\n        var tashkeel = isTashkeelArabicChar(prevChar);\n        if (!isolated && !tashkeel) { return true; }\n        if (isolated) { return false; }\n    }\n    return false;\n}\n\n/**\n * Check if a char can be connected to it's proceeding char\n * @param {ContextParams} charContextParams context params of a char\n */\nfunction willConnectNext(charContextParams) {\n    if (isIsolatedArabicChar(charContextParams.current)) { return false; }\n    for (var i = 0; i < charContextParams.lookahead.length; i++) {\n        var nextChar = charContextParams.lookahead[i];\n        var tashkeel = isTashkeelArabicChar(nextChar);\n        if (!tashkeel) { return true; }\n    }\n    return false;\n}\n\n/**\n * Apply arabic presentation forms to a list of tokens\n * @param {ContextRange} range a range of tokens\n */\nfunction arabicPresentationForms(range) {\n    var this$1 = this;\n\n    var script = 'arab';\n    var tags = this.featuresTags[script];\n    var tokens = this.tokenizer.getRangeTokens(range);\n    if (tokens.length === 1) { return; }\n    var contextParams = new ContextParams(\n        tokens.map(function (token) { return token.getState('glyphIndex'); }\n    ), 0);\n    var charContextParams = new ContextParams(\n        tokens.map(function (token) { return token.char; }\n    ), 0);\n    tokens.forEach(function (token, index) {\n        if (isTashkeelArabicChar(token.char)) { return; }\n        contextParams.setCurrentIndex(index);\n        charContextParams.setCurrentIndex(index);\n        var CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)\n        if (willConnectPrev(charContextParams)) { CONNECT |= 1; }\n        if (willConnectNext(charContextParams)) { CONNECT |= 2; }\n        var tag;\n        switch (CONNECT) {\n            case 1: (tag = 'fina'); break;\n            case 2: (tag = 'init'); break;\n            case 3: (tag = 'medi'); break;\n        }\n        if (tags.indexOf(tag) === -1) { return; }\n        var substitutions = this$1.query.lookupFeature({\n            tag: tag, script: script, contextParams: contextParams\n        });\n        if (substitutions instanceof Error) { return console.info(substitutions.message); }\n        substitutions.forEach(function (action, index) {\n            if (action instanceof SubstitutionAction) {\n                applySubstitution(action, tokens, index);\n                contextParams.context[index] = action.substitution;\n            }\n        });\n    });\n}\n\n/**\n * Apply Arabic required ligatures feature to a range of tokens\n */\n\n/**\n * Update context params\n * @param {any} tokens a list of tokens\n * @param {number} index current item index\n */\nfunction getContextParams(tokens, index) {\n    var context = tokens.map(function (token) { return token.activeState.value; });\n    return new ContextParams(context, index || 0);\n}\n\n/**\n * Apply Arabic required ligatures to a context range\n * @param {ContextRange} range a range of tokens\n */\nfunction arabicRequiredLigatures(range) {\n    var this$1 = this;\n\n    var script = 'arab';\n    var tokens = this.tokenizer.getRangeTokens(range);\n    var contextParams = getContextParams(tokens);\n    contextParams.context.forEach(function (glyphIndex, index) {\n        contextParams.setCurrentIndex(index);\n        var substitutions = this$1.query.lookupFeature({\n            tag: 'rlig', script: script, contextParams: contextParams\n        });\n        if (substitutions.length) {\n            substitutions.forEach(\n                function (action) { return applySubstitution(action, tokens, index); }\n            );\n            contextParams = getContextParams(tokens);\n        }\n    });\n}\n\n/**\n * Latin word context checkers\n */\n\nfunction latinWordStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return (\n        // ? latin first char\n        (prevChar === null && isLatinChar(char)) ||\n        // ? latin char preceded with a non latin char\n        (!isLatinChar(prevChar) && isLatinChar(char))\n    );\n}\n\nfunction latinWordEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    return (\n        // ? last latin char\n        (nextChar === null) ||\n        // ? next char is not latin\n        (!isLatinChar(nextChar))\n    );\n}\n\nvar latinWordCheck = {\n    startCheck: latinWordStartCheck,\n    endCheck: latinWordEndCheck\n};\n\n/**\n * Apply Latin ligature feature to a range of tokens\n */\n\n/**\n * Update context params\n * @param {any} tokens a list of tokens\n * @param {number} index current item index\n */\nfunction getContextParams$1(tokens, index) {\n    var context = tokens.map(function (token) { return token.activeState.value; });\n    return new ContextParams(context, index || 0);\n}\n\n/**\n * Apply Arabic required ligatures to a context range\n * @param {ContextRange} range a range of tokens\n */\nfunction latinLigature(range) {\n    var this$1 = this;\n\n    var script = 'latn';\n    var tokens = this.tokenizer.getRangeTokens(range);\n    var contextParams = getContextParams$1(tokens);\n    contextParams.context.forEach(function (glyphIndex, index) {\n        contextParams.setCurrentIndex(index);\n        var substitutions = this$1.query.lookupFeature({\n            tag: 'liga', script: script, contextParams: contextParams\n        });\n        if (substitutions.length) {\n            substitutions.forEach(\n                function (action) { return applySubstitution(action, tokens, index); }\n            );\n            contextParams = getContextParams$1(tokens);\n        }\n    });\n}\n\n/**\n * Infer bidirectional properties for a given text and apply\n * the corresponding layout rules.\n */\n\n/**\n * Create Bidi. features\n * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'\n */\nfunction Bidi(baseDir) {\n    this.baseDir = baseDir || 'ltr';\n    this.tokenizer = new Tokenizer();\n    this.featuresTags = {};\n}\n\n/**\n * Sets Bidi text\n * @param {string} text a text input\n */\nBidi.prototype.setText = function (text) {\n    this.text = text;\n};\n\n/**\n * Store essential context checks:\n * arabic word check for applying gsub features\n * arabic sentence check for adjusting arabic layout\n */\nBidi.prototype.contextChecks = ({\n    latinWordCheck: latinWordCheck,\n    arabicWordCheck: arabicWordCheck,\n    arabicSentenceCheck: arabicSentenceCheck\n});\n\n/**\n * Register arabic word check\n */\nfunction registerContextChecker(checkId) {\n    var check = this.contextChecks[(checkId + \"Check\")];\n    return this.tokenizer.registerContextChecker(\n        checkId, check.startCheck, check.endCheck\n    );\n}\n\n/**\n * Perform pre tokenization procedure then\n * tokenize text input\n */\nfunction tokenizeText() {\n    registerContextChecker.call(this, 'latinWord');\n    registerContextChecker.call(this, 'arabicWord');\n    registerContextChecker.call(this, 'arabicSentence');\n    return this.tokenizer.tokenize(this.text);\n}\n\n/**\n * Reverse arabic sentence layout\n * TODO: check base dir before applying adjustments - priority low\n */\nfunction reverseArabicSentences() {\n    var this$1 = this;\n\n    var ranges = this.tokenizer.getContextRanges('arabicSentence');\n    ranges.forEach(function (range) {\n        var rangeTokens = this$1.tokenizer.getRangeTokens(range);\n        this$1.tokenizer.replaceRange(\n            range.startIndex,\n            range.endOffset,\n            rangeTokens.reverse()\n        );\n    });\n}\n\n/**\n * Register supported features tags\n * @param {script} script script tag\n * @param {Array} tags features tags list\n */\nBidi.prototype.registerFeatures = function (script, tags) {\n    var this$1 = this;\n\n    var supportedTags = tags.filter(\n        function (tag) { return this$1.query.supports({script: script, tag: tag}); }\n    );\n    if (!this.featuresTags.hasOwnProperty(script)) {\n        this.featuresTags[script] = supportedTags;\n    } else {\n        this.featuresTags[script] =\n        this.featuresTags[script].concat(supportedTags);\n    }\n};\n\n/**\n * Apply GSUB features\n * @param {Array} tagsList a list of features tags\n * @param {string} script a script tag\n * @param {Font} font opentype font instance\n */\nBidi.prototype.applyFeatures = function (font, features) {\n    if (!font) { throw new Error(\n        'No valid font was provided to apply features'\n    ); }\n    if (!this.query) { this.query = new FeatureQuery(font); }\n    for (var f = 0; f < features.length; f++) {\n        var feature = features[f];\n        if (!this.query.supports({script: feature.script})) { continue; }\n        this.registerFeatures(feature.script, feature.tags);\n    }\n};\n\n/**\n * Register a state modifier\n * @param {string} modifierId state modifier id\n * @param {function} condition a predicate function that returns true or false\n * @param {function} modifier a modifier function to set token state\n */\nBidi.prototype.registerModifier = function (modifierId, condition, modifier) {\n    this.tokenizer.registerModifier(modifierId, condition, modifier);\n};\n\n/**\n * Check if 'glyphIndex' is registered\n */\nfunction checkGlyphIndexStatus() {\n    if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {\n        throw new Error(\n            'glyphIndex modifier is required to apply ' +\n            'arabic presentation features.'\n        );\n    }\n}\n\n/**\n * Apply arabic presentation forms features\n */\nfunction applyArabicPresentationForms() {\n    var this$1 = this;\n\n    var script = 'arab';\n    if (!this.featuresTags.hasOwnProperty(script)) { return; }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges('arabicWord');\n    ranges.forEach(function (range) {\n        arabicPresentationForms.call(this$1, range);\n    });\n}\n\n/**\n * Apply required arabic ligatures\n */\nfunction applyArabicRequireLigatures() {\n    var this$1 = this;\n\n    var script = 'arab';\n    if (!this.featuresTags.hasOwnProperty(script)) { return; }\n    var tags = this.featuresTags[script];\n    if (tags.indexOf('rlig') === -1) { return; }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges('arabicWord');\n    ranges.forEach(function (range) {\n        arabicRequiredLigatures.call(this$1, range);\n    });\n}\n\n/**\n * Apply required arabic ligatures\n */\nfunction applyLatinLigatures() {\n    var this$1 = this;\n\n    var script = 'latn';\n    if (!this.featuresTags.hasOwnProperty(script)) { return; }\n    var tags = this.featuresTags[script];\n    if (tags.indexOf('liga') === -1) { return; }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges('latinWord');\n    ranges.forEach(function (range) {\n        latinLigature.call(this$1, range);\n    });\n}\n\n/**\n * Check if a context is registered\n * @param {string} contextId context id\n */\nBidi.prototype.checkContextReady = function (contextId) {\n    return !!this.tokenizer.getContext(contextId);\n};\n\n/**\n * Apply features to registered contexts\n */\nBidi.prototype.applyFeaturesToContexts = function () {\n    if (this.checkContextReady('arabicWord')) {\n        applyArabicPresentationForms.call(this);\n        applyArabicRequireLigatures.call(this);\n    }\n    if (this.checkContextReady('latinWord')) {\n        applyLatinLigatures.call(this);\n    }\n    if (this.checkContextReady('arabicSentence')) {\n        reverseArabicSentences.call(this);\n    }\n};\n\n/**\n * process text input\n * @param {string} text an input text\n */\nBidi.prototype.processText = function(text) {\n    if (!this.text || this.text !== text) {\n        this.setText(text);\n        tokenizeText.call(this);\n        this.applyFeaturesToContexts();\n    }\n};\n\n/**\n * Process a string of text to identify and adjust\n * bidirectional text entities.\n * @param {string} text input text\n */\nBidi.prototype.getBidiText = function (text) {\n    this.processText(text);\n    return this.tokenizer.getText();\n};\n\n/**\n * Get the current state index of each token\n * @param {text} text an input text\n */\nBidi.prototype.getTextGlyphs = function (text) {\n    this.processText(text);\n    var indexes = [];\n    for (var i = 0; i < this.tokenizer.tokens.length; i++) {\n        var token = this.tokenizer.tokens[i];\n        if (token.state.deleted) { continue; }\n        var index = token.activeState.value;\n        indexes.push(Array.isArray(index) ? index[0] : index);\n    }\n    return indexes;\n};\n\n// The Font object\n\n/**\n * @typedef FontOptions\n * @type Object\n * @property {Boolean} empty - whether to create a new empty font\n * @property {string} familyName\n * @property {string} styleName\n * @property {string=} fullName\n * @property {string=} postScriptName\n * @property {string=} designer\n * @property {string=} designerURL\n * @property {string=} manufacturer\n * @property {string=} manufacturerURL\n * @property {string=} license\n * @property {string=} licenseURL\n * @property {string=} version\n * @property {string=} description\n * @property {string=} copyright\n * @property {string=} trademark\n * @property {Number} unitsPerEm\n * @property {Number} ascender\n * @property {Number} descender\n * @property {Number} createdTimestamp\n * @property {string=} weightClass\n * @property {string=} widthClass\n * @property {string=} fsSelection\n */\n\n/**\n * A Font represents a loaded OpenType font file.\n * It contains a set of glyphs and methods to draw text on a drawing context,\n * or to get a path representing the text.\n * @exports opentype.Font\n * @class\n * @param {FontOptions}\n * @constructor\n */\nfunction Font(options) {\n    options = options || {};\n    options.tables = options.tables || {};\n\n    if (!options.empty) {\n        // Check that we've provided the minimum set of names.\n        checkArgument(\n            options.familyName,\n            'When creating a new Font object, familyName is required.'\n        );\n        checkArgument(\n            options.styleName,\n            'When creating a new Font object, styleName is required.'\n        );\n        checkArgument(\n            options.unitsPerEm,\n            'When creating a new Font object, unitsPerEm is required.'\n        );\n        checkArgument(\n            options.ascender,\n            'When creating a new Font object, ascender is required.'\n        );\n        checkArgument(\n            options.descender <= 0,\n            'When creating a new Font object, negative descender value is required.'\n        );\n\n        this.unitsPerEm = options.unitsPerEm || 1000;\n        this.ascender = options.ascender;\n        this.descender = options.descender;\n        this.createdTimestamp = options.createdTimestamp;\n        this.tables = Object.assign(options.tables, {\n            os2: Object.assign(\n                {\n                    usWeightClass:\n                        options.weightClass || this.usWeightClasses.MEDIUM,\n                    usWidthClass:\n                        options.widthClass || this.usWidthClasses.MEDIUM,\n                    fsSelection:\n                        options.fsSelection || this.fsSelectionValues.REGULAR,\n                },\n                options.tables.os2\n            ),\n        });\n    }\n\n    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n    this.encoding = new DefaultEncoding(this);\n    this.position = new Position(this);\n    this.substitution = new Substitution(this);\n    this.tables = this.tables || {};\n\n    // needed for low memory mode only.\n    this._push = null;\n    this._hmtxTableData = {};\n\n    Object.defineProperty(this, 'hinting', {\n        get: function () {\n            if (this._hinting) { return this._hinting; }\n            if (this.outlinesFormat === 'truetype') {\n                return (this._hinting = new Hinting(this));\n            }\n        },\n    });\n}\n\n/**\n * Check if the font has a glyph for the given character.\n * @param  {string}\n * @return {Boolean}\n */\nFont.prototype.hasChar = function (c) {\n    return this.encoding.charToGlyphIndex(c) !== null;\n};\n\n/**\n * Convert the given character to a single glyph index.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.charToGlyphIndex = function (s) {\n    return this.encoding.charToGlyphIndex(s);\n};\n\n/**\n * Convert the given character to a single Glyph object.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.charToGlyph = function (c) {\n    var glyphIndex = this.charToGlyphIndex(c);\n    var glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * Update features\n * @param {any} options features options\n */\nFont.prototype.updateFeatures = function (options) {\n    // TODO: update all features options not only 'latn'.\n    return this.defaultRenderOptions.features.map(function (feature) {\n        if (feature.script === 'latn') {\n            return {\n                script: 'latn',\n                tags: feature.tags.filter(function (tag) { return options[tag]; }),\n            };\n        } else {\n            return feature;\n        }\n    });\n};\n\n/**\n * Convert the given text to a list of Glyph objects.\n * Note that there is no strict one-to-one mapping between characters and\n * glyphs, so the list of returned glyphs can be larger or smaller than the\n * length of the given string.\n * @param  {string}\n * @param  {GlyphRenderOptions} [options]\n * @return {opentype.Glyph[]}\n */\nFont.prototype.stringToGlyphs = function (s, options) {\n    var this$1 = this;\n\n    var bidi = new Bidi();\n\n    // Create and register 'glyphIndex' state modifier\n    var charToGlyphIndexMod = function (token) { return this$1.charToGlyphIndex(token.char); };\n    bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod);\n\n    // roll-back to default features\n    var features = options\n        ? this.updateFeatures(options.features)\n        : this.defaultRenderOptions.features;\n\n    bidi.applyFeatures(this, features);\n\n    var indexes = bidi.getTextGlyphs(s);\n\n    var length = indexes.length;\n\n    // convert glyph indexes to glyph objects\n    var glyphs = new Array(length);\n    var notdef = this.glyphs.get(0);\n    for (var i = 0; i < length; i += 1) {\n        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n    }\n    return glyphs;\n};\n\n/**\n * Retrieve the value of the kerning pair between the left glyph (or its index)\n * and the right glyph (or its index). If no kerning pair is found, return 0.\n * The kerning value gets added to the advance width when calculating the spacing\n * between glyphs.\n * For GPOS kerning, this method uses the default script and language, which covers\n * most use cases. To have greater control, use font.position.getKerningValue .\n * @param  {opentype.Glyph} leftGlyph\n * @param  {opentype.Glyph} rightGlyph\n * @return {Number}\n */\nFont.prototype.getKerningValue = function (leftGlyph, rightGlyph) {\n    leftGlyph = leftGlyph.index || leftGlyph;\n    rightGlyph = rightGlyph.index || rightGlyph;\n    var gposKerning = this.position.defaultKerningTables;\n    if (gposKerning) {\n        return this.position.getKerningValue(\n            gposKerning,\n            leftGlyph,\n            rightGlyph\n        );\n    }\n    // \"kern\" table\n    return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n};\n\n/**\n * @typedef GlyphRenderOptions\n * @type Object\n * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n * @property {string} [language='dflt'] - language system used to determine which features to apply.\n *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n * @property {boolean} [kerning=true] - whether to include kerning values\n * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n */\nFont.prototype.defaultRenderOptions = {\n    kerning: true,\n    features: [\n        /**\n         * these 4 features are required to render Arabic text properly\n         * and shouldn't be turned off when rendering arabic text.\n         */\n        { script: 'arab', tags: ['init', 'medi', 'fina', 'rlig'] },\n        { script: 'latn', tags: ['liga', 'rlig'] } ],\n};\n\n/**\n * Helper function that invokes the given callback for each glyph in the given text.\n * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n * @param {string} text - The text to apply.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @param  {Function} callback\n */\nFont.prototype.forEachGlyph = function (\n    text,\n    x,\n    y,\n    fontSize,\n    options,\n    callback\n) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    options = Object.assign({}, this.defaultRenderOptions, options);\n    var fontScale = (1 / this.unitsPerEm) * fontSize;\n    var glyphs = this.stringToGlyphs(text, options);\n    var kerningLookups;\n    if (options.kerning) {\n        var script = options.script || this.position.getDefaultScriptName();\n        kerningLookups = this.position.getKerningTables(\n            script,\n            options.language\n        );\n    }\n    for (var i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs[i];\n        callback.call(this, glyph, x, y, fontSize, options);\n        if (glyph.advanceWidth) {\n            x += glyph.advanceWidth * fontScale;\n        }\n\n        if (options.kerning && i < glyphs.length - 1) {\n            // We should apply position adjustment lookups in a more generic way.\n            // Here we only use the xAdvance value.\n            var kerningValue = kerningLookups\n                ? this.position.getKerningValue(\n                      kerningLookups,\n                      glyph.index,\n                      glyphs[i + 1].index\n                  )\n                : this.getKerningValue(glyph, glyphs[i + 1]);\n            x += kerningValue * fontScale;\n        }\n\n        if (options.letterSpacing) {\n            x += options.letterSpacing * fontSize;\n        } else if (options.tracking) {\n            x += (options.tracking / 1000) * fontSize;\n        }\n    }\n    return x;\n};\n\n/**\n * Create a Path object that represents the given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path}\n */\nFont.prototype.getPath = function (text, x, y, fontSize, options) {\n    var fullPath = new Path();\n    this.forEachGlyph(\n        text,\n        x,\n        y,\n        fontSize,\n        options,\n        function (glyph, gX, gY, gFontSize) {\n            var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n            fullPath.extend(glyphPath);\n        }\n    );\n    return fullPath;\n};\n\n/**\n * Create an array of Path objects that represent the glyphs of a given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path[]}\n */\nFont.prototype.getPaths = function (text, x, y, fontSize, options) {\n    var glyphPaths = [];\n    this.forEachGlyph(\n        text,\n        x,\n        y,\n        fontSize,\n        options,\n        function (glyph, gX, gY, gFontSize) {\n            var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n            glyphPaths.push(glyphPath);\n        }\n    );\n\n    return glyphPaths;\n};\n\n/**\n * Returns the advance width of a text.\n *\n * This is something different than Path.getBoundingBox() as for example a\n * suffixed whitespace increases the advanceWidth but not the bounding box\n * or an overhanging letter like a calligraphic 'f' might have a quite larger\n * bounding box than its advance width.\n *\n * This corresponds to canvas2dContext.measureText(text).width\n *\n * @param  {string} text - The text to create.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return advance width\n */\nFont.prototype.getAdvanceWidth = function (text, fontSize, options) {\n    return this.forEachGlyph(text, 0, 0, fontSize, options, function () {});\n};\n\n/**\n * @private\n */\nFont.prototype.fsSelectionValues = {\n    ITALIC: 0x001, //1\n    UNDERSCORE: 0x002, //2\n    NEGATIVE: 0x004, //4\n    OUTLINED: 0x008, //8\n    STRIKEOUT: 0x010, //16\n    BOLD: 0x020, //32\n    REGULAR: 0x040, //64\n    USER_TYPO_METRICS: 0x080, //128\n    WWS: 0x100, //256\n    OBLIQUE: 0x200, //512\n};\n\n/**\n * @private\n */\nFont.prototype.usWidthClasses = {\n    ULTRA_CONDENSED: 1,\n    EXTRA_CONDENSED: 2,\n    CONDENSED: 3,\n    SEMI_CONDENSED: 4,\n    MEDIUM: 5,\n    SEMI_EXPANDED: 6,\n    EXPANDED: 7,\n    EXTRA_EXPANDED: 8,\n    ULTRA_EXPANDED: 9,\n};\n\n/**\n * @private\n */\nFont.prototype.usWeightClasses = {\n    THIN: 100,\n    EXTRA_LIGHT: 200,\n    LIGHT: 300,\n    NORMAL: 400,\n    MEDIUM: 500,\n    SEMI_BOLD: 600,\n    BOLD: 700,\n    EXTRA_BOLD: 800,\n    BLACK: 900,\n};\n\n// The `cmap` table stores the mappings from characters to glyphs.\n\nfunction parseCmapTableFormat12(cmap, p) {\n    //Skip reserved.\n    p.parseUShort();\n\n    // Length in bytes of the sub-tables.\n    cmap.length = p.parseULong();\n    cmap.language = p.parseULong();\n\n    var groupCount;\n    cmap.groupCount = groupCount = p.parseULong();\n    cmap.glyphIndexMap = {};\n\n    for (var i = 0; i < groupCount; i += 1) {\n        var startCharCode = p.parseULong();\n        var endCharCode = p.parseULong();\n        var startGlyphId = p.parseULong();\n\n        for (var c = startCharCode; c <= endCharCode; c += 1) {\n            cmap.glyphIndexMap[c] = startGlyphId;\n            startGlyphId++;\n        }\n    }\n}\n\nfunction parseCmapTableFormat4(cmap, p, data, start, offset) {\n    // Length in bytes of the sub-tables.\n    cmap.length = p.parseUShort();\n    cmap.language = p.parseUShort();\n\n    // segCount is stored x 2.\n    var segCount;\n    cmap.segCount = segCount = p.parseUShort() >> 1;\n\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n\n    // The \"unrolled\" mapping from character codes to glyph indices.\n    cmap.glyphIndexMap = {};\n    var endCountParser = new parse.Parser(data, start + offset + 14);\n    var startCountParser = new parse.Parser(\n        data,\n        start + offset + 16 + segCount * 2\n    );\n    var idDeltaParser = new parse.Parser(\n        data,\n        start + offset + 16 + segCount * 4\n    );\n    var idRangeOffsetParser = new parse.Parser(\n        data,\n        start + offset + 16 + segCount * 6\n    );\n    var glyphIndexOffset = start + offset + 16 + segCount * 8;\n    for (var i = 0; i < segCount - 1; i += 1) {\n        var glyphIndex = (void 0);\n        var endCount = endCountParser.parseUShort();\n        var startCount = startCountParser.parseUShort();\n        var idDelta = idDeltaParser.parseShort();\n        var idRangeOffset = idRangeOffsetParser.parseUShort();\n        for (var c = startCount; c <= endCount; c += 1) {\n            if (idRangeOffset !== 0) {\n                // The idRangeOffset is relative to the current position in the idRangeOffset array.\n                // Take the current offset in the idRangeOffset array.\n                glyphIndexOffset =\n                    idRangeOffsetParser.offset +\n                    idRangeOffsetParser.relativeOffset -\n                    2;\n\n                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n                glyphIndexOffset += idRangeOffset;\n\n                // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n                glyphIndexOffset += (c - startCount) * 2;\n                glyphIndex = parse.getUShort(data, glyphIndexOffset);\n                if (glyphIndex !== 0) {\n                    glyphIndex = (glyphIndex + idDelta) & 0xffff;\n                }\n            } else {\n                glyphIndex = (c + idDelta) & 0xffff;\n            }\n\n            cmap.glyphIndexMap[c] = glyphIndex;\n        }\n    }\n}\n\n// Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n// There are many available formats, but we only support the Windows format 4 and 12.\n// This function returns a `CmapEncoding` object or null if no supported format could be found.\nfunction parseCmapTable(data, start) {\n    var cmap = {};\n    cmap.version = parse.getUShort(data, start);\n    check.argument(cmap.version === 0, 'cmap table version should be 0.');\n\n    // The cmap table can contain many sub-tables, each with their own format.\n    // We're only interested in a \"platform 0\" (Unicode format) and \"platform 3\" (Windows format) table.\n    cmap.numTables = parse.getUShort(data, start + 2);\n    var offset = -1;\n    for (var i = cmap.numTables - 1; i >= 0; i -= 1) {\n        var platformId = parse.getUShort(data, start + 4 + i * 8);\n        var encodingId = parse.getUShort(data, start + 4 + i * 8 + 2);\n        if (\n            (platformId === 3 &&\n                (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||\n            (platformId === 0 &&\n                (encodingId === 0 ||\n                    encodingId === 1 ||\n                    encodingId === 2 ||\n                    encodingId === 3 ||\n                    encodingId === 4))\n        ) {\n            offset = parse.getULong(data, start + 4 + i * 8 + 4);\n            break;\n        }\n    }\n\n    if (offset === -1) {\n        // There is no cmap table in the font that we support.\n        throw new Error('No valid cmap sub-tables found.');\n    }\n\n    var p = new parse.Parser(data, start + offset);\n    cmap.format = p.parseUShort();\n\n    if (cmap.format === 12) {\n        parseCmapTableFormat12(cmap, p);\n    } else if (cmap.format === 4) {\n        parseCmapTableFormat4(cmap, p, data, start, offset);\n    } else {\n        throw new Error(\n            'Only format 4 and 12 cmap tables are supported (found format ' +\n                cmap.format +\n                ').'\n        );\n    }\n\n    return cmap;\n}\n\nvar cmap = { parse: parseCmapTable };\n\n// The `CFF` table contains the glyph outlines in PostScript format.\n\n// Subroutines are encoded using the negative half of the number space.\n// See type 2 chapter 4.7 \"Subroutine operators\".\nfunction calcCFFSubroutineBias(subrs) {\n    var bias;\n    if (subrs.length < 1240) {\n        bias = 107;\n    } else if (subrs.length < 33900) {\n        bias = 1131;\n    } else {\n        bias = 32768;\n    }\n\n    return bias;\n}\n\n// Parse a `CFF` INDEX array.\n// An index array consists of a list of offsets, then a list of objects at those offsets.\nfunction parseCFFIndex(data, start, conversionFn) {\n    var offsets = [];\n    var objects = [];\n    var count = parse.getCard16(data, start);\n    var objectOffset;\n    var endOffset;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + (count + 1) * offsetSize + 2;\n        var pos = start + 3;\n        for (var i = 0; i < count + 1; i += 1) {\n            offsets.push(parse.getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n\n        // The total size of the index array is 4 header bytes + the value of the last offset.\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n\n    for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {\n        var value = parse.getBytes(\n            data,\n            objectOffset + offsets[i$1],\n            objectOffset + offsets[i$1 + 1]\n        );\n        if (conversionFn) {\n            value = conversionFn(value);\n        }\n\n        objects.push(value);\n    }\n\n    return { objects: objects, startOffset: start, endOffset: endOffset };\n}\n\nfunction parseCFFIndexLowMemory(data, start) {\n    var offsets = [];\n    var count = parse.getCard16(data, start);\n    var objectOffset;\n    var endOffset;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + (count + 1) * offsetSize + 2;\n        var pos = start + 3;\n        for (var i = 0; i < count + 1; i += 1) {\n            offsets.push(parse.getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n\n        // The total size of the index array is 4 header bytes + the value of the last offset.\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n\n    return { offsets: offsets, startOffset: start, endOffset: endOffset };\n}\nfunction getCffIndexObject(i, offsets, data, start, conversionFn) {\n    var count = parse.getCard16(data, start);\n    var objectOffset = 0;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + (count + 1) * offsetSize + 2;\n    }\n\n    var value = parse.getBytes(\n        data,\n        objectOffset + offsets[i],\n        objectOffset + offsets[i + 1]\n    );\n    if (conversionFn) {\n        value = conversionFn(value);\n    }\n    return value;\n}\n\n// Parse a `CFF` DICT real value.\nfunction parseFloatOperand(parser) {\n    var s = '';\n    var eof = 15;\n    var lookup = [\n        '0',\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        '.',\n        'E',\n        'E-',\n        null,\n        '-' ];\n    while (true) {\n        var b = parser.parseByte();\n        var n1 = b >> 4;\n        var n2 = b & 15;\n\n        if (n1 === eof) {\n            break;\n        }\n\n        s += lookup[n1];\n\n        if (n2 === eof) {\n            break;\n        }\n\n        s += lookup[n2];\n    }\n\n    return parseFloat(s);\n}\n\n// Parse a `CFF` DICT operand.\nfunction parseOperand(parser, b0) {\n    var b1;\n    var b2;\n    var b3;\n    var b4;\n    if (b0 === 28) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        return (b1 << 8) | b2;\n    }\n\n    if (b0 === 29) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        b3 = parser.parseByte();\n        b4 = parser.parseByte();\n        return (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;\n    }\n\n    if (b0 === 30) {\n        return parseFloatOperand(parser);\n    }\n\n    if (b0 >= 32 && b0 <= 246) {\n        return b0 - 139;\n    }\n\n    if (b0 >= 247 && b0 <= 250) {\n        b1 = parser.parseByte();\n        return (b0 - 247) * 256 + b1 + 108;\n    }\n\n    if (b0 >= 251 && b0 <= 254) {\n        b1 = parser.parseByte();\n        return -(b0 - 251) * 256 - b1 - 108;\n    }\n\n    throw new Error('Invalid b0 ' + b0);\n}\n\n// Convert the entries returned by `parseDict` to a proper dictionary.\n// If a value is a list of one, it is unpacked.\nfunction entriesToObject(entries) {\n    var o = {};\n    for (var i = 0; i < entries.length; i += 1) {\n        var key = entries[i][0];\n        var values = entries[i][1];\n        var value = (void 0);\n        if (values.length === 1) {\n            value = values[0];\n        } else {\n            value = values;\n        }\n\n        if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n            throw new Error('Object ' + o + ' already has key ' + key);\n        }\n\n        o[key] = value;\n    }\n\n    return o;\n}\n\n// Parse a `CFF` DICT object.\n// A dictionary contains key-value pairs in a compact tokenized format.\nfunction parseCFFDict(data, start, size) {\n    start = start !== undefined ? start : 0;\n    var parser = new parse.Parser(data, start);\n    var entries = [];\n    var operands = [];\n    size = size !== undefined ? size : data.length;\n\n    while (parser.relativeOffset < size) {\n        var op = parser.parseByte();\n\n        // The first byte for each dict item distinguishes between operator (key) and operand (value).\n        // Values <= 21 are operators.\n        if (op <= 21) {\n            // Two-byte operators have an initial escape byte of 12.\n            if (op === 12) {\n                op = 1200 + parser.parseByte();\n            }\n\n            entries.push([op, operands]);\n            operands = [];\n        } else {\n            // Since the operands (values) come before the operators (keys), we store all operands in a list\n            // until we encounter an operator.\n            operands.push(parseOperand(parser, op));\n        }\n    }\n\n    return entriesToObject(entries);\n}\n\n// Given a String Index (SID), return the value of the string.\n// Strings below index 392 are standard CFF strings and are not encoded in the font.\nfunction getCFFString(strings, index) {\n    if (index <= 390) {\n        index = cffStandardStrings[index];\n    } else {\n        index = strings[index - 391];\n    }\n\n    return index;\n}\n\n// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\nfunction interpretDict(dict, meta, strings) {\n    var newDict = {};\n    var value;\n\n    // Because we also want to include missing values, we start out from the meta list\n    // and lookup values in the dict.\n    for (var i = 0; i < meta.length; i += 1) {\n        var m = meta[i];\n\n        if (Array.isArray(m.type)) {\n            var values = [];\n            values.length = m.type.length;\n            for (var j = 0; j < m.type.length; j++) {\n                value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;\n                if (value === undefined) {\n                    value =\n                        m.value !== undefined && m.value[j] !== undefined\n                            ? m.value[j]\n                            : null;\n                }\n                if (m.type[j] === 'SID') {\n                    value = getCFFString(strings, value);\n                }\n                values[j] = value;\n            }\n            newDict[m.name] = values;\n        } else {\n            value = dict[m.op];\n            if (value === undefined) {\n                value = m.value !== undefined ? m.value : null;\n            }\n\n            if (m.type === 'SID') {\n                value = getCFFString(strings, value);\n            }\n            newDict[m.name] = value;\n        }\n    }\n\n    return newDict;\n}\n\n// Parse the CFF header.\nfunction parseCFFHeader(data, start) {\n    var header = {};\n    header.formatMajor = parse.getCard8(data, start);\n    header.formatMinor = parse.getCard8(data, start + 1);\n    header.size = parse.getCard8(data, start + 2);\n    header.offsetSize = parse.getCard8(data, start + 3);\n    header.startOffset = start;\n    header.endOffset = start + 4;\n    return header;\n}\n\nvar TOP_DICT_META = [\n    { name: 'version', op: 0, type: 'SID' },\n    { name: 'notice', op: 1, type: 'SID' },\n    { name: 'copyright', op: 1200, type: 'SID' },\n    { name: 'fullName', op: 2, type: 'SID' },\n    { name: 'familyName', op: 3, type: 'SID' },\n    { name: 'weight', op: 4, type: 'SID' },\n    { name: 'isFixedPitch', op: 1201, type: 'number', value: 0 },\n    { name: 'italicAngle', op: 1202, type: 'number', value: 0 },\n    { name: 'underlinePosition', op: 1203, type: 'number', value: -100 },\n    { name: 'underlineThickness', op: 1204, type: 'number', value: 50 },\n    { name: 'paintType', op: 1205, type: 'number', value: 0 },\n    { name: 'charstringType', op: 1206, type: 'number', value: 2 },\n    {\n        name: 'fontMatrix',\n        op: 1207,\n        type: ['real', 'real', 'real', 'real', 'real', 'real'],\n        value: [0.001, 0, 0, 0.001, 0, 0],\n    },\n    { name: 'uniqueId', op: 13, type: 'number' },\n    {\n        name: 'fontBBox',\n        op: 5,\n        type: ['number', 'number', 'number', 'number'],\n        value: [0, 0, 0, 0],\n    },\n    { name: 'strokeWidth', op: 1208, type: 'number', value: 0 },\n    { name: 'xuid', op: 14, type: [], value: null },\n    { name: 'charset', op: 15, type: 'offset', value: 0 },\n    { name: 'encoding', op: 16, type: 'offset', value: 0 },\n    { name: 'charStrings', op: 17, type: 'offset', value: 0 },\n    { name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0] },\n    { name: 'ros', op: 1230, type: ['SID', 'SID', 'number'] },\n    { name: 'cidFontVersion', op: 1231, type: 'number', value: 0 },\n    { name: 'cidFontRevision', op: 1232, type: 'number', value: 0 },\n    { name: 'cidFontType', op: 1233, type: 'number', value: 0 },\n    { name: 'cidCount', op: 1234, type: 'number', value: 8720 },\n    { name: 'uidBase', op: 1235, type: 'number' },\n    { name: 'fdArray', op: 1236, type: 'offset' },\n    { name: 'fdSelect', op: 1237, type: 'offset' },\n    { name: 'fontName', op: 1238, type: 'SID' } ];\n\nvar PRIVATE_DICT_META = [\n    { name: 'subrs', op: 19, type: 'offset', value: 0 },\n    { name: 'defaultWidthX', op: 20, type: 'number', value: 0 },\n    { name: 'nominalWidthX', op: 21, type: 'number', value: 0 } ];\n\n// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n// The top dictionary contains the essential metadata for the font, together with the private dictionary.\nfunction parseCFFTopDict(data, strings) {\n    var dict = parseCFFDict(data, 0, data.byteLength);\n    return interpretDict(dict, TOP_DICT_META, strings);\n}\n\n// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\nfunction parseCFFPrivateDict(data, start, size, strings) {\n    var dict = parseCFFDict(data, start, size);\n    return interpretDict(dict, PRIVATE_DICT_META, strings);\n}\n\n// Returns a list of \"Top DICT\"s found using an INDEX list.\n// Used to read both the usual high-level Top DICTs and also the FDArray\n// discovered inside CID-keyed fonts.  When a Top DICT has a reference to\n// a Private DICT that is read and saved into the Top DICT.\n//\n// In addition to the expected/optional values as outlined in TOP_DICT_META\n// the following values might be saved into the Top DICT.\n//\n//    _subrs []        array of local CFF subroutines from Private DICT\n//    _subrsBias       bias value computed from number of subroutines\n//                      (see calcCFFSubroutineBias() and parseCFFCharstring())\n//    _defaultWidthX   default widths for CFF characters\n//    _nominalWidthX   bias added to width embedded within glyph description\n//\n//    _privateDict     saved copy of parsed Private DICT from Top DICT\nfunction gatherCFFTopDicts(data, start, cffIndex, strings) {\n    var topDictArray = [];\n    for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n        var topDictData = new DataView(\n            new Uint8Array(cffIndex[iTopDict]).buffer\n        );\n        var topDict = parseCFFTopDict(topDictData, strings);\n        topDict._subrs = [];\n        topDict._subrsBias = 0;\n        topDict._defaultWidthX = 0;\n        topDict._nominalWidthX = 0;\n        var privateSize = topDict.private[0];\n        var privateOffset = topDict.private[1];\n        if (privateSize !== 0 && privateOffset !== 0) {\n            var privateDict = parseCFFPrivateDict(\n                data,\n                privateOffset + start,\n                privateSize,\n                strings\n            );\n            topDict._defaultWidthX = privateDict.defaultWidthX;\n            topDict._nominalWidthX = privateDict.nominalWidthX;\n            if (privateDict.subrs !== 0) {\n                var subrOffset = privateOffset + privateDict.subrs;\n                var subrIndex = parseCFFIndex(data, subrOffset + start);\n                topDict._subrs = subrIndex.objects;\n                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n            }\n            topDict._privateDict = privateDict;\n        }\n        topDictArray.push(topDict);\n    }\n    return topDictArray;\n}\n\n// Parse the CFF charset table, which contains internal names for all the glyphs.\n// This function will return a list of glyph names.\n// See Adobe TN #5176 chapter 13, \"Charsets\".\nfunction parseCFFCharset(data, start, nGlyphs, strings) {\n    var sid;\n    var count;\n    var parser = new parse.Parser(data, start);\n\n    // The .notdef glyph is not included, so subtract 1.\n    nGlyphs -= 1;\n    var charset = ['.notdef'];\n\n    var format = parser.parseCard8();\n    if (format === 0) {\n        for (var i = 0; i < nGlyphs; i += 1) {\n            sid = parser.parseSID();\n            charset.push(getCFFString(strings, sid));\n        }\n    } else if (format === 1) {\n        while (charset.length <= nGlyphs) {\n            sid = parser.parseSID();\n            count = parser.parseCard8();\n            for (var i$1 = 0; i$1 <= count; i$1 += 1) {\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else if (format === 2) {\n        while (charset.length <= nGlyphs) {\n            sid = parser.parseSID();\n            count = parser.parseCard16();\n            for (var i$2 = 0; i$2 <= count; i$2 += 1) {\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else {\n        throw new Error('Unknown charset format ' + format);\n    }\n\n    return charset;\n}\n\n// Parse the CFF encoding data. Only one encoding can be specified per font.\n// See Adobe TN #5176 chapter 12, \"Encodings\".\nfunction parseCFFEncoding(data, start, charset) {\n    var code;\n    var enc = {};\n    var parser = new parse.Parser(data, start);\n    var format = parser.parseCard8();\n    if (format === 0) {\n        var nCodes = parser.parseCard8();\n        for (var i = 0; i < nCodes; i += 1) {\n            code = parser.parseCard8();\n            enc[code] = i;\n        }\n    } else if (format === 1) {\n        var nRanges = parser.parseCard8();\n        code = 1;\n        for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {\n            var first = parser.parseCard8();\n            var nLeft = parser.parseCard8();\n            for (var j = first; j <= first + nLeft; j += 1) {\n                enc[j] = code;\n                code += 1;\n            }\n        }\n    } else {\n        throw new Error('Unknown encoding format ' + format);\n    }\n\n    return new CffEncoding(enc, charset);\n}\n\n// Take in charstring code and return a Glyph object.\n// The encoding is described in the Type 2 Charstring Format\n// https://www.microsoft.com/typography/OTSPEC/charstr2.htm\nfunction parseCFFCharstring(font, glyph, code) {\n    var c1x;\n    var c1y;\n    var c2x;\n    var c2y;\n    var p = new Path();\n    var stack = [];\n    var nStems = 0;\n    var haveWidth = false;\n    var open = false;\n    var x = 0;\n    var y = 0;\n    var subrs;\n    var subrsBias;\n    var defaultWidthX;\n    var nominalWidthX;\n    if (font.isCIDFont) {\n        var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n        var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n        subrs = fdDict._subrs;\n        subrsBias = fdDict._subrsBias;\n        defaultWidthX = fdDict._defaultWidthX;\n        nominalWidthX = fdDict._nominalWidthX;\n    } else {\n        subrs = font.tables.cff.topDict._subrs;\n        subrsBias = font.tables.cff.topDict._subrsBias;\n        defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n        nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n    }\n    var width = defaultWidthX;\n\n    function newContour(x, y) {\n        if (open) {\n            p.closePath();\n        }\n\n        p.moveTo(x, y);\n        open = true;\n    }\n\n    function parseStems() {\n        var hasWidthArg;\n\n        // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n        }\n\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n    }\n\n    function parse(code) {\n        var b1;\n        var b2;\n        var b3;\n        var b4;\n        var codeIndex;\n        var subrCode;\n        var jpx;\n        var jpy;\n        var c3x;\n        var c3y;\n        var c4x;\n        var c4y;\n\n        var i = 0;\n        while (i < code.length) {\n            var v = code[i];\n            i += 1;\n            switch (v) {\n                case 1: // hstem\n                    parseStems();\n                    break;\n                case 3: // vstem\n                    parseStems();\n                    break;\n                case 4: // vmoveto\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    y += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 5: // rlineto\n                    while (stack.length > 0) {\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 6: // hlineto\n                    while (stack.length > 0) {\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 7: // vlineto\n                    while (stack.length > 0) {\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    break;\n                case 8: // rrcurveto\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 10: // callsubr\n                    codeIndex = stack.pop() + subrsBias;\n                    subrCode = subrs[codeIndex];\n                    if (subrCode) {\n                        parse(subrCode);\n                    }\n\n                    break;\n                case 11: // return\n                    return;\n                case 12: // flex operators\n                    v = code[i];\n                    i += 1;\n                    switch (v) {\n                        case 35: // flex\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y + stack.shift(); // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y + stack.shift(); // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = jpy + stack.shift(); // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = c3y + stack.shift(); // dy5\n                            x = c4x + stack.shift(); // dx6\n                            y = c4y + stack.shift(); // dy6\n                            stack.shift(); // flex depth\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 34: // hflex\n                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y; // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y; // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = c2y; // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = y; // dy5\n                            x = c4x + stack.shift(); // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 36: // hflex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y + stack.shift(); // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y; // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = c2y; // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = c3y + stack.shift(); // dy5\n                            x = c4x + stack.shift(); // dx6\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 37: // flex1\n                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n                            c1x = x + stack.shift(); // dx1\n                            c1y = y + stack.shift(); // dy1\n                            c2x = c1x + stack.shift(); // dx2\n                            c2y = c1y + stack.shift(); // dy2\n                            jpx = c2x + stack.shift(); // dx3\n                            jpy = c2y + stack.shift(); // dy3\n                            c3x = jpx + stack.shift(); // dx4\n                            c3y = jpy + stack.shift(); // dy4\n                            c4x = c3x + stack.shift(); // dx5\n                            c4y = c3y + stack.shift(); // dy5\n                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                                x = c4x + stack.shift();\n                            } else {\n                                y = c4y + stack.shift();\n                            }\n\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        default:\n                            console.log(\n                                'Glyph ' +\n                                    glyph.index +\n                                    ': unknown operator ' +\n                                    1200 +\n                                    v\n                            );\n                            stack.length = 0;\n                    }\n                    break;\n                case 14: // endchar\n                    if (stack.length > 0 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    if (open) {\n                        p.closePath();\n                        open = false;\n                    }\n\n                    break;\n                case 18: // hstemhm\n                    parseStems();\n                    break;\n                case 19: // hintmask\n                case 20: // cntrmask\n                    parseStems();\n                    i += (nStems + 7) >> 3;\n                    break;\n                case 21: // rmoveto\n                    if (stack.length > 2 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    y += stack.pop();\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 22: // hmoveto\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 23: // vstemhm\n                    parseStems();\n                    break;\n                case 24: // rcurveline\n                    while (stack.length > 2) {\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    x += stack.shift();\n                    y += stack.shift();\n                    p.lineTo(x, y);\n                    break;\n                case 25: // rlinecurve\n                    while (stack.length > 6) {\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n\n                    c1x = x + stack.shift();\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + stack.shift();\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    break;\n                case 26: // vvcurveto\n                    if (stack.length % 2) {\n                        x += stack.shift();\n                    }\n\n                    while (stack.length > 0) {\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x;\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 27: // hhcurveto\n                    if (stack.length % 2) {\n                        y += stack.shift();\n                    }\n\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y;\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 28: // shortint\n                    b1 = code[i];\n                    b2 = code[i + 1];\n                    stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n                    i += 2;\n                    break;\n                case 29: // callgsubr\n                    codeIndex = stack.pop() + font.gsubrsBias;\n                    subrCode = font.gsubrs[codeIndex];\n                    if (subrCode) {\n                        parse(subrCode);\n                    }\n\n                    break;\n                case 30: // vhcurveto\n                    while (stack.length > 0) {\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                case 31: // hvcurveto\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n\n                    break;\n                default:\n                    if (v < 32) {\n                        console.log(\n                            'Glyph ' + glyph.index + ': unknown operator ' + v\n                        );\n                    } else if (v < 247) {\n                        stack.push(v - 139);\n                    } else if (v < 251) {\n                        b1 = code[i];\n                        i += 1;\n                        stack.push((v - 247) * 256 + b1 + 108);\n                    } else if (v < 255) {\n                        b1 = code[i];\n                        i += 1;\n                        stack.push(-(v - 251) * 256 - b1 - 108);\n                    } else {\n                        b1 = code[i];\n                        b2 = code[i + 1];\n                        b3 = code[i + 2];\n                        b4 = code[i + 3];\n                        i += 4;\n                        stack.push(\n                            ((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536\n                        );\n                    }\n            }\n        }\n    }\n\n    parse(code);\n\n    glyph.advanceWidth = width;\n    return p;\n}\n\nfunction parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n    var fdSelect = [];\n    var fdIndex;\n    var parser = new parse.Parser(data, start);\n    var format = parser.parseCard8();\n    if (format === 0) {\n        // Simple list of nGlyphs elements\n        for (var iGid = 0; iGid < nGlyphs; iGid++) {\n            fdIndex = parser.parseCard8();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error(\n                    'CFF table CID Font FDSelect has bad FD index value ' +\n                        fdIndex +\n                        ' (FD count ' +\n                        fdArrayCount +\n                        ')'\n                );\n            }\n            fdSelect.push(fdIndex);\n        }\n    } else if (format === 3) {\n        // Ranges\n        var nRanges = parser.parseCard16();\n        var first = parser.parseCard16();\n        if (first !== 0) {\n            throw new Error(\n                'CFF Table CID Font FDSelect format 3 range has bad initial GID ' +\n                    first\n            );\n        }\n        var next;\n        for (var iRange = 0; iRange < nRanges; iRange++) {\n            fdIndex = parser.parseCard8();\n            next = parser.parseCard16();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error(\n                    'CFF table CID Font FDSelect has bad FD index value ' +\n                        fdIndex +\n                        ' (FD count ' +\n                        fdArrayCount +\n                        ')'\n                );\n            }\n            if (next > nGlyphs) {\n                throw new Error(\n                    'CFF Table CID Font FDSelect format 3 range has bad GID ' +\n                        next\n                );\n            }\n            for (; first < next; first++) {\n                fdSelect.push(fdIndex);\n            }\n            first = next;\n        }\n        if (next !== nGlyphs) {\n            throw new Error(\n                'CFF Table CID Font FDSelect format 3 range has bad final GID ' +\n                    next\n            );\n        }\n    } else {\n        throw new Error(\n            'CFF Table CID Font FDSelect table has unsupported format ' + format\n        );\n    }\n    return fdSelect;\n}\n\n// Parse the `CFF` table, which contains the glyph outlines in PostScript format.\nfunction parseCFFTable(data, start, font, opt) {\n    font.tables.cff = {};\n    var header = parseCFFHeader(data, start);\n    var nameIndex = parseCFFIndex(\n        data,\n        header.endOffset,\n        parse.bytesToString\n    );\n    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n    var stringIndex = parseCFFIndex(\n        data,\n        topDictIndex.endOffset,\n        parse.bytesToString\n    );\n    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n    font.gsubrs = globalSubrIndex.objects;\n    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n    var topDictArray = gatherCFFTopDicts(\n        data,\n        start,\n        topDictIndex.objects,\n        stringIndex.objects\n    );\n    if (topDictArray.length !== 1) {\n        throw new Error(\n            \"CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = \" +\n                topDictArray.length\n        );\n    }\n\n    var topDict = topDictArray[0];\n    font.tables.cff.topDict = topDict;\n\n    if (topDict._privateDict) {\n        font.defaultWidthX = topDict._privateDict.defaultWidthX;\n        font.nominalWidthX = topDict._privateDict.nominalWidthX;\n    }\n\n    if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {\n        font.isCIDFont = true;\n    }\n\n    if (font.isCIDFont) {\n        var fdArrayOffset = topDict.fdArray;\n        var fdSelectOffset = topDict.fdSelect;\n        if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n            throw new Error(\n                'Font is marked as a CID font, but FDArray and/or FDSelect information is missing'\n            );\n        }\n        fdArrayOffset += start;\n        var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n        var fdArray = gatherCFFTopDicts(\n            data,\n            start,\n            fdArrayIndex.objects,\n            stringIndex.objects\n        );\n        topDict._fdArray = fdArray;\n        fdSelectOffset += start;\n        topDict._fdSelect = parseCFFFDSelect(\n            data,\n            fdSelectOffset,\n            font.numGlyphs,\n            fdArray.length\n        );\n    }\n\n    var privateDictOffset = start + topDict.private[1];\n    var privateDict = parseCFFPrivateDict(\n        data,\n        privateDictOffset,\n        topDict.private[0],\n        stringIndex.objects\n    );\n    font.defaultWidthX = privateDict.defaultWidthX;\n    font.nominalWidthX = privateDict.nominalWidthX;\n\n    if (privateDict.subrs !== 0) {\n        var subrOffset = privateDictOffset + privateDict.subrs;\n        var subrIndex = parseCFFIndex(data, subrOffset);\n        font.subrs = subrIndex.objects;\n        font.subrsBias = calcCFFSubroutineBias(font.subrs);\n    } else {\n        font.subrs = [];\n        font.subrsBias = 0;\n    }\n\n    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n    var charStringsIndex;\n    if (opt.lowMemory) {\n        charStringsIndex = parseCFFIndexLowMemory(\n            data,\n            start + topDict.charStrings\n        );\n        font.nGlyphs = charStringsIndex.offsets.length;\n    } else {\n        charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n        font.nGlyphs = charStringsIndex.objects.length;\n    }\n\n    var charset = parseCFFCharset(\n        data,\n        start + topDict.charset,\n        font.nGlyphs,\n        stringIndex.objects\n    );\n    if (topDict.encoding === 0) {\n        // Standard encoding\n        font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n    } else if (topDict.encoding === 1) {\n        // Expert encoding\n        font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n    } else {\n        font.cffEncoding = parseCFFEncoding(\n            data,\n            start + topDict.encoding,\n            charset\n        );\n    }\n\n    // Prefer the CMAP encoding to the CFF encoding.\n    font.encoding = font.encoding || font.cffEncoding;\n\n    font.glyphs = new glyphset.GlyphSet(font);\n    if (opt.lowMemory) {\n        font._push = function (i) {\n            var charString = getCffIndexObject(\n                i,\n                charStringsIndex.offsets,\n                data,\n                start + topDict.charStrings\n            );\n            font.glyphs.push(\n                i,\n                glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString)\n            );\n        };\n    } else {\n        for (var i = 0; i < font.nGlyphs; i += 1) {\n            var charString = charStringsIndex.objects[i];\n            font.glyphs.push(\n                i,\n                glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString)\n            );\n        }\n    }\n}\n\nvar cff = { parse: parseCFFTable };\n\n// The `fvar` table stores font variation axes and instances.\n\nfunction parseFvarAxis(data, start, names) {\n    var axis = {};\n    var p = new parse.Parser(data, start);\n    axis.tag = p.parseTag();\n    axis.minValue = p.parseFixed();\n    axis.defaultValue = p.parseFixed();\n    axis.maxValue = p.parseFixed();\n    p.skip('uShort', 1); // reserved for flags; no values defined\n    axis.name = names[p.parseUShort()] || {};\n    return axis;\n}\n\nfunction parseFvarInstance(data, start, axes, names) {\n    var inst = {};\n    var p = new parse.Parser(data, start);\n    inst.name = names[p.parseUShort()] || {};\n    p.skip('uShort', 1); // reserved for flags; no values defined\n\n    inst.coordinates = {};\n    for (var i = 0; i < axes.length; ++i) {\n        inst.coordinates[axes[i].tag] = p.parseFixed();\n    }\n\n    return inst;\n}\n\nfunction parseFvarTable(data, start, names) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(\n        tableVersion === 0x00010000,\n        'Unsupported fvar table version.'\n    );\n    var offsetToData = p.parseOffset16();\n    // Skip countSizePairs.\n    p.skip('uShort', 1);\n    var axisCount = p.parseUShort();\n    var axisSize = p.parseUShort();\n    var instanceCount = p.parseUShort();\n    var instanceSize = p.parseUShort();\n\n    var axes = [];\n    for (var i = 0; i < axisCount; i++) {\n        axes.push(\n            parseFvarAxis(data, start + offsetToData + i * axisSize, names)\n        );\n    }\n\n    var instances = [];\n    var instanceStart = start + offsetToData + axisCount * axisSize;\n    for (var j = 0; j < instanceCount; j++) {\n        instances.push(\n            parseFvarInstance(\n                data,\n                instanceStart + j * instanceSize,\n                axes,\n                names\n            )\n        );\n    }\n\n    return { axes: axes, instances: instances };\n}\n\nvar fvar = { parse: parseFvarTable };\n\n// The `GDEF` table contains various glyph properties\n\nvar attachList = function() {\n    return {\n        coverage: this.parsePointer(Parser.coverage),\n        attachPoints: this.parseList(Parser.pointer(Parser.uShortList))\n    };\n};\n\nvar caretValue = function() {\n    var format = this.parseUShort();\n    check.argument(format === 1 || format === 2 || format === 3,\n        'Unsupported CaretValue table version.');\n    if (format === 1) {\n        return { coordinate: this.parseShort() };\n    } else if (format === 2) {\n        return { pointindex: this.parseShort() };\n    } else if (format === 3) {\n        // Device / Variation Index tables unsupported\n        return { coordinate: this.parseShort() };\n    }\n};\n\nvar ligGlyph = function() {\n    return this.parseList(Parser.pointer(caretValue));\n};\n\nvar ligCaretList = function() {\n    return {\n        coverage: this.parsePointer(Parser.coverage),\n        ligGlyphs: this.parseList(Parser.pointer(ligGlyph))\n    };\n};\n\nvar markGlyphSets = function() {\n    this.parseUShort(); // Version\n    return this.parseList(Parser.pointer(Parser.coverage));\n};\n\nfunction parseGDEFTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(tableVersion === 1 || tableVersion === 1.2 || tableVersion === 1.3,\n        'Unsupported GDEF table version.');\n    var gdef = {\n        version: tableVersion,\n        classDef: p.parsePointer(Parser.classDef),\n        attachList: p.parsePointer(attachList),\n        ligCaretList: p.parsePointer(ligCaretList),\n        markAttachClassDef: p.parsePointer(Parser.classDef)\n    };\n    if (tableVersion >= 1.2) {\n        gdef.markGlyphSets = p.parsePointer(markGlyphSets);\n    }\n    return gdef;\n}\nvar gdef = { parse: parseGDEFTable };\n\n// The `GPOS` table contains kerning pairs, among other things.\n\nvar subtableParsers = new Array(10); // subtableParsers[0] is unused\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable\n// this = Parser instance\nsubtableParsers[1] = function parseLookup1() {\n    var start = this.offset + this.relativeOffset;\n    var posformat = this.parseUShort();\n    if (posformat === 1) {\n        return {\n            posFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            value: this.parseValueRecord(),\n        };\n    } else if (posformat === 2) {\n        return {\n            posFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            values: this.parseValueRecordList(),\n        };\n    }\n    check.assert(\n        false,\n        '0x' +\n            start.toString(16) +\n            ': GPOS lookup type 1 format must be 1 or 2.'\n    );\n};\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable\nsubtableParsers[2] = function parseLookup2() {\n    var start = this.offset + this.relativeOffset;\n    var posFormat = this.parseUShort();\n    check.assert(\n        posFormat === 1 || posFormat === 2,\n        '0x' +\n            start.toString(16) +\n            ': GPOS lookup type 2 format must be 1 or 2.'\n    );\n    var coverage = this.parsePointer(Parser.coverage);\n    var valueFormat1 = this.parseUShort();\n    var valueFormat2 = this.parseUShort();\n    if (posFormat === 1) {\n        // Adjustments for Glyph Pairs\n        return {\n            posFormat: posFormat,\n            coverage: coverage,\n            valueFormat1: valueFormat1,\n            valueFormat2: valueFormat2,\n            pairSets: this.parseList(\n                Parser.pointer(\n                    Parser.list(function () {\n                        return {\n                            // pairValueRecord\n                            secondGlyph: this.parseUShort(),\n                            value1: this.parseValueRecord(valueFormat1),\n                            value2: this.parseValueRecord(valueFormat2),\n                        };\n                    })\n                )\n            ),\n        };\n    } else if (posFormat === 2) {\n        var classDef1 = this.parsePointer(Parser.classDef);\n        var classDef2 = this.parsePointer(Parser.classDef);\n        var class1Count = this.parseUShort();\n        var class2Count = this.parseUShort();\n        return {\n            // Class Pair Adjustment\n            posFormat: posFormat,\n            coverage: coverage,\n            valueFormat1: valueFormat1,\n            valueFormat2: valueFormat2,\n            classDef1: classDef1,\n            classDef2: classDef2,\n            class1Count: class1Count,\n            class2Count: class2Count,\n            classRecords: this.parseList(\n                class1Count,\n                Parser.list(class2Count, function () {\n                    return {\n                        value1: this.parseValueRecord(valueFormat1),\n                        value2: this.parseValueRecord(valueFormat2),\n                    };\n                })\n            ),\n        };\n    }\n};\n\nsubtableParsers[3] = function parseLookup3() {\n    return { error: 'GPOS Lookup 3 not supported' };\n};\nsubtableParsers[4] = function parseLookup4() {\n    return { error: 'GPOS Lookup 4 not supported' };\n};\nsubtableParsers[5] = function parseLookup5() {\n    return { error: 'GPOS Lookup 5 not supported' };\n};\nsubtableParsers[6] = function parseLookup6() {\n    return { error: 'GPOS Lookup 6 not supported' };\n};\nsubtableParsers[7] = function parseLookup7() {\n    return { error: 'GPOS Lookup 7 not supported' };\n};\nsubtableParsers[8] = function parseLookup8() {\n    return { error: 'GPOS Lookup 8 not supported' };\n};\nsubtableParsers[9] = function parseLookup9() {\n    return { error: 'GPOS Lookup 9 not supported' };\n};\n\n// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\nfunction parseGposTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(\n        tableVersion === 1 || tableVersion === 1.1,\n        'Unsupported GPOS table version ' + tableVersion\n    );\n\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers),\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers),\n            variations: p.parseFeatureVariationsList(),\n        };\n    }\n}\n\nvar gpos = { parse: parseGposTable };\n\n// The `GSUB` table contains ligatures, among other things.\n\nvar subtableParsers$1 = new Array(9); // subtableParsers[0] is unused\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\nsubtableParsers$1[1] = function parseLookup1() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            deltaGlyphId: this.parseUShort(),\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            substitute: this.parseOffset16List(),\n        };\n    }\n    check.assert(\n        false,\n        '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.'\n    );\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\nsubtableParsers$1[2] = function parseLookup2() {\n    var substFormat = this.parseUShort();\n    check.argument(\n        substFormat === 1,\n        'GSUB Multiple Substitution Subtable identifier-format must be 1'\n    );\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        sequences: this.parseListOfLists(),\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\nsubtableParsers$1[3] = function parseLookup3() {\n    var substFormat = this.parseUShort();\n    check.argument(\n        substFormat === 1,\n        'GSUB Alternate Substitution Subtable identifier-format must be 1'\n    );\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        alternateSets: this.parseListOfLists(),\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\nsubtableParsers$1[4] = function parseLookup4() {\n    var substFormat = this.parseUShort();\n    check.argument(\n        substFormat === 1,\n        'GSUB ligature table identifier-format must be 1'\n    );\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        ligatureSets: this.parseListOfLists(function () {\n            return {\n                ligGlyph: this.parseUShort(),\n                components: this.parseUShortList(this.parseUShort() - 1),\n            };\n        }),\n    };\n};\n\nvar lookupRecordDesc = {\n    sequenceIndex: Parser.uShort,\n    lookupListIndex: Parser.uShort,\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\nsubtableParsers$1[5] = function parseLookup5() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n\n    if (substFormat === 1) {\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            ruleSets: this.parseListOfLists(function () {\n                var glyphCount = this.parseUShort();\n                var substCount = this.parseUShort();\n                return {\n                    input: this.parseUShortList(glyphCount - 1),\n                    lookupRecords: this.parseRecordList(\n                        substCount,\n                        lookupRecordDesc\n                    ),\n                };\n            }),\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            classDef: this.parsePointer(Parser.classDef),\n            classSets: this.parseListOfLists(function () {\n                var glyphCount = this.parseUShort();\n                var substCount = this.parseUShort();\n                return {\n                    classes: this.parseUShortList(glyphCount - 1),\n                    lookupRecords: this.parseRecordList(\n                        substCount,\n                        lookupRecordDesc\n                    ),\n                };\n            }),\n        };\n    } else if (substFormat === 3) {\n        var glyphCount = this.parseUShort();\n        var substCount = this.parseUShort();\n        return {\n            substFormat: substFormat,\n            coverages: this.parseList(\n                glyphCount,\n                Parser.pointer(Parser.coverage)\n            ),\n            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc),\n        };\n    }\n    check.assert(\n        false,\n        '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.'\n    );\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\nsubtableParsers$1[6] = function parseLookup6() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            chainRuleSets: this.parseListOfLists(function () {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc),\n                };\n            }),\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            backtrackClassDef: this.parsePointer(Parser.classDef),\n            inputClassDef: this.parsePointer(Parser.classDef),\n            lookaheadClassDef: this.parsePointer(Parser.classDef),\n            chainClassSet: this.parseListOfLists(function () {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc),\n                };\n            }),\n        };\n    } else if (substFormat === 3) {\n        return {\n            substFormat: 3,\n            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookupRecords: this.parseRecordList(lookupRecordDesc),\n        };\n    }\n    check.assert(\n        false,\n        '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.'\n    );\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\nsubtableParsers$1[7] = function parseLookup7() {\n    // Extension Substitution subtable\n    var substFormat = this.parseUShort();\n    check.argument(\n        substFormat === 1,\n        'GSUB Extension Substitution subtable identifier-format must be 1'\n    );\n    var extensionLookupType = this.parseUShort();\n    var extensionParser = new Parser(\n        this.data,\n        this.offset + this.parseULong()\n    );\n    return {\n        substFormat: 1,\n        lookupType: extensionLookupType,\n        extension: subtableParsers$1[extensionLookupType].call(extensionParser),\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\nsubtableParsers$1[8] = function parseLookup8() {\n    var substFormat = this.parseUShort();\n    check.argument(\n        substFormat === 1,\n        'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1'\n    );\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n        substitutes: this.parseUShortList(),\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\nfunction parseGsubTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(\n        tableVersion === 1 || tableVersion === 1.1,\n        'Unsupported GSUB table version.'\n    );\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers$1),\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers$1),\n            variations: p.parseFeatureVariationsList(),\n        };\n    }\n}\n\nvar gsub = { parse: parseGsubTable };\n\n// The `head` table contains global information about the font.\n\n// Parse the header `head` table\nfunction parseHeadTable(data, start) {\n    var head = {};\n    var p = new parse.Parser(data, start);\n    head.version = p.parseVersion();\n    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n    head.checkSumAdjustment = p.parseULong();\n    head.magicNumber = p.parseULong();\n    check.argument(\n        head.magicNumber === 0x5f0f3cf5,\n        'Font header has wrong magic number.'\n    );\n    head.flags = p.parseUShort();\n    head.unitsPerEm = p.parseUShort();\n    head.created = p.parseLongDateTime();\n    head.modified = p.parseLongDateTime();\n    head.xMin = p.parseShort();\n    head.yMin = p.parseShort();\n    head.xMax = p.parseShort();\n    head.yMax = p.parseShort();\n    head.macStyle = p.parseUShort();\n    head.lowestRecPPEM = p.parseUShort();\n    head.fontDirectionHint = p.parseShort();\n    head.indexToLocFormat = p.parseShort();\n    head.glyphDataFormat = p.parseShort();\n    return head;\n}\n\nvar head = { parse: parseHeadTable };\n\n// The `hhea` table contains information for horizontal layout.\n\n// Parse the horizontal header `hhea` table\nfunction parseHheaTable(data, start) {\n    var hhea = {};\n    var p = new parse.Parser(data, start);\n    hhea.version = p.parseVersion();\n    hhea.ascender = p.parseShort();\n    hhea.descender = p.parseShort();\n    hhea.lineGap = p.parseShort();\n    hhea.advanceWidthMax = p.parseUShort();\n    hhea.minLeftSideBearing = p.parseShort();\n    hhea.minRightSideBearing = p.parseShort();\n    hhea.xMaxExtent = p.parseShort();\n    hhea.caretSlopeRise = p.parseShort();\n    hhea.caretSlopeRun = p.parseShort();\n    hhea.caretOffset = p.parseShort();\n    p.relativeOffset += 8;\n    hhea.metricDataFormat = p.parseShort();\n    hhea.numberOfHMetrics = p.parseUShort();\n    return hhea;\n}\n\nvar hhea = { parse: parseHheaTable };\n\n// The `hmtx` table contains the horizontal metrics for all glyphs.\n\nfunction parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs) {\n    var advanceWidth;\n    var leftSideBearing;\n    var p = new parse.Parser(data, start);\n    for (var i = 0; i < numGlyphs; i += 1) {\n        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n\n        var glyph = glyphs.get(i);\n        glyph.advanceWidth = advanceWidth;\n        glyph.leftSideBearing = leftSideBearing;\n    }\n}\n\nfunction parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs) {\n    font._hmtxTableData = {};\n\n    var advanceWidth;\n    var leftSideBearing;\n    var p = new parse.Parser(data, start);\n    for (var i = 0; i < numGlyphs; i += 1) {\n        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n\n        font._hmtxTableData[i] = {\n            advanceWidth: advanceWidth,\n            leftSideBearing: leftSideBearing,\n        };\n    }\n}\n\n// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\nfunction parseHmtxTable(font, data, start, numMetrics, numGlyphs, glyphs, opt) {\n    if (opt.lowMemory)\n        { parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs); }\n    else { parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs); }\n}\n\nvar hmtx = { parse: parseHmtxTable };\n\n// The `kern` table contains kerning pairs.\n\nfunction parseWindowsKernTable(p) {\n    var pairs = {};\n    // Skip nTables.\n    p.skip('uShort');\n    var subtableVersion = p.parseUShort();\n    check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');\n    // Skip subtableLength, subtableCoverage\n    p.skip('uShort', 2);\n    var nPairs = p.parseUShort();\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n    for (var i = 0; i < nPairs; i += 1) {\n        var leftIndex = p.parseUShort();\n        var rightIndex = p.parseUShort();\n        var value = p.parseShort();\n        pairs[leftIndex + ',' + rightIndex] = value;\n    }\n    return pairs;\n}\n\nfunction parseMacKernTable(p) {\n    var pairs = {};\n    // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n    // Skip the rest.\n    p.skip('uShort');\n    var nTables = p.parseULong();\n    //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n    if (nTables > 1) {\n        console.warn('Only the first kern subtable is supported.');\n    }\n    p.skip('uLong');\n    var coverage = p.parseUShort();\n    var subtableVersion = coverage & 0xFF;\n    p.skip('uShort');\n    if (subtableVersion === 0) {\n        var nPairs = p.parseUShort();\n        // Skip searchRange, entrySelector, rangeShift.\n        p.skip('uShort', 3);\n        for (var i = 0; i < nPairs; i += 1) {\n            var leftIndex = p.parseUShort();\n            var rightIndex = p.parseUShort();\n            var value = p.parseShort();\n            pairs[leftIndex + ',' + rightIndex] = value;\n        }\n    }\n    return pairs;\n}\n\n// Parse the `kern` table which contains kerning pairs.\nfunction parseKernTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseUShort();\n    if (tableVersion === 0) {\n        return parseWindowsKernTable(p);\n    } else if (tableVersion === 1) {\n        return parseMacKernTable(p);\n    } else {\n        throw new Error('Unsupported kern table version (' + tableVersion + ').');\n    }\n}\n\nvar kern = { parse: parseKernTable };\n\n// The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n\nfunction parseLtagTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 1, 'Unsupported ltag table version.');\n    // The 'ltag' specification does not define any flags; skip the field.\n    p.skip('uLong', 1);\n    var numTags = p.parseULong();\n\n    var tags = [];\n    for (var i = 0; i < numTags; i++) {\n        var tag = '';\n        var offset = start + p.parseUShort();\n        var length = p.parseUShort();\n        for (var j = offset; j < offset + length; ++j) {\n            tag += String.fromCharCode(data.getInt8(j));\n        }\n\n        tags.push(tag);\n    }\n\n    return tags;\n}\n\nvar ltag = { parse: parseLtagTable };\n\n// The `loca` table stores the offsets to the locations of the glyphs in the font.\n\n// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n// relative to the beginning of the glyphData table.\n// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n// version where offsets are stored as uLongs. The `head` table specifies which version to use\n// (under indexToLocFormat).\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n    var p = new parse.Parser(data, start);\n    var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n    // There is an extra entry after the last index element to compute the length of the last glyph.\n    // That's why we use numGlyphs + 1.\n    var glyphOffsets = [];\n    for (var i = 0; i < numGlyphs + 1; i += 1) {\n        var glyphOffset = parseFn.call(p);\n        if (shortVersion) {\n            // The short table version stores the actual offset divided by 2.\n            glyphOffset *= 2;\n        }\n\n        glyphOffsets.push(glyphOffset);\n    }\n\n    return glyphOffsets;\n}\n\nvar loca = { parse: parseLocaTable };\n\n// The `maxp` table establishes the memory requirements for the font.\n\n// Parse the maximum profile `maxp` table.\nfunction parseMaxpTable(data, start) {\n    var maxp = {};\n    var p = new parse.Parser(data, start);\n    maxp.version = p.parseVersion();\n    maxp.numGlyphs = p.parseUShort();\n    if (maxp.version === 1.0) {\n        maxp.maxPoints = p.parseUShort();\n        maxp.maxContours = p.parseUShort();\n        maxp.maxCompositePoints = p.parseUShort();\n        maxp.maxCompositeContours = p.parseUShort();\n        maxp.maxZones = p.parseUShort();\n        maxp.maxTwilightPoints = p.parseUShort();\n        maxp.maxStorage = p.parseUShort();\n        maxp.maxFunctionDefs = p.parseUShort();\n        maxp.maxInstructionDefs = p.parseUShort();\n        maxp.maxStackElements = p.parseUShort();\n        maxp.maxSizeOfInstructions = p.parseUShort();\n        maxp.maxComponentElements = p.parseUShort();\n        maxp.maxComponentDepth = p.parseUShort();\n    }\n\n    return maxp;\n}\n\nvar maxp = { parse: parseMaxpTable };\n\n// The `OS/2` table contains metrics required in OpenType fonts.\n\n// Parse the OS/2 and Windows metrics `OS/2` table\nfunction parseOS2Table(data, start) {\n    var os2 = {};\n    var p = new parse.Parser(data, start);\n    os2.version = p.parseUShort();\n    os2.xAvgCharWidth = p.parseShort();\n    os2.usWeightClass = p.parseUShort();\n    os2.usWidthClass = p.parseUShort();\n    os2.fsType = p.parseUShort();\n    os2.ySubscriptXSize = p.parseShort();\n    os2.ySubscriptYSize = p.parseShort();\n    os2.ySubscriptXOffset = p.parseShort();\n    os2.ySubscriptYOffset = p.parseShort();\n    os2.ySuperscriptXSize = p.parseShort();\n    os2.ySuperscriptYSize = p.parseShort();\n    os2.ySuperscriptXOffset = p.parseShort();\n    os2.ySuperscriptYOffset = p.parseShort();\n    os2.yStrikeoutSize = p.parseShort();\n    os2.yStrikeoutPosition = p.parseShort();\n    os2.sFamilyClass = p.parseShort();\n    os2.panose = [];\n    for (var i = 0; i < 10; i++) {\n        os2.panose[i] = p.parseByte();\n    }\n\n    os2.ulUnicodeRange1 = p.parseULong();\n    os2.ulUnicodeRange2 = p.parseULong();\n    os2.ulUnicodeRange3 = p.parseULong();\n    os2.ulUnicodeRange4 = p.parseULong();\n    os2.achVendID = String.fromCharCode(\n        p.parseByte(),\n        p.parseByte(),\n        p.parseByte(),\n        p.parseByte()\n    );\n    os2.fsSelection = p.parseUShort();\n    os2.usFirstCharIndex = p.parseUShort();\n    os2.usLastCharIndex = p.parseUShort();\n    os2.sTypoAscender = p.parseShort();\n    os2.sTypoDescender = p.parseShort();\n    os2.sTypoLineGap = p.parseShort();\n    os2.usWinAscent = p.parseUShort();\n    os2.usWinDescent = p.parseUShort();\n    if (os2.version >= 1) {\n        os2.ulCodePageRange1 = p.parseULong();\n        os2.ulCodePageRange2 = p.parseULong();\n    }\n\n    if (os2.version >= 2) {\n        os2.sxHeight = p.parseShort();\n        os2.sCapHeight = p.parseShort();\n        os2.usDefaultChar = p.parseUShort();\n        os2.usBreakChar = p.parseUShort();\n        os2.usMaxContent = p.parseUShort();\n    }\n\n    return os2;\n}\n\nvar os2 = { parse: parseOS2Table };\n\n// The `post` table stores additional PostScript information, such as glyph names.\n\n// Parse the PostScript `post` table\nfunction parsePostTable(data, start) {\n    var post = {};\n    var p = new parse.Parser(data, start);\n    post.version = p.parseVersion();\n    post.italicAngle = p.parseFixed();\n    post.underlinePosition = p.parseShort();\n    post.underlineThickness = p.parseShort();\n    post.isFixedPitch = p.parseULong();\n    post.minMemType42 = p.parseULong();\n    post.maxMemType42 = p.parseULong();\n    post.minMemType1 = p.parseULong();\n    post.maxMemType1 = p.parseULong();\n    post.names = [];\n    switch (post.version) {\n        case 1:\n            break;\n        case 2:\n            post.numberOfGlyphs = p.parseUShort();\n            post.glyphNameIndex = new Array(post.numberOfGlyphs);\n            for (var i = 0; i < post.numberOfGlyphs; i++) {\n                post.glyphNameIndex[i] = p.parseUShort();\n            }\n            break;\n        case 2.5:\n            post.numberOfGlyphs = p.parseUShort();\n            post.offset = new Array(post.numberOfGlyphs);\n            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n                post.offset[i$1] = p.parseChar();\n            }\n            break;\n    }\n    return post;\n}\n\nvar post = { parse: parsePostTable };\n\n// Data types used in the OpenType font file.\n\n/**\n * @exports opentype.decode\n * @class\n */\nvar decode = {};\n\n/**\n * @param {DataView} data\n * @param {number} offset\n * @param {number} numBytes\n * @returns {string}\n */\ndecode.UTF8 = function(data, offset, numBytes) {\n    var codePoints = [];\n    var numChars = numBytes;\n    for (var j = 0; j < numChars; j++, offset += 1) {\n        codePoints[j] = data.getUint8(offset);\n    }\n\n    return String.fromCharCode.apply(null, codePoints);\n};\n\n/**\n * @param {DataView} data\n * @param {number} offset\n * @param {number} numBytes\n * @returns {string}\n */\ndecode.UTF16 = function(data, offset, numBytes) {\n    var codePoints = [];\n    var numChars = numBytes / 2;\n    for (var j = 0; j < numChars; j++, offset += 2) {\n        codePoints[j] = data.getUint16(offset);\n    }\n\n    return String.fromCharCode.apply(null, codePoints);\n};\n\n// Data for converting old eight-bit Macintosh encodings to Unicode.\n// This representation is optimized for decoding; encoding is slower\n// and needs more memory. The assumption is that all opentype.js users\n// want to open fonts, but saving a font will be comparatively rare\n// so it can be more expensive. Keyed by IANA character set name.\n//\n// Python script for generating these strings:\n//\n//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n//     print(s.encode('utf-8'))\n/**\n * @private\n */\nvar eightBitMacEncodings = {\n    'x-mac-croatian':  // Python: 'mac_croatian'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +\n    '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n    'x-mac-cyrillic':  // Python: 'mac_cyrillic'\n    'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +\n    'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n    'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +\n    'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n    'x-mac-greek':  // Python: 'mac_greek'\n    'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +\n    'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n    'x-mac-icelandic':  // Python: 'mac_iceland'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n    'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +\n    'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n    'x-mac-ce':  // Python: 'mac_latin2'\n    'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +\n    'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n    macintosh:  // Python: 'mac_roman'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-romanian':  // Python: 'mac_romanian'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n    'x-mac-turkish':  // Python: 'mac_turkish'\n    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n};\n\n/**\n * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n * string, or 'undefined' if the encoding is unsupported. For example, we do\n * not support Chinese, Japanese or Korean because these would need large\n * mapping tables.\n * @param {DataView} dataView\n * @param {number} offset\n * @param {number} dataLength\n * @param {string} encoding\n * @returns {string}\n */\ndecode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n    var table = eightBitMacEncodings[encoding];\n    if (table === undefined) {\n        return undefined;\n    }\n\n    var result = '';\n    for (var i = 0; i < dataLength; i++) {\n        var c = dataView.getUint8(offset + i);\n        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n        // mapped to U+0000..U+007F; we only need to look up the others.\n        if (c <= 0x7F) {\n            result += String.fromCharCode(c);\n        } else {\n            result += table[c & 0x7F];\n        }\n    }\n\n    return result;\n};\n\n// The `GPOS` table contains kerning pairs, among other things.\n\n// Parse the metadata `meta` table.\n// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\nfunction parseMetaTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 1, 'Unsupported META table version.');\n    p.parseULong(); // flags - currently unused and set to 0\n    p.parseULong(); // tableOffset\n    var numDataMaps = p.parseULong();\n\n    var tags = {};\n    for (var i = 0; i < numDataMaps; i++) {\n        var tag = p.parseTag();\n        var dataOffset = p.parseULong();\n        var dataLength = p.parseULong();\n        var text = decode.UTF8(data, start + dataOffset, dataLength);\n\n        tags[tag] = text;\n    }\n    return tags;\n}\n\nvar meta = { parse: parseMetaTable };\n\n// opentype.js\n\n/**\n * The opentype library.\n * @namespace opentype\n */\n\n// Table Directory Entries //////////////////////////////////////////////\n/**\n * Parses OpenType table entries.\n * @param  {DataView}\n * @param  {Number}\n * @return {Object[]}\n */\nfunction parseOpenTypeTableEntries(data, numTables) {\n    var tableEntries = [];\n    var p = 12;\n    for (var i = 0; i < numTables; i += 1) {\n        var tag = parse.getTag(data, p);\n        var checksum = parse.getULong(data, p + 4);\n        var offset = parse.getULong(data, p + 8);\n        var length = parse.getULong(data, p + 12);\n        tableEntries.push({\n            tag: tag,\n            checksum: checksum,\n            offset: offset,\n            length: length,\n            compression: false,\n        });\n        p += 16;\n    }\n\n    return tableEntries;\n}\n\n/**\n * Parses WOFF table entries.\n * @param  {DataView}\n * @param  {Number}\n * @return {Object[]}\n */\nfunction parseWOFFTableEntries(data, numTables) {\n    var tableEntries = [];\n    var p = 44; // offset to the first table directory entry.\n    for (var i = 0; i < numTables; i += 1) {\n        var tag = parse.getTag(data, p);\n        var offset = parse.getULong(data, p + 4);\n        var compLength = parse.getULong(data, p + 8);\n        var origLength = parse.getULong(data, p + 12);\n        var compression = (void 0);\n        if (compLength < origLength) {\n            compression = 'WOFF';\n        } else {\n            compression = false;\n        }\n\n        tableEntries.push({\n            tag: tag,\n            offset: offset,\n            compression: compression,\n            compressedLength: compLength,\n            length: origLength,\n        });\n        p += 20;\n    }\n\n    return tableEntries;\n}\n\n/**\n * @typedef TableData\n * @type Object\n * @property {DataView} data - The DataView\n * @property {number} offset - The data offset.\n */\n\n/**\n * @param  {DataView}\n * @param  {Object}\n * @return {TableData}\n */\nfunction uncompressTable(data, tableEntry) {\n    if (tableEntry.compression === 'WOFF') {\n        var inBuffer = new Uint8Array(\n            data.buffer,\n            tableEntry.offset + 2,\n            tableEntry.compressedLength - 2\n        );\n        var outBuffer = new Uint8Array(tableEntry.length);\n        inflateSync(inBuffer, outBuffer);\n        if (outBuffer.byteLength !== tableEntry.length) {\n            throw new Error(\n                'Decompression error: ' +\n                    tableEntry.tag +\n                    \" decompressed length doesn't match recorded length\"\n            );\n        }\n\n        var view = new DataView(outBuffer.buffer, 0);\n        return { data: view, offset: 0 };\n    } else {\n        return { data: data, offset: tableEntry.offset };\n    }\n}\n\n// Public API ///////////////////////////////////////////////////////////\n\n/**\n * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n * Throws an error if the font could not be parsed.\n * @param  {ArrayBuffer}\n * @param  {Object} opt - options for parsing\n * @return {opentype.Font}\n */\nfunction parseBuffer(buffer, opt) {\n    opt = opt === undefined || opt === null ? {} : opt;\n\n    var indexToLocFormat;\n\n    // Since the constructor can also be called to create new fonts from scratch, we indicate this\n    // should be an empty font that we'll fill with our own data.\n    var font = new Font({ empty: true });\n\n    // OpenType fonts use big endian byte ordering.\n    // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n    // Instead we use DataViews where we can specify endianness.\n    var data = new DataView(buffer, 0);\n    var numTables;\n    var tableEntries = [];\n    var signature = parse.getTag(data, 0);\n    if (\n        signature === String.fromCharCode(0, 1, 0, 0) ||\n        signature === 'true' ||\n        signature === 'typ1'\n    ) {\n        font.outlinesFormat = 'truetype';\n        numTables = parse.getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === 'OTTO') {\n        font.outlinesFormat = 'cff';\n        numTables = parse.getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === 'wOFF') {\n        var flavor = parse.getTag(data, 4);\n        if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n            font.outlinesFormat = 'truetype';\n        } else if (flavor === 'OTTO') {\n            font.outlinesFormat = 'cff';\n        } else {\n            throw new Error('Unsupported OpenType flavor ' + signature);\n        }\n\n        numTables = parse.getUShort(data, 12);\n        tableEntries = parseWOFFTableEntries(data, numTables);\n    } else {\n        throw new Error('Unsupported OpenType signature ' + signature);\n    }\n\n    var cffTableEntry;\n    var fvarTableEntry;\n    var glyfTableEntry;\n    var gdefTableEntry;\n    var gposTableEntry;\n    var gsubTableEntry;\n    var hmtxTableEntry;\n    var kernTableEntry;\n    var locaTableEntry;\n    var metaTableEntry;\n    var p;\n\n    for (var i = 0; i < numTables; i += 1) {\n        var tableEntry = tableEntries[i];\n        var table = (void 0);\n        switch (tableEntry.tag) {\n            case 'cmap':\n                table = uncompressTable(data, tableEntry);\n                font.tables.cmap = cmap.parse(table.data, table.offset);\n                font.encoding = new CmapEncoding(font.tables.cmap);\n                break;\n            case 'cvt ':\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n                break;\n            case 'fvar':\n                fvarTableEntry = tableEntry;\n                break;\n            case 'fpgm':\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.fpgm = p.parseByteList(tableEntry.length);\n                break;\n            case 'head':\n                table = uncompressTable(data, tableEntry);\n                font.tables.head = head.parse(table.data, table.offset);\n                font.unitsPerEm = font.tables.head.unitsPerEm;\n                indexToLocFormat = font.tables.head.indexToLocFormat;\n                break;\n            case 'hhea':\n                table = uncompressTable(data, tableEntry);\n                font.tables.hhea = hhea.parse(table.data, table.offset);\n                font.ascender = font.tables.hhea.ascender;\n                font.descender = font.tables.hhea.descender;\n                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n                break;\n            case 'hmtx':\n                hmtxTableEntry = tableEntry;\n                break;\n            case 'ltag':\n                table = uncompressTable(data, tableEntry);\n                ltagTable = ltag.parse(table.data, table.offset);\n                break;\n            case 'maxp':\n                table = uncompressTable(data, tableEntry);\n                font.tables.maxp = maxp.parse(table.data, table.offset);\n                font.numGlyphs = font.tables.maxp.numGlyphs;\n                break;\n            case 'OS/2':\n                table = uncompressTable(data, tableEntry);\n                font.tables.os2 = os2.parse(table.data, table.offset);\n                break;\n            case 'post':\n                table = uncompressTable(data, tableEntry);\n                font.tables.post = post.parse(table.data, table.offset);\n                break;\n            case 'prep':\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.prep = p.parseByteList(tableEntry.length);\n                break;\n            case 'glyf':\n                glyfTableEntry = tableEntry;\n                break;\n            case 'loca':\n                locaTableEntry = tableEntry;\n                break;\n            case 'CFF ':\n                cffTableEntry = tableEntry;\n                break;\n            case 'kern':\n                kernTableEntry = tableEntry;\n                break;\n            case 'GDEF':\n                gdefTableEntry = tableEntry;\n                break;\n            case 'GPOS':\n                gposTableEntry = tableEntry;\n                break;\n            case 'GSUB':\n                gsubTableEntry = tableEntry;\n                break;\n            case 'meta':\n                metaTableEntry = tableEntry;\n                break;\n        }\n    }\n\n    if (glyfTableEntry && locaTableEntry) {\n        var shortVersion = indexToLocFormat === 0;\n        var locaTable = uncompressTable(data, locaTableEntry);\n        var locaOffsets = loca.parse(\n            locaTable.data,\n            locaTable.offset,\n            font.numGlyphs,\n            shortVersion\n        );\n        var glyfTable = uncompressTable(data, glyfTableEntry);\n        font.glyphs = glyf.parse(\n            glyfTable.data,\n            glyfTable.offset,\n            locaOffsets,\n            font,\n            opt\n        );\n    } else if (cffTableEntry) {\n        var cffTable = uncompressTable(data, cffTableEntry);\n        cff.parse(cffTable.data, cffTable.offset, font, opt);\n    } else {\n        throw new Error(\"Font doesn't contain TrueType or CFF outlines.\");\n    }\n\n    var hmtxTable = uncompressTable(data, hmtxTableEntry);\n    hmtx.parse(\n        font,\n        hmtxTable.data,\n        hmtxTable.offset,\n        font.numberOfHMetrics,\n        font.numGlyphs,\n        font.glyphs,\n        opt\n    );\n    addGlyphNames(font, opt);\n\n    if (kernTableEntry) {\n        var kernTable = uncompressTable(data, kernTableEntry);\n        font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n    } else {\n        font.kerningPairs = {};\n    }\n\n    if (gdefTableEntry) {\n        var gdefTable = uncompressTable(data, gdefTableEntry);\n        font.tables.gdef = gdef.parse(gdefTable.data, gdefTable.offset);\n    }\n\n    if (gposTableEntry) {\n        var gposTable = uncompressTable(data, gposTableEntry);\n        font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);\n        font.position.init();\n    }\n\n    if (gsubTableEntry) {\n        var gsubTable = uncompressTable(data, gsubTableEntry);\n        font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n    }\n\n    if (fvarTableEntry) {\n        var fvarTable = uncompressTable(data, fvarTableEntry);\n        font.tables.fvar = fvar.parse(\n            fvarTable.data,\n            fvarTable.offset,\n            font.names\n        );\n    }\n\n    if (metaTableEntry) {\n        var metaTable = uncompressTable(data, metaTableEntry);\n        font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n        font.metas = font.tables.meta;\n    }\n\n    return font;\n}\n\nfunction load() {}\nfunction loadSync() {}\n\nvar opentype = /*#__PURE__*/Object.freeze({\n   __proto__: null,\n   Font: Font,\n   Glyph: Glyph,\n   Path: Path,\n   _parse: parse,\n   parse: parseBuffer,\n   load: load,\n   loadSync: loadSync\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (opentype);\n\n//# sourceMappingURL=opentype.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@shuding/opentype.js/dist/opentype.module.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/base64-js/lib/b64.js":
/*!*******************************************!*\
  !*** ./node_modules/base64-js/lib/b64.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}( false ? (0) : exports))\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvbGliL2I2NC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsT0FBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtEQUFrRCxZQUFZO0FBQzlEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDLENBQUMsTUFBOEIsSUFBSSxDQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2xpYi9iNjQuanM/ZGU4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbG9va3VwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuXG47KGZ1bmN0aW9uIChleHBvcnRzKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuICB2YXIgQXJyID0gKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJylcbiAgICA/IFVpbnQ4QXJyYXlcbiAgICA6IEFycmF5XG5cblx0dmFyIFBMVVMgICA9ICcrJy5jaGFyQ29kZUF0KDApXG5cdHZhciBTTEFTSCAgPSAnLycuY2hhckNvZGVBdCgwKVxuXHR2YXIgTlVNQkVSID0gJzAnLmNoYXJDb2RlQXQoMClcblx0dmFyIExPV0VSICA9ICdhJy5jaGFyQ29kZUF0KDApXG5cdHZhciBVUFBFUiAgPSAnQScuY2hhckNvZGVBdCgwKVxuXHR2YXIgUExVU19VUkxfU0FGRSA9ICctJy5jaGFyQ29kZUF0KDApXG5cdHZhciBTTEFTSF9VUkxfU0FGRSA9ICdfJy5jaGFyQ29kZUF0KDApXG5cblx0ZnVuY3Rpb24gZGVjb2RlIChlbHQpIHtcblx0XHR2YXIgY29kZSA9IGVsdC5jaGFyQ29kZUF0KDApXG5cdFx0aWYgKGNvZGUgPT09IFBMVVMgfHxcblx0XHQgICAgY29kZSA9PT0gUExVU19VUkxfU0FGRSlcblx0XHRcdHJldHVybiA2MiAvLyAnKydcblx0XHRpZiAoY29kZSA9PT0gU0xBU0ggfHxcblx0XHQgICAgY29kZSA9PT0gU0xBU0hfVVJMX1NBRkUpXG5cdFx0XHRyZXR1cm4gNjMgLy8gJy8nXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIpXG5cdFx0XHRyZXR1cm4gLTEgLy9ubyBtYXRjaFxuXHRcdGlmIChjb2RlIDwgTlVNQkVSICsgMTApXG5cdFx0XHRyZXR1cm4gY29kZSAtIE5VTUJFUiArIDI2ICsgMjZcblx0XHRpZiAoY29kZSA8IFVQUEVSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIFVQUEVSXG5cdFx0aWYgKGNvZGUgPCBMT1dFUiArIDI2KVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBMT1dFUiArIDI2XG5cdH1cblxuXHRmdW5jdGlvbiBiNjRUb0J5dGVBcnJheSAoYjY0KSB7XG5cdFx0dmFyIGksIGosIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcblxuXHRcdGlmIChiNjQubGVuZ3RoICUgNCA+IDApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG5cdFx0fVxuXG5cdFx0Ly8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcblx0XHQvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG5cdFx0Ly8gcmVwcmVzZW50IG9uZSBieXRlXG5cdFx0Ly8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG5cdFx0Ly8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuXHRcdHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cdFx0cGxhY2VIb2xkZXJzID0gJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDIpID8gMiA6ICc9JyA9PT0gYjY0LmNoYXJBdChsZW4gLSAxKSA/IDEgOiAwXG5cblx0XHQvLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcblx0XHRhcnIgPSBuZXcgQXJyKGI2NC5sZW5ndGggKiAzIC8gNCAtIHBsYWNlSG9sZGVycylcblxuXHRcdC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcblx0XHRsID0gcGxhY2VIb2xkZXJzID4gMCA/IGI2NC5sZW5ndGggLSA0IDogYjY0Lmxlbmd0aFxuXG5cdFx0dmFyIEwgPSAwXG5cblx0XHRmdW5jdGlvbiBwdXNoICh2KSB7XG5cdFx0XHRhcnJbTCsrXSA9IHZcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGw7IGkgKz0gNCwgaiArPSAzKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDE4KSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpIDw8IDEyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMikpIDw8IDYpIHwgZGVjb2RlKGI2NC5jaGFyQXQoaSArIDMpKVxuXHRcdFx0cHVzaCgodG1wICYgMHhGRjAwMDApID4+IDE2KVxuXHRcdFx0cHVzaCgodG1wICYgMHhGRjAwKSA+PiA4KVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH1cblxuXHRcdGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMikgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA+PiA0KVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDEwKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpIDw8IDQpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPj4gMilcblx0XHRcdHB1c2goKHRtcCA+PiA4KSAmIDB4RkYpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFyclxuXHR9XG5cblx0ZnVuY3Rpb24gdWludDhUb0Jhc2U2NCAodWludDgpIHtcblx0XHR2YXIgaSxcblx0XHRcdGV4dHJhQnl0ZXMgPSB1aW50OC5sZW5ndGggJSAzLCAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuXHRcdFx0b3V0cHV0ID0gXCJcIixcblx0XHRcdHRlbXAsIGxlbmd0aFxuXG5cdFx0ZnVuY3Rpb24gZW5jb2RlIChudW0pIHtcblx0XHRcdHJldHVybiBsb29rdXAuY2hhckF0KG51bSlcblx0XHR9XG5cblx0XHRmdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuXHRcdFx0cmV0dXJuIGVuY29kZShudW0gPj4gMTggJiAweDNGKSArIGVuY29kZShudW0gPj4gMTIgJiAweDNGKSArIGVuY29kZShudW0gPj4gNiAmIDB4M0YpICsgZW5jb2RlKG51bSAmIDB4M0YpXG5cdFx0fVxuXG5cdFx0Ly8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuXHRcdGZvciAoaSA9IDAsIGxlbmd0aCA9IHVpbnQ4Lmxlbmd0aCAtIGV4dHJhQnl0ZXM7IGkgPCBsZW5ndGg7IGkgKz0gMykge1xuXHRcdFx0dGVtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSlcblx0XHRcdG91dHB1dCArPSB0cmlwbGV0VG9CYXNlNjQodGVtcClcblx0XHR9XG5cblx0XHQvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG5cdFx0c3dpdGNoIChleHRyYUJ5dGVzKSB7XG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdHRlbXAgPSB1aW50OFt1aW50OC5sZW5ndGggLSAxXVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCA0KSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPT0nXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRjYXNlIDI6XG5cdFx0XHRcdHRlbXAgPSAodWludDhbdWludDgubGVuZ3RoIC0gMl0gPDwgOCkgKyAodWludDhbdWludDgubGVuZ3RoIC0gMV0pXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAxMClcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA+PiA0KSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPDwgMikgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gJz0nXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dFxuXHR9XG5cblx0ZXhwb3J0cy50b0J5dGVBcnJheSA9IGI2NFRvQnl0ZUFycmF5XG5cdGV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IHVpbnQ4VG9CYXNlNjRcbn0odHlwZW9mIGV4cG9ydHMgPT09ICd1bmRlZmluZWQnID8gKHRoaXMuYmFzZTY0anMgPSB7fSkgOiBleHBvcnRzKSlcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/base64-js/lib/b64.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/camelize/index.js":
/*!****************************************!*\
  !*** ./node_modules/camelize/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nmodule.exports = function (obj) {\n\tif (typeof obj === 'string') { return camelCase(obj); }\n\treturn walk(obj);\n};\n\nfunction walk(obj) {\n\tif (!obj || typeof obj !== 'object') { return obj; }\n\tif (isDate(obj) || isRegex(obj)) { return obj; }\n\tif (isArray(obj)) { return map(obj, walk); }\n\treturn reduce(objectKeys(obj), function (acc, key) {\n\t\tvar camel = camelCase(key);\n\t\tacc[camel] = walk(obj[key]);\n\t\treturn acc;\n\t}, {});\n}\n\nfunction camelCase(str) {\n\treturn str.replace(/[_.-](\\w|$)/g, function (_, x) {\n\t\treturn x.toUpperCase();\n\t});\n}\n\nvar isArray = Array.isArray || function (obj) {\n\treturn Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nvar isDate = function (obj) {\n\treturn Object.prototype.toString.call(obj) === '[object Date]';\n};\n\nvar isRegex = function (obj) {\n\treturn Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar has = Object.prototype.hasOwnProperty;\nvar objectKeys = Object.keys || function (obj) {\n\tvar keys = [];\n\tfor (var key in obj) {\n\t\tif (has.call(obj, key)) { keys.push(key); }\n\t}\n\treturn keys;\n};\n\nfunction map(xs, f) {\n\tif (xs.map) { return xs.map(f); }\n\tvar res = [];\n\tfor (var i = 0; i < xs.length; i++) {\n\t\tres.push(f(xs[i], i));\n\t}\n\treturn res;\n}\n\nfunction reduce(xs, f, acc) {\n\tif (xs.reduce) { return xs.reduce(f, acc); }\n\tfor (var i = 0; i < xs.length; i++) {\n\t\tacc = f(acc, xs[i], i);\n\t}\n\treturn acc;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jYW1lbGl6ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLGdDQUFnQztBQUNoQztBQUNBOztBQUVBO0FBQ0Esd0NBQXdDO0FBQ3hDLG9DQUFvQztBQUNwQyxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLElBQUk7QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsaUJBQWlCLGVBQWU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0I7QUFDbEIsaUJBQWlCLGVBQWU7QUFDaEM7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NhbWVsaXplL2luZGV4LmpzPzViNTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcblx0aWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7IHJldHVybiBjYW1lbENhc2Uob2JqKTsgfVxuXHRyZXR1cm4gd2FsayhvYmopO1xufTtcblxuZnVuY3Rpb24gd2FsayhvYmopIHtcblx0aWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIG9iajsgfVxuXHRpZiAoaXNEYXRlKG9iaikgfHwgaXNSZWdleChvYmopKSB7IHJldHVybiBvYmo7IH1cblx0aWYgKGlzQXJyYXkob2JqKSkgeyByZXR1cm4gbWFwKG9iaiwgd2Fsayk7IH1cblx0cmV0dXJuIHJlZHVjZShvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uIChhY2MsIGtleSkge1xuXHRcdHZhciBjYW1lbCA9IGNhbWVsQ2FzZShrZXkpO1xuXHRcdGFjY1tjYW1lbF0gPSB3YWxrKG9ialtrZXldKTtcblx0XHRyZXR1cm4gYWNjO1xuXHR9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZShzdHIpIHtcblx0cmV0dXJuIHN0ci5yZXBsYWNlKC9bXy4tXShcXHd8JCkvZywgZnVuY3Rpb24gKF8sIHgpIHtcblx0XHRyZXR1cm4geC50b1VwcGVyQ2FzZSgpO1xuXHR9KTtcbn1cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChvYmopIHtcblx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxudmFyIGlzRGF0ZSA9IGZ1bmN0aW9uIChvYmopIHtcblx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBEYXRlXSc7XG59O1xuXG52YXIgaXNSZWdleCA9IGZ1bmN0aW9uIChvYmopIHtcblx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBSZWdFeHBdJztcbn07XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG5cdHZhciBrZXlzID0gW107XG5cdGZvciAodmFyIGtleSBpbiBvYmopIHtcblx0XHRpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7IGtleXMucHVzaChrZXkpOyB9XG5cdH1cblx0cmV0dXJuIGtleXM7XG59O1xuXG5mdW5jdGlvbiBtYXAoeHMsIGYpIHtcblx0aWYgKHhzLm1hcCkgeyByZXR1cm4geHMubWFwKGYpOyB9XG5cdHZhciByZXMgPSBbXTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuXHRcdHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcblx0fVxuXHRyZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiByZWR1Y2UoeHMsIGYsIGFjYykge1xuXHRpZiAoeHMucmVkdWNlKSB7IHJldHVybiB4cy5yZWR1Y2UoZiwgYWNjKTsgfVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG5cdFx0YWNjID0gZihhY2MsIHhzW2ldLCBpKTtcblx0fVxuXHRyZXR1cm4gYWNjO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/camelize/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-background-parser/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-background-parser/index.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/*!\n * https://github.com/gilmoreorless/css-background-parser\n * Copyright © 2015 Gilmore Davidson under the MIT license: http://gilmoreorless.mit-license.org/\n */\n(function (exports) {\n\n    function BackgroundList(backgrounds) {\n        if (!(this instanceof BackgroundList)) {\n            return new BackgroundList();\n        }\n        this.backgrounds = backgrounds || [];\n    }\n\n    BackgroundList.prototype.toString = function () {\n        return this.backgrounds.join(', ');\n    };\n\n\n    function Background(props) {\n        if (!(this instanceof Background)) {\n            return new Background(props);\n        }\n        props = props || {};\n        var bg = this;\n\n        function defprop(name, defaultValue) {\n            bg[name] = (name in props) ? props[name] : defaultValue;\n        }\n\n        // http://www.w3.org/TR/css3-background/#backgrounds\n        defprop('color', '');\n        defprop('image', 'none');\n        defprop('attachment', 'scroll');\n        defprop('clip', 'border-box');\n        defprop('origin', 'padding-box');\n        defprop('position', '0% 0%');\n        defprop('repeat', 'repeat');\n        defprop('size', 'auto');\n    }\n\n    Background.prototype.toString = function () {\n        var list = [\n            this.image,\n            this.repeat,\n            this.attachment,\n            this.position + ' / ' + this.size,\n            this.origin,\n            this.clip\n        ];\n        if (this.color) {\n            list.unshift(this.color);\n        }\n        return list.join(' ');\n    };\n\n    exports.BackgroundList = BackgroundList;\n    exports.Background = Background;\n\n\n    function parseImages(cssText) {\n        var images = [];\n        var tokens = /[,\\(\\)]/;\n        var parens = 0;\n        var buffer = '';\n\n        if (cssText == null) {\n            return images;\n        }\n\n        while (cssText.length) {\n            var match = tokens.exec(cssText);\n            if (!match) {\n                break;\n            }\n            var char = match[0];\n            var ignoreChar = false;\n            switch (char) {\n                case ',':\n                    if (!parens) {\n                        images.push(buffer.trim());\n                        buffer = '';\n                        ignoreChar = true;\n                    }\n                    break;\n                case '(':\n                    parens++;\n                    break;\n                case ')':\n                    parens--;\n                    break;\n            }\n\n            var index = match.index + 1;\n            buffer += cssText.slice(0, ignoreChar ? index - 1 : index);\n            cssText = cssText.slice(index);\n        }\n\n        if (buffer.length || cssText.length) {\n            images.push((buffer + cssText).trim());\n        }\n\n        return images;\n    }\n\n    // Helper for .map()\n    function trim(str) {\n        return str.trim();\n    }\n\n    function parseSimpleList(cssText) {\n        return (cssText || '').split(',').map(trim);\n    }\n\n    exports.parseElementStyle = function (styleObject) {\n        var list = new BackgroundList();\n        if (styleObject == null) {\n            return list;\n        }\n\n        var bgImage = parseImages(styleObject.backgroundImage);\n        var bgColor = styleObject.backgroundColor;\n        var bgAttachment = parseSimpleList(styleObject.backgroundAttachment);\n        var bgClip       = parseSimpleList(styleObject.backgroundClip);\n        var bgOrigin     = parseSimpleList(styleObject.backgroundOrigin);\n        var bgPosition   = parseSimpleList(styleObject.backgroundPosition);\n        var bgRepeat     = parseSimpleList(styleObject.backgroundRepeat);\n        var bgSize       = parseSimpleList(styleObject.backgroundSize);\n        var background;\n\n        for (var i = 0, ii = bgImage.length; i < ii; i++) {\n            background = new Background({\n                image:      bgImage[i],\n                attachment: bgAttachment[i % bgAttachment.length],\n                clip:       bgClip[i % bgClip.length],\n                origin:     bgOrigin[i % bgOrigin.length],\n                position:   bgPosition[i % bgPosition.length],\n                repeat:     bgRepeat[i % bgRepeat.length],\n                size:       bgSize[i % bgSize.length]\n            });\n            if (i === ii - 1) {\n                background.color = bgColor;\n            }\n            list.backgrounds.push(background);\n        }\n\n        return list;\n    };\n\n    // exports.parseCssString = function (cssString) {\n    //     return new Background();\n    // };\n\n    // exports.parseBackgroundValue = function (cssString) {\n    //     return new Background();\n    // };\n\n})((function (root) {\n    // CommonJS\n    if ( true && module.exports !== undefined) return module.exports;\n    // Global `cssBgParser`\n    return (root.cssBgParser = {});\n})(this));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-background-parser/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-box-shadow/index.js":
/*!**********************************************!*\
  !*** ./node_modules/css-box-shadow/index.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("const VALUES_REG = /,(?![^\\(]*\\))/\nconst PARTS_REG = /\\s(?![^(]*\\))/\nconst LENGTH_REG = /^[0-9]+[a-zA-Z%]+?$/\n\nconst parseValue = str => {\n  const parts = str.split(PARTS_REG)\n  const inset = parts.includes('inset')\n  const last = parts.slice(-1)[0]\n  const color = !isLength(last) ? last : undefined\n\n  const nums = parts\n    .filter(n => n !== 'inset')\n    .filter(n => n !== color)\n    .map(toNum)\n  const [ offsetX, offsetY, blurRadius, spreadRadius ] = nums\n\n  return {\n    inset,\n    offsetX,\n    offsetY,\n    blurRadius,\n    spreadRadius,\n    color\n  }\n}\n\nconst stringifyValue = obj => {\n  const {\n    inset,\n    offsetX = 0,\n    offsetY = 0,\n    blurRadius = 0,\n    spreadRadius,\n    color\n  } = obj || {}\n\n  return [\n    (inset ? 'inset' : null),\n    offsetX,\n    offsetY,\n    blurRadius ,\n    spreadRadius,\n    color\n  ].filter(v => v !== null && v !== undefined)\n    .map(toPx)\n    .map(s => ('' + s).trim())\n    .join(' ')\n}\n\nconst isLength = v => v === '0' || LENGTH_REG.test(v)\nconst toNum = v => {\n  if (!/px$/.test(v) && v !== '0') return v\n  const n = parseFloat(v)\n  return !isNaN(n) ? n : v\n}\nconst toPx = n => typeof n === 'number' && n !== 0 ? (n + 'px') : n\n\nconst parse = str => str.split(VALUES_REG).map(s => s.trim()).map(parseValue)\nconst stringify = arr => arr.map(stringifyValue).join(', ')\n\nmodule.exports = {\n  parse,\n  stringify\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jc3MtYm94LXNoYWRvdy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3NzLWJveC1zaGFkb3cvaW5kZXguanM/MTYzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBWQUxVRVNfUkVHID0gLywoPyFbXlxcKF0qXFwpKS9cbmNvbnN0IFBBUlRTX1JFRyA9IC9cXHMoPyFbXihdKlxcKSkvXG5jb25zdCBMRU5HVEhfUkVHID0gL15bMC05XStbYS16QS1aJV0rPyQvXG5cbmNvbnN0IHBhcnNlVmFsdWUgPSBzdHIgPT4ge1xuICBjb25zdCBwYXJ0cyA9IHN0ci5zcGxpdChQQVJUU19SRUcpXG4gIGNvbnN0IGluc2V0ID0gcGFydHMuaW5jbHVkZXMoJ2luc2V0JylcbiAgY29uc3QgbGFzdCA9IHBhcnRzLnNsaWNlKC0xKVswXVxuICBjb25zdCBjb2xvciA9ICFpc0xlbmd0aChsYXN0KSA/IGxhc3QgOiB1bmRlZmluZWRcblxuICBjb25zdCBudW1zID0gcGFydHNcbiAgICAuZmlsdGVyKG4gPT4gbiAhPT0gJ2luc2V0JylcbiAgICAuZmlsdGVyKG4gPT4gbiAhPT0gY29sb3IpXG4gICAgLm1hcCh0b051bSlcbiAgY29uc3QgWyBvZmZzZXRYLCBvZmZzZXRZLCBibHVyUmFkaXVzLCBzcHJlYWRSYWRpdXMgXSA9IG51bXNcblxuICByZXR1cm4ge1xuICAgIGluc2V0LFxuICAgIG9mZnNldFgsXG4gICAgb2Zmc2V0WSxcbiAgICBibHVyUmFkaXVzLFxuICAgIHNwcmVhZFJhZGl1cyxcbiAgICBjb2xvclxuICB9XG59XG5cbmNvbnN0IHN0cmluZ2lmeVZhbHVlID0gb2JqID0+IHtcbiAgY29uc3Qge1xuICAgIGluc2V0LFxuICAgIG9mZnNldFggPSAwLFxuICAgIG9mZnNldFkgPSAwLFxuICAgIGJsdXJSYWRpdXMgPSAwLFxuICAgIHNwcmVhZFJhZGl1cyxcbiAgICBjb2xvclxuICB9ID0gb2JqIHx8IHt9XG5cbiAgcmV0dXJuIFtcbiAgICAoaW5zZXQgPyAnaW5zZXQnIDogbnVsbCksXG4gICAgb2Zmc2V0WCxcbiAgICBvZmZzZXRZLFxuICAgIGJsdXJSYWRpdXMgLFxuICAgIHNwcmVhZFJhZGl1cyxcbiAgICBjb2xvclxuICBdLmZpbHRlcih2ID0+IHYgIT09IG51bGwgJiYgdiAhPT0gdW5kZWZpbmVkKVxuICAgIC5tYXAodG9QeClcbiAgICAubWFwKHMgPT4gKCcnICsgcykudHJpbSgpKVxuICAgIC5qb2luKCcgJylcbn1cblxuY29uc3QgaXNMZW5ndGggPSB2ID0+IHYgPT09ICcwJyB8fCBMRU5HVEhfUkVHLnRlc3QodilcbmNvbnN0IHRvTnVtID0gdiA9PiB7XG4gIGlmICghL3B4JC8udGVzdCh2KSAmJiB2ICE9PSAnMCcpIHJldHVybiB2XG4gIGNvbnN0IG4gPSBwYXJzZUZsb2F0KHYpXG4gIHJldHVybiAhaXNOYU4obikgPyBuIDogdlxufVxuY29uc3QgdG9QeCA9IG4gPT4gdHlwZW9mIG4gPT09ICdudW1iZXInICYmIG4gIT09IDAgPyAobiArICdweCcpIDogblxuXG5jb25zdCBwYXJzZSA9IHN0ciA9PiBzdHIuc3BsaXQoVkFMVUVTX1JFRykubWFwKHMgPT4gcy50cmltKCkpLm1hcChwYXJzZVZhbHVlKVxuY29uc3Qgc3RyaW5naWZ5ID0gYXJyID0+IGFyci5tYXAoc3RyaW5naWZ5VmFsdWUpLmpvaW4oJywgJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlLFxuICBzdHJpbmdpZnlcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-box-shadow/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-color-keywords/index.js":
/*!**************************************************!*\
  !*** ./node_modules/css-color-keywords/index.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nmodule.exports = __webpack_require__(/*! ./colors.json */ \"(app-pages-browser)/./node_modules/css-color-keywords/colors.json\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jc3MtY29sb3Ita2V5d29yZHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosOEhBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jc3MtY29sb3Ita2V5d29yZHMvaW5kZXguanM/YWMxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbG9ycy5qc29uJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-color-keywords/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-to-react-native/index.js":
/*!***************************************************!*\
  !*** ./node_modules/css-to-react-native/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar parse = __webpack_require__(/*! postcss-value-parser */ \"(app-pages-browser)/./node_modules/postcss-value-parser/lib/index.js\");\n\nvar parse__default = _interopDefault(parse);\n\nvar camelizeStyleName = _interopDefault(__webpack_require__(/*! camelize */ \"(app-pages-browser)/./node_modules/camelize/index.js\"));\n\nvar cssColorKeywords = _interopDefault(__webpack_require__(/*! css-color-keywords */ \"(app-pages-browser)/./node_modules/css-color-keywords/index.js\"));\n\nvar matchString = function matchString(node) {\n  if (node.type !== 'string') return null;\n  return node.value.replace(/\\\\([0-9a-f]{1,6})(?:\\s|$)/gi, function (match, charCode) {\n    return String.fromCharCode(parseInt(charCode, 16));\n  }).replace(/\\\\/g, '');\n};\n\nvar hexColorRe = /^(#(?:[0-9a-f]{3,4}){1,2})$/i;\nvar cssFunctionNameRe = /^(rgba?|hsla?|hwb|lab|lch|gray|color)$/;\n\nvar matchColor = function matchColor(node) {\n  if (node.type === 'word' && (hexColorRe.test(node.value) || node.value in cssColorKeywords || node.value === 'transparent')) {\n    return node.value;\n  } else if (node.type === 'function' && cssFunctionNameRe.test(node.value)) {\n    return parse.stringify(node);\n  }\n\n  return null;\n};\n\nvar noneRe = /^(none)$/i;\nvar autoRe = /^(auto)$/i;\nvar identRe = /(^-?[_a-z][_a-z0-9-]*$)/i; // Note if these are wrong, you'll need to change index.js too\n\nvar numberRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)$/i; // Note lengthRe is sneaky: you can omit units for 0\n\nvar lengthRe = /^(0$|(?:[+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)(?=px$))/i;\nvar unsupportedUnitRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?(ch|em|ex|rem|vh|vw|vmin|vmax|cm|mm|in|pc|pt))$/i;\nvar angleRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?(?:deg|rad))$/i;\nvar percentRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?%)$/i;\n\nvar noopToken = function noopToken(predicate) {\n  return function (node) {\n    return predicate(node) ? '<token>' : null;\n  };\n};\n\nvar valueForTypeToken = function valueForTypeToken(type) {\n  return function (node) {\n    return node.type === type ? node.value : null;\n  };\n};\n\nvar regExpToken = function regExpToken(regExp, transform) {\n  if (transform === void 0) {\n    transform = String;\n  }\n\n  return function (node) {\n    if (node.type !== 'word') return null;\n    var match = node.value.match(regExp);\n    if (match === null) return null;\n    var value = transform(match[1]);\n    return value;\n  };\n};\n\nvar SPACE = noopToken(function (node) {\n  return node.type === 'space';\n});\nvar SLASH = noopToken(function (node) {\n  return node.type === 'div' && node.value === '/';\n});\nvar COMMA = noopToken(function (node) {\n  return node.type === 'div' && node.value === ',';\n});\nvar WORD = valueForTypeToken('word');\nvar NONE = regExpToken(noneRe);\nvar AUTO = regExpToken(autoRe);\nvar NUMBER = regExpToken(numberRe, Number);\nvar LENGTH = regExpToken(lengthRe, Number);\nvar UNSUPPORTED_LENGTH_UNIT = regExpToken(unsupportedUnitRe);\nvar ANGLE = regExpToken(angleRe, function (angle) {\n  return angle.toLowerCase();\n});\nvar PERCENT = regExpToken(percentRe);\nvar IDENT = regExpToken(identRe);\nvar STRING = matchString;\nvar COLOR = matchColor;\nvar LINE = regExpToken(/^(none|underline|line-through)$/i);\n\nvar aspectRatio = function aspectRatio(tokenStream) {\n  var aspectRatio = tokenStream.expect(NUMBER);\n\n  if (tokenStream.hasTokens()) {\n    tokenStream.expect(SLASH);\n    aspectRatio /= tokenStream.expect(NUMBER);\n  }\n\n  return {\n    aspectRatio: aspectRatio\n  };\n};\n\nvar BORDER_STYLE = regExpToken(/^(solid|dashed|dotted)$/);\nvar defaultBorderWidth = 1;\nvar defaultBorderColor = 'black';\nvar defaultBorderStyle = 'solid';\n\nvar border = function border(tokenStream) {\n  var borderWidth;\n  var borderColor;\n  var borderStyle;\n\n  if (tokenStream.matches(NONE)) {\n    tokenStream.expectEmpty();\n    return {\n      borderWidth: 0,\n      borderColor: 'black',\n      borderStyle: 'solid'\n    };\n  }\n\n  var partsParsed = 0;\n\n  while (partsParsed < 3 && tokenStream.hasTokens()) {\n    if (partsParsed !== 0) tokenStream.expect(SPACE);\n\n    if (borderWidth === undefined && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n      borderWidth = tokenStream.lastValue;\n    } else if (borderColor === undefined && tokenStream.matches(COLOR)) {\n      borderColor = tokenStream.lastValue;\n    } else if (borderStyle === undefined && tokenStream.matches(BORDER_STYLE)) {\n      borderStyle = tokenStream.lastValue;\n    } else {\n      tokenStream[\"throw\"]();\n    }\n\n    partsParsed += 1;\n  }\n\n  tokenStream.expectEmpty();\n  if (borderWidth === undefined) borderWidth = defaultBorderWidth;\n  if (borderColor === undefined) borderColor = defaultBorderColor;\n  if (borderStyle === undefined) borderStyle = defaultBorderStyle;\n  return {\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    borderStyle: borderStyle\n  };\n};\n\nvar directionFactory = function directionFactory(_ref) {\n  var _ref$types = _ref.types,\n      types = _ref$types === void 0 ? [LENGTH, UNSUPPORTED_LENGTH_UNIT, PERCENT] : _ref$types,\n      _ref$directions = _ref.directions,\n      directions = _ref$directions === void 0 ? ['Top', 'Right', 'Bottom', 'Left'] : _ref$directions,\n      _ref$prefix = _ref.prefix,\n      prefix = _ref$prefix === void 0 ? '' : _ref$prefix,\n      _ref$suffix = _ref.suffix,\n      suffix = _ref$suffix === void 0 ? '' : _ref$suffix;\n  return function (tokenStream) {\n    var _ref2;\n\n    var values = []; // borderWidth doesn't currently allow a percent value, but may do in the future\n\n    values.push(tokenStream.expect.apply(tokenStream, types));\n\n    while (values.length < 4 && tokenStream.hasTokens()) {\n      tokenStream.expect(SPACE);\n      values.push(tokenStream.expect.apply(tokenStream, types));\n    }\n\n    tokenStream.expectEmpty();\n    var top = values[0],\n        _values$ = values[1],\n        right = _values$ === void 0 ? top : _values$,\n        _values$2 = values[2],\n        bottom = _values$2 === void 0 ? top : _values$2,\n        _values$3 = values[3],\n        left = _values$3 === void 0 ? right : _values$3;\n\n    var keyFor = function keyFor(n) {\n      return \"\" + prefix + directions[n] + suffix;\n    };\n\n    return _ref2 = {}, _ref2[keyFor(0)] = top, _ref2[keyFor(1)] = right, _ref2[keyFor(2)] = bottom, _ref2[keyFor(3)] = left, _ref2;\n  };\n};\n\nvar parseShadowOffset = function parseShadowOffset(tokenStream) {\n  var width = tokenStream.expect(LENGTH);\n  var height = tokenStream.matches(SPACE) ? tokenStream.expect(LENGTH) : width;\n  tokenStream.expectEmpty();\n  return {\n    width: width,\n    height: height\n  };\n};\n\nvar parseShadow = function parseShadow(tokenStream) {\n  var offsetX;\n  var offsetY;\n  var radius;\n  var color;\n\n  if (tokenStream.matches(NONE)) {\n    tokenStream.expectEmpty();\n    return {\n      offset: {\n        width: 0,\n        height: 0\n      },\n      radius: 0,\n      color: 'black'\n    };\n  }\n\n  var didParseFirst = false;\n\n  while (tokenStream.hasTokens()) {\n    if (didParseFirst) tokenStream.expect(SPACE);\n\n    if (offsetX === undefined && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n      offsetX = tokenStream.lastValue;\n      tokenStream.expect(SPACE);\n      offsetY = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n      tokenStream.saveRewindPoint();\n\n      if (tokenStream.matches(SPACE) && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n        radius = tokenStream.lastValue;\n      } else {\n        tokenStream.rewind();\n      }\n    } else if (color === undefined && tokenStream.matches(COLOR)) {\n      color = tokenStream.lastValue;\n    } else {\n      tokenStream[\"throw\"]();\n    }\n\n    didParseFirst = true;\n  }\n\n  if (offsetX === undefined) tokenStream[\"throw\"]();\n  return {\n    offset: {\n      width: offsetX,\n      height: offsetY\n    },\n    radius: radius !== undefined ? radius : 0,\n    color: color !== undefined ? color : 'black'\n  };\n};\n\nvar boxShadow = function boxShadow(tokenStream) {\n  var _parseShadow = parseShadow(tokenStream),\n      offset = _parseShadow.offset,\n      radius = _parseShadow.radius,\n      color = _parseShadow.color;\n\n  return {\n    shadowOffset: offset,\n    shadowRadius: radius,\n    shadowColor: color,\n    shadowOpacity: 1\n  };\n};\n\nvar defaultFlexGrow = 1;\nvar defaultFlexShrink = 1;\nvar defaultFlexBasis = 0;\n\nvar flex = function flex(tokenStream) {\n  var flexGrow;\n  var flexShrink;\n  var flexBasis;\n\n  if (tokenStream.matches(NONE)) {\n    tokenStream.expectEmpty();\n    return {\n      flexGrow: 0,\n      flexShrink: 0,\n      flexBasis: 'auto'\n    };\n  }\n\n  tokenStream.saveRewindPoint();\n\n  if (tokenStream.matches(AUTO) && !tokenStream.hasTokens()) {\n    return {\n      flexGrow: 1,\n      flexShrink: 1,\n      flexBasis: 'auto'\n    };\n  }\n\n  tokenStream.rewind();\n  var partsParsed = 0;\n\n  while (partsParsed < 2 && tokenStream.hasTokens()) {\n    if (partsParsed !== 0) tokenStream.expect(SPACE);\n\n    if (flexGrow === undefined && tokenStream.matches(NUMBER)) {\n      flexGrow = tokenStream.lastValue;\n      tokenStream.saveRewindPoint();\n\n      if (tokenStream.matches(SPACE) && tokenStream.matches(NUMBER)) {\n        flexShrink = tokenStream.lastValue;\n      } else {\n        tokenStream.rewind();\n      }\n    } else if (flexBasis === undefined && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT, PERCENT)) {\n      flexBasis = tokenStream.lastValue;\n    } else if (flexBasis === undefined && tokenStream.matches(AUTO)) {\n      flexBasis = 'auto';\n    } else {\n      tokenStream[\"throw\"]();\n    }\n\n    partsParsed += 1;\n  }\n\n  tokenStream.expectEmpty();\n  if (flexGrow === undefined) flexGrow = defaultFlexGrow;\n  if (flexShrink === undefined) flexShrink = defaultFlexShrink;\n  if (flexBasis === undefined) flexBasis = defaultFlexBasis;\n  return {\n    flexGrow: flexGrow,\n    flexShrink: flexShrink,\n    flexBasis: flexBasis\n  };\n};\n\nvar FLEX_WRAP = regExpToken(/(nowrap|wrap|wrap-reverse)/);\nvar FLEX_DIRECTION = regExpToken(/(row|row-reverse|column|column-reverse)/);\nvar defaultFlexWrap = 'nowrap';\nvar defaultFlexDirection = 'row';\n\nvar flexFlow = function flexFlow(tokenStream) {\n  var flexWrap;\n  var flexDirection;\n  var partsParsed = 0;\n\n  while (partsParsed < 2 && tokenStream.hasTokens()) {\n    if (partsParsed !== 0) tokenStream.expect(SPACE);\n\n    if (flexWrap === undefined && tokenStream.matches(FLEX_WRAP)) {\n      flexWrap = tokenStream.lastValue;\n    } else if (flexDirection === undefined && tokenStream.matches(FLEX_DIRECTION)) {\n      flexDirection = tokenStream.lastValue;\n    } else {\n      tokenStream[\"throw\"]();\n    }\n\n    partsParsed += 1;\n  }\n\n  tokenStream.expectEmpty();\n  if (flexWrap === undefined) flexWrap = defaultFlexWrap;\n  if (flexDirection === undefined) flexDirection = defaultFlexDirection;\n  return {\n    flexWrap: flexWrap,\n    flexDirection: flexDirection\n  };\n};\n\nvar fontFamily = function fontFamily(tokenStream) {\n  var fontFamily;\n\n  if (tokenStream.matches(STRING)) {\n    fontFamily = tokenStream.lastValue;\n  } else {\n    fontFamily = tokenStream.expect(IDENT);\n\n    while (tokenStream.hasTokens()) {\n      tokenStream.expect(SPACE);\n      var nextIdent = tokenStream.expect(IDENT);\n      fontFamily += \" \" + nextIdent;\n    }\n  }\n\n  tokenStream.expectEmpty();\n  return {\n    fontFamily: fontFamily\n  };\n};\n\nvar NORMAL = regExpToken(/^(normal)$/);\nvar STYLE = regExpToken(/^(italic)$/);\nvar WEIGHT = regExpToken(/^([1-9]00|bold)$/);\nvar VARIANT = regExpToken(/^(small-caps)$/);\nvar defaultFontStyle = 'normal';\nvar defaultFontWeight = 'normal';\nvar defaultFontVariant = [];\n\nvar font = function font(tokenStream) {\n  var fontStyle;\n  var fontWeight;\n  var fontVariant; // let fontSize;\n\n  var lineHeight; // let fontFamily;\n\n  var numStyleWeightVariantMatched = 0;\n\n  while (numStyleWeightVariantMatched < 3 && tokenStream.hasTokens()) {\n    if (tokenStream.matches(NORMAL)) ;else if (fontStyle === undefined && tokenStream.matches(STYLE)) {\n      fontStyle = tokenStream.lastValue;\n    } else if (fontWeight === undefined && tokenStream.matches(WEIGHT)) {\n      fontWeight = tokenStream.lastValue;\n    } else if (fontVariant === undefined && tokenStream.matches(VARIANT)) {\n      fontVariant = [tokenStream.lastValue];\n    } else {\n      break;\n    }\n    tokenStream.expect(SPACE);\n    numStyleWeightVariantMatched += 1;\n  }\n\n  var fontSize = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n\n  if (tokenStream.matches(SLASH)) {\n    lineHeight = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n  }\n\n  tokenStream.expect(SPACE);\n\n  var _fontFamily = fontFamily(tokenStream),\n      fontFamily$1 = _fontFamily.fontFamily;\n\n  if (fontStyle === undefined) fontStyle = defaultFontStyle;\n  if (fontWeight === undefined) fontWeight = defaultFontWeight;\n  if (fontVariant === undefined) fontVariant = defaultFontVariant;\n  var out = {\n    fontStyle: fontStyle,\n    fontWeight: fontWeight,\n    fontVariant: fontVariant,\n    fontSize: fontSize,\n    fontFamily: fontFamily$1\n  };\n  if (lineHeight !== undefined) out.lineHeight = lineHeight;\n  return out;\n};\n\nvar fontVariant = function fontVariant(tokenStream) {\n  var values = [tokenStream.expect(IDENT)];\n\n  while (tokenStream.hasTokens()) {\n    tokenStream.expect(SPACE);\n    values.push(tokenStream.expect(IDENT));\n  }\n\n  return {\n    fontVariant: values\n  };\n};\n\nvar ALIGN_CONTENT = regExpToken(/(flex-(?:start|end)|center|stretch|space-(?:between|around))/);\nvar JUSTIFY_CONTENT = regExpToken(/(flex-(?:start|end)|center|space-(?:between|around|evenly))/);\n\nvar placeContent = function placeContent(tokenStream) {\n  var alignContent = tokenStream.expect(ALIGN_CONTENT);\n  var justifyContent;\n\n  if (tokenStream.hasTokens()) {\n    tokenStream.expect(SPACE);\n    justifyContent = tokenStream.expect(JUSTIFY_CONTENT);\n  } else {\n    justifyContent = 'stretch';\n  }\n\n  tokenStream.expectEmpty();\n  return {\n    alignContent: alignContent,\n    justifyContent: justifyContent\n  };\n};\n\nvar STYLE$1 = regExpToken(/^(solid|double|dotted|dashed)$/);\nvar defaultTextDecorationLine = 'none';\nvar defaultTextDecorationStyle = 'solid';\nvar defaultTextDecorationColor = 'black';\n\nvar textDecoration = function textDecoration(tokenStream) {\n  var line;\n  var style;\n  var color;\n  var didParseFirst = false;\n\n  while (tokenStream.hasTokens()) {\n    if (didParseFirst) tokenStream.expect(SPACE);\n\n    if (line === undefined && tokenStream.matches(LINE)) {\n      var lines = [tokenStream.lastValue.toLowerCase()];\n      tokenStream.saveRewindPoint();\n\n      if (lines[0] !== 'none' && tokenStream.matches(SPACE) && tokenStream.matches(LINE)) {\n        lines.push(tokenStream.lastValue.toLowerCase()); // Underline comes before line-through\n\n        lines.sort().reverse();\n      } else {\n        tokenStream.rewind();\n      }\n\n      line = lines.join(' ');\n    } else if (style === undefined && tokenStream.matches(STYLE$1)) {\n      style = tokenStream.lastValue;\n    } else if (color === undefined && tokenStream.matches(COLOR)) {\n      color = tokenStream.lastValue;\n    } else {\n      tokenStream[\"throw\"]();\n    }\n\n    didParseFirst = true;\n  }\n\n  return {\n    textDecorationLine: line !== undefined ? line : defaultTextDecorationLine,\n    textDecorationColor: color !== undefined ? color : defaultTextDecorationColor,\n    textDecorationStyle: style !== undefined ? style : defaultTextDecorationStyle\n  };\n};\n\nvar textDecorationLine = function textDecorationLine(tokenStream) {\n  var lines = [];\n  var didParseFirst = false;\n\n  while (tokenStream.hasTokens()) {\n    if (didParseFirst) tokenStream.expect(SPACE);\n    lines.push(tokenStream.expect(LINE).toLowerCase());\n    didParseFirst = true;\n  }\n\n  lines.sort().reverse();\n  return {\n    textDecorationLine: lines.join(' ')\n  };\n};\n\nvar textShadow = function textShadow(tokenStream) {\n  var _parseShadow2 = parseShadow(tokenStream),\n      offset = _parseShadow2.offset,\n      radius = _parseShadow2.radius,\n      color = _parseShadow2.color;\n\n  return {\n    textShadowOffset: offset,\n    textShadowRadius: radius,\n    textShadowColor: color\n  };\n};\n\nvar oneOfType = function oneOfType(tokenType) {\n  return function (functionStream) {\n    var value = functionStream.expect(tokenType);\n    functionStream.expectEmpty();\n    return value;\n  };\n};\n\nvar singleNumber = oneOfType(NUMBER);\nvar singleLength = oneOfType(LENGTH);\nvar singleAngle = oneOfType(ANGLE);\n\nvar xyTransformFactory = function xyTransformFactory(tokenType) {\n  return function (key, valueIfOmitted) {\n    return function (functionStream) {\n      var _ref3, _ref4;\n\n      var x = functionStream.expect(tokenType);\n      var y;\n\n      if (functionStream.hasTokens()) {\n        functionStream.expect(COMMA);\n        y = functionStream.expect(tokenType);\n      } else if (valueIfOmitted !== undefined) {\n        y = valueIfOmitted;\n      } else {\n        // Assumption, if x === y, then we can omit XY\n        // I.e. scale(5) => [{ scale: 5 }] rather than [{ scaleX: 5 }, { scaleY: 5 }]\n        return x;\n      }\n\n      functionStream.expectEmpty();\n      return [(_ref3 = {}, _ref3[key + \"Y\"] = y, _ref3), (_ref4 = {}, _ref4[key + \"X\"] = x, _ref4)];\n    };\n  };\n};\n\nvar xyNumber = xyTransformFactory(NUMBER);\nvar xyLength = xyTransformFactory(LENGTH);\nvar xyAngle = xyTransformFactory(ANGLE);\nvar partTransforms = {\n  perspective: singleNumber,\n  scale: xyNumber('scale'),\n  scaleX: singleNumber,\n  scaleY: singleNumber,\n  translate: xyLength('translate', 0),\n  translateX: singleLength,\n  translateY: singleLength,\n  rotate: singleAngle,\n  rotateX: singleAngle,\n  rotateY: singleAngle,\n  rotateZ: singleAngle,\n  skewX: singleAngle,\n  skewY: singleAngle,\n  skew: xyAngle('skew', '0deg')\n};\n\nvar transform = function transform(tokenStream) {\n  var transforms = [];\n  var didParseFirst = false;\n\n  while (tokenStream.hasTokens()) {\n    if (didParseFirst) tokenStream.expect(SPACE);\n    var functionStream = tokenStream.expectFunction();\n    var functionName = functionStream.functionName;\n    var transformedValues = partTransforms[functionName](functionStream);\n\n    if (!Array.isArray(transformedValues)) {\n      var _ref5;\n\n      transformedValues = [(_ref5 = {}, _ref5[functionName] = transformedValues, _ref5)];\n    }\n\n    transforms = transformedValues.concat(transforms);\n    didParseFirst = true;\n  }\n\n  return {\n    transform: transforms\n  };\n};\n\nvar background = function background(tokenStream) {\n  return {\n    backgroundColor: tokenStream.expect(COLOR)\n  };\n};\n\nvar borderColor = directionFactory({\n  types: [COLOR],\n  prefix: 'border',\n  suffix: 'Color'\n});\nvar borderRadius = directionFactory({\n  directions: ['TopLeft', 'TopRight', 'BottomRight', 'BottomLeft'],\n  prefix: 'border',\n  suffix: 'Radius'\n});\nvar borderWidth = directionFactory({\n  prefix: 'border',\n  suffix: 'Width'\n});\nvar margin = directionFactory({\n  types: [LENGTH, UNSUPPORTED_LENGTH_UNIT, PERCENT, AUTO],\n  prefix: 'margin'\n});\nvar padding = directionFactory({\n  prefix: 'padding'\n});\n\nvar fontWeight = function fontWeight(tokenStream) {\n  return {\n    fontWeight: tokenStream.expect(WORD) // Also match numbers as strings\n\n  };\n};\n\nvar shadowOffset = function shadowOffset(tokenStream) {\n  return {\n    shadowOffset: parseShadowOffset(tokenStream)\n  };\n};\n\nvar textShadowOffset = function textShadowOffset(tokenStream) {\n  return {\n    textShadowOffset: parseShadowOffset(tokenStream)\n  };\n};\n\nvar transforms = {\n  aspectRatio: aspectRatio,\n  background: background,\n  border: border,\n  borderColor: borderColor,\n  borderRadius: borderRadius,\n  borderWidth: borderWidth,\n  boxShadow: boxShadow,\n  flex: flex,\n  flexFlow: flexFlow,\n  font: font,\n  fontFamily: fontFamily,\n  fontVariant: fontVariant,\n  fontWeight: fontWeight,\n  margin: margin,\n  padding: padding,\n  placeContent: placeContent,\n  shadowOffset: shadowOffset,\n  textShadow: textShadow,\n  textShadowOffset: textShadowOffset,\n  textDecoration: textDecoration,\n  textDecorationLine: textDecorationLine,\n  transform: transform\n};\nvar propertiesWithoutUnits;\n\nif (true) {\n  propertiesWithoutUnits = ['aspectRatio', 'elevation', 'flexGrow', 'flexShrink', 'opacity', 'shadowOpacity', 'zIndex'];\n}\n\nvar devPropertiesWithUnitsRegExp = propertiesWithoutUnits != null ? new RegExp(propertiesWithoutUnits.join('|')) : null;\nvar SYMBOL_MATCH = 'SYMBOL_MATCH';\n\nvar TokenStream =\n/*#__PURE__*/\nfunction () {\n  function TokenStream(nodes, parent) {\n    this.index = 0;\n    this.nodes = nodes;\n    this.functionName = parent != null ? parent.value : null;\n    this.lastValue = null;\n    this.rewindIndex = -1;\n  }\n\n  var _proto = TokenStream.prototype;\n\n  _proto.hasTokens = function hasTokens() {\n    return this.index <= this.nodes.length - 1;\n  };\n\n  _proto[SYMBOL_MATCH] = function () {\n    if (!this.hasTokens()) return null;\n    var node = this.nodes[this.index];\n\n    for (var i = 0; i < arguments.length; i += 1) {\n      var tokenDescriptor = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      var value = tokenDescriptor(node);\n\n      if (value !== null) {\n        this.index += 1;\n        this.lastValue = value;\n        return value;\n      }\n    }\n\n    return null;\n  };\n\n  _proto.matches = function matches() {\n    return this[SYMBOL_MATCH].apply(this, arguments) !== null;\n  };\n\n  _proto.expect = function expect() {\n    var value = this[SYMBOL_MATCH].apply(this, arguments);\n    return value !== null ? value : this[\"throw\"]();\n  };\n\n  _proto.matchesFunction = function matchesFunction() {\n    var node = this.nodes[this.index];\n    if (node.type !== 'function') return null;\n    var value = new TokenStream(node.nodes, node);\n    this.index += 1;\n    this.lastValue = null;\n    return value;\n  };\n\n  _proto.expectFunction = function expectFunction() {\n    var value = this.matchesFunction();\n    return value !== null ? value : this[\"throw\"]();\n  };\n\n  _proto.expectEmpty = function expectEmpty() {\n    if (this.hasTokens()) this[\"throw\"]();\n  };\n\n  _proto[\"throw\"] = function _throw() {\n    throw new Error(\"Unexpected token type: \" + this.nodes[this.index].type);\n  };\n\n  _proto.saveRewindPoint = function saveRewindPoint() {\n    this.rewindIndex = this.index;\n  };\n\n  _proto.rewind = function rewind() {\n    if (this.rewindIndex === -1) throw new Error('Internal error');\n    this.index = this.rewindIndex;\n    this.lastValue = null;\n  };\n\n  return TokenStream;\n}();\n/* eslint-disable no-param-reassign */\n// Note if this is wrong, you'll need to change tokenTypes.js too\n\n\nvar numberOrLengthRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)(?:px)?$/i;\nvar numberOnlyRe = /^[+-]?(?:\\d*\\.\\d*|[1-9]\\d*)(?:e[+-]?\\d+)?$/i;\nvar boolRe = /^true|false$/i;\nvar nullRe = /^null$/i;\nvar undefinedRe = /^undefined$/i; // Undocumented export\n\nvar transformRawValue = function transformRawValue(propName, value) {\n  if (true) {\n    var needsUnit = !devPropertiesWithUnitsRegExp.test(propName);\n    var isNumberWithoutUnit = numberOnlyRe.test(value);\n\n    if (needsUnit && isNumberWithoutUnit) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Expected style \\\"\" + propName + \": \" + value + \"\\\" to contain units\");\n    }\n\n    if (!needsUnit && value !== '0' && !isNumberWithoutUnit) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Expected style \\\"\" + propName + \": \" + value + \"\\\" to be unitless\");\n    }\n  }\n\n  var numberMatch = value.match(numberOrLengthRe);\n  if (numberMatch !== null) return Number(numberMatch[1]);\n  var boolMatch = value.match(boolRe);\n  if (boolMatch !== null) return boolMatch[0].toLowerCase() === 'true';\n  var nullMatch = value.match(nullRe);\n  if (nullMatch !== null) return null;\n  var undefinedMatch = value.match(undefinedRe);\n  if (undefinedMatch !== null) return undefined;\n  return value;\n};\n\nvar baseTransformShorthandValue = function baseTransformShorthandValue(propName, value) {\n  var ast = parse__default(value);\n  var tokenStream = new TokenStream(ast.nodes);\n  return transforms[propName](tokenStream);\n};\n\nvar transformShorthandValue =  false ? 0 : function (propName, value) {\n  try {\n    return baseTransformShorthandValue(propName, value);\n  } catch (e) {\n    throw new Error(\"Failed to parse declaration \\\"\" + propName + \": \" + value + \"\\\"\");\n  }\n};\n\nvar getStylesForProperty = function getStylesForProperty(propName, inputValue, allowShorthand) {\n  var _ref6;\n\n  var isRawValue = allowShorthand === false || !(propName in transforms);\n  var value = inputValue.trim();\n  var propValues = isRawValue ? (_ref6 = {}, _ref6[propName] = transformRawValue(propName, value), _ref6) : transformShorthandValue(propName, value);\n  return propValues;\n};\n\nvar getPropertyName = function getPropertyName(propName) {\n  var isCustomProp = /^--\\w+/.test(propName);\n\n  if (isCustomProp) {\n    return propName;\n  }\n\n  return camelizeStyleName(propName);\n};\n\nvar index = function index(rules, shorthandBlacklist) {\n  if (shorthandBlacklist === void 0) {\n    shorthandBlacklist = [];\n  }\n\n  return rules.reduce(function (accum, rule) {\n    var propertyName = getPropertyName(rule[0]);\n    var value = rule[1];\n    var allowShorthand = shorthandBlacklist.indexOf(propertyName) === -1;\n    return Object.assign(accum, getStylesForProperty(propertyName, value, allowShorthand));\n  }, {});\n};\n\nexports[\"default\"] = index;\nexports.getPropertyName = getPropertyName;\nexports.getStylesForProperty = getStylesForProperty;\nexports.transformRawValue = transformRawValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-to-react-native/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/escape-html/index.js":
/*!*******************************************!*\
  !*** ./node_modules/escape-html/index.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*!\n * escape-html\n * Copyright(c) 2012-2013 TJ Holowaychuk\n * Copyright(c) 2015 Andreas Lubbe\n * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n * MIT Licensed\n */\n\n\n\n/**\n * Module variables.\n * @private\n */\n\nvar matchHtmlRegExp = /[\"'&<>]/;\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = escapeHtml;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {string} string The string to escape for inserting into HTML\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index = 0;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34: // \"\n        escape = '&quot;';\n        break;\n      case 38: // &\n        escape = '&amp;';\n        break;\n      case 39: // '\n        escape = '&#39;';\n        break;\n      case 60: // <\n        escape = '&lt;';\n        break;\n      case 62: // >\n        escape = '&gt;';\n        break;\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index\n    ? html + str.substring(lastIndex, index)\n    : html;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lc2NhcGUtaHRtbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsb0JBQW9CO0FBQ2hEO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lc2NhcGUtaHRtbC9pbmRleC5qcz85YzBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogZXNjYXBlLWh0bWxcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTMgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDE1IEFuZHJlYXMgTHViYmVcbiAqIENvcHlyaWdodChjKSAyMDE1IFRpYW5jaGVuZyBcIlRpbW90aHlcIiBHdVxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBtYXRjaEh0bWxSZWdFeHAgPSAvW1wiJyY8Pl0vO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlSHRtbDtcblxuLyoqXG4gKiBFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIHRoZSBnaXZlbiBzdHJpbmcgb2YgaHRtbC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZSBmb3IgaW5zZXJ0aW5nIGludG8gSFRNTFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XG4gIHZhciBzdHIgPSAnJyArIHN0cmluZztcbiAgdmFyIG1hdGNoID0gbWF0Y2hIdG1sUmVnRXhwLmV4ZWMoc3RyKTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIHZhciBlc2NhcGU7XG4gIHZhciBodG1sID0gJyc7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0SW5kZXggPSAwO1xuXG4gIGZvciAoaW5kZXggPSBtYXRjaC5pbmRleDsgaW5kZXggPCBzdHIubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgc3dpdGNoIChzdHIuY2hhckNvZGVBdChpbmRleCkpIHtcbiAgICAgIGNhc2UgMzQ6IC8vIFwiXG4gICAgICAgIGVzY2FwZSA9ICcmcXVvdDsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzg6IC8vICZcbiAgICAgICAgZXNjYXBlID0gJyZhbXA7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM5OiAvLyAnXG4gICAgICAgIGVzY2FwZSA9ICcmIzM5Oyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2MDogLy8gPFxuICAgICAgICBlc2NhcGUgPSAnJmx0Oyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2MjogLy8gPlxuICAgICAgICBlc2NhcGUgPSAnJmd0Oyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGxhc3RJbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgIGh0bWwgKz0gc3RyLnN1YnN0cmluZyhsYXN0SW5kZXgsIGluZGV4KTtcbiAgICB9XG5cbiAgICBsYXN0SW5kZXggPSBpbmRleCArIDE7XG4gICAgaHRtbCArPSBlc2NhcGU7XG4gIH1cblxuICByZXR1cm4gbGFzdEluZGV4ICE9PSBpbmRleFxuICAgID8gaHRtbCArIHN0ci5zdWJzdHJpbmcobGFzdEluZGV4LCBpbmRleClcbiAgICA6IGh0bWw7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/escape-html/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-text-encoding/text.min.js":
/*!*****************************************************!*\
  !*** ./node_modules/fast-text-encoding/text.min.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n(function(scope) {'use strict';\nfunction B(r,e){var f;return r instanceof Buffer?f=r:f=Buffer.from(r.buffer,r.byteOffset,r.byteLength),f.toString(e)}var w=function(r){return Buffer.from(r)};function h(r){for(var e=0,f=Math.min(256*256,r.length+1),n=new Uint16Array(f),i=[],o=0;;){var t=e<r.length;if(!t||o>=f-1){var s=n.subarray(0,o),m=s;if(i.push(String.fromCharCode.apply(null,m)),!t)return i.join(\"\");r=r.subarray(e),e=0,o=0}var a=r[e++];if((a&128)===0)n[o++]=a;else if((a&224)===192){var d=r[e++]&63;n[o++]=(a&31)<<6|d}else if((a&240)===224){var d=r[e++]&63,l=r[e++]&63;n[o++]=(a&31)<<12|d<<6|l}else if((a&248)===240){var d=r[e++]&63,l=r[e++]&63,R=r[e++]&63,c=(a&7)<<18|d<<12|l<<6|R;c>65535&&(c-=65536,n[o++]=c>>>10&1023|55296,c=56320|c&1023),n[o++]=c}}}function F(r){for(var e=0,f=r.length,n=0,i=Math.max(32,f+(f>>>1)+7),o=new Uint8Array(i>>>3<<3);e<f;){var t=r.charCodeAt(e++);if(t>=55296&&t<=56319){if(e<f){var s=r.charCodeAt(e);(s&64512)===56320&&(++e,t=((t&1023)<<10)+(s&1023)+65536)}if(t>=55296&&t<=56319)continue}if(n+4>o.length){i+=8,i*=1+e/r.length*2,i=i>>>3<<3;var m=new Uint8Array(i);m.set(o),o=m}if((t&4294967168)===0){o[n++]=t;continue}else if((t&4294965248)===0)o[n++]=t>>>6&31|192;else if((t&4294901760)===0)o[n++]=t>>>12&15|224,o[n++]=t>>>6&63|128;else if((t&4292870144)===0)o[n++]=t>>>18&7|240,o[n++]=t>>>12&63|128,o[n++]=t>>>6&63|128;else continue;o[n++]=t&63|128}return o.slice?o.slice(0,n):o.subarray(0,n)}var u=\"Failed to \",p=function(r,e,f){if(r)throw new Error(\"\".concat(u).concat(e,\": the '\").concat(f,\"' option is unsupported.\"))};var x=typeof Buffer==\"function\"&&Buffer.from;var A=x?w:F;function v(){this.encoding=\"utf-8\"}v.prototype.encode=function(r,e){return p(e&&e.stream,\"encode\",\"stream\"),A(r)};function U(r){var e;try{var f=new Blob([r],{type:\"text/plain;charset=UTF-8\"});e=URL.createObjectURL(f);var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(),n.responseText}finally{e&&URL.revokeObjectURL(e)}}var O=!x&&typeof Blob==\"function\"&&typeof URL==\"function\"&&typeof URL.createObjectURL==\"function\",S=[\"utf-8\",\"utf8\",\"unicode-1-1-utf-8\"],T=h;x?T=B:O&&(T=function(r){try{return U(r)}catch(e){return h(r)}});var y=\"construct 'TextDecoder'\",E=\"\".concat(u,\" \").concat(y,\": the \");function g(r,e){p(e&&e.fatal,y,\"fatal\"),r=r||\"utf-8\";var f;if(x?f=Buffer.isEncoding(r):f=S.indexOf(r.toLowerCase())!==-1,!f)throw new RangeError(\"\".concat(E,\" encoding label provided ('\").concat(r,\"') is invalid.\"));this.encoding=r,this.fatal=!1,this.ignoreBOM=!1}g.prototype.decode=function(r,e){p(e&&e.stream,\"decode\",\"stream\");var f;return r instanceof Uint8Array?f=r:r.buffer instanceof ArrayBuffer?f=new Uint8Array(r.buffer):f=new Uint8Array(r),T(f,this.encoding)};scope.TextEncoder=scope.TextEncoder||v;scope.TextDecoder=scope.TextDecoder||g;\n}(typeof window !== 'undefined' ? window : (typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : this)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LXRleHQtZW5jb2RpbmcvdGV4dC5taW4uanMiLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFrQjtBQUNsQixnQkFBZ0IsTUFBTSxvQkFBb0IsTUFBTSxPQUFPLE1BQU0sd0RBQXdELGtCQUFrQixPQUFPLE1BQU0sVUFBVSxjQUFjLDBFQUEwRSxFQUFFLGlCQUFpQixlQUFlLDBCQUEwQixrRUFBa0Usd0JBQXdCLGFBQWEsd0JBQXdCLHVCQUF1QixnQkFBZ0IsbUJBQW1CLHVCQUF1Qiw0QkFBNEIseUJBQXlCLHVCQUF1QixpRUFBaUUsdUVBQXVFLGNBQWMsaUZBQWlGLElBQUksRUFBRSx3QkFBd0IsdUJBQXVCLFFBQVEsc0JBQXNCLHlEQUF5RCwrQkFBK0IsaUJBQWlCLGtDQUFrQyx3QkFBd0IsYUFBYSx1QkFBdUIsU0FBUyxTQUFTLCtDQUErQyxvRUFBb0Usd0ZBQXdGLGNBQWMsZ0JBQWdCLDRDQUE0QyxxQ0FBcUMsNkZBQTZGLGFBQWEsTUFBTSxjQUFjLE1BQU0sTUFBTSxZQUFZLGFBQWEsc0JBQXNCLGlDQUFpQyw4Q0FBOEMsY0FBYyxNQUFNLElBQUksb0JBQW9CLGlCQUFpQixlQUFlLEVBQUUseUJBQXlCLHlCQUF5QixrREFBa0QsUUFBUSwyQkFBMkIsNklBQTZJLHdCQUF3QixJQUFJLFlBQVksU0FBUyxhQUFhLEVBQUUsc0VBQXNFLGdCQUFnQixxQ0FBcUMsTUFBTSxPQUFPLE1BQU0sZ0pBQWdKLGdEQUFnRCxpQ0FBaUMsaUNBQWlDLE1BQU0sc0lBQXNJLHVDQUF1QztBQUN4b0YsQ0FBQyxrREFBa0QscUJBQU0sbUJBQW1CLHFCQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LXRleHQtZW5jb2RpbmcvdGV4dC5taW4uanM/MmIwNSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oc2NvcGUpIHsndXNlIHN0cmljdCc7XG5mdW5jdGlvbiBCKHIsZSl7dmFyIGY7cmV0dXJuIHIgaW5zdGFuY2VvZiBCdWZmZXI/Zj1yOmY9QnVmZmVyLmZyb20oci5idWZmZXIsci5ieXRlT2Zmc2V0LHIuYnl0ZUxlbmd0aCksZi50b1N0cmluZyhlKX12YXIgdz1mdW5jdGlvbihyKXtyZXR1cm4gQnVmZmVyLmZyb20ocil9O2Z1bmN0aW9uIGgocil7Zm9yKHZhciBlPTAsZj1NYXRoLm1pbigyNTYqMjU2LHIubGVuZ3RoKzEpLG49bmV3IFVpbnQxNkFycmF5KGYpLGk9W10sbz0wOzspe3ZhciB0PWU8ci5sZW5ndGg7aWYoIXR8fG8+PWYtMSl7dmFyIHM9bi5zdWJhcnJheSgwLG8pLG09cztpZihpLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG0pKSwhdClyZXR1cm4gaS5qb2luKFwiXCIpO3I9ci5zdWJhcnJheShlKSxlPTAsbz0wfXZhciBhPXJbZSsrXTtpZigoYSYxMjgpPT09MCluW28rK109YTtlbHNlIGlmKChhJjIyNCk9PT0xOTIpe3ZhciBkPXJbZSsrXSY2MztuW28rK109KGEmMzEpPDw2fGR9ZWxzZSBpZigoYSYyNDApPT09MjI0KXt2YXIgZD1yW2UrK10mNjMsbD1yW2UrK10mNjM7bltvKytdPShhJjMxKTw8MTJ8ZDw8NnxsfWVsc2UgaWYoKGEmMjQ4KT09PTI0MCl7dmFyIGQ9cltlKytdJjYzLGw9cltlKytdJjYzLFI9cltlKytdJjYzLGM9KGEmNyk8PDE4fGQ8PDEyfGw8PDZ8UjtjPjY1NTM1JiYoYy09NjU1MzYsbltvKytdPWM+Pj4xMCYxMDIzfDU1Mjk2LGM9NTYzMjB8YyYxMDIzKSxuW28rK109Y319fWZ1bmN0aW9uIEYocil7Zm9yKHZhciBlPTAsZj1yLmxlbmd0aCxuPTAsaT1NYXRoLm1heCgzMixmKyhmPj4+MSkrNyksbz1uZXcgVWludDhBcnJheShpPj4+Mzw8Myk7ZTxmOyl7dmFyIHQ9ci5jaGFyQ29kZUF0KGUrKyk7aWYodD49NTUyOTYmJnQ8PTU2MzE5KXtpZihlPGYpe3ZhciBzPXIuY2hhckNvZGVBdChlKTsocyY2NDUxMik9PT01NjMyMCYmKCsrZSx0PSgodCYxMDIzKTw8MTApKyhzJjEwMjMpKzY1NTM2KX1pZih0Pj01NTI5NiYmdDw9NTYzMTkpY29udGludWV9aWYobis0Pm8ubGVuZ3RoKXtpKz04LGkqPTErZS9yLmxlbmd0aCoyLGk9aT4+PjM8PDM7dmFyIG09bmV3IFVpbnQ4QXJyYXkoaSk7bS5zZXQobyksbz1tfWlmKCh0JjQyOTQ5NjcxNjgpPT09MCl7b1tuKytdPXQ7Y29udGludWV9ZWxzZSBpZigodCY0Mjk0OTY1MjQ4KT09PTApb1tuKytdPXQ+Pj42JjMxfDE5MjtlbHNlIGlmKCh0JjQyOTQ5MDE3NjApPT09MClvW24rK109dD4+PjEyJjE1fDIyNCxvW24rK109dD4+PjYmNjN8MTI4O2Vsc2UgaWYoKHQmNDI5Mjg3MDE0NCk9PT0wKW9bbisrXT10Pj4+MTgmN3wyNDAsb1tuKytdPXQ+Pj4xMiY2M3wxMjgsb1tuKytdPXQ+Pj42JjYzfDEyODtlbHNlIGNvbnRpbnVlO29bbisrXT10JjYzfDEyOH1yZXR1cm4gby5zbGljZT9vLnNsaWNlKDAsbik6by5zdWJhcnJheSgwLG4pfXZhciB1PVwiRmFpbGVkIHRvIFwiLHA9ZnVuY3Rpb24ocixlLGYpe2lmKHIpdGhyb3cgbmV3IEVycm9yKFwiXCIuY29uY2F0KHUpLmNvbmNhdChlLFwiOiB0aGUgJ1wiKS5jb25jYXQoZixcIicgb3B0aW9uIGlzIHVuc3VwcG9ydGVkLlwiKSl9O3ZhciB4PXR5cGVvZiBCdWZmZXI9PVwiZnVuY3Rpb25cIiYmQnVmZmVyLmZyb207dmFyIEE9eD93OkY7ZnVuY3Rpb24gdigpe3RoaXMuZW5jb2Rpbmc9XCJ1dGYtOFwifXYucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbihyLGUpe3JldHVybiBwKGUmJmUuc3RyZWFtLFwiZW5jb2RlXCIsXCJzdHJlYW1cIiksQShyKX07ZnVuY3Rpb24gVShyKXt2YXIgZTt0cnl7dmFyIGY9bmV3IEJsb2IoW3JdLHt0eXBlOlwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCJ9KTtlPVVSTC5jcmVhdGVPYmplY3RVUkwoZik7dmFyIG49bmV3IFhNTEh0dHBSZXF1ZXN0O3JldHVybiBuLm9wZW4oXCJHRVRcIixlLCExKSxuLnNlbmQoKSxuLnJlc3BvbnNlVGV4dH1maW5hbGx5e2UmJlVSTC5yZXZva2VPYmplY3RVUkwoZSl9fXZhciBPPSF4JiZ0eXBlb2YgQmxvYj09XCJmdW5jdGlvblwiJiZ0eXBlb2YgVVJMPT1cImZ1bmN0aW9uXCImJnR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMPT1cImZ1bmN0aW9uXCIsUz1bXCJ1dGYtOFwiLFwidXRmOFwiLFwidW5pY29kZS0xLTEtdXRmLThcIl0sVD1oO3g/VD1COk8mJihUPWZ1bmN0aW9uKHIpe3RyeXtyZXR1cm4gVShyKX1jYXRjaChlKXtyZXR1cm4gaChyKX19KTt2YXIgeT1cImNvbnN0cnVjdCAnVGV4dERlY29kZXInXCIsRT1cIlwiLmNvbmNhdCh1LFwiIFwiKS5jb25jYXQoeSxcIjogdGhlIFwiKTtmdW5jdGlvbiBnKHIsZSl7cChlJiZlLmZhdGFsLHksXCJmYXRhbFwiKSxyPXJ8fFwidXRmLThcIjt2YXIgZjtpZih4P2Y9QnVmZmVyLmlzRW5jb2Rpbmcocik6Zj1TLmluZGV4T2Yoci50b0xvd2VyQ2FzZSgpKSE9PS0xLCFmKXRocm93IG5ldyBSYW5nZUVycm9yKFwiXCIuY29uY2F0KEUsXCIgZW5jb2RpbmcgbGFiZWwgcHJvdmlkZWQgKCdcIikuY29uY2F0KHIsXCInKSBpcyBpbnZhbGlkLlwiKSk7dGhpcy5lbmNvZGluZz1yLHRoaXMuZmF0YWw9ITEsdGhpcy5pZ25vcmVCT009ITF9Zy5wcm90b3R5cGUuZGVjb2RlPWZ1bmN0aW9uKHIsZSl7cChlJiZlLnN0cmVhbSxcImRlY29kZVwiLFwic3RyZWFtXCIpO3ZhciBmO3JldHVybiByIGluc3RhbmNlb2YgVWludDhBcnJheT9mPXI6ci5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9mPW5ldyBVaW50OEFycmF5KHIuYnVmZmVyKTpmPW5ldyBVaW50OEFycmF5KHIpLFQoZix0aGlzLmVuY29kaW5nKX07c2NvcGUuVGV4dEVuY29kZXI9c2NvcGUuVGV4dEVuY29kZXJ8fHY7c2NvcGUuVGV4dERlY29kZXI9c2NvcGUuVGV4dERlY29kZXJ8fGc7XG59KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdGhpcykpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-text-encoding/text.min.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/intl-segmenter-polyfill/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/intl-segmenter-polyfill/dist/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! @babel/runtime/regenerator */ \"(app-pages-browser)/./node_modules/@babel/runtime/regenerator/index.js\"), __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/slicedToArray.js\"), __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/createClass.js\"), __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"), __webpack_require__(/*! fast-text-encoding */ \"(app-pages-browser)/./node_modules/fast-text-encoding/text.min.js\")) :\n  0;\n}(this, (function (exports, _regeneratorRuntime, _slicedToArray, _classCallCheck, _createClass, _asyncToGenerator) { 'use strict';\n\n  _regeneratorRuntime = _regeneratorRuntime && Object.prototype.hasOwnProperty.call(_regeneratorRuntime, 'default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;\n  _slicedToArray = _slicedToArray && Object.prototype.hasOwnProperty.call(_slicedToArray, 'default') ? _slicedToArray['default'] : _slicedToArray;\n  _classCallCheck = _classCallCheck && Object.prototype.hasOwnProperty.call(_classCallCheck, 'default') ? _classCallCheck['default'] : _classCallCheck;\n  _createClass = _createClass && Object.prototype.hasOwnProperty.call(_createClass, 'default') ? _createClass['default'] : _createClass;\n  _asyncToGenerator = _asyncToGenerator && Object.prototype.hasOwnProperty.call(_asyncToGenerator, 'default') ? _asyncToGenerator['default'] : _asyncToGenerator;\n\n  var BREAK_TYPES = {\n    grapheme: 0,\n    word: 1,\n    sentence: 3\n  };\n\n  var getSegmentType = function getSegmentType(type) {\n    if (type < 100) {\n      return 'none';\n    } else if (type >= 100 && type < 200) {\n      return 'number';\n    } else if (type >= 200 && type < 300) {\n      return 'word';\n    } else if (type >= 300 && type < 400) {\n      return 'kana';\n    } else if (type >= 400 && type < 500) {\n      return 'ideo';\n    }\n  };\n\n  var instantiateWasmModule = function instantiateWasmModule(wasm, imports) {\n    if (typeof wasm.then === 'function') {\n      if (WebAssembly.instantiateStreaming != null) {\n        return wasm.then(function (response) {\n          return WebAssembly.instantiateStreaming(response, imports);\n        });\n      }\n\n      return wasm.then(function (response) {\n        return response.arrayBuffer();\n      }).then(function (buffer) {\n        return WebAssembly.instantiate(buffer, imports);\n      });\n    } else {\n      return WebAssembly.instantiate(wasm, imports);\n    }\n  };\n\n  var createIntlSegmenterPolyfillFromInstance = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(wasmInstance, values) {\n      var allocStr;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              allocStr = function allocStr(str) {\n                var encoder = new TextEncoder();\n                var view = encoder.encode(str + '\\0'); // typescript does not play well with webassembly\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n                var exports = wasmInstance.exports;\n                var ptr = exports.malloc(view.length);\n                var memory = new Uint8Array(exports.memory.buffer, ptr, view.length);\n                memory.set(view);\n                return [ptr, view];\n              };\n\n              return _context.abrupt(\"return\", /*#__PURE__*/function () {\n                function Segmenter(locale, options) {\n                  _classCallCheck(this, Segmenter);\n\n                  this.locale = locale;\n                  this.options = options || {};\n                }\n\n                _createClass(Segmenter, [{\n                  key: \"segment\",\n                  value: function segment(input) {\n                    var locale = this.locale;\n                    var granularity = this.options.granularity || 'grapheme';\n                    var exports = wasmInstance.exports;\n                    values.current = [];\n\n                    var _allocStr = allocStr(input),\n                        _allocStr2 = _slicedToArray(_allocStr, 2),\n                        inputPtr = _allocStr2[0],\n                        inputView = _allocStr2[1];\n\n                    var _allocStr3 = allocStr(locale),\n                        _allocStr4 = _slicedToArray(_allocStr3, 1),\n                        localePtr = _allocStr4[0];\n\n                    exports.utf8_break_iterator(BREAK_TYPES[granularity], localePtr, inputPtr, inputView.length);\n                    exports.free(localePtr);\n                    exports.free(inputPtr);\n                    var index = 0;\n                    var segments = values.current.map(function (_ref2) {\n                      var _ref3 = _slicedToArray(_ref2, 3),\n                          start = _ref3[0],\n                          end = _ref3[1],\n                          segmentType = _ref3[2];\n\n                      var segment = input.slice(start, end);\n                      var returnValue = {\n                        segment: segment,\n                        index: index,\n                        isWordLike: granularity === 'word' ? getSegmentType(segmentType) !== 'none' : undefined,\n                        breakType: granularity === 'word' ? getSegmentType(segmentType) : undefined\n                      };\n                      index += segment.length;\n                      return returnValue;\n                    });\n\n                    segments.containing = function (indexToFind) {\n                      return segments.find(function (_ref4) {\n                        var index = _ref4.index,\n                            segment = _ref4.segment;\n                        return indexToFind >= index && indexToFind <= index + segment.length - 1;\n                      });\n                    };\n\n                    return segments;\n                  }\n                }]);\n\n                return Segmenter;\n              }());\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function createIntlSegmenterPolyfillFromInstance(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getImports = function getImports(callback) {\n    return {\n      env: {\n        push: function push(start, end, segmentType) {\n          callback([start, end, segmentType]);\n        },\n        __sys_stat64: function __sys_stat64() {}\n      },\n      wasi_snapshot_preview1: {\n        proc_exit: function proc_exit() {},\n        fd_close: function fd_close() {},\n        environ_sizes_get: function environ_sizes_get() {},\n        environ_get: function environ_get() {}\n      }\n    };\n  };\n\n  var createIntlSegmenterPolyfillFromFactory = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(wasmFactory) {\n      var values, _yield$wasmFactory, instance;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              values = {\n                current: []\n              };\n              _context2.next = 3;\n              return wasmFactory(getImports(function (value) {\n                values.current.push(value);\n              }));\n\n            case 3:\n              _yield$wasmFactory = _context2.sent;\n              instance = _yield$wasmFactory.instance;\n              return _context2.abrupt(\"return\", createIntlSegmenterPolyfillFromInstance(instance, values));\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function createIntlSegmenterPolyfillFromFactory(_x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var createIntlSegmenterPolyfill = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(wasm) {\n      var values, _yield$instantiateWas, instance;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              values = {\n                current: []\n              };\n              _context3.next = 3;\n              return instantiateWasmModule(wasm, getImports(function (value) {\n                values.current.push(value);\n              }));\n\n            case 3:\n              _yield$instantiateWas = _context3.sent;\n              instance = _yield$instantiateWas.instance;\n              return _context3.abrupt(\"return\", createIntlSegmenterPolyfillFromInstance(instance, values));\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function createIntlSegmenterPolyfill(_x4) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  exports.createIntlSegmenterPolyfill = createIntlSegmenterPolyfill;\n  exports.createIntlSegmenterPolyfillFromFactory = createIntlSegmenterPolyfillFromFactory;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9pbnRsLXNlZ21lbnRlci1wb2x5ZmlsbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsRUFBRSxLQUE0RCxvQkFBb0IsbUJBQU8sQ0FBQywwR0FBNEIsR0FBRyxtQkFBTyxDQUFDLHdIQUFzQyxHQUFHLG1CQUFPLENBQUMsMEhBQXVDLEdBQUcsbUJBQU8sQ0FBQyxvSEFBb0MsR0FBRyxtQkFBTyxDQUFDLDhIQUF5QyxHQUFHLG1CQUFPLENBQUMsNkZBQW9CO0FBQzNWLEVBQUUsQ0FDK0w7QUFDak0sQ0FBQyxvSEFBb0g7O0FBRXJIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBLGVBQWU7O0FBRWY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBLDBDQUEwQztBQUMxQyx3Q0FBd0M7QUFDeEMsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7O0FBRWY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlOztBQUVmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUEsaURBQWlELGFBQWE7O0FBRTlELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2ludGwtc2VnbWVudGVyLXBvbHlmaWxsL2Rpc3QvaW5kZXguanM/ZTIyZSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yJyksIHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheScpLCByZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyksIHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKSwgcmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yJyksIHJlcXVpcmUoJ2Zhc3QtdGV4dC1lbmNvZGluZycpKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnLCAnQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3InLCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5JywgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snLCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycsICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InLCAnZmFzdC10ZXh0LWVuY29kaW5nJ10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5JbnRsU2VnbWVudGVyUG9seWZpbGwgPSB7fSwgZ2xvYmFsLl9yZWdlbmVyYXRvclJ1bnRpbWUsIGdsb2JhbC5fc2xpY2VkVG9BcnJheSwgZ2xvYmFsLl9jbGFzc0NhbGxDaGVjaywgZ2xvYmFsLl9jcmVhdGVDbGFzcywgZ2xvYmFsLl9hc3luY1RvR2VuZXJhdG9yKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cywgX3JlZ2VuZXJhdG9yUnVudGltZSwgX3NsaWNlZFRvQXJyYXksIF9jbGFzc0NhbGxDaGVjaywgX2NyZWF0ZUNsYXNzLCBfYXN5bmNUb0dlbmVyYXRvcikgeyAndXNlIHN0cmljdCc7XG5cbiAgX3JlZ2VuZXJhdG9yUnVudGltZSA9IF9yZWdlbmVyYXRvclJ1bnRpbWUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9yZWdlbmVyYXRvclJ1bnRpbWUsICdkZWZhdWx0JykgPyBfcmVnZW5lcmF0b3JSdW50aW1lWydkZWZhdWx0J10gOiBfcmVnZW5lcmF0b3JSdW50aW1lO1xuICBfc2xpY2VkVG9BcnJheSA9IF9zbGljZWRUb0FycmF5ICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfc2xpY2VkVG9BcnJheSwgJ2RlZmF1bHQnKSA/IF9zbGljZWRUb0FycmF5WydkZWZhdWx0J10gOiBfc2xpY2VkVG9BcnJheTtcbiAgX2NsYXNzQ2FsbENoZWNrID0gX2NsYXNzQ2FsbENoZWNrICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfY2xhc3NDYWxsQ2hlY2ssICdkZWZhdWx0JykgPyBfY2xhc3NDYWxsQ2hlY2tbJ2RlZmF1bHQnXSA6IF9jbGFzc0NhbGxDaGVjaztcbiAgX2NyZWF0ZUNsYXNzID0gX2NyZWF0ZUNsYXNzICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfY3JlYXRlQ2xhc3MsICdkZWZhdWx0JykgPyBfY3JlYXRlQ2xhc3NbJ2RlZmF1bHQnXSA6IF9jcmVhdGVDbGFzcztcbiAgX2FzeW5jVG9HZW5lcmF0b3IgPSBfYXN5bmNUb0dlbmVyYXRvciAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2FzeW5jVG9HZW5lcmF0b3IsICdkZWZhdWx0JykgPyBfYXN5bmNUb0dlbmVyYXRvclsnZGVmYXVsdCddIDogX2FzeW5jVG9HZW5lcmF0b3I7XG5cbiAgdmFyIEJSRUFLX1RZUEVTID0ge1xuICAgIGdyYXBoZW1lOiAwLFxuICAgIHdvcmQ6IDEsXG4gICAgc2VudGVuY2U6IDNcbiAgfTtcblxuICB2YXIgZ2V0U2VnbWVudFR5cGUgPSBmdW5jdGlvbiBnZXRTZWdtZW50VHlwZSh0eXBlKSB7XG4gICAgaWYgKHR5cGUgPCAxMDApIHtcbiAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgfSBlbHNlIGlmICh0eXBlID49IDEwMCAmJiB0eXBlIDwgMjAwKSB7XG4gICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgfSBlbHNlIGlmICh0eXBlID49IDIwMCAmJiB0eXBlIDwgMzAwKSB7XG4gICAgICByZXR1cm4gJ3dvcmQnO1xuICAgIH0gZWxzZSBpZiAodHlwZSA+PSAzMDAgJiYgdHlwZSA8IDQwMCkge1xuICAgICAgcmV0dXJuICdrYW5hJztcbiAgICB9IGVsc2UgaWYgKHR5cGUgPj0gNDAwICYmIHR5cGUgPCA1MDApIHtcbiAgICAgIHJldHVybiAnaWRlbyc7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbnN0YW50aWF0ZVdhc21Nb2R1bGUgPSBmdW5jdGlvbiBpbnN0YW50aWF0ZVdhc21Nb2R1bGUod2FzbSwgaW1wb3J0cykge1xuICAgIGlmICh0eXBlb2Ygd2FzbS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gd2FzbS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgIHJldHVybiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhyZXNwb25zZSwgaW1wb3J0cyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2FzbS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYnVmZmVyLCBpbXBvcnRzKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUod2FzbSwgaW1wb3J0cyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjcmVhdGVJbnRsU2VnbWVudGVyUG9seWZpbGxGcm9tSW5zdGFuY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSh3YXNtSW5zdGFuY2UsIHZhbHVlcykge1xuICAgICAgdmFyIGFsbG9jU3RyO1xuICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgYWxsb2NTdHIgPSBmdW5jdGlvbiBhbGxvY1N0cihzdHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gZW5jb2Rlci5lbmNvZGUoc3RyICsgJ1xcMCcpOyAvLyB0eXBlc2NyaXB0IGRvZXMgbm90IHBsYXkgd2VsbCB3aXRoIHdlYmFzc2VtYmx5XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblxuICAgICAgICAgICAgICAgIHZhciBleHBvcnRzID0gd2FzbUluc3RhbmNlLmV4cG9ydHM7XG4gICAgICAgICAgICAgICAgdmFyIHB0ciA9IGV4cG9ydHMubWFsbG9jKHZpZXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB2YXIgbWVtb3J5ID0gbmV3IFVpbnQ4QXJyYXkoZXhwb3J0cy5tZW1vcnkuYnVmZmVyLCBwdHIsIHZpZXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBtZW1vcnkuc2V0KHZpZXcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbcHRyLCB2aWV3XTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gU2VnbWVudGVyKGxvY2FsZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlZ21lbnRlcik7XG5cbiAgICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlID0gbG9jYWxlO1xuICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfY3JlYXRlQ2xhc3MoU2VnbWVudGVyLCBbe1xuICAgICAgICAgICAgICAgICAga2V5OiBcInNlZ21lbnRcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWdtZW50KGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdyYW51bGFyaXR5ID0gdGhpcy5vcHRpb25zLmdyYW51bGFyaXR5IHx8ICdncmFwaGVtZSc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBleHBvcnRzID0gd2FzbUluc3RhbmNlLmV4cG9ydHM7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5jdXJyZW50ID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hbGxvY1N0ciA9IGFsbG9jU3RyKGlucHV0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hbGxvY1N0cjIgPSBfc2xpY2VkVG9BcnJheShfYWxsb2NTdHIsIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRQdHIgPSBfYWxsb2NTdHIyWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWaWV3ID0gX2FsbG9jU3RyMlsxXTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgX2FsbG9jU3RyMyA9IGFsbG9jU3RyKGxvY2FsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWxsb2NTdHI0ID0gX3NsaWNlZFRvQXJyYXkoX2FsbG9jU3RyMywgMSksXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVQdHIgPSBfYWxsb2NTdHI0WzBdO1xuXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydHMudXRmOF9icmVha19pdGVyYXRvcihCUkVBS19UWVBFU1tncmFudWxhcml0eV0sIGxvY2FsZVB0ciwgaW5wdXRQdHIsIGlucHV0Vmlldy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBleHBvcnRzLmZyZWUobG9jYWxlUHRyKTtcbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5mcmVlKGlucHV0UHRyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZ21lbnRzID0gdmFsdWVzLmN1cnJlbnQubWFwKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMyA9IF9zbGljZWRUb0FycmF5KF9yZWYyLCAzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBfcmVmM1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gX3JlZjNbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRUeXBlID0gX3JlZjNbMl07XG5cbiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VnbWVudCA9IGlucHV0LnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnQ6IHNlZ21lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1dvcmRMaWtlOiBncmFudWxhcml0eSA9PT0gJ3dvcmQnID8gZ2V0U2VnbWVudFR5cGUoc2VnbWVudFR5cGUpICE9PSAnbm9uZScgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1R5cGU6IGdyYW51bGFyaXR5ID09PSAnd29yZCcgPyBnZXRTZWdtZW50VHlwZShzZWdtZW50VHlwZSkgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgIGluZGV4ICs9IHNlZ21lbnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMuY29udGFpbmluZyA9IGZ1bmN0aW9uIChpbmRleFRvRmluZCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWdtZW50cy5maW5kKGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gX3JlZjQuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudCA9IF9yZWY0LnNlZ21lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXhUb0ZpbmQgPj0gaW5kZXggJiYgaW5kZXhUb0ZpbmQgPD0gaW5kZXggKyBzZWdtZW50Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1dKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBTZWdtZW50ZXI7XG4gICAgICAgICAgICAgIH0oKSk7XG5cbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIF9jYWxsZWUpO1xuICAgIH0pKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVJbnRsU2VnbWVudGVyUG9seWZpbGxGcm9tSW5zdGFuY2UoX3gsIF94Mikge1xuICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGdldEltcG9ydHMgPSBmdW5jdGlvbiBnZXRJbXBvcnRzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVudjoge1xuICAgICAgICBwdXNoOiBmdW5jdGlvbiBwdXNoKHN0YXJ0LCBlbmQsIHNlZ21lbnRUeXBlKSB7XG4gICAgICAgICAgY2FsbGJhY2soW3N0YXJ0LCBlbmQsIHNlZ21lbnRUeXBlXSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9fc3lzX3N0YXQ2NDogZnVuY3Rpb24gX19zeXNfc3RhdDY0KCkge31cbiAgICAgIH0sXG4gICAgICB3YXNpX3NuYXBzaG90X3ByZXZpZXcxOiB7XG4gICAgICAgIHByb2NfZXhpdDogZnVuY3Rpb24gcHJvY19leGl0KCkge30sXG4gICAgICAgIGZkX2Nsb3NlOiBmdW5jdGlvbiBmZF9jbG9zZSgpIHt9LFxuICAgICAgICBlbnZpcm9uX3NpemVzX2dldDogZnVuY3Rpb24gZW52aXJvbl9zaXplc19nZXQoKSB7fSxcbiAgICAgICAgZW52aXJvbl9nZXQ6IGZ1bmN0aW9uIGVudmlyb25fZ2V0KCkge31cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBjcmVhdGVJbnRsU2VnbWVudGVyUG9seWZpbGxGcm9tRmFjdG9yeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9yZWY1ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIod2FzbUZhY3RvcnkpIHtcbiAgICAgIHZhciB2YWx1ZXMsIF95aWVsZCR3YXNtRmFjdG9yeSwgaW5zdGFuY2U7XG5cbiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xuICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB2YWx1ZXMgPSB7XG4gICAgICAgICAgICAgICAgY3VycmVudDogW11cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzO1xuICAgICAgICAgICAgICByZXR1cm4gd2FzbUZhY3RvcnkoZ2V0SW1wb3J0cyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMuY3VycmVudC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIF95aWVsZCR3YXNtRmFjdG9yeSA9IF9jb250ZXh0Mi5zZW50O1xuICAgICAgICAgICAgICBpbnN0YW5jZSA9IF95aWVsZCR3YXNtRmFjdG9yeS5pbnN0YW5jZTtcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwgY3JlYXRlSW50bFNlZ21lbnRlclBvbHlmaWxsRnJvbUluc3RhbmNlKGluc3RhbmNlLCB2YWx1ZXMpKTtcblxuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIF9jYWxsZWUyKTtcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlSW50bFNlZ21lbnRlclBvbHlmaWxsRnJvbUZhY3RvcnkoX3gzKSB7XG4gICAgICByZXR1cm4gX3JlZjUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KCk7XG4gIHZhciBjcmVhdGVJbnRsU2VnbWVudGVyUG9seWZpbGwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcmVmNiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKHdhc20pIHtcbiAgICAgIHZhciB2YWx1ZXMsIF95aWVsZCRpbnN0YW50aWF0ZVdhcywgaW5zdGFuY2U7XG5cbiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xuICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB2YWx1ZXMgPSB7XG4gICAgICAgICAgICAgICAgY3VycmVudDogW11cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzO1xuICAgICAgICAgICAgICByZXR1cm4gaW5zdGFudGlhdGVXYXNtTW9kdWxlKHdhc20sIGdldEltcG9ydHMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzLmN1cnJlbnQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICBfeWllbGQkaW5zdGFudGlhdGVXYXMgPSBfY29udGV4dDMuc2VudDtcbiAgICAgICAgICAgICAgaW5zdGFuY2UgPSBfeWllbGQkaW5zdGFudGlhdGVXYXMuaW5zdGFuY2U7XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KFwicmV0dXJuXCIsIGNyZWF0ZUludGxTZWdtZW50ZXJQb2x5ZmlsbEZyb21JbnN0YW5jZShpbnN0YW5jZSwgdmFsdWVzKSk7XG5cbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBfY2FsbGVlMyk7XG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUludGxTZWdtZW50ZXJQb2x5ZmlsbChfeDQpIHtcbiAgICAgIHJldHVybiBfcmVmNi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0oKTtcblxuICBleHBvcnRzLmNyZWF0ZUludGxTZWdtZW50ZXJQb2x5ZmlsbCA9IGNyZWF0ZUludGxTZWdtZW50ZXJQb2x5ZmlsbDtcbiAgZXhwb3J0cy5jcmVhdGVJbnRsU2VnbWVudGVyUG9seWZpbGxGcm9tRmFjdG9yeSA9IGNyZWF0ZUludGxTZWdtZW50ZXJQb2x5ZmlsbEZyb21GYWN0b3J5O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/intl-segmenter-polyfill/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./schemas/components/OpenGraphPreview.tsx":
/*!*************************************************!*\
  !*** ./schemas/components/OpenGraphPreview.tsx ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ OpenGraphPreview; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _sanity_ui__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sanity/ui */ \"(app-pages-browser)/./node_modules/@sanity/ui/dist/index.esm.js\");\n/* harmony import */ var components_OpenGraphImage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! components/OpenGraphImage */ \"(app-pages-browser)/./components/OpenGraphImage.tsx\");\n/* harmony import */ var intl_segmenter_polyfill__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! intl-segmenter-polyfill */ \"(app-pages-browser)/./node_modules/intl-segmenter-polyfill/dist/index.js\");\n/* harmony import */ var intl_segmenter_polyfill__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(intl_segmenter_polyfill__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var satori__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! satori */ \"(app-pages-browser)/./node_modules/satori/dist/index.js\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! styled-components */ \"(app-pages-browser)/./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n/* harmony import */ var swr_immutable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! swr/immutable */ \"(app-pages-browser)/./node_modules/swr/immutable/dist/index.mjs\");\n/* eslint-disable @typescript-eslint/no-shadow */ /* eslint-disable react/destructuring-assignment */ /* eslint-disable @typescript-eslint/naming-convention */ \nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n\\n  svg {\\n    display: block;\\n    object-fit: cover;\\n    aspect-ratio: \",\n        \" / \",\n        \";\\n    object-position: center;\\n    height: 100%;\\n    width: 100%;\\n  }\\n\"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\nasync function init() {\n    var _globalThis_Intl, _globalThis;\n    if (!((_globalThis = globalThis) === null || _globalThis === void 0 ? void 0 : (_globalThis_Intl = _globalThis.Intl) === null || _globalThis_Intl === void 0 ? void 0 : _globalThis_Intl.Segmenter)) {\n        console.debug(\"Polyfilling Intl.Segmenter\");\n        globalThis.Intl = globalThis.Intl || {};\n        // @ts-expect-error\n        globalThis.Intl.Segmenter = await (0,intl_segmenter_polyfill__WEBPACK_IMPORTED_MODULE_3__.createIntlSegmenterPolyfill)(fetch(/* asset import */ new __webpack_require__.U(__webpack_require__(/*! public/break_iterator.wasm */ \"(app-pages-browser)/./public/break_iterator.wasm\"))));\n    }\n    const fontData = await fetch(/* asset import */ new __webpack_require__.U(__webpack_require__(/*! public/Inter-Bold.woff */ \"(app-pages-browser)/./public/Inter-Bold.woff\"))).then((res)=>res.arrayBuffer());\n    return [\n        {\n            name: \"Inter\",\n            data: fontData,\n            style: \"normal\",\n            weight: 700\n        }\n    ];\n}\n// preload fonts and polyfill\nconst fontsPromise = init();\nconst OpenGraphSvg = (0,styled_components__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_sanity_ui__WEBPACK_IMPORTED_MODULE_7__.Card).attrs({\n    radius: 3,\n    shadow: 1,\n    overflow: \"hidden\"\n})(_templateObject(), components_OpenGraphImage__WEBPACK_IMPORTED_MODULE_2__.width, components_OpenGraphImage__WEBPACK_IMPORTED_MODULE_2__.height);\n_c = OpenGraphSvg;\nfunction OpenGraphPreview(props) {\n    _s();\n    // we wrap the segmenter setup and font loading in SWR to enable caching\n    const { data: fonts } = (0,swr_immutable__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"OpenGraphPreview.init\", ()=>fontsPromise, {\n        suspense: true\n    });\n    // Also handle the satori render call in SWR to enable caching and only re-render when the title changes or fonts hot reload\n    const { data: __html } = (0,swr_immutable__WEBPACK_IMPORTED_MODULE_5__[\"default\"])([\n        props === null || props === void 0 ? void 0 : props.title,\n        fonts\n    ], (param)=>{\n        let [title, fonts] = param;\n        return (0,satori__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(components_OpenGraphImage__WEBPACK_IMPORTED_MODULE_2__.OpenGraphImage, {\n            title: title || \"\"\n        }, void 0, false, {\n            fileName: \"A:\\\\greymatter-v2\\\\frontend\\\\schemas\\\\components\\\\OpenGraphPreview.tsx\",\n            lineNumber: 60,\n            columnNumber: 32\n        }, this), {\n            width: components_OpenGraphImage__WEBPACK_IMPORTED_MODULE_2__.width,\n            height: components_OpenGraphImage__WEBPACK_IMPORTED_MODULE_2__.height,\n            fonts\n        });\n    }, {\n        suspense: true\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(OpenGraphSvg, {\n        dangerouslySetInnerHTML: {\n            __html\n        }\n    }, void 0, false, {\n        fileName: \"A:\\\\greymatter-v2\\\\frontend\\\\schemas\\\\components\\\\OpenGraphPreview.tsx\",\n        lineNumber: 68,\n        columnNumber: 10\n    }, this);\n}\n_s(OpenGraphPreview, \"wbdQ4ovOWhk+Ph1aeiqjYfEwjKY=\", false, function() {\n    return [\n        swr_immutable__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n        swr_immutable__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n    ];\n});\n_c1 = OpenGraphPreview;\nvar _c, _c1;\n$RefreshReg$(_c, \"OpenGraphSvg\");\n$RefreshReg$(_c1, \"OpenGraphPreview\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NjaGVtYXMvY29tcG9uZW50cy9PcGVuR3JhcGhQcmV2aWV3LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQStDLEdBQy9DLGlEQUFpRCxHQUNqRCx1REFBdUQ7Ozs7Ozs7Ozs7Ozs7O0FBQ3JCO0FBQ3dDO0FBQ0o7QUFFbEI7QUFDYjtBQUNKO0FBRW5DLGVBQWVRO1FBQ1JDLGtCQUFBQTtJQUFMLElBQUksR0FBQ0EsY0FBQUEsd0JBQUFBLG1DQUFBQSxtQkFBQUEsWUFBWUMsSUFBSSxjQUFoQkQsdUNBQUFBLGlCQUFrQkUsU0FBUyxHQUFFO1FBQ2hDQyxRQUFRQyxLQUFLLENBQUM7UUFDZEosV0FBV0MsSUFBSSxHQUFHRCxXQUFXQyxJQUFJLElBQUksQ0FBQztRQUN0QyxtQkFBbUI7UUFDbkJELFdBQVdDLElBQUksQ0FBQ0MsU0FBUyxHQUFHLE1BQU1QLG9GQUEyQkEsQ0FDM0RVLE1BQU0sdUpBQXNEO0lBRWhFO0lBRUEsTUFBTUcsV0FBVyxNQUFNSCxNQUNyQiwrSUFBa0QsRUFDbERJLElBQUksQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxXQUFXO0lBRS9CLE9BQU87UUFBQztZQUFFQyxNQUFNO1lBQVNDLE1BQU1MO1lBQVVNLE9BQU87WUFBVUMsUUFBUTtRQUFJO0tBQUU7QUFDMUU7QUFFQSw2QkFBNkI7QUFDN0IsTUFBTUMsZUFBZWpCO0FBRXJCLE1BQU1rQixlQUFlcEIsNkRBQU1BLENBQUNOLDRDQUFJQSxFQUFFMkIsS0FBSyxDQUFDO0lBQ3RDQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsVUFBVTtBQUNaLHNCQVFvQjNCLDREQUFLQSxFQUFNRiw2REFBTUE7S0FaL0J5QjtBQW1CUyxTQUFTSyxpQkFBaUJDLEtBQTBCOztJQUNqRSx3RUFBd0U7SUFDeEUsTUFBTSxFQUFFVixNQUFNVyxLQUFLLEVBQUUsR0FBRzFCLHlEQUFNQSxDQUFDLHlCQUF5QixJQUFNa0IsY0FBYztRQUMxRVMsVUFBVTtJQUNaO0lBRUEsNEhBQTRIO0lBQzVILE1BQU0sRUFBRVosTUFBTWEsTUFBTSxFQUFFLEdBQUc1Qix5REFBTUEsQ0FDN0I7UUFBQ3lCLGtCQUFBQSw0QkFBQUEsTUFBT0ksS0FBSztRQUFFSDtLQUF1QyxFQUN0RDtZQUFDLENBQUNHLE9BQU9ILE1BQU07ZUFBSzVCLGtEQUFNQSxlQUFDLDhEQUFDSCxxRUFBY0E7WUFBQ2tDLE9BQU9BLFNBQVM7Ozs7O2tCQUFRO1lBQ2pFakMsS0FBS0EsOERBQUFBO1lBQ0xGLE1BQU1BLCtEQUFBQTtZQUNOZ0M7UUFDRjtJQUFDLEdBQ0Q7UUFBRUMsVUFBVTtJQUFLO0lBR25CLHFCQUFPLDhEQUFDUjtRQUFhVyx5QkFBeUI7WUFBRUY7UUFBTzs7Ozs7O0FBQ3pEO0dBbEJ3Qko7O1FBRUV4QixxREFBTUE7UUFLTEEscURBQU1BOzs7TUFQVHdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NjaGVtYXMvY29tcG9uZW50cy9PcGVuR3JhcGhQcmV2aWV3LnRzeD8wYzk3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1zaGFkb3cgKi9cclxuLyogZXNsaW50LWRpc2FibGUgcmVhY3QvZGVzdHJ1Y3R1cmluZy1hc3NpZ25tZW50ICovXHJcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xyXG5pbXBvcnQgeyBDYXJkIH0gZnJvbSAnQHNhbml0eS91aSc7XHJcbmltcG9ydCB7IGhlaWdodCwgT3BlbkdyYXBoSW1hZ2UsIHdpZHRoIH0gZnJvbSAnY29tcG9uZW50cy9PcGVuR3JhcGhJbWFnZSc7XHJcbmltcG9ydCB7IGNyZWF0ZUludGxTZWdtZW50ZXJQb2x5ZmlsbCB9IGZyb20gJ2ludGwtc2VnbWVudGVyLXBvbHlmaWxsJztcclxuaW1wb3J0IHR5cGUgeyBTZXR0aW5ncyB9IGZyb20gJ2xpYi9zYW5pdHkucXVlcmllcyc7XHJcbmltcG9ydCBzYXRvcmksIHsgdHlwZSBTYXRvcmlPcHRpb25zIH0gZnJvbSAnc2F0b3JpJztcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XHJcbmltcG9ydCB1c2VTV1IgZnJvbSAnc3dyL2ltbXV0YWJsZSc7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBpbml0KCk6IFByb21pc2U8U2F0b3JpT3B0aW9uc1snZm9udHMnXT4ge1xyXG4gIGlmICghZ2xvYmFsVGhpcz8uSW50bD8uU2VnbWVudGVyKSB7XHJcbiAgICBjb25zb2xlLmRlYnVnKCdQb2x5ZmlsbGluZyBJbnRsLlNlZ21lbnRlcicpO1xyXG4gICAgZ2xvYmFsVGhpcy5JbnRsID0gZ2xvYmFsVGhpcy5JbnRsIHx8IHt9O1xyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgZ2xvYmFsVGhpcy5JbnRsLlNlZ21lbnRlciA9IGF3YWl0IGNyZWF0ZUludGxTZWdtZW50ZXJQb2x5ZmlsbChcclxuICAgICAgZmV0Y2gobmV3IFVSTCgncHVibGljL2JyZWFrX2l0ZXJhdG9yLndhc20nLCBpbXBvcnQubWV0YS51cmwpKSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBmb250RGF0YSA9IGF3YWl0IGZldGNoKFxyXG4gICAgbmV3IFVSTCgncHVibGljL0ludGVyLUJvbGQud29mZicsIGltcG9ydC5tZXRhLnVybCksXHJcbiAgKS50aGVuKChyZXMpID0+IHJlcy5hcnJheUJ1ZmZlcigpKTtcclxuXHJcbiAgcmV0dXJuIFt7IG5hbWU6ICdJbnRlcicsIGRhdGE6IGZvbnREYXRhLCBzdHlsZTogJ25vcm1hbCcsIHdlaWdodDogNzAwIH1dO1xyXG59XHJcblxyXG4vLyBwcmVsb2FkIGZvbnRzIGFuZCBwb2x5ZmlsbFxyXG5jb25zdCBmb250c1Byb21pc2UgPSBpbml0KCk7XHJcblxyXG5jb25zdCBPcGVuR3JhcGhTdmcgPSBzdHlsZWQoQ2FyZCkuYXR0cnMoe1xyXG4gIHJhZGl1czogMyxcclxuICBzaGFkb3c6IDEsXHJcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxyXG59KWBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcblxyXG4gIHN2ZyB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xyXG4gICAgYXNwZWN0LXJhdGlvOiAke3dpZHRofSAvICR7aGVpZ2h0fTtcclxuICAgIG9iamVjdC1wb3NpdGlvbjogY2VudGVyO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT3BlbkdyYXBoUHJldmlldyhwcm9wczogU2V0dGluZ3NbJ29nSW1hZ2UnXSkge1xyXG4gIC8vIHdlIHdyYXAgdGhlIHNlZ21lbnRlciBzZXR1cCBhbmQgZm9udCBsb2FkaW5nIGluIFNXUiB0byBlbmFibGUgY2FjaGluZ1xyXG4gIGNvbnN0IHsgZGF0YTogZm9udHMgfSA9IHVzZVNXUignT3BlbkdyYXBoUHJldmlldy5pbml0JywgKCkgPT4gZm9udHNQcm9taXNlLCB7XHJcbiAgICBzdXNwZW5zZTogdHJ1ZSxcclxuICB9KTtcclxuXHJcbiAgLy8gQWxzbyBoYW5kbGUgdGhlIHNhdG9yaSByZW5kZXIgY2FsbCBpbiBTV1IgdG8gZW5hYmxlIGNhY2hpbmcgYW5kIG9ubHkgcmUtcmVuZGVyIHdoZW4gdGhlIHRpdGxlIGNoYW5nZXMgb3IgZm9udHMgaG90IHJlbG9hZFxyXG4gIGNvbnN0IHsgZGF0YTogX19odG1sIH0gPSB1c2VTV1IoXHJcbiAgICBbcHJvcHM/LnRpdGxlLCBmb250cyBzYXRpc2ZpZXMgU2F0b3JpT3B0aW9uc1snZm9udHMnXV0sXHJcbiAgICAoW3RpdGxlLCBmb250c10pID0+IHNhdG9yaSg8T3BlbkdyYXBoSW1hZ2UgdGl0bGU9e3RpdGxlIHx8ICcnfSAvPiwge1xyXG4gICAgICB3aWR0aCxcclxuICAgICAgaGVpZ2h0LFxyXG4gICAgICBmb250cyxcclxuICAgIH0pLFxyXG4gICAgeyBzdXNwZW5zZTogdHJ1ZSB9LFxyXG4gICk7XHJcblxyXG4gIHJldHVybiA8T3BlbkdyYXBoU3ZnIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbCB9fSAvPjtcclxufVxyXG4iXSwibmFtZXMiOlsiQ2FyZCIsImhlaWdodCIsIk9wZW5HcmFwaEltYWdlIiwid2lkdGgiLCJjcmVhdGVJbnRsU2VnbWVudGVyUG9seWZpbGwiLCJzYXRvcmkiLCJzdHlsZWQiLCJ1c2VTV1IiLCJpbml0IiwiZ2xvYmFsVGhpcyIsIkludGwiLCJTZWdtZW50ZXIiLCJjb25zb2xlIiwiZGVidWciLCJmZXRjaCIsIlVSTCIsInVybCIsImZvbnREYXRhIiwidGhlbiIsInJlcyIsImFycmF5QnVmZmVyIiwibmFtZSIsImRhdGEiLCJzdHlsZSIsIndlaWdodCIsImZvbnRzUHJvbWlzZSIsIk9wZW5HcmFwaFN2ZyIsImF0dHJzIiwicmFkaXVzIiwic2hhZG93Iiwib3ZlcmZsb3ciLCJPcGVuR3JhcGhQcmV2aWV3IiwicHJvcHMiLCJmb250cyIsInN1c3BlbnNlIiwiX19odG1sIiwidGl0bGUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./schemas/components/OpenGraphPreview.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/client-only/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/compiled/client-only/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {



/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse-css-color/dist/index.umd.js":
/*!********************************************************!*\
  !*** ./node_modules/parse-css-color/dist/index.umd.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("!function(e,r){ true?module.exports=r():0}(this,(function(){\"use strict\";var e={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},r=new RegExp(/^#([a-f0-9]{3,4}|[a-f0-9]{4}(?:[a-f0-9]{2}){1,2})\\b$/,\"i\"),n=\"-?\\\\d*(?:\\\\.\\\\d+)\",a=\"(\"+n+\"?)\",l=\"(\"+n+\"?%)\",t=(\"^\\n  hsla?\\\\(\\n    \\\\s*(-?\\\\d*(?:\\\\.\\\\d+)?(?:deg|rad|turn)?)\\\\s*,\\n    \\\\s*\"+l+\"\\\\s*,\\n    \\\\s*\"+l+\"\\\\s*\\n    (?:,\\\\s*\"+\"(-?\\\\d*(?:\\\\.\\\\d+)?%?)\\\\s*)?\\n  \\\\)\\n  $\\n\").replace(/\\n|\\s/g,\"\"),s=new RegExp(t),i=(\"^\\n  hsla?\\\\(\\n    \\\\s*(-?\\\\d*(?:\\\\.\\\\d+)?(?:deg|rad|turn)?)\\\\s*\\n    \\\\s+\"+l+\"\\n    \\\\s+\"+l+\"\\n    \\\\s*(?:\\\\s*\\\\/\\\\s*\"+\"(-?\\\\d*(?:\\\\.\\\\d+)?%?)\\\\s*)?\\n  \\\\)\\n  $\\n\").replace(/\\n|\\s/g,\"\"),o=new RegExp(i),d=(\"^\\n  rgba?\\\\(\\n    \\\\s*\"+a+\"\\\\s*,\\n    \\\\s*\"+a+\"\\\\s*,\\n    \\\\s*\"+a+\"\\\\s*\\n    (?:,\\\\s*\"+\"(-?\\\\d*(?:\\\\.\\\\d+)?%?)\\\\s*)?\\n  \\\\)\\n  $\\n\").replace(/\\n|\\s/g,\"\"),u=new RegExp(d),g=(\"^\\n  rgba?\\\\(\\n    \\\\s*\"+l+\"\\\\s*,\\n    \\\\s*\"+l+\"\\\\s*,\\n    \\\\s*\"+l+\"\\\\s*\\n    (?:,\\\\s*\"+\"(-?\\\\d*(?:\\\\.\\\\d+)?%?)\\\\s*)?\\n  \\\\)\\n  $\\n\").replace(/\\n|\\s/g,\"\"),p=new RegExp(g),h=(\"^\\n  rgba?\\\\(\\n    \\\\s*\"+a+\"\\n    \\\\s+\"+a+\"\\n    \\\\s+\"+a+\"\\n    \\\\s*(?:\\\\s*\\\\/\\\\s*\"+\"(-?\\\\d*(?:\\\\.\\\\d+)?%?)\\\\s*)?\\n  \\\\)\\n$\\n\").replace(/\\n|\\s/g,\"\"),c=new RegExp(h),m=(\"^\\n  rgba?\\\\(\\n    \\\\s*\"+l+\"\\n    \\\\s+\"+l+\"\\n    \\\\s+\"+l+\"\\n    \\\\s*(?:\\\\s*\\\\/\\\\s*\"+\"(-?\\\\d*(?:\\\\.\\\\d+)?%?)\\\\s*)?\\n  \\\\)\\n$\\n\").replace(/\\n|\\s/g,\"\"),f=new RegExp(m),b=new RegExp(/^transparent$/,\"i\"),y=new RegExp(\"[^#a-f\\\\d]\",\"gi\"),w=new RegExp(\"^#?[a-f\\\\d]{3}[a-f\\\\d]?$|^#?[a-f\\\\d]{6}([a-f\\\\d]{2})?$\",\"i\"),k=function(e,r,n){return Math.min(Math.max(r,e),n)},v=function(e){var r=e;return\"number\"!=typeof r&&(r=r.endsWith(\"%\")?255*parseFloat(r)/100:parseFloat(r)),k(Math.round(r),0,255)},x=function(e){return k(parseFloat(e),0,100)};function E(e){var r=e;return\"number\"!=typeof r&&(r=r.endsWith(\"%\")?parseFloat(r)/100:parseFloat(r)),k(r,0,1)}function R(e){var r=function(e,r){if(void 0===r&&(r={}),\"string\"!=typeof e||y.test(e)||!w.test(e))throw new TypeError(\"Expected a valid hex string\");var n=1;8===(e=e.replace(/^#/,\"\")).length&&(n=Number.parseInt(e.slice(6,8),16)/255,e=e.slice(0,6)),4===e.length&&(n=Number.parseInt(e.slice(3,4).repeat(2),16)/255,e=e.slice(0,3)),3===e.length&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]);var a=Number.parseInt(e,16),l=a>>16,t=a>>8&255,s=255&a,i=\"number\"==typeof r.alpha?r.alpha:n;return\"array\"===r.format?[l,t,s,i]:\"css\"===r.format?\"rgb(\"+l+\" \"+t+\" \"+s+(1===i?\"\":\" / \"+Number((100*i).toFixed(2))+\"%\")+\")\":{red:l,green:t,blue:s,alpha:i}}(e,{format:\"array\"});return $([null,r[0],r[1],r[2],r[3]])}function $(e){var r=e[1],n=e[2],a=e[3],l=e[4];return void 0===l&&(l=1),{type:\"rgb\",values:[r,n,a].map(v),alpha:E(null===l?1:l)}}\n/**\n\t * parse-css-color\n\t * @version v0.2.1\n\t * @link http://github.com/noeldelgado/parse-css-color/\n\t * @license MIT\n\t */return function(n){if(\"string\"!=typeof n)return null;var a=r.exec(n);if(a)return R(a[0]);var l=o.exec(n)||s.exec(n);if(l)return function(e){var r=e[1],n=e[2],a=e[3],l=e[4];void 0===l&&(l=1);var t=r;return{type:\"hsl\",values:[t=t.endsWith(\"turn\")?360*parseFloat(t)/1:t.endsWith(\"rad\")?Math.round(180*parseFloat(t)/Math.PI):parseFloat(t),x(n),x(a)],alpha:E(null===l?1:l)}}(l);var t=c.exec(n)||f.exec(n)||u.exec(n)||p.exec(n);if(t)return $(t);if(b.exec(n))return $([null,0,0,0,0]);var i=e[n.toLowerCase()];return i?$([null,i[0],i[1],i[2],1]):null}}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse-css-color/dist/index.umd.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/postcss-value-parser/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/index.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var parse = __webpack_require__(/*! ./parse */ \"(app-pages-browser)/./node_modules/postcss-value-parser/lib/parse.js\");\nvar walk = __webpack_require__(/*! ./walk */ \"(app-pages-browser)/./node_modules/postcss-value-parser/lib/walk.js\");\nvar stringify = __webpack_require__(/*! ./stringify */ \"(app-pages-browser)/./node_modules/postcss-value-parser/lib/stringify.js\");\n\nfunction ValueParser(value) {\n  if (this instanceof ValueParser) {\n    this.nodes = parse(value);\n    return this;\n  }\n  return new ValueParser(value);\n}\n\nValueParser.prototype.toString = function() {\n  return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n};\n\nValueParser.prototype.walk = function(cb, bubble) {\n  walk(this.nodes, cb, bubble);\n  return this;\n};\n\nValueParser.unit = __webpack_require__(/*! ./unit */ \"(app-pages-browser)/./node_modules/postcss-value-parser/lib/unit.js\");\n\nValueParser.walk = walk;\n\nValueParser.stringify = stringify;\n\nmodule.exports = ValueParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXZhbHVlLXBhcnNlci9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxtQkFBTyxDQUFDLHFGQUFTO0FBQzdCLFdBQVcsbUJBQU8sQ0FBQyxtRkFBUTtBQUMzQixnQkFBZ0IsbUJBQU8sQ0FBQyw2RkFBYTs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixtQkFBTyxDQUFDLG1GQUFROztBQUVuQzs7QUFFQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL2luZGV4LmpzPzNkMTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhcnNlID0gcmVxdWlyZShcIi4vcGFyc2VcIik7XG52YXIgd2FsayA9IHJlcXVpcmUoXCIuL3dhbGtcIik7XG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5XCIpO1xuXG5mdW5jdGlvbiBWYWx1ZVBhcnNlcih2YWx1ZSkge1xuICBpZiAodGhpcyBpbnN0YW5jZW9mIFZhbHVlUGFyc2VyKSB7XG4gICAgdGhpcy5ub2RlcyA9IHBhcnNlKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZXR1cm4gbmV3IFZhbHVlUGFyc2VyKHZhbHVlKTtcbn1cblxuVmFsdWVQYXJzZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHRoaXMubm9kZXMpID8gc3RyaW5naWZ5KHRoaXMubm9kZXMpIDogXCJcIjtcbn07XG5cblZhbHVlUGFyc2VyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24oY2IsIGJ1YmJsZSkge1xuICB3YWxrKHRoaXMubm9kZXMsIGNiLCBidWJibGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblZhbHVlUGFyc2VyLnVuaXQgPSByZXF1aXJlKFwiLi91bml0XCIpO1xuXG5WYWx1ZVBhcnNlci53YWxrID0gd2FsaztcblxuVmFsdWVQYXJzZXIuc3RyaW5naWZ5ID0gc3RyaW5naWZ5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZhbHVlUGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/postcss-value-parser/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/postcss-value-parser/lib/parse.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/parse.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\n\nmodule.exports = function(input) {\n  var tokens = [];\n  var value = input;\n\n  var next,\n    quote,\n    prev,\n    token,\n    escape,\n    escapePos,\n    whitespacePos,\n    parenthesesOpenPos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{ nodes: tokens }];\n  var balanced = 0;\n  var parent;\n\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = value.slice(pos, next);\n\n      prev = tokens[tokens.length - 1];\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n        prev.sourceEndIndex += token.length;\n      } else if (\n        code === comma ||\n        code === colon ||\n        (code === slash &&\n          value.charCodeAt(next + 1) !== star &&\n          (!parent ||\n            (parent && parent.type === \"function\" && parent.value !== \"calc\")))\n      ) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n\n      // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n        if (~next) {\n          escapePos = next;\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n      token.value = value.slice(pos + 1, next);\n      token.sourceEndIndex = token.unclosed ? next : next + 1;\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos);\n\n      // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      next = value.indexOf(\"*/\", pos);\n\n      token = {\n        type: \"comment\",\n        sourceIndex: pos,\n        sourceEndIndex: next + 2\n      };\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n        token.sourceEndIndex = next;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n\n      pos = next + 2;\n      code = value.charCodeAt(pos);\n\n      // Operation within calc\n    } else if (\n      (code === slash || code === star) &&\n      parent &&\n      parent.type === \"function\" &&\n      parent.value === \"calc\"\n    ) {\n      token = value[pos];\n      tokens.push({\n        type: \"word\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token\n      });\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      parenthesesOpenPos = pos;\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(parenthesesOpenPos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n          if (~next) {\n            escapePos = next;\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape);\n        // Whitespaces before closed\n        whitespacePos = next;\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n        if (parenthesesOpenPos < whitespacePos) {\n          if (pos !== whitespacePos + 1) {\n            token.nodes = [\n              {\n                type: \"word\",\n                sourceIndex: pos,\n                sourceEndIndex: whitespacePos + 1,\n                value: value.slice(pos, whitespacePos + 1)\n              }\n            ];\n          } else {\n            token.nodes = [];\n          }\n          if (token.unclosed && whitespacePos + 1 !== next) {\n            token.after = \"\";\n            token.nodes.push({\n              type: \"space\",\n              sourceIndex: whitespacePos + 1,\n              sourceEndIndex: next,\n              value: value.slice(whitespacePos + 1, next)\n            });\n          } else {\n            token.after = value.slice(whitespacePos + 1, next);\n            token.sourceEndIndex = next;\n          }\n        } else {\n          token.after = \"\";\n          token.nodes = [];\n        }\n        pos = next + 1;\n        token.sourceEndIndex = token.unclosed ? next : pos;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        token.sourceEndIndex = pos + 1;\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n      name = \"\";\n\n      // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      parent.after = after;\n      parent.sourceEndIndex += after.length;\n      after = \"\";\n      balanced -= 1;\n      stack[stack.length - 1].sourceEndIndex = pos;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes;\n\n      // Words\n    } else {\n      next = pos;\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (\n        next < max &&\n        !(\n          code <= 32 ||\n          code === singleQuote ||\n          code === doubleQuote ||\n          code === comma ||\n          code === colon ||\n          code === slash ||\n          code === openParentheses ||\n          (code === star &&\n            parent &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === slash &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === closeParentheses && balanced)\n        )\n      );\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else if (\n        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&\n        plus === token.charCodeAt(1) &&\n        isUnicodeRange.test(token.slice(2))\n      ) {\n        tokens.push({\n          type: \"unicode-range\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n    stack[pos].sourceEndIndex = value.length;\n  }\n\n  return stack[0].nodes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/postcss-value-parser/lib/parse.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/postcss-value-parser/lib/stringify.js":
/*!************************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/stringify.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes, custom);\n    if (type !== \"function\") {\n      return buf;\n    }\n    return (\n      value +\n      \"(\" +\n      (node.before || \"\") +\n      buf +\n      (node.after || \"\") +\n      (node.unclosed ? \"\" : \")\")\n    );\n  }\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n    return result;\n  }\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXZhbHVlLXBhcnNlci9saWIvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsSUFBSTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtdmFsdWUtcGFyc2VyL2xpYi9zdHJpbmdpZnkuanM/MjRmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzdHJpbmdpZnlOb2RlKG5vZGUsIGN1c3RvbSkge1xuICB2YXIgdHlwZSA9IG5vZGUudHlwZTtcbiAgdmFyIHZhbHVlID0gbm9kZS52YWx1ZTtcbiAgdmFyIGJ1ZjtcbiAgdmFyIGN1c3RvbVJlc3VsdDtcblxuICBpZiAoY3VzdG9tICYmIChjdXN0b21SZXN1bHQgPSBjdXN0b20obm9kZSkpICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY3VzdG9tUmVzdWx0O1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwid29yZFwiIHx8IHR5cGUgPT09IFwic3BhY2VcIikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgYnVmID0gbm9kZS5xdW90ZSB8fCBcIlwiO1xuICAgIHJldHVybiBidWYgKyB2YWx1ZSArIChub2RlLnVuY2xvc2VkID8gXCJcIiA6IGJ1Zik7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJjb21tZW50XCIpIHtcbiAgICByZXR1cm4gXCIvKlwiICsgdmFsdWUgKyAobm9kZS51bmNsb3NlZCA/IFwiXCIgOiBcIiovXCIpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZGl2XCIpIHtcbiAgICByZXR1cm4gKG5vZGUuYmVmb3JlIHx8IFwiXCIpICsgdmFsdWUgKyAobm9kZS5hZnRlciB8fCBcIlwiKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG5vZGUubm9kZXMpKSB7XG4gICAgYnVmID0gc3RyaW5naWZ5KG5vZGUubm9kZXMsIGN1c3RvbSk7XG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIHZhbHVlICtcbiAgICAgIFwiKFwiICtcbiAgICAgIChub2RlLmJlZm9yZSB8fCBcIlwiKSArXG4gICAgICBidWYgK1xuICAgICAgKG5vZGUuYWZ0ZXIgfHwgXCJcIikgK1xuICAgICAgKG5vZGUudW5jbG9zZWQgPyBcIlwiIDogXCIpXCIpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShub2RlcywgY3VzdG9tKSB7XG4gIHZhciByZXN1bHQsIGk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkobm9kZXMpKSB7XG4gICAgcmVzdWx0ID0gXCJcIjtcbiAgICBmb3IgKGkgPSBub2Rlcy5sZW5ndGggLSAxOyB+aTsgaSAtPSAxKSB7XG4gICAgICByZXN1bHQgPSBzdHJpbmdpZnlOb2RlKG5vZGVzW2ldLCBjdXN0b20pICsgcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHJldHVybiBzdHJpbmdpZnlOb2RlKG5vZGVzLCBjdXN0b20pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/postcss-value-parser/lib/stringify.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/postcss-value-parser/lib/unit.js":
/*!*******************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/unit.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var minus = \"-\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar dot = \".\".charCodeAt(0);\nvar exp = \"e\".charCodeAt(0);\nvar EXP = \"E\".charCodeAt(0);\n\n// Check if three code points would start a number\n// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number\nfunction likeNumber(value) {\n  var code = value.charCodeAt(0);\n  var nextCode;\n\n  if (code === plus || code === minus) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    var nextNextCode = value.charCodeAt(2);\n\n    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code === dot) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code >= 48 && code <= 57) {\n    return true;\n  }\n\n  return false;\n}\n\n// Consume a number\n// https://www.w3.org/TR/css-syntax-3/#consume-number\nmodule.exports = function(value) {\n  var pos = 0;\n  var length = value.length;\n  var code;\n  var nextCode;\n  var nextNextCode;\n\n  if (length === 0 || !likeNumber(value)) {\n    return false;\n  }\n\n  code = value.charCodeAt(pos);\n\n  if (code === plus || code === minus) {\n    pos++;\n  }\n\n  while (pos < length) {\n    code = value.charCodeAt(pos);\n\n    if (code < 48 || code > 57) {\n      break;\n    }\n\n    pos += 1;\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n\n  if (code === dot && nextCode >= 48 && nextCode <= 57) {\n    pos += 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n  nextNextCode = value.charCodeAt(pos + 2);\n\n  if (\n    (code === exp || code === EXP) &&\n    ((nextCode >= 48 && nextCode <= 57) ||\n      ((nextCode === plus || nextCode === minus) &&\n        nextNextCode >= 48 &&\n        nextNextCode <= 57))\n  ) {\n    pos += nextCode === plus || nextCode === minus ? 3 : 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  return {\n    number: value.slice(0, pos),\n    unit: value.slice(pos)\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXZhbHVlLXBhcnNlci9saWIvdW5pdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXZhbHVlLXBhcnNlci9saWIvdW5pdC5qcz81NjcwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBtaW51cyA9IFwiLVwiLmNoYXJDb2RlQXQoMCk7XG52YXIgcGx1cyA9IFwiK1wiLmNoYXJDb2RlQXQoMCk7XG52YXIgZG90ID0gXCIuXCIuY2hhckNvZGVBdCgwKTtcbnZhciBleHAgPSBcImVcIi5jaGFyQ29kZUF0KDApO1xudmFyIEVYUCA9IFwiRVwiLmNoYXJDb2RlQXQoMCk7XG5cbi8vIENoZWNrIGlmIHRocmVlIGNvZGUgcG9pbnRzIHdvdWxkIHN0YXJ0IGEgbnVtYmVyXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNzdGFydHMtd2l0aC1hLW51bWJlclxuZnVuY3Rpb24gbGlrZU51bWJlcih2YWx1ZSkge1xuICB2YXIgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoMCk7XG4gIHZhciBuZXh0Q29kZTtcblxuICBpZiAoY29kZSA9PT0gcGx1cyB8fCBjb2RlID09PSBtaW51cykge1xuICAgIG5leHRDb2RlID0gdmFsdWUuY2hhckNvZGVBdCgxKTtcblxuICAgIGlmIChuZXh0Q29kZSA+PSA0OCAmJiBuZXh0Q29kZSA8PSA1Nykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG5leHROZXh0Q29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoMik7XG5cbiAgICBpZiAobmV4dENvZGUgPT09IGRvdCAmJiBuZXh0TmV4dENvZGUgPj0gNDggJiYgbmV4dE5leHRDb2RlIDw9IDU3KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoY29kZSA9PT0gZG90KSB7XG4gICAgbmV4dENvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KDEpO1xuXG4gICAgaWYgKG5leHRDb2RlID49IDQ4ICYmIG5leHRDb2RlIDw9IDU3KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIENvbnN1bWUgYSBudW1iZXJcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2NvbnN1bWUtbnVtYmVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBwb3MgPSAwO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgY29kZTtcbiAgdmFyIG5leHRDb2RlO1xuICB2YXIgbmV4dE5leHRDb2RlO1xuXG4gIGlmIChsZW5ndGggPT09IDAgfHwgIWxpa2VOdW1iZXIodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zKTtcblxuICBpZiAoY29kZSA9PT0gcGx1cyB8fCBjb2RlID09PSBtaW51cykge1xuICAgIHBvcysrO1xuICB9XG5cbiAgd2hpbGUgKHBvcyA8IGxlbmd0aCkge1xuICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiA1Nykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcG9zICs9IDE7XG4gIH1cblxuICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MpO1xuICBuZXh0Q29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zICsgMSk7XG5cbiAgaWYgKGNvZGUgPT09IGRvdCAmJiBuZXh0Q29kZSA+PSA0OCAmJiBuZXh0Q29kZSA8PSA1Nykge1xuICAgIHBvcyArPSAyO1xuXG4gICAgd2hpbGUgKHBvcyA8IGxlbmd0aCkge1xuICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zKTtcblxuICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gNTcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHBvcyArPSAxO1xuICAgIH1cbiAgfVxuXG4gIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG4gIG5leHRDb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MgKyAxKTtcbiAgbmV4dE5leHRDb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MgKyAyKTtcblxuICBpZiAoXG4gICAgKGNvZGUgPT09IGV4cCB8fCBjb2RlID09PSBFWFApICYmXG4gICAgKChuZXh0Q29kZSA+PSA0OCAmJiBuZXh0Q29kZSA8PSA1NykgfHxcbiAgICAgICgobmV4dENvZGUgPT09IHBsdXMgfHwgbmV4dENvZGUgPT09IG1pbnVzKSAmJlxuICAgICAgICBuZXh0TmV4dENvZGUgPj0gNDggJiZcbiAgICAgICAgbmV4dE5leHRDb2RlIDw9IDU3KSlcbiAgKSB7XG4gICAgcG9zICs9IG5leHRDb2RlID09PSBwbHVzIHx8IG5leHRDb2RlID09PSBtaW51cyA/IDMgOiAyO1xuXG4gICAgd2hpbGUgKHBvcyA8IGxlbmd0aCkge1xuICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zKTtcblxuICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gNTcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHBvcyArPSAxO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbnVtYmVyOiB2YWx1ZS5zbGljZSgwLCBwb3MpLFxuICAgIHVuaXQ6IHZhbHVlLnNsaWNlKHBvcylcbiAgfTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/postcss-value-parser/lib/unit.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/postcss-value-parser/lib/walk.js":
/*!*******************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/walk.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = function walk(nodes, cb, bubble) {\n  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n\n    if (\n      result !== false &&\n      node.type === \"function\" &&\n      Array.isArray(node.nodes)\n    ) {\n      walk(node.nodes, cb, bubble);\n    }\n\n    if (bubble) {\n      cb(node, i, nodes);\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXZhbHVlLXBhcnNlci9saWIvd2Fsay5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtdmFsdWUtcGFyc2VyL2xpYi93YWxrLmpzPzc4MjYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3YWxrKG5vZGVzLCBjYiwgYnViYmxlKSB7XG4gIHZhciBpLCBtYXgsIG5vZGUsIHJlc3VsdDtcblxuICBmb3IgKGkgPSAwLCBtYXggPSBub2Rlcy5sZW5ndGg7IGkgPCBtYXg7IGkgKz0gMSkge1xuICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICBpZiAoIWJ1YmJsZSkge1xuICAgICAgcmVzdWx0ID0gY2Iobm9kZSwgaSwgbm9kZXMpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHJlc3VsdCAhPT0gZmFsc2UgJiZcbiAgICAgIG5vZGUudHlwZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICBBcnJheS5pc0FycmF5KG5vZGUubm9kZXMpXG4gICAgKSB7XG4gICAgICB3YWxrKG5vZGUubm9kZXMsIGNiLCBidWJibGUpO1xuICAgIH1cblxuICAgIGlmIChidWJibGUpIHtcbiAgICAgIGNiKG5vZGUsIGksIG5vZGVzKTtcbiAgICB9XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/postcss-value-parser/lib/walk.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/tiny-inflate/index.js":
/*!********************************************!*\
  !*** ./node_modules/tiny-inflate/index.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/tiny-inflate/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/unicode-trie/index.js":
/*!********************************************!*\
  !*** ./node_modules/unicode-trie/index.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("const inflate = __webpack_require__(/*! tiny-inflate */ \"(app-pages-browser)/./node_modules/tiny-inflate/index.js\");\nconst { swap32LE } = __webpack_require__(/*! ./swap */ \"(app-pages-browser)/./node_modules/unicode-trie/swap.js\");\n\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\n\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nclass UnicodeTrie {\n  constructor(data) {\n    const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      let uncompressedLength;\n      if (isBuffer) {\n        this.highStart = data.readUInt32LE(0);\n        this.errorValue = data.readUInt32LE(4);\n        uncompressedLength = data.readUInt32LE(8);\n        data = data.slice(12);\n      } else {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0, true);\n        this.errorValue = view.getUint32(4, true);\n        uncompressedLength = view.getUint32(8, true);\n        data = data.subarray(12);\n      }\n\n      // double inflate the actual trie data\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n\n      // swap bytes from little-endian\n      swap32LE(data);\n\n      this.data = new Uint32Array(data.buffer);\n\n    } else {\n      // pre-parsed data\n      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n    }\n  }\n\n  get(codePoint) {\n    let index;\n    if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n      return this.errorValue;\n    }\n\n    if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n      // Ordinary BMP code point, excluding leading surrogates.\n      // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n      // data is stored in the index array itself.\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint <= 0xffff) {\n      // Lead Surrogate Code Point.  A Separate index section is stored for\n      // lead surrogate code units and code points.\n      //   The main index has the code unit data.\n      //   For this function, we need the code point data.\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint < this.highStart) {\n      // Supplemental code point, use two-level lookup.\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    return this.data[this.data.length - DATA_GRANULARITY];\n  }\n}\n\nmodule.exports = UnicodeTrie;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/unicode-trie/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/unicode-trie/swap.js":
/*!*******************************************!*\
  !*** ./node_modules/unicode-trie/swap.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("const isBigEndian = (new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x12);\n\nconst swap = (b, n, m) => {\n  let i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n};\n\nconst swap32 = array => {\n  const len = array.length;\n  for (let i = 0; i < len; i += 4) {\n    swap(array, i, i + 3);\n    swap(array, i + 1, i + 2);\n  }\n};\n\nconst swap32LE = array => {\n  if (isBigEndian) {\n    swap32(array);\n  }\n};\n\nmodule.exports = {\n  swap32LE: swap32LE\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91bmljb2RlLXRyaWUvc3dhcC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdW5pY29kZS10cmllL3N3YXAuanM/ZjBjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc0JpZ0VuZGlhbiA9IChuZXcgVWludDhBcnJheShuZXcgVWludDMyQXJyYXkoWzB4MTIzNDU2NzhdKS5idWZmZXIpWzBdID09PSAweDEyKTtcblxuY29uc3Qgc3dhcCA9IChiLCBuLCBtKSA9PiB7XG4gIGxldCBpID0gYltuXTtcbiAgYltuXSA9IGJbbV07XG4gIGJbbV0gPSBpO1xufTtcblxuY29uc3Qgc3dhcDMyID0gYXJyYXkgPT4ge1xuICBjb25zdCBsZW4gPSBhcnJheS5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKGFycmF5LCBpLCBpICsgMyk7XG4gICAgc3dhcChhcnJheSwgaSArIDEsIGkgKyAyKTtcbiAgfVxufTtcblxuY29uc3Qgc3dhcDMyTEUgPSBhcnJheSA9PiB7XG4gIGlmIChpc0JpZ0VuZGlhbikge1xuICAgIHN3YXAzMihhcnJheSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzd2FwMzJMRTogc3dhcDMyTEVcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/unicode-trie/swap.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLHlDQUF5QyxTQUFTO0FBQ2xEO0FBQ0E7QUFDQSxvQ0FBb0MseUJBQXlCLFNBQVMseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanM/MTZiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5TGlrZVRvQXJyYXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aEhvbGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx5QkFBeUIsU0FBUyx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanM/NDczOSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhIb2xlcywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/arrayWithHoles.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esb0NBQW9DLHlCQUF5QixTQUFTLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzPzU4ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MseUJBQXlCLFNBQVMseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzP2ZmMzciXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/classCallCheck.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var toPropertyKey = __webpack_require__(/*! ./toPropertyKey.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQixtQkFBTyxDQUFDLHNHQUFvQjtBQUNoRDtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwrQkFBK0IseUJBQXlCLFNBQVMseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzP2I2NjAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKFwiLi90b1Byb3BlcnR5S2V5LmpzXCIpO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3MsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/createClass.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("function _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFlBQVksa0VBQWtFO0FBQ3RGLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyx5QkFBeUIsU0FBUyx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanM/NjY4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkge1xuICB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgcltTeW1ib2wuaXRlcmF0b3JdIHx8IHJbXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAobnVsbCAhPSB0KSB7XG4gICAgdmFyIGUsXG4gICAgICBuLFxuICAgICAgaSxcbiAgICAgIHUsXG4gICAgICBhID0gW10sXG4gICAgICBmID0gITAsXG4gICAgICBvID0gITE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHtcbiAgICAgICAgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuO1xuICAgICAgICBmID0gITE7XG4gICAgICB9IGVsc2UgZm9yICg7ICEoZiA9IChlID0gaS5jYWxsKHQpKS5kb25lKSAmJiAoYS5wdXNoKGUudmFsdWUpLCBhLmxlbmd0aCAhPT0gbCk7IGYgPSAhMCk7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgbyA9ICEwLCBuID0gcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFmICYmIG51bGwgIT0gdFtcInJldHVyblwiXSAmJiAodSA9IHRbXCJyZXR1cm5cIl0oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG8pIHRocm93IG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlUmVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMseUJBQXlCLFNBQVMseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlUmVzdC5qcz9lYTEyIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVJlc3QsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/nonIterableRest.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var _typeof = (__webpack_require__(/*! ./typeof.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"]);\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw new Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/arrayWithHoles.js\");\nvar iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js\");\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\");\nvar nonIterableRest = __webpack_require__(/*! ./nonIterableRest.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/nonIterableRest.js\");\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQUEscUJBQXFCLG1CQUFPLENBQUMsd0dBQXFCO0FBQ2xELDJCQUEyQixtQkFBTyxDQUFDLG9IQUEyQjtBQUM5RCxpQ0FBaUMsbUJBQU8sQ0FBQyxnSUFBaUM7QUFDMUUsc0JBQXNCLG1CQUFPLENBQUMsMEdBQXNCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx5QkFBeUIsU0FBUyx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcz9hZDg3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzLmpzXCIpO1xudmFyIGl0ZXJhYmxlVG9BcnJheUxpbWl0ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5TGltaXQuanNcIik7XG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiKTtcbnZhciBub25JdGVyYWJsZVJlc3QgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIik7XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfc2xpY2VkVG9BcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/slicedToArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/toPrimitive.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPrimitive.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var _typeof = (__webpack_require__(/*! ./typeof.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"]);\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvUHJpbWl0aXZlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGNBQWMsMEhBQWlDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHlCQUF5QixTQUFTLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b1ByaW1pdGl2ZS5qcz85NGEzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4vdHlwZW9mLmpzXCIpW1wiZGVmYXVsdFwiXTtcbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkge1xuICBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDtcbiAgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdO1xuICBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7XG4gICAgaWYgKF90eXBlb2YocmVzKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF90b1ByaW1pdGl2ZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/toPrimitive.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/toPropertyKey.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPropertyKey.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var _typeof = (__webpack_require__(/*! ./typeof.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"]);\nvar toPrimitive = __webpack_require__(/*! ./toPrimitive.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvUHJvcGVydHlLZXkuanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYywwSEFBaUM7QUFDL0Msa0JBQWtCLG1CQUFPLENBQUMsa0dBQWtCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHlCQUF5QixTQUFTLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b1Byb3BlcnR5S2V5LmpzP2ExM2YiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi90eXBlb2YuanNcIilbXCJkZWZhdWx0XCJdO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZShcIi4vdG9QcmltaXRpdmUuanNcIik7XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7XG4gIHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3RvUHJvcGVydHlLZXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/toPropertyKey.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHLEVBQUUseUJBQXlCLFNBQVMseUJBQXlCO0FBQ2hFO0FBQ0EsMEJBQTBCLHlCQUF5QixTQUFTLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanM/ZDc5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiAobW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMpLCBfdHlwZW9mKG8pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/typeof.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHVCQUF1QixtQkFBTyxDQUFDLDRHQUF1QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHlCQUF5QixTQUFTLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcz9mMDIwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiKTtcbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// TODO(Babel 8): Remove this file.\n\nvar runtime = __webpack_require__(/*! ../helpers/regeneratorRuntime */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxjQUFjLG1CQUFPLENBQUMsc0hBQStCO0FBQ3JEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanM/YTZlZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPKEJhYmVsIDgpOiBSZW1vdmUgdGhpcyBmaWxlLlxuXG52YXIgcnVudGltZSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3JlZ2VuZXJhdG9yUnVudGltZVwiKSgpO1xubW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuXG4vLyBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvYmxvYi9tYWluL3BhY2thZ2VzL3J1bnRpbWUvcnVudGltZS5qcyNMNzM2PVxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/regenerator/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/linebreak/dist/module.mjs":
/*!************************************************!*\
  !*** ./node_modules/linebreak/dist/module.mjs ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ $557adaaeb0c7885f$exports; }\n/* harmony export */ });\n/* harmony import */ var unicode_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unicode-trie */ \"(app-pages-browser)/./node_modules/unicode-trie/index.js\");\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! base64-js */ \"(app-pages-browser)/./node_modules/base64-js/lib/b64.js\");\n\n\n\nvar $557adaaeb0c7885f$exports = {};\n\n\"use strict\";\n\n\n\nconst $1627905f8be2ef3f$export$af862512e23cb54 = 0; // Opening punctuation\nconst $1627905f8be2ef3f$export$9bf3043cb7503aa1 = 1; // Closing punctuation\nconst $1627905f8be2ef3f$export$6d0b2a5dd774590a = 2; // Closing parenthesis\nconst $1627905f8be2ef3f$export$bf0b2277bd569ea1 = 3; // Ambiguous quotation\nconst $1627905f8be2ef3f$export$bad2a840ccda93b6 = 4; // Glue\nconst $1627905f8be2ef3f$export$fb4028874a74450 = 5; // Non-starters\nconst $1627905f8be2ef3f$export$463bd1ce0149c55e = 6; // Exclamation/Interrogation\nconst $1627905f8be2ef3f$export$2e8caadc521d7cbb = 7; // Symbols allowing break after\nconst $1627905f8be2ef3f$export$bfe27467c1de9413 = 8; // Infix separator\nconst $1627905f8be2ef3f$export$af5f8d68aad3cd3a = 9; // Prefix\nconst $1627905f8be2ef3f$export$6b7e017d6825d38f = 10; // Postfix\nconst $1627905f8be2ef3f$export$8227ca023eb0daaa = 11; // Numeric\nconst $1627905f8be2ef3f$export$1bb1140fe1358b00 = 12; // Alphabetic\nconst $1627905f8be2ef3f$export$f3e416a182673355 = 13; // Hebrew Letter\nconst $1627905f8be2ef3f$export$8be180ec26319f9f = 14; // Ideographic\nconst $1627905f8be2ef3f$export$70824c8942178d60 = 15; // Inseparable characters\nconst $1627905f8be2ef3f$export$24aa617c849a894a = 16; // Hyphen\nconst $1627905f8be2ef3f$export$a73c4d14459b698d = 17; // Break after\nconst $1627905f8be2ef3f$export$921068d8846a1559 = 18; // Break before\nconst $1627905f8be2ef3f$export$8b85a4f193482778 = 19; // Break on either side (but not pair)\nconst $1627905f8be2ef3f$export$b2fd9c01d360241f = 20; // Zero-width space\nconst $1627905f8be2ef3f$export$dcd191669c0a595f = 21; // Combining marks\nconst $1627905f8be2ef3f$export$9e5d732f3676a9ba = 22; // Word joiner\nconst $1627905f8be2ef3f$export$cb94397127ac9363 = 23; // Hangul LV\nconst $1627905f8be2ef3f$export$746be9e3a3dfff1f = 24; // Hangul LVT\nconst $1627905f8be2ef3f$export$96e3e682276c47cf = 25; // Hangul L Jamo\nconst $1627905f8be2ef3f$export$fc2ff69ee2cb01bf = 26; // Hangul V Jamo\nconst $1627905f8be2ef3f$export$8999624a7bae9d04 = 27; // Hangul T Jamo\nconst $1627905f8be2ef3f$export$1dff41d5c0caca01 = 28; // Regional Indicator\nconst $1627905f8be2ef3f$export$ddb7a6c76d9d93eb = 29; // Emoji Base\nconst $1627905f8be2ef3f$export$7e93eb3105e4786d = 30; // Emoji Modifier\nconst $1627905f8be2ef3f$export$30a74a373318dec6 = 31; // Zero Width Joiner\nconst $1627905f8be2ef3f$export$54caeea5e6dab1f = 32; // Contingent break\nconst $1627905f8be2ef3f$export$d710c5f50fc7496a = 33; // Ambiguous (Alphabetic or Ideograph)\nconst $1627905f8be2ef3f$export$66498d28055820a9 = 34; // Break (mandatory)\nconst $1627905f8be2ef3f$export$eb6c6d0b7c8826f2 = 35; // Conditional Japanese Starter\nconst $1627905f8be2ef3f$export$de92be486109a1df = 36; // Carriage return\nconst $1627905f8be2ef3f$export$606cfc2a8896c91f = 37; // Line feed\nconst $1627905f8be2ef3f$export$e51d3c675bb0140d = 38; // Next line\nconst $1627905f8be2ef3f$export$da51c6332ad11d7b = 39; // South-East Asian\nconst $1627905f8be2ef3f$export$bea437c40441867d = 40; // Surrogates\nconst $1627905f8be2ef3f$export$c4c7eecbfed13dc9 = 41; // Space\nconst $1627905f8be2ef3f$export$98e1f8a379849661 = 42; // Unknown\n\n\nconst $32627af916ac1b00$export$98f50d781a474745 = 0; // Direct break opportunity\nconst $32627af916ac1b00$export$12ee1f8f5315ca7e = 1; // Indirect break opportunity\nconst $32627af916ac1b00$export$e4965ce242860454 = 2; // Indirect break opportunity for combining marks\nconst $32627af916ac1b00$export$8f14048969dcd45e = 3; // Prohibited break for combining marks\nconst $32627af916ac1b00$export$133eb141bf58aff4 = 4; // Prohibited break\nconst $32627af916ac1b00$export$5bdb8ccbf5c57afc = [\n    //OP   , CL    , CP    , QU    , GL    , NS    , EX    , SY    , IS    , PR    , PO    , NU    , AL    , HL    , ID    , IN    , HY    , BA    , BB    , B2    , ZW    , CM    , WJ    , H2    , H3    , JL    , JV    , JT    , RI    , EB    , EM    , ZWJ   , CB\n    [\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$8f14048969dcd45e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ] // CB\n];\n\n\nconst $557adaaeb0c7885f$var$data = base64_js__WEBPACK_IMPORTED_MODULE_1__.toByteArray(\"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\");\nconst $557adaaeb0c7885f$var$classTrie = new unicode_trie__WEBPACK_IMPORTED_MODULE_0__($557adaaeb0c7885f$var$data);\nconst $557adaaeb0c7885f$var$mapClass = function(c) {\n    switch(c){\n        case $1627905f8be2ef3f$export$d710c5f50fc7496a:\n            return $1627905f8be2ef3f$export$1bb1140fe1358b00;\n        case $1627905f8be2ef3f$export$da51c6332ad11d7b:\n        case $1627905f8be2ef3f$export$bea437c40441867d:\n        case $1627905f8be2ef3f$export$98e1f8a379849661:\n            return $1627905f8be2ef3f$export$1bb1140fe1358b00;\n        case $1627905f8be2ef3f$export$eb6c6d0b7c8826f2:\n            return $1627905f8be2ef3f$export$fb4028874a74450;\n        default:\n            return c;\n    }\n};\nconst $557adaaeb0c7885f$var$mapFirst = function(c) {\n    switch(c){\n        case $1627905f8be2ef3f$export$606cfc2a8896c91f:\n        case $1627905f8be2ef3f$export$e51d3c675bb0140d:\n            return $1627905f8be2ef3f$export$66498d28055820a9;\n        case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:\n            return $1627905f8be2ef3f$export$9e5d732f3676a9ba;\n        default:\n            return c;\n    }\n};\nclass $557adaaeb0c7885f$var$Break {\n    constructor(position, required = false){\n        this.position = position;\n        this.required = required;\n    }\n}\nclass $557adaaeb0c7885f$var$LineBreaker {\n    nextCodePoint() {\n        const code = this.string.charCodeAt(this.pos++);\n        const next = this.string.charCodeAt(this.pos);\n        // If a surrogate pair\n        if (0xd800 <= code && code <= 0xdbff && 0xdc00 <= next && next <= 0xdfff) {\n            this.pos++;\n            return (code - 0xd800) * 0x400 + (next - 0xdc00) + 0x10000;\n        }\n        return code;\n    }\n    nextCharClass() {\n        return $557adaaeb0c7885f$var$mapClass($557adaaeb0c7885f$var$classTrie.get(this.nextCodePoint()));\n    }\n    getSimpleBreak() {\n        // handle classes not handled by the pair table\n        switch(this.nextClass){\n            case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:\n                return false;\n            case $1627905f8be2ef3f$export$66498d28055820a9:\n            case $1627905f8be2ef3f$export$606cfc2a8896c91f:\n            case $1627905f8be2ef3f$export$e51d3c675bb0140d:\n                this.curClass = $1627905f8be2ef3f$export$66498d28055820a9;\n                return false;\n            case $1627905f8be2ef3f$export$de92be486109a1df:\n                this.curClass = $1627905f8be2ef3f$export$de92be486109a1df;\n                return false;\n        }\n        return null;\n    }\n    getPairTableBreak(lastClass) {\n        // if not handled already, use the pair table\n        let shouldBreak = false;\n        switch($32627af916ac1b00$export$5bdb8ccbf5c57afc[this.curClass][this.nextClass]){\n            case $32627af916ac1b00$export$98f50d781a474745:\n                shouldBreak = true;\n                break;\n            case $32627af916ac1b00$export$12ee1f8f5315ca7e:\n                shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;\n                break;\n            case $32627af916ac1b00$export$e4965ce242860454:\n                shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;\n                if (!shouldBreak) {\n                    shouldBreak = false;\n                    return shouldBreak;\n                }\n                break;\n            case $32627af916ac1b00$export$8f14048969dcd45e:\n                if (lastClass !== $1627905f8be2ef3f$export$c4c7eecbfed13dc9) return shouldBreak;\n                break;\n            case $32627af916ac1b00$export$133eb141bf58aff4:\n                break;\n        }\n        if (this.LB8a) shouldBreak = false;\n        // Rule LB21a\n        if (this.LB21a && (this.curClass === $1627905f8be2ef3f$export$24aa617c849a894a || this.curClass === $1627905f8be2ef3f$export$a73c4d14459b698d)) {\n            shouldBreak = false;\n            this.LB21a = false;\n        } else this.LB21a = this.curClass === $1627905f8be2ef3f$export$f3e416a182673355;\n        // Rule LB30a\n        if (this.curClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {\n            this.LB30a++;\n            if (this.LB30a == 2 && this.nextClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {\n                shouldBreak = true;\n                this.LB30a = 0;\n            }\n        } else this.LB30a = 0;\n        this.curClass = this.nextClass;\n        return shouldBreak;\n    }\n    nextBreak() {\n        // get the first char if we're at the beginning of the string\n        if (this.curClass == null) {\n            let firstClass = this.nextCharClass();\n            this.curClass = $557adaaeb0c7885f$var$mapFirst(firstClass);\n            this.nextClass = firstClass;\n            this.LB8a = firstClass === $1627905f8be2ef3f$export$30a74a373318dec6;\n            this.LB30a = 0;\n        }\n        while(this.pos < this.string.length){\n            this.lastPos = this.pos;\n            const lastClass = this.nextClass;\n            this.nextClass = this.nextCharClass();\n            // explicit newline\n            if (this.curClass === $1627905f8be2ef3f$export$66498d28055820a9 || this.curClass === $1627905f8be2ef3f$export$de92be486109a1df && this.nextClass !== $1627905f8be2ef3f$export$606cfc2a8896c91f) {\n                this.curClass = $557adaaeb0c7885f$var$mapFirst($557adaaeb0c7885f$var$mapClass(this.nextClass));\n                return new $557adaaeb0c7885f$var$Break(this.lastPos, true);\n            }\n            let shouldBreak = this.getSimpleBreak();\n            if (shouldBreak === null) shouldBreak = this.getPairTableBreak(lastClass);\n            // Rule LB8a\n            this.LB8a = this.nextClass === $1627905f8be2ef3f$export$30a74a373318dec6;\n            if (shouldBreak) return new $557adaaeb0c7885f$var$Break(this.lastPos);\n        }\n        if (this.lastPos < this.string.length) {\n            this.lastPos = this.string.length;\n            return new $557adaaeb0c7885f$var$Break(this.string.length);\n        }\n        return null;\n    }\n    constructor(string){\n        this.string = string;\n        this.pos = 0;\n        this.lastPos = 0;\n        this.curClass = null;\n        this.nextClass = null;\n        this.LB8a = false;\n        this.LB21a = false;\n        this.LB30a = 0;\n    }\n}\n$557adaaeb0c7885f$exports = $557adaaeb0c7885f$var$LineBreaker;\n\n\n\n//# sourceMappingURL=module.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/linebreak/dist/module.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/satori/dist/index.js":
/*!*******************************************!*\
  !*** ./node_modules/satori/dist/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ xl; },\n/* harmony export */   init: function() { return /* binding */ Bl; }\n/* harmony export */ });\n/* harmony import */ var linebreak__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! linebreak */ \"(app-pages-browser)/./node_modules/linebreak/dist/module.mjs\");\n/* harmony import */ var css_to_react_native__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! css-to-react-native */ \"(app-pages-browser)/./node_modules/css-to-react-native/index.js\");\n/* harmony import */ var css_background_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! css-background-parser */ \"(app-pages-browser)/./node_modules/css-background-parser/index.js\");\n/* harmony import */ var css_box_shadow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! css-box-shadow */ \"(app-pages-browser)/./node_modules/css-box-shadow/index.js\");\n/* harmony import */ var parse_css_color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! parse-css-color */ \"(app-pages-browser)/./node_modules/parse-css-color/dist/index.umd.js\");\n/* harmony import */ var postcss_value_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! postcss-value-parser */ \"(app-pages-browser)/./node_modules/postcss-value-parser/lib/index.js\");\n/* harmony import */ var escape_html__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! escape-html */ \"(app-pages-browser)/./node_modules/escape-html/index.js\");\n/* harmony import */ var _shuding_opentype_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @shuding/opentype.js */ \"(app-pages-browser)/./node_modules/@shuding/opentype.js/dist/opentype.module.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/process/browser.js\");\nvar _l=Object.create;var Br=Object.defineProperty;var Sl=Object.getOwnPropertyDescriptor;var kl=Object.getOwnPropertyNames;var Tl=Object.getPrototypeOf,Al=Object.prototype.hasOwnProperty;var vn=(e,t)=>()=>(e&&(t=e(e=0)),t);var T=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),yn=(e,t)=>{for(var n in t)Br(e,n,{get:t[n],enumerable:!0})},Go=(e,t,n,r)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let i of kl(t))!Al.call(e,i)&&i!==n&&Br(e,i,{get:()=>t[i],enumerable:!(r=Sl(t,i))||r.enumerable});return e};var Ol=(e,t,n)=>(n=e!=null?_l(Tl(e)):{},Go(t||!e||!e.__esModule?Br(n,\"default\",{value:e,enumerable:!0}):n,e)),Ir=e=>Go(Br({},\"__esModule\",{value:!0}),e);var jo={};yn(jo,{getYogaModule:()=>Pl});async function Pl(){let{default:e}=await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_yoga-wasm-web_dist_asm_js\").then(__webpack_require__.bind(__webpack_require__, /*! yoga-wasm-web/asm */ \"(app-pages-browser)/./node_modules/yoga-wasm-web/dist/asm.js\"));return e()}var Ho=vn(()=>{});var Xn=T(Yn=>{\"use strict\";Object.defineProperty(Yn,\"__esModule\",{value:!0});Object.defineProperty(Yn,\"default\",{enumerable:!0,get:()=>zf});function zf(e){if(e=`${e}`,e===\"0\")return\"0\";if(/^[+-]?(\\d+|\\d*\\.\\d+)(e[+-]?\\d+)?(%|\\w+)?$/.test(e))return e.replace(/^[+-]?/,t=>t===\"-\"?\"\":\"-\");if(e.includes(\"var(\")||e.includes(\"calc(\"))return`calc(${e} * -1)`}});var Wu=T(Qn=>{\"use strict\";Object.defineProperty(Qn,\"__esModule\",{value:!0});Object.defineProperty(Qn,\"default\",{enumerable:!0,get:()=>Gf});var Gf=[\"preflight\",\"container\",\"accessibility\",\"pointerEvents\",\"visibility\",\"position\",\"inset\",\"isolation\",\"zIndex\",\"order\",\"gridColumn\",\"gridColumnStart\",\"gridColumnEnd\",\"gridRow\",\"gridRowStart\",\"gridRowEnd\",\"float\",\"clear\",\"margin\",\"boxSizing\",\"display\",\"aspectRatio\",\"height\",\"maxHeight\",\"minHeight\",\"width\",\"minWidth\",\"maxWidth\",\"flex\",\"flexShrink\",\"flexGrow\",\"flexBasis\",\"tableLayout\",\"borderCollapse\",\"borderSpacing\",\"transformOrigin\",\"translate\",\"rotate\",\"skew\",\"scale\",\"transform\",\"animation\",\"cursor\",\"touchAction\",\"userSelect\",\"resize\",\"scrollSnapType\",\"scrollSnapAlign\",\"scrollSnapStop\",\"scrollMargin\",\"scrollPadding\",\"listStylePosition\",\"listStyleType\",\"appearance\",\"columns\",\"breakBefore\",\"breakInside\",\"breakAfter\",\"gridAutoColumns\",\"gridAutoFlow\",\"gridAutoRows\",\"gridTemplateColumns\",\"gridTemplateRows\",\"flexDirection\",\"flexWrap\",\"placeContent\",\"placeItems\",\"alignContent\",\"alignItems\",\"justifyContent\",\"justifyItems\",\"gap\",\"space\",\"divideWidth\",\"divideStyle\",\"divideColor\",\"divideOpacity\",\"placeSelf\",\"alignSelf\",\"justifySelf\",\"overflow\",\"overscrollBehavior\",\"scrollBehavior\",\"textOverflow\",\"whitespace\",\"wordBreak\",\"borderRadius\",\"borderWidth\",\"borderStyle\",\"borderColor\",\"borderOpacity\",\"backgroundColor\",\"backgroundOpacity\",\"backgroundImage\",\"gradientColorStops\",\"boxDecorationBreak\",\"backgroundSize\",\"backgroundAttachment\",\"backgroundClip\",\"backgroundPosition\",\"backgroundRepeat\",\"backgroundOrigin\",\"fill\",\"stroke\",\"strokeWidth\",\"objectFit\",\"objectPosition\",\"padding\",\"textAlign\",\"textIndent\",\"verticalAlign\",\"fontFamily\",\"fontSize\",\"fontWeight\",\"textTransform\",\"fontStyle\",\"fontVariantNumeric\",\"lineHeight\",\"letterSpacing\",\"textColor\",\"textOpacity\",\"textDecoration\",\"textDecorationColor\",\"textDecorationStyle\",\"textDecorationThickness\",\"textUnderlineOffset\",\"fontSmoothing\",\"placeholderColor\",\"placeholderOpacity\",\"caretColor\",\"accentColor\",\"opacity\",\"backgroundBlendMode\",\"mixBlendMode\",\"boxShadow\",\"boxShadowColor\",\"outlineStyle\",\"outlineWidth\",\"outlineOffset\",\"outlineColor\",\"ringWidth\",\"ringColor\",\"ringOpacity\",\"ringOffsetWidth\",\"ringOffsetColor\",\"blur\",\"brightness\",\"contrast\",\"dropShadow\",\"grayscale\",\"hueRotate\",\"invert\",\"saturate\",\"sepia\",\"filter\",\"backdropBlur\",\"backdropBrightness\",\"backdropContrast\",\"backdropGrayscale\",\"backdropHueRotate\",\"backdropInvert\",\"backdropOpacity\",\"backdropSaturate\",\"backdropSepia\",\"backdropFilter\",\"transitionProperty\",\"transitionDelay\",\"transitionDuration\",\"transitionTimingFunction\",\"willChange\",\"content\"]});var qu=T(Kn=>{\"use strict\";Object.defineProperty(Kn,\"__esModule\",{value:!0});Object.defineProperty(Kn,\"default\",{enumerable:!0,get:()=>jf});function jf(e,t){return e===void 0?t:Array.isArray(e)?e:[...new Set(t.filter(r=>e!==!1&&e[r]!==!1).concat(Object.keys(e).filter(r=>e[r]!==!1)))]}});var Jn=T((Kg,Uu)=>{Uu.exports={content:[],presets:[],darkMode:\"media\",theme:{screens:{sm:\"640px\",md:\"768px\",lg:\"1024px\",xl:\"1280px\",\"2xl\":\"1536px\"},colors:({colors:e})=>({inherit:e.inherit,current:e.current,transparent:e.transparent,black:e.black,white:e.white,slate:e.slate,gray:e.gray,zinc:e.zinc,neutral:e.neutral,stone:e.stone,red:e.red,orange:e.orange,amber:e.amber,yellow:e.yellow,lime:e.lime,green:e.green,emerald:e.emerald,teal:e.teal,cyan:e.cyan,sky:e.sky,blue:e.blue,indigo:e.indigo,violet:e.violet,purple:e.purple,fuchsia:e.fuchsia,pink:e.pink,rose:e.rose}),columns:{auto:\"auto\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\",8:\"8\",9:\"9\",10:\"10\",11:\"11\",12:\"12\",\"3xs\":\"16rem\",\"2xs\":\"18rem\",xs:\"20rem\",sm:\"24rem\",md:\"28rem\",lg:\"32rem\",xl:\"36rem\",\"2xl\":\"42rem\",\"3xl\":\"48rem\",\"4xl\":\"56rem\",\"5xl\":\"64rem\",\"6xl\":\"72rem\",\"7xl\":\"80rem\"},spacing:{px:\"1px\",0:\"0px\",.5:\"0.125rem\",1:\"0.25rem\",1.5:\"0.375rem\",2:\"0.5rem\",2.5:\"0.625rem\",3:\"0.75rem\",3.5:\"0.875rem\",4:\"1rem\",5:\"1.25rem\",6:\"1.5rem\",7:\"1.75rem\",8:\"2rem\",9:\"2.25rem\",10:\"2.5rem\",11:\"2.75rem\",12:\"3rem\",14:\"3.5rem\",16:\"4rem\",20:\"5rem\",24:\"6rem\",28:\"7rem\",32:\"8rem\",36:\"9rem\",40:\"10rem\",44:\"11rem\",48:\"12rem\",52:\"13rem\",56:\"14rem\",60:\"15rem\",64:\"16rem\",72:\"18rem\",80:\"20rem\",96:\"24rem\"},animation:{none:\"none\",spin:\"spin 1s linear infinite\",ping:\"ping 1s cubic-bezier(0, 0, 0.2, 1) infinite\",pulse:\"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",bounce:\"bounce 1s infinite\"},aspectRatio:{auto:\"auto\",square:\"1 / 1\",video:\"16 / 9\"},backdropBlur:({theme:e})=>e(\"blur\"),backdropBrightness:({theme:e})=>e(\"brightness\"),backdropContrast:({theme:e})=>e(\"contrast\"),backdropGrayscale:({theme:e})=>e(\"grayscale\"),backdropHueRotate:({theme:e})=>e(\"hueRotate\"),backdropInvert:({theme:e})=>e(\"invert\"),backdropOpacity:({theme:e})=>e(\"opacity\"),backdropSaturate:({theme:e})=>e(\"saturate\"),backdropSepia:({theme:e})=>e(\"sepia\"),backgroundColor:({theme:e})=>e(\"colors\"),backgroundImage:{none:\"none\",\"gradient-to-t\":\"linear-gradient(to top, var(--tw-gradient-stops))\",\"gradient-to-tr\":\"linear-gradient(to top right, var(--tw-gradient-stops))\",\"gradient-to-r\":\"linear-gradient(to right, var(--tw-gradient-stops))\",\"gradient-to-br\":\"linear-gradient(to bottom right, var(--tw-gradient-stops))\",\"gradient-to-b\":\"linear-gradient(to bottom, var(--tw-gradient-stops))\",\"gradient-to-bl\":\"linear-gradient(to bottom left, var(--tw-gradient-stops))\",\"gradient-to-l\":\"linear-gradient(to left, var(--tw-gradient-stops))\",\"gradient-to-tl\":\"linear-gradient(to top left, var(--tw-gradient-stops))\"},backgroundOpacity:({theme:e})=>e(\"opacity\"),backgroundPosition:{bottom:\"bottom\",center:\"center\",left:\"left\",\"left-bottom\":\"left bottom\",\"left-top\":\"left top\",right:\"right\",\"right-bottom\":\"right bottom\",\"right-top\":\"right top\",top:\"top\"},backgroundSize:{auto:\"auto\",cover:\"cover\",contain:\"contain\"},blur:{0:\"0\",none:\"0\",sm:\"4px\",DEFAULT:\"8px\",md:\"12px\",lg:\"16px\",xl:\"24px\",\"2xl\":\"40px\",\"3xl\":\"64px\"},brightness:{0:\"0\",50:\".5\",75:\".75\",90:\".9\",95:\".95\",100:\"1\",105:\"1.05\",110:\"1.1\",125:\"1.25\",150:\"1.5\",200:\"2\"},borderColor:({theme:e})=>({...e(\"colors\"),DEFAULT:e(\"colors.gray.200\",\"currentColor\")}),borderOpacity:({theme:e})=>e(\"opacity\"),borderRadius:{none:\"0px\",sm:\"0.125rem\",DEFAULT:\"0.25rem\",md:\"0.375rem\",lg:\"0.5rem\",xl:\"0.75rem\",\"2xl\":\"1rem\",\"3xl\":\"1.5rem\",full:\"9999px\"},borderSpacing:({theme:e})=>({...e(\"spacing\")}),borderWidth:{DEFAULT:\"1px\",0:\"0px\",2:\"2px\",4:\"4px\",8:\"8px\"},boxShadow:{sm:\"0 1px 2px 0 rgb(0 0 0 / 0.05)\",DEFAULT:\"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\",md:\"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\",lg:\"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\",xl:\"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\",\"2xl\":\"0 25px 50px -12px rgb(0 0 0 / 0.25)\",inner:\"inset 0 2px 4px 0 rgb(0 0 0 / 0.05)\",none:\"none\"},boxShadowColor:({theme:e})=>e(\"colors\"),caretColor:({theme:e})=>e(\"colors\"),accentColor:({theme:e})=>({...e(\"colors\"),auto:\"auto\"}),contrast:{0:\"0\",50:\".5\",75:\".75\",100:\"1\",125:\"1.25\",150:\"1.5\",200:\"2\"},container:{},content:{none:\"none\"},cursor:{auto:\"auto\",default:\"default\",pointer:\"pointer\",wait:\"wait\",text:\"text\",move:\"move\",help:\"help\",\"not-allowed\":\"not-allowed\",none:\"none\",\"context-menu\":\"context-menu\",progress:\"progress\",cell:\"cell\",crosshair:\"crosshair\",\"vertical-text\":\"vertical-text\",alias:\"alias\",copy:\"copy\",\"no-drop\":\"no-drop\",grab:\"grab\",grabbing:\"grabbing\",\"all-scroll\":\"all-scroll\",\"col-resize\":\"col-resize\",\"row-resize\":\"row-resize\",\"n-resize\":\"n-resize\",\"e-resize\":\"e-resize\",\"s-resize\":\"s-resize\",\"w-resize\":\"w-resize\",\"ne-resize\":\"ne-resize\",\"nw-resize\":\"nw-resize\",\"se-resize\":\"se-resize\",\"sw-resize\":\"sw-resize\",\"ew-resize\":\"ew-resize\",\"ns-resize\":\"ns-resize\",\"nesw-resize\":\"nesw-resize\",\"nwse-resize\":\"nwse-resize\",\"zoom-in\":\"zoom-in\",\"zoom-out\":\"zoom-out\"},divideColor:({theme:e})=>e(\"borderColor\"),divideOpacity:({theme:e})=>e(\"borderOpacity\"),divideWidth:({theme:e})=>e(\"borderWidth\"),dropShadow:{sm:\"0 1px 1px rgb(0 0 0 / 0.05)\",DEFAULT:[\"0 1px 2px rgb(0 0 0 / 0.1)\",\"0 1px 1px rgb(0 0 0 / 0.06)\"],md:[\"0 4px 3px rgb(0 0 0 / 0.07)\",\"0 2px 2px rgb(0 0 0 / 0.06)\"],lg:[\"0 10px 8px rgb(0 0 0 / 0.04)\",\"0 4px 3px rgb(0 0 0 / 0.1)\"],xl:[\"0 20px 13px rgb(0 0 0 / 0.03)\",\"0 8px 5px rgb(0 0 0 / 0.08)\"],\"2xl\":\"0 25px 25px rgb(0 0 0 / 0.15)\",none:\"0 0 #0000\"},fill:({theme:e})=>e(\"colors\"),grayscale:{0:\"0\",DEFAULT:\"100%\"},hueRotate:{0:\"0deg\",15:\"15deg\",30:\"30deg\",60:\"60deg\",90:\"90deg\",180:\"180deg\"},invert:{0:\"0\",DEFAULT:\"100%\"},flex:{1:\"1 1 0%\",auto:\"1 1 auto\",initial:\"0 1 auto\",none:\"none\"},flexBasis:({theme:e})=>({auto:\"auto\",...e(\"spacing\"),\"1/2\":\"50%\",\"1/3\":\"33.333333%\",\"2/3\":\"66.666667%\",\"1/4\":\"25%\",\"2/4\":\"50%\",\"3/4\":\"75%\",\"1/5\":\"20%\",\"2/5\":\"40%\",\"3/5\":\"60%\",\"4/5\":\"80%\",\"1/6\":\"16.666667%\",\"2/6\":\"33.333333%\",\"3/6\":\"50%\",\"4/6\":\"66.666667%\",\"5/6\":\"83.333333%\",\"1/12\":\"8.333333%\",\"2/12\":\"16.666667%\",\"3/12\":\"25%\",\"4/12\":\"33.333333%\",\"5/12\":\"41.666667%\",\"6/12\":\"50%\",\"7/12\":\"58.333333%\",\"8/12\":\"66.666667%\",\"9/12\":\"75%\",\"10/12\":\"83.333333%\",\"11/12\":\"91.666667%\",full:\"100%\"}),flexGrow:{0:\"0\",DEFAULT:\"1\"},flexShrink:{0:\"0\",DEFAULT:\"1\"},fontFamily:{sans:[\"ui-sans-serif\",\"system-ui\",\"-apple-system\",\"BlinkMacSystemFont\",'\"Segoe UI\"',\"Roboto\",'\"Helvetica Neue\"',\"Arial\",'\"Noto Sans\"',\"sans-serif\",'\"Apple Color Emoji\"','\"Segoe UI Emoji\"','\"Segoe UI Symbol\"','\"Noto Color Emoji\"'],serif:[\"ui-serif\",\"Georgia\",\"Cambria\",'\"Times New Roman\"',\"Times\",\"serif\"],mono:[\"ui-monospace\",\"SFMono-Regular\",\"Menlo\",\"Monaco\",\"Consolas\",'\"Liberation Mono\"','\"Courier New\"',\"monospace\"]},fontSize:{xs:[\"0.75rem\",{lineHeight:\"1rem\"}],sm:[\"0.875rem\",{lineHeight:\"1.25rem\"}],base:[\"1rem\",{lineHeight:\"1.5rem\"}],lg:[\"1.125rem\",{lineHeight:\"1.75rem\"}],xl:[\"1.25rem\",{lineHeight:\"1.75rem\"}],\"2xl\":[\"1.5rem\",{lineHeight:\"2rem\"}],\"3xl\":[\"1.875rem\",{lineHeight:\"2.25rem\"}],\"4xl\":[\"2.25rem\",{lineHeight:\"2.5rem\"}],\"5xl\":[\"3rem\",{lineHeight:\"1\"}],\"6xl\":[\"3.75rem\",{lineHeight:\"1\"}],\"7xl\":[\"4.5rem\",{lineHeight:\"1\"}],\"8xl\":[\"6rem\",{lineHeight:\"1\"}],\"9xl\":[\"8rem\",{lineHeight:\"1\"}]},fontWeight:{thin:\"100\",extralight:\"200\",light:\"300\",normal:\"400\",medium:\"500\",semibold:\"600\",bold:\"700\",extrabold:\"800\",black:\"900\"},gap:({theme:e})=>e(\"spacing\"),gradientColorStops:({theme:e})=>e(\"colors\"),gridAutoColumns:{auto:\"auto\",min:\"min-content\",max:\"max-content\",fr:\"minmax(0, 1fr)\"},gridAutoRows:{auto:\"auto\",min:\"min-content\",max:\"max-content\",fr:\"minmax(0, 1fr)\"},gridColumn:{auto:\"auto\",\"span-1\":\"span 1 / span 1\",\"span-2\":\"span 2 / span 2\",\"span-3\":\"span 3 / span 3\",\"span-4\":\"span 4 / span 4\",\"span-5\":\"span 5 / span 5\",\"span-6\":\"span 6 / span 6\",\"span-7\":\"span 7 / span 7\",\"span-8\":\"span 8 / span 8\",\"span-9\":\"span 9 / span 9\",\"span-10\":\"span 10 / span 10\",\"span-11\":\"span 11 / span 11\",\"span-12\":\"span 12 / span 12\",\"span-full\":\"1 / -1\"},gridColumnEnd:{auto:\"auto\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\",8:\"8\",9:\"9\",10:\"10\",11:\"11\",12:\"12\",13:\"13\"},gridColumnStart:{auto:\"auto\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\",8:\"8\",9:\"9\",10:\"10\",11:\"11\",12:\"12\",13:\"13\"},gridRow:{auto:\"auto\",\"span-1\":\"span 1 / span 1\",\"span-2\":\"span 2 / span 2\",\"span-3\":\"span 3 / span 3\",\"span-4\":\"span 4 / span 4\",\"span-5\":\"span 5 / span 5\",\"span-6\":\"span 6 / span 6\",\"span-full\":\"1 / -1\"},gridRowStart:{auto:\"auto\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\"},gridRowEnd:{auto:\"auto\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\"},gridTemplateColumns:{none:\"none\",1:\"repeat(1, minmax(0, 1fr))\",2:\"repeat(2, minmax(0, 1fr))\",3:\"repeat(3, minmax(0, 1fr))\",4:\"repeat(4, minmax(0, 1fr))\",5:\"repeat(5, minmax(0, 1fr))\",6:\"repeat(6, minmax(0, 1fr))\",7:\"repeat(7, minmax(0, 1fr))\",8:\"repeat(8, minmax(0, 1fr))\",9:\"repeat(9, minmax(0, 1fr))\",10:\"repeat(10, minmax(0, 1fr))\",11:\"repeat(11, minmax(0, 1fr))\",12:\"repeat(12, minmax(0, 1fr))\"},gridTemplateRows:{none:\"none\",1:\"repeat(1, minmax(0, 1fr))\",2:\"repeat(2, minmax(0, 1fr))\",3:\"repeat(3, minmax(0, 1fr))\",4:\"repeat(4, minmax(0, 1fr))\",5:\"repeat(5, minmax(0, 1fr))\",6:\"repeat(6, minmax(0, 1fr))\"},height:({theme:e})=>({auto:\"auto\",...e(\"spacing\"),\"1/2\":\"50%\",\"1/3\":\"33.333333%\",\"2/3\":\"66.666667%\",\"1/4\":\"25%\",\"2/4\":\"50%\",\"3/4\":\"75%\",\"1/5\":\"20%\",\"2/5\":\"40%\",\"3/5\":\"60%\",\"4/5\":\"80%\",\"1/6\":\"16.666667%\",\"2/6\":\"33.333333%\",\"3/6\":\"50%\",\"4/6\":\"66.666667%\",\"5/6\":\"83.333333%\",full:\"100%\",screen:\"100vh\",min:\"min-content\",max:\"max-content\",fit:\"fit-content\"}),inset:({theme:e})=>({auto:\"auto\",...e(\"spacing\"),\"1/2\":\"50%\",\"1/3\":\"33.333333%\",\"2/3\":\"66.666667%\",\"1/4\":\"25%\",\"2/4\":\"50%\",\"3/4\":\"75%\",full:\"100%\"}),keyframes:{spin:{to:{transform:\"rotate(360deg)\"}},ping:{\"75%, 100%\":{transform:\"scale(2)\",opacity:\"0\"}},pulse:{\"50%\":{opacity:\".5\"}},bounce:{\"0%, 100%\":{transform:\"translateY(-25%)\",animationTimingFunction:\"cubic-bezier(0.8,0,1,1)\"},\"50%\":{transform:\"none\",animationTimingFunction:\"cubic-bezier(0,0,0.2,1)\"}}},letterSpacing:{tighter:\"-0.05em\",tight:\"-0.025em\",normal:\"0em\",wide:\"0.025em\",wider:\"0.05em\",widest:\"0.1em\"},lineHeight:{none:\"1\",tight:\"1.25\",snug:\"1.375\",normal:\"1.5\",relaxed:\"1.625\",loose:\"2\",3:\".75rem\",4:\"1rem\",5:\"1.25rem\",6:\"1.5rem\",7:\"1.75rem\",8:\"2rem\",9:\"2.25rem\",10:\"2.5rem\"},listStyleType:{none:\"none\",disc:\"disc\",decimal:\"decimal\"},margin:({theme:e})=>({auto:\"auto\",...e(\"spacing\")}),maxHeight:({theme:e})=>({...e(\"spacing\"),full:\"100%\",screen:\"100vh\",min:\"min-content\",max:\"max-content\",fit:\"fit-content\"}),maxWidth:({theme:e,breakpoints:t})=>({none:\"none\",0:\"0rem\",xs:\"20rem\",sm:\"24rem\",md:\"28rem\",lg:\"32rem\",xl:\"36rem\",\"2xl\":\"42rem\",\"3xl\":\"48rem\",\"4xl\":\"56rem\",\"5xl\":\"64rem\",\"6xl\":\"72rem\",\"7xl\":\"80rem\",full:\"100%\",min:\"min-content\",max:\"max-content\",fit:\"fit-content\",prose:\"65ch\",...t(e(\"screens\"))}),minHeight:{0:\"0px\",full:\"100%\",screen:\"100vh\",min:\"min-content\",max:\"max-content\",fit:\"fit-content\"},minWidth:{0:\"0px\",full:\"100%\",min:\"min-content\",max:\"max-content\",fit:\"fit-content\"},objectPosition:{bottom:\"bottom\",center:\"center\",left:\"left\",\"left-bottom\":\"left bottom\",\"left-top\":\"left top\",right:\"right\",\"right-bottom\":\"right bottom\",\"right-top\":\"right top\",top:\"top\"},opacity:{0:\"0\",5:\"0.05\",10:\"0.1\",20:\"0.2\",25:\"0.25\",30:\"0.3\",40:\"0.4\",50:\"0.5\",60:\"0.6\",70:\"0.7\",75:\"0.75\",80:\"0.8\",90:\"0.9\",95:\"0.95\",100:\"1\"},order:{first:\"-9999\",last:\"9999\",none:\"0\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\",8:\"8\",9:\"9\",10:\"10\",11:\"11\",12:\"12\"},padding:({theme:e})=>e(\"spacing\"),placeholderColor:({theme:e})=>e(\"colors\"),placeholderOpacity:({theme:e})=>e(\"opacity\"),outlineColor:({theme:e})=>e(\"colors\"),outlineOffset:{0:\"0px\",1:\"1px\",2:\"2px\",4:\"4px\",8:\"8px\"},outlineWidth:{0:\"0px\",1:\"1px\",2:\"2px\",4:\"4px\",8:\"8px\"},ringColor:({theme:e})=>({DEFAULT:e(\"colors.blue.500\",\"#3b82f6\"),...e(\"colors\")}),ringOffsetColor:({theme:e})=>e(\"colors\"),ringOffsetWidth:{0:\"0px\",1:\"1px\",2:\"2px\",4:\"4px\",8:\"8px\"},ringOpacity:({theme:e})=>({DEFAULT:\"0.5\",...e(\"opacity\")}),ringWidth:{DEFAULT:\"3px\",0:\"0px\",1:\"1px\",2:\"2px\",4:\"4px\",8:\"8px\"},rotate:{0:\"0deg\",1:\"1deg\",2:\"2deg\",3:\"3deg\",6:\"6deg\",12:\"12deg\",45:\"45deg\",90:\"90deg\",180:\"180deg\"},saturate:{0:\"0\",50:\".5\",100:\"1\",150:\"1.5\",200:\"2\"},scale:{0:\"0\",50:\".5\",75:\".75\",90:\".9\",95:\".95\",100:\"1\",105:\"1.05\",110:\"1.1\",125:\"1.25\",150:\"1.5\"},scrollMargin:({theme:e})=>({...e(\"spacing\")}),scrollPadding:({theme:e})=>e(\"spacing\"),sepia:{0:\"0\",DEFAULT:\"100%\"},skew:{0:\"0deg\",1:\"1deg\",2:\"2deg\",3:\"3deg\",6:\"6deg\",12:\"12deg\"},space:({theme:e})=>({...e(\"spacing\")}),stroke:({theme:e})=>e(\"colors\"),strokeWidth:{0:\"0\",1:\"1\",2:\"2\"},textColor:({theme:e})=>e(\"colors\"),textDecorationColor:({theme:e})=>e(\"colors\"),textDecorationThickness:{auto:\"auto\",\"from-font\":\"from-font\",0:\"0px\",1:\"1px\",2:\"2px\",4:\"4px\",8:\"8px\"},textUnderlineOffset:{auto:\"auto\",0:\"0px\",1:\"1px\",2:\"2px\",4:\"4px\",8:\"8px\"},textIndent:({theme:e})=>({...e(\"spacing\")}),textOpacity:({theme:e})=>e(\"opacity\"),transformOrigin:{center:\"center\",top:\"top\",\"top-right\":\"top right\",right:\"right\",\"bottom-right\":\"bottom right\",bottom:\"bottom\",\"bottom-left\":\"bottom left\",left:\"left\",\"top-left\":\"top left\"},transitionDelay:{75:\"75ms\",100:\"100ms\",150:\"150ms\",200:\"200ms\",300:\"300ms\",500:\"500ms\",700:\"700ms\",1e3:\"1000ms\"},transitionDuration:{DEFAULT:\"150ms\",75:\"75ms\",100:\"100ms\",150:\"150ms\",200:\"200ms\",300:\"300ms\",500:\"500ms\",700:\"700ms\",1e3:\"1000ms\"},transitionProperty:{none:\"none\",all:\"all\",DEFAULT:\"color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter\",colors:\"color, background-color, border-color, text-decoration-color, fill, stroke\",opacity:\"opacity\",shadow:\"box-shadow\",transform:\"transform\"},transitionTimingFunction:{DEFAULT:\"cubic-bezier(0.4, 0, 0.2, 1)\",linear:\"linear\",in:\"cubic-bezier(0.4, 0, 1, 1)\",out:\"cubic-bezier(0, 0, 0.2, 1)\",\"in-out\":\"cubic-bezier(0.4, 0, 0.2, 1)\"},translate:({theme:e})=>({...e(\"spacing\"),\"1/2\":\"50%\",\"1/3\":\"33.333333%\",\"2/3\":\"66.666667%\",\"1/4\":\"25%\",\"2/4\":\"50%\",\"3/4\":\"75%\",full:\"100%\"}),width:({theme:e})=>({auto:\"auto\",...e(\"spacing\"),\"1/2\":\"50%\",\"1/3\":\"33.333333%\",\"2/3\":\"66.666667%\",\"1/4\":\"25%\",\"2/4\":\"50%\",\"3/4\":\"75%\",\"1/5\":\"20%\",\"2/5\":\"40%\",\"3/5\":\"60%\",\"4/5\":\"80%\",\"1/6\":\"16.666667%\",\"2/6\":\"33.333333%\",\"3/6\":\"50%\",\"4/6\":\"66.666667%\",\"5/6\":\"83.333333%\",\"1/12\":\"8.333333%\",\"2/12\":\"16.666667%\",\"3/12\":\"25%\",\"4/12\":\"33.333333%\",\"5/12\":\"41.666667%\",\"6/12\":\"50%\",\"7/12\":\"58.333333%\",\"8/12\":\"66.666667%\",\"9/12\":\"75%\",\"10/12\":\"83.333333%\",\"11/12\":\"91.666667%\",full:\"100%\",screen:\"100vw\",min:\"min-content\",max:\"max-content\",fit:\"fit-content\"}),willChange:{auto:\"auto\",scroll:\"scroll-position\",contents:\"contents\",transform:\"transform\"},zIndex:{auto:\"auto\",0:\"0\",10:\"10\",20:\"20\",30:\"30\",40:\"40\",50:\"50\"}},variantOrder:[\"first\",\"last\",\"odd\",\"even\",\"visited\",\"checked\",\"empty\",\"read-only\",\"group-hover\",\"group-focus\",\"focus-within\",\"hover\",\"focus\",\"focus-visible\",\"active\",\"disabled\"],plugins:[]}});var Xr={};yn(Xr,{default:()=>Hf});var Hf,Qr=vn(()=>{Hf={info(e,t){console.info(...Array.isArray(e)?[e]:[t,e])},warn(e,t){console.warn(...Array.isArray(e)?[e]:[t,e])},risk(e,t){console.error(...Array.isArray(e)?[e]:[t,e])}}});var zu=T(Zn=>{\"use strict\";Object.defineProperty(Zn,\"__esModule\",{value:!0});Object.defineProperty(Zn,\"default\",{enumerable:!0,get:()=>Xf});var Vf=Yf((Qr(),Ir(Xr)));function Yf(e){return e&&e.__esModule?e:{default:e}}function Gt({version:e,from:t,to:n}){Vf.default.warn(`${t}-color-renamed`,[`As of Tailwind CSS ${e}, \\`${t}\\` has been renamed to \\`${n}\\`.`,\"Update your configuration file to silence this warning.\"])}var Xf={inherit:\"inherit\",current:\"currentColor\",transparent:\"transparent\",black:\"#000\",white:\"#fff\",slate:{50:\"#f8fafc\",100:\"#f1f5f9\",200:\"#e2e8f0\",300:\"#cbd5e1\",400:\"#94a3b8\",500:\"#64748b\",600:\"#475569\",700:\"#334155\",800:\"#1e293b\",900:\"#0f172a\"},gray:{50:\"#f9fafb\",100:\"#f3f4f6\",200:\"#e5e7eb\",300:\"#d1d5db\",400:\"#9ca3af\",500:\"#6b7280\",600:\"#4b5563\",700:\"#374151\",800:\"#1f2937\",900:\"#111827\"},zinc:{50:\"#fafafa\",100:\"#f4f4f5\",200:\"#e4e4e7\",300:\"#d4d4d8\",400:\"#a1a1aa\",500:\"#71717a\",600:\"#52525b\",700:\"#3f3f46\",800:\"#27272a\",900:\"#18181b\"},neutral:{50:\"#fafafa\",100:\"#f5f5f5\",200:\"#e5e5e5\",300:\"#d4d4d4\",400:\"#a3a3a3\",500:\"#737373\",600:\"#525252\",700:\"#404040\",800:\"#262626\",900:\"#171717\"},stone:{50:\"#fafaf9\",100:\"#f5f5f4\",200:\"#e7e5e4\",300:\"#d6d3d1\",400:\"#a8a29e\",500:\"#78716c\",600:\"#57534e\",700:\"#44403c\",800:\"#292524\",900:\"#1c1917\"},red:{50:\"#fef2f2\",100:\"#fee2e2\",200:\"#fecaca\",300:\"#fca5a5\",400:\"#f87171\",500:\"#ef4444\",600:\"#dc2626\",700:\"#b91c1c\",800:\"#991b1b\",900:\"#7f1d1d\"},orange:{50:\"#fff7ed\",100:\"#ffedd5\",200:\"#fed7aa\",300:\"#fdba74\",400:\"#fb923c\",500:\"#f97316\",600:\"#ea580c\",700:\"#c2410c\",800:\"#9a3412\",900:\"#7c2d12\"},amber:{50:\"#fffbeb\",100:\"#fef3c7\",200:\"#fde68a\",300:\"#fcd34d\",400:\"#fbbf24\",500:\"#f59e0b\",600:\"#d97706\",700:\"#b45309\",800:\"#92400e\",900:\"#78350f\"},yellow:{50:\"#fefce8\",100:\"#fef9c3\",200:\"#fef08a\",300:\"#fde047\",400:\"#facc15\",500:\"#eab308\",600:\"#ca8a04\",700:\"#a16207\",800:\"#854d0e\",900:\"#713f12\"},lime:{50:\"#f7fee7\",100:\"#ecfccb\",200:\"#d9f99d\",300:\"#bef264\",400:\"#a3e635\",500:\"#84cc16\",600:\"#65a30d\",700:\"#4d7c0f\",800:\"#3f6212\",900:\"#365314\"},green:{50:\"#f0fdf4\",100:\"#dcfce7\",200:\"#bbf7d0\",300:\"#86efac\",400:\"#4ade80\",500:\"#22c55e\",600:\"#16a34a\",700:\"#15803d\",800:\"#166534\",900:\"#14532d\"},emerald:{50:\"#ecfdf5\",100:\"#d1fae5\",200:\"#a7f3d0\",300:\"#6ee7b7\",400:\"#34d399\",500:\"#10b981\",600:\"#059669\",700:\"#047857\",800:\"#065f46\",900:\"#064e3b\"},teal:{50:\"#f0fdfa\",100:\"#ccfbf1\",200:\"#99f6e4\",300:\"#5eead4\",400:\"#2dd4bf\",500:\"#14b8a6\",600:\"#0d9488\",700:\"#0f766e\",800:\"#115e59\",900:\"#134e4a\"},cyan:{50:\"#ecfeff\",100:\"#cffafe\",200:\"#a5f3fc\",300:\"#67e8f9\",400:\"#22d3ee\",500:\"#06b6d4\",600:\"#0891b2\",700:\"#0e7490\",800:\"#155e75\",900:\"#164e63\"},sky:{50:\"#f0f9ff\",100:\"#e0f2fe\",200:\"#bae6fd\",300:\"#7dd3fc\",400:\"#38bdf8\",500:\"#0ea5e9\",600:\"#0284c7\",700:\"#0369a1\",800:\"#075985\",900:\"#0c4a6e\"},blue:{50:\"#eff6ff\",100:\"#dbeafe\",200:\"#bfdbfe\",300:\"#93c5fd\",400:\"#60a5fa\",500:\"#3b82f6\",600:\"#2563eb\",700:\"#1d4ed8\",800:\"#1e40af\",900:\"#1e3a8a\"},indigo:{50:\"#eef2ff\",100:\"#e0e7ff\",200:\"#c7d2fe\",300:\"#a5b4fc\",400:\"#818cf8\",500:\"#6366f1\",600:\"#4f46e5\",700:\"#4338ca\",800:\"#3730a3\",900:\"#312e81\"},violet:{50:\"#f5f3ff\",100:\"#ede9fe\",200:\"#ddd6fe\",300:\"#c4b5fd\",400:\"#a78bfa\",500:\"#8b5cf6\",600:\"#7c3aed\",700:\"#6d28d9\",800:\"#5b21b6\",900:\"#4c1d95\"},purple:{50:\"#faf5ff\",100:\"#f3e8ff\",200:\"#e9d5ff\",300:\"#d8b4fe\",400:\"#c084fc\",500:\"#a855f7\",600:\"#9333ea\",700:\"#7e22ce\",800:\"#6b21a8\",900:\"#581c87\"},fuchsia:{50:\"#fdf4ff\",100:\"#fae8ff\",200:\"#f5d0fe\",300:\"#f0abfc\",400:\"#e879f9\",500:\"#d946ef\",600:\"#c026d3\",700:\"#a21caf\",800:\"#86198f\",900:\"#701a75\"},pink:{50:\"#fdf2f8\",100:\"#fce7f3\",200:\"#fbcfe8\",300:\"#f9a8d4\",400:\"#f472b6\",500:\"#ec4899\",600:\"#db2777\",700:\"#be185d\",800:\"#9d174d\",900:\"#831843\"},rose:{50:\"#fff1f2\",100:\"#ffe4e6\",200:\"#fecdd3\",300:\"#fda4af\",400:\"#fb7185\",500:\"#f43f5e\",600:\"#e11d48\",700:\"#be123c\",800:\"#9f1239\",900:\"#881337\"},get lightBlue(){return Gt({version:\"v2.2\",from:\"lightBlue\",to:\"sky\"}),this.sky},get warmGray(){return Gt({version:\"v3.0\",from:\"warmGray\",to:\"stone\"}),this.stone},get trueGray(){return Gt({version:\"v3.0\",from:\"trueGray\",to:\"neutral\"}),this.neutral},get coolGray(){return Gt({version:\"v3.0\",from:\"coolGray\",to:\"gray\"}),this.gray},get blueGray(){return Gt({version:\"v3.0\",from:\"blueGray\",to:\"slate\"}),this.slate}}});var Gu=T(ei=>{\"use strict\";Object.defineProperty(ei,\"__esModule\",{value:!0});Object.defineProperty(ei,\"defaults\",{enumerable:!0,get:()=>Qf});function Qf(e,...t){for(let i of t){for(let o in i){var n;!(e==null||(n=e.hasOwnProperty)===null||n===void 0)&&n.call(e,o)||(e[o]=i[o])}for(let o of Object.getOwnPropertySymbols(i)){var r;!(e==null||(r=e.hasOwnProperty)===null||r===void 0)&&r.call(e,o)||(e[o]=i[o])}}return e}});var ju=T(ti=>{\"use strict\";Object.defineProperty(ti,\"__esModule\",{value:!0});Object.defineProperty(ti,\"toPath\",{enumerable:!0,get:()=>Kf});function Kf(e){if(Array.isArray(e))return e;let t=e.split(\"[\").length-1,n=e.split(\"]\").length-1;if(t!==n)throw new Error(`Path is invalid. Has unbalanced brackets: ${e}`);return e.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean)}});var Vu=T(ri=>{\"use strict\";Object.defineProperty(ri,\"__esModule\",{value:!0});Object.defineProperty(ri,\"normalizeConfig\",{enumerable:!0,get:()=>Zf});var jt=Jf((Qr(),Ir(Xr)));function Hu(e){if(typeof WeakMap!=\"function\")return null;var t=new WeakMap,n=new WeakMap;return(Hu=function(r){return r?n:t})(e)}function Jf(e,t){if(!t&&e&&e.__esModule)return e;if(e===null||typeof e!=\"object\"&&typeof e!=\"function\")return{default:e};var n=Hu(t);if(n&&n.has(e))return n.get(e);var r={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(o!==\"default\"&&Object.prototype.hasOwnProperty.call(e,o)){var u=i?Object.getOwnPropertyDescriptor(e,o):null;u&&(u.get||u.set)?Object.defineProperty(r,o,u):r[o]=e[o]}return r.default=e,n&&n.set(e,r),r}function Zf(e){if((()=>{if(e.purge||!e.content||!Array.isArray(e.content)&&!(typeof e.content==\"object\"&&e.content!==null))return!1;if(Array.isArray(e.content))return e.content.every(r=>typeof r==\"string\"?!0:!(typeof(r==null?void 0:r.raw)!=\"string\"||r!=null&&r.extension&&typeof(r==null?void 0:r.extension)!=\"string\"));if(typeof e.content==\"object\"&&e.content!==null){if(Object.keys(e.content).some(r=>![\"files\",\"extract\",\"transform\"].includes(r)))return!1;if(Array.isArray(e.content.files)){if(!e.content.files.every(r=>typeof r==\"string\"?!0:!(typeof(r==null?void 0:r.raw)!=\"string\"||r!=null&&r.extension&&typeof(r==null?void 0:r.extension)!=\"string\")))return!1;if(typeof e.content.extract==\"object\"){for(let r of Object.values(e.content.extract))if(typeof r!=\"function\")return!1}else if(!(e.content.extract===void 0||typeof e.content.extract==\"function\"))return!1;if(typeof e.content.transform==\"object\"){for(let r of Object.values(e.content.transform))if(typeof r!=\"function\")return!1}else if(!(e.content.transform===void 0||typeof e.content.transform==\"function\"))return!1}return!0}return!1})()||jt.default.warn(\"purge-deprecation\",[\"The `purge`/`content` options have changed in Tailwind CSS v3.0.\",\"Update your configuration file to eliminate this warning.\",\"https://tailwindcss.com/docs/upgrade-guide#configure-content-sources\"]),e.safelist=(()=>{var r;let{content:i,purge:o,safelist:u}=e;return Array.isArray(u)?u:Array.isArray(i==null?void 0:i.safelist)?i.safelist:Array.isArray(o==null?void 0:o.safelist)?o.safelist:Array.isArray(o==null||(r=o.options)===null||r===void 0?void 0:r.safelist)?o.options.safelist:[]})(),typeof e.prefix==\"function\")jt.default.warn(\"prefix-function\",[\"As of Tailwind CSS v3.0, `prefix` cannot be a function.\",\"Update `prefix` in your configuration to be a string to eliminate this warning.\",\"https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function\"]),e.prefix=\"\";else{var n;e.prefix=(n=e.prefix)!==null&&n!==void 0?n:\"\"}e.content={files:(()=>{let{content:r,purge:i}=e;return Array.isArray(i)?i:Array.isArray(i==null?void 0:i.content)?i.content:Array.isArray(r)?r:Array.isArray(r==null?void 0:r.content)?r.content:Array.isArray(r==null?void 0:r.files)?r.files:[]})(),extract:(()=>{let r=(()=>{var u,s,a,l,f,c,p,h,d,m;return!((u=e.purge)===null||u===void 0)&&u.extract?e.purge.extract:!((s=e.content)===null||s===void 0)&&s.extract?e.content.extract:!((a=e.purge)===null||a===void 0||(l=a.extract)===null||l===void 0)&&l.DEFAULT?e.purge.extract.DEFAULT:!((f=e.content)===null||f===void 0||(c=f.extract)===null||c===void 0)&&c.DEFAULT?e.content.extract.DEFAULT:!((p=e.purge)===null||p===void 0||(h=p.options)===null||h===void 0)&&h.extractors?e.purge.options.extractors:!((d=e.content)===null||d===void 0||(m=d.options)===null||m===void 0)&&m.extractors?e.content.options.extractors:{}})(),i={},o=(()=>{var u,s,a,l;if(!((u=e.purge)===null||u===void 0||(s=u.options)===null||s===void 0)&&s.defaultExtractor)return e.purge.options.defaultExtractor;if(!((a=e.content)===null||a===void 0||(l=a.options)===null||l===void 0)&&l.defaultExtractor)return e.content.options.defaultExtractor})();if(o!==void 0&&(i.DEFAULT=o),typeof r==\"function\")i.DEFAULT=r;else if(Array.isArray(r))for(let{extensions:u,extractor:s}of r??[])for(let a of u)i[a]=s;else typeof r==\"object\"&&r!==null&&Object.assign(i,r);return i})(),transform:(()=>{let r=(()=>{var o,u,s,a,l,f;return!((o=e.purge)===null||o===void 0)&&o.transform?e.purge.transform:!((u=e.content)===null||u===void 0)&&u.transform?e.content.transform:!((s=e.purge)===null||s===void 0||(a=s.transform)===null||a===void 0)&&a.DEFAULT?e.purge.transform.DEFAULT:!((l=e.content)===null||l===void 0||(f=l.transform)===null||f===void 0)&&f.DEFAULT?e.content.transform.DEFAULT:{}})(),i={};return typeof r==\"function\"&&(i.DEFAULT=r),typeof r==\"object\"&&r!==null&&Object.assign(i,r),i})()};for(let r of e.content.files)if(typeof r==\"string\"&&/{([^,]*?)}/g.test(r)){jt.default.warn(\"invalid-glob-braces\",[`The glob pattern ${(0,jt.dim)(r)} in your Tailwind CSS configuration is invalid.`,`Update it to ${(0,jt.dim)(r.replace(/{([^,]*?)}/g,\"$1\"))} to silence this warning.`]);break}return e}});var Yu=T(ni=>{\"use strict\";Object.defineProperty(ni,\"__esModule\",{value:!0});Object.defineProperty(ni,\"default\",{enumerable:!0,get:()=>ec});function ec(e){if(Object.prototype.toString.call(e)!==\"[object Object]\")return!1;let t=Object.getPrototypeOf(e);return t===null||t===Object.prototype}});var Xu=T(oi=>{\"use strict\";Object.defineProperty(oi,\"__esModule\",{value:!0});Object.defineProperty(oi,\"cloneDeep\",{enumerable:!0,get:()=>ii});function ii(e){return Array.isArray(e)?e.map(t=>ii(t)):typeof e==\"object\"&&e!==null?Object.fromEntries(Object.entries(e).map(([t,n])=>[t,ii(n)])):e}});var ui=T((Kr,Qu)=>{\"use strict\";Kr.__esModule=!0;Kr.default=nc;function tc(e){for(var t=e.toLowerCase(),n=\"\",r=!1,i=0;i<6&&t[i]!==void 0;i++){var o=t.charCodeAt(i),u=o>=97&&o<=102||o>=48&&o<=57;if(r=o===32,!u)break;n+=t[i]}if(n.length!==0){var s=parseInt(n,16),a=s>=55296&&s<=57343;return a||s===0||s>1114111?[\"\\uFFFD\",n.length+(r?1:0)]:[String.fromCodePoint(s),n.length+(r?1:0)]}}var rc=/\\\\/;function nc(e){var t=rc.test(e);if(!t)return e;for(var n=\"\",r=0;r<e.length;r++){if(e[r]===\"\\\\\"){var i=tc(e.slice(r+1,r+7));if(i!==void 0){n+=i[0],r+=i[1];continue}if(e[r+1]===\"\\\\\"){n+=\"\\\\\",r++;continue}e.length===r+1&&(n+=e[r]);continue}n+=e[r]}return n}Qu.exports=Kr.default});var Ju=T((Jr,Ku)=>{\"use strict\";Jr.__esModule=!0;Jr.default=ic;function ic(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(;n.length>0;){var i=n.shift();if(!e[i])return;e=e[i]}return e}Ku.exports=Jr.default});var es=T((Zr,Zu)=>{\"use strict\";Zr.__esModule=!0;Zr.default=oc;function oc(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(;n.length>0;){var i=n.shift();e[i]||(e[i]={}),e=e[i]}}Zu.exports=Zr.default});var rs=T((en,ts)=>{\"use strict\";en.__esModule=!0;en.default=uc;function uc(e){for(var t=\"\",n=e.indexOf(\"/*\"),r=0;n>=0;){t=t+e.slice(r,n);var i=e.indexOf(\"*/\",n+2);if(i<0)return t;r=i+2,n=e.indexOf(\"/*\",r)}return t=t+e.slice(r),t}ts.exports=en.default});var Ht=T(Le=>{\"use strict\";Le.__esModule=!0;Le.stripComments=Le.ensureObject=Le.getProp=Le.unesc=void 0;var sc=tn(ui());Le.unesc=sc.default;var ac=tn(Ju());Le.getProp=ac.default;var lc=tn(es());Le.ensureObject=lc.default;var fc=tn(rs());Le.stripComments=fc.default;function tn(e){return e&&e.__esModule?e:{default:e}}});var Ue=T((Vt,os)=>{\"use strict\";Vt.__esModule=!0;Vt.default=void 0;var ns=Ht();function is(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function cc(e,t,n){return t&&is(e.prototype,t),n&&is(e,n),e}var dc=function e(t,n){if(typeof t!=\"object\"||t===null)return t;var r=new t.constructor;for(var i in t)if(t.hasOwnProperty(i)){var o=t[i],u=typeof o;i===\"parent\"&&u===\"object\"?n&&(r[i]=n):o instanceof Array?r[i]=o.map(function(s){return e(s,r)}):r[i]=e(o,r)}return r},pc=function(){function e(n){n===void 0&&(n={}),Object.assign(this,n),this.spaces=this.spaces||{},this.spaces.before=this.spaces.before||\"\",this.spaces.after=this.spaces.after||\"\"}var t=e.prototype;return t.remove=function(){return this.parent&&this.parent.removeChild(this),this.parent=void 0,this},t.replaceWith=function(){if(this.parent){for(var r in arguments)this.parent.insertBefore(this,arguments[r]);this.remove()}return this},t.next=function(){return this.parent.at(this.parent.index(this)+1)},t.prev=function(){return this.parent.at(this.parent.index(this)-1)},t.clone=function(r){r===void 0&&(r={});var i=dc(this);for(var o in r)i[o]=r[o];return i},t.appendToPropertyAndEscape=function(r,i,o){this.raws||(this.raws={});var u=this[r],s=this.raws[r];this[r]=u+i,s||o!==i?this.raws[r]=(s||u)+o:delete this.raws[r]},t.setPropertyAndEscape=function(r,i,o){this.raws||(this.raws={}),this[r]=i,this.raws[r]=o},t.setPropertyWithoutEscape=function(r,i){this[r]=i,this.raws&&delete this.raws[r]},t.isAtPosition=function(r,i){if(this.source&&this.source.start&&this.source.end)return!(this.source.start.line>r||this.source.end.line<r||this.source.start.line===r&&this.source.start.column>i||this.source.end.line===r&&this.source.end.column<i)},t.stringifyProperty=function(r){return this.raws&&this.raws[r]||this[r]},t.valueToString=function(){return String(this.stringifyProperty(\"value\"))},t.toString=function(){return[this.rawSpaceBefore,this.valueToString(),this.rawSpaceAfter].join(\"\")},cc(e,[{key:\"rawSpaceBefore\",get:function(){var r=this.raws&&this.raws.spaces&&this.raws.spaces.before;return r===void 0&&(r=this.spaces&&this.spaces.before),r||\"\"},set:function(r){(0,ns.ensureObject)(this,\"raws\",\"spaces\"),this.raws.spaces.before=r}},{key:\"rawSpaceAfter\",get:function(){var r=this.raws&&this.raws.spaces&&this.raws.spaces.after;return r===void 0&&(r=this.spaces.after),r||\"\"},set:function(r){(0,ns.ensureObject)(this,\"raws\",\"spaces\"),this.raws.spaces.after=r}}]),e}();Vt.default=pc;os.exports=Vt.default});var pe=T(K=>{\"use strict\";K.__esModule=!0;K.UNIVERSAL=K.ATTRIBUTE=K.CLASS=K.COMBINATOR=K.COMMENT=K.ID=K.NESTING=K.PSEUDO=K.ROOT=K.SELECTOR=K.STRING=K.TAG=void 0;var hc=\"tag\";K.TAG=hc;var mc=\"string\";K.STRING=mc;var Dc=\"selector\";K.SELECTOR=Dc;var gc=\"root\";K.ROOT=gc;var bc=\"pseudo\";K.PSEUDO=bc;var vc=\"nesting\";K.NESTING=vc;var yc=\"id\";K.ID=yc;var xc=\"comment\";K.COMMENT=xc;var Fc=\"combinator\";K.COMBINATOR=Fc;var wc=\"class\";K.CLASS=wc;var Ec=\"attribute\";K.ATTRIBUTE=Ec;var Cc=\"universal\";K.UNIVERSAL=Cc});var rn=T((Yt,ls)=>{\"use strict\";Yt.__esModule=!0;Yt.default=void 0;var _c=kc(Ue()),ze=Sc(pe());function as(){if(typeof WeakMap!=\"function\")return null;var e=new WeakMap;return as=function(){return e},e}function Sc(e){if(e&&e.__esModule)return e;if(e===null||typeof e!=\"object\"&&typeof e!=\"function\")return{default:e};var t=as();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=r?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}function kc(e){return e&&e.__esModule?e:{default:e}}function Tc(e,t){var n;if(typeof Symbol>\"u\"||e[Symbol.iterator]==null){if(Array.isArray(e)||(n=Ac(e))||t&&e&&typeof e.length==\"number\"){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}return n=e[Symbol.iterator](),n.next.bind(n)}function Ac(e,t){if(e){if(typeof e==\"string\")return us(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);if(n===\"Object\"&&e.constructor&&(n=e.constructor.name),n===\"Map\"||n===\"Set\")return Array.from(e);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return us(e,t)}}function us(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ss(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Oc(e,t,n){return t&&ss(e.prototype,t),n&&ss(e,n),e}function Pc(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,si(e,t)}function si(e,t){return si=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},si(e,t)}var Bc=function(e){Pc(t,e);function t(r){var i;return i=e.call(this,r)||this,i.nodes||(i.nodes=[]),i}var n=t.prototype;return n.append=function(i){return i.parent=this,this.nodes.push(i),this},n.prepend=function(i){return i.parent=this,this.nodes.unshift(i),this},n.at=function(i){return this.nodes[i]},n.index=function(i){return typeof i==\"number\"?i:this.nodes.indexOf(i)},n.removeChild=function(i){i=this.index(i),this.at(i).parent=void 0,this.nodes.splice(i,1);var o;for(var u in this.indexes)o=this.indexes[u],o>=i&&(this.indexes[u]=o-1);return this},n.removeAll=function(){for(var i=Tc(this.nodes),o;!(o=i()).done;){var u=o.value;u.parent=void 0}return this.nodes=[],this},n.empty=function(){return this.removeAll()},n.insertAfter=function(i,o){o.parent=this;var u=this.index(i);this.nodes.splice(u+1,0,o),o.parent=this;var s;for(var a in this.indexes)s=this.indexes[a],u<=s&&(this.indexes[a]=s+1);return this},n.insertBefore=function(i,o){o.parent=this;var u=this.index(i);this.nodes.splice(u,0,o),o.parent=this;var s;for(var a in this.indexes)s=this.indexes[a],s<=u&&(this.indexes[a]=s+1);return this},n._findChildAtPosition=function(i,o){var u=void 0;return this.each(function(s){if(s.atPosition){var a=s.atPosition(i,o);if(a)return u=a,!1}else if(s.isAtPosition(i,o))return u=s,!1}),u},n.atPosition=function(i,o){if(this.isAtPosition(i,o))return this._findChildAtPosition(i,o)||this},n._inferEndPosition=function(){this.last&&this.last.source&&this.last.source.end&&(this.source=this.source||{},this.source.end=this.source.end||{},Object.assign(this.source.end,this.last.source.end))},n.each=function(i){this.lastEach||(this.lastEach=0),this.indexes||(this.indexes={}),this.lastEach++;var o=this.lastEach;if(this.indexes[o]=0,!!this.length){for(var u,s;this.indexes[o]<this.length&&(u=this.indexes[o],s=i(this.at(u),u),s!==!1);)this.indexes[o]+=1;if(delete this.indexes[o],s===!1)return!1}},n.walk=function(i){return this.each(function(o,u){var s=i(o,u);if(s!==!1&&o.length&&(s=o.walk(i)),s===!1)return!1})},n.walkAttributes=function(i){var o=this;return this.walk(function(u){if(u.type===ze.ATTRIBUTE)return i.call(o,u)})},n.walkClasses=function(i){var o=this;return this.walk(function(u){if(u.type===ze.CLASS)return i.call(o,u)})},n.walkCombinators=function(i){var o=this;return this.walk(function(u){if(u.type===ze.COMBINATOR)return i.call(o,u)})},n.walkComments=function(i){var o=this;return this.walk(function(u){if(u.type===ze.COMMENT)return i.call(o,u)})},n.walkIds=function(i){var o=this;return this.walk(function(u){if(u.type===ze.ID)return i.call(o,u)})},n.walkNesting=function(i){var o=this;return this.walk(function(u){if(u.type===ze.NESTING)return i.call(o,u)})},n.walkPseudos=function(i){var o=this;return this.walk(function(u){if(u.type===ze.PSEUDO)return i.call(o,u)})},n.walkTags=function(i){var o=this;return this.walk(function(u){if(u.type===ze.TAG)return i.call(o,u)})},n.walkUniversals=function(i){var o=this;return this.walk(function(u){if(u.type===ze.UNIVERSAL)return i.call(o,u)})},n.split=function(i){var o=this,u=[];return this.reduce(function(s,a,l){var f=i.call(o,a);return u.push(a),f?(s.push(u),u=[]):l===o.length-1&&s.push(u),s},[])},n.map=function(i){return this.nodes.map(i)},n.reduce=function(i,o){return this.nodes.reduce(i,o)},n.every=function(i){return this.nodes.every(i)},n.some=function(i){return this.nodes.some(i)},n.filter=function(i){return this.nodes.filter(i)},n.sort=function(i){return this.nodes.sort(i)},n.toString=function(){return this.map(String).join(\"\")},Oc(t,[{key:\"first\",get:function(){return this.at(0)}},{key:\"last\",get:function(){return this.at(this.length-1)}},{key:\"length\",get:function(){return this.nodes.length}}]),t}(_c.default);Yt.default=Bc;ls.exports=Yt.default});var li=T((Xt,cs)=>{\"use strict\";Xt.__esModule=!0;Xt.default=void 0;var Ic=Lc(rn()),Rc=pe();function Lc(e){return e&&e.__esModule?e:{default:e}}function fs(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Mc(e,t,n){return t&&fs(e.prototype,t),n&&fs(e,n),e}function Nc(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,ai(e,t)}function ai(e,t){return ai=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},ai(e,t)}var $c=function(e){Nc(t,e);function t(r){var i;return i=e.call(this,r)||this,i.type=Rc.ROOT,i}var n=t.prototype;return n.toString=function(){var i=this.reduce(function(o,u){return o.push(String(u)),o},[]).join(\",\");return this.trailingComma?i+\",\":i},n.error=function(i,o){return this._error?this._error(i,o):new Error(i)},Mc(t,[{key:\"errorGenerator\",set:function(i){this._error=i}}]),t}(Ic.default);Xt.default=$c;cs.exports=Xt.default});var ci=T((Qt,ds)=>{\"use strict\";Qt.__esModule=!0;Qt.default=void 0;var Wc=Uc(rn()),qc=pe();function Uc(e){return e&&e.__esModule?e:{default:e}}function zc(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,fi(e,t)}function fi(e,t){return fi=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},fi(e,t)}var Gc=function(e){zc(t,e);function t(n){var r;return r=e.call(this,n)||this,r.type=qc.SELECTOR,r}return t}(Wc.default);Qt.default=Gc;ds.exports=Qt.default});var nn=T((ub,ps)=>{\"use strict\";var jc={},Hc=jc.hasOwnProperty,Vc=function(t,n){if(!t)return n;var r={};for(var i in n)r[i]=Hc.call(t,i)?t[i]:n[i];return r},Yc=/[ -,\\.\\/:-@\\[-\\^`\\{-~]/,Xc=/[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/,Qc=/(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g,di=function e(t,n){n=Vc(n,e.options),n.quotes!=\"single\"&&n.quotes!=\"double\"&&(n.quotes=\"single\");for(var r=n.quotes==\"double\"?'\"':\"'\",i=n.isIdentifier,o=t.charAt(0),u=\"\",s=0,a=t.length;s<a;){var l=t.charAt(s++),f=l.charCodeAt(),c=void 0;if(f<32||f>126){if(f>=55296&&f<=56319&&s<a){var p=t.charCodeAt(s++);(p&64512)==56320?f=((f&1023)<<10)+(p&1023)+65536:s--}c=\"\\\\\"+f.toString(16).toUpperCase()+\" \"}else n.escapeEverything?Yc.test(l)?c=\"\\\\\"+l:c=\"\\\\\"+f.toString(16).toUpperCase()+\" \":/[\\t\\n\\f\\r\\x0B]/.test(l)?c=\"\\\\\"+f.toString(16).toUpperCase()+\" \":l==\"\\\\\"||!i&&(l=='\"'&&r==l||l==\"'\"&&r==l)||i&&Xc.test(l)?c=\"\\\\\"+l:c=l;u+=c}return i&&(/^-[-\\d]/.test(u)?u=\"\\\\-\"+u.slice(1):/\\d/.test(o)&&(u=\"\\\\3\"+o+\" \"+u.slice(1))),u=u.replace(Qc,function(h,d,m){return d&&d.length%2?h:(d||\"\")+m}),!i&&n.wrap?r+u+r:u};di.options={escapeEverything:!1,isIdentifier:!1,quotes:\"single\",wrap:!1};di.version=\"3.0.0\";ps.exports=di});var hi=T((Kt,Ds)=>{\"use strict\";Kt.__esModule=!0;Kt.default=void 0;var Kc=ms(nn()),Jc=Ht(),Zc=ms(Ue()),ed=pe();function ms(e){return e&&e.__esModule?e:{default:e}}function hs(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function td(e,t,n){return t&&hs(e.prototype,t),n&&hs(e,n),e}function rd(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,pi(e,t)}function pi(e,t){return pi=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},pi(e,t)}var nd=function(e){rd(t,e);function t(r){var i;return i=e.call(this,r)||this,i.type=ed.CLASS,i._constructed=!0,i}var n=t.prototype;return n.valueToString=function(){return\".\"+e.prototype.valueToString.call(this)},td(t,[{key:\"value\",get:function(){return this._value},set:function(i){if(this._constructed){var o=(0,Kc.default)(i,{isIdentifier:!0});o!==i?((0,Jc.ensureObject)(this,\"raws\"),this.raws.value=o):this.raws&&delete this.raws.value}this._value=i}}]),t}(Zc.default);Kt.default=nd;Ds.exports=Kt.default});var Di=T((Jt,gs)=>{\"use strict\";Jt.__esModule=!0;Jt.default=void 0;var id=ud(Ue()),od=pe();function ud(e){return e&&e.__esModule?e:{default:e}}function sd(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,mi(e,t)}function mi(e,t){return mi=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},mi(e,t)}var ad=function(e){sd(t,e);function t(n){var r;return r=e.call(this,n)||this,r.type=od.COMMENT,r}return t}(id.default);Jt.default=ad;gs.exports=Jt.default});var bi=T((Zt,bs)=>{\"use strict\";Zt.__esModule=!0;Zt.default=void 0;var ld=cd(Ue()),fd=pe();function cd(e){return e&&e.__esModule?e:{default:e}}function dd(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,gi(e,t)}function gi(e,t){return gi=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},gi(e,t)}var pd=function(e){dd(t,e);function t(r){var i;return i=e.call(this,r)||this,i.type=fd.ID,i}var n=t.prototype;return n.valueToString=function(){return\"#\"+e.prototype.valueToString.call(this)},t}(ld.default);Zt.default=pd;bs.exports=Zt.default});var on=T((er,xs)=>{\"use strict\";er.__esModule=!0;er.default=void 0;var hd=ys(nn()),md=Ht(),Dd=ys(Ue());function ys(e){return e&&e.__esModule?e:{default:e}}function vs(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function gd(e,t,n){return t&&vs(e.prototype,t),n&&vs(e,n),e}function bd(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,vi(e,t)}function vi(e,t){return vi=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},vi(e,t)}var vd=function(e){bd(t,e);function t(){return e.apply(this,arguments)||this}var n=t.prototype;return n.qualifiedName=function(i){return this.namespace?this.namespaceString+\"|\"+i:i},n.valueToString=function(){return this.qualifiedName(e.prototype.valueToString.call(this))},gd(t,[{key:\"namespace\",get:function(){return this._namespace},set:function(i){if(i===!0||i===\"*\"||i===\"&\"){this._namespace=i,this.raws&&delete this.raws.namespace;return}var o=(0,hd.default)(i,{isIdentifier:!0});this._namespace=i,o!==i?((0,md.ensureObject)(this,\"raws\"),this.raws.namespace=o):this.raws&&delete this.raws.namespace}},{key:\"ns\",get:function(){return this._namespace},set:function(i){this.namespace=i}},{key:\"namespaceString\",get:function(){if(this.namespace){var i=this.stringifyProperty(\"namespace\");return i===!0?\"\":i}else return\"\"}}]),t}(Dd.default);er.default=vd;xs.exports=er.default});var xi=T((tr,Fs)=>{\"use strict\";tr.__esModule=!0;tr.default=void 0;var yd=Fd(on()),xd=pe();function Fd(e){return e&&e.__esModule?e:{default:e}}function wd(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,yi(e,t)}function yi(e,t){return yi=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},yi(e,t)}var Ed=function(e){wd(t,e);function t(n){var r;return r=e.call(this,n)||this,r.type=xd.TAG,r}return t}(yd.default);tr.default=Ed;Fs.exports=tr.default});var wi=T((rr,ws)=>{\"use strict\";rr.__esModule=!0;rr.default=void 0;var Cd=Sd(Ue()),_d=pe();function Sd(e){return e&&e.__esModule?e:{default:e}}function kd(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Fi(e,t)}function Fi(e,t){return Fi=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},Fi(e,t)}var Td=function(e){kd(t,e);function t(n){var r;return r=e.call(this,n)||this,r.type=_d.STRING,r}return t}(Cd.default);rr.default=Td;ws.exports=rr.default});var Ci=T((nr,Es)=>{\"use strict\";nr.__esModule=!0;nr.default=void 0;var Ad=Pd(rn()),Od=pe();function Pd(e){return e&&e.__esModule?e:{default:e}}function Bd(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Ei(e,t)}function Ei(e,t){return Ei=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},Ei(e,t)}var Id=function(e){Bd(t,e);function t(r){var i;return i=e.call(this,r)||this,i.type=Od.PSEUDO,i}var n=t.prototype;return n.toString=function(){var i=this.length?\"(\"+this.map(String).join(\",\")+\")\":\"\";return[this.rawSpaceBefore,this.stringifyProperty(\"value\"),i,this.rawSpaceAfter].join(\"\")},t}(Ad.default);nr.default=Id;Es.exports=nr.default});var _s=T((sb,Cs)=>{Cs.exports=function(t,n){return function(...r){return console.warn(n),t(...r)}}});var Oi=T(ur=>{\"use strict\";ur.__esModule=!0;ur.unescapeValue=Ai;ur.default=void 0;var ir=Ti(nn()),Rd=Ti(ui()),Ld=Ti(on()),Md=pe(),_i;function Ti(e){return e&&e.__esModule?e:{default:e}}function Ss(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Nd(e,t,n){return t&&Ss(e.prototype,t),n&&Ss(e,n),e}function $d(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,ki(e,t)}function ki(e,t){return ki=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},ki(e,t)}var or=_s(),Wd=/^('|\")([^]*)\\1$/,qd=or(function(){},\"Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead.\"),Ud=or(function(){},\"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\"),zd=or(function(){},\"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");function Ai(e){var t=!1,n=null,r=e,i=r.match(Wd);return i&&(n=i[1],r=i[2]),r=(0,Rd.default)(r),r!==e&&(t=!0),{deprecatedUsage:t,unescaped:r,quoteMark:n}}function Gd(e){if(e.quoteMark!==void 0||e.value===void 0)return e;zd();var t=Ai(e.value),n=t.quoteMark,r=t.unescaped;return e.raws||(e.raws={}),e.raws.value===void 0&&(e.raws.value=e.value),e.value=r,e.quoteMark=n,e}var un=function(e){$d(t,e);function t(r){var i;return r===void 0&&(r={}),i=e.call(this,Gd(r))||this,i.type=Md.ATTRIBUTE,i.raws=i.raws||{},Object.defineProperty(i.raws,\"unquoted\",{get:or(function(){return i.value},\"attr.raws.unquoted is deprecated. Call attr.value instead.\"),set:or(function(){return i.value},\"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")}),i._constructed=!0,i}var n=t.prototype;return n.getQuotedValue=function(i){i===void 0&&(i={});var o=this._determineQuoteMark(i),u=Si[o],s=(0,ir.default)(this._value,u);return s},n._determineQuoteMark=function(i){return i.smart?this.smartQuoteMark(i):this.preferredQuoteMark(i)},n.setValue=function(i,o){o===void 0&&(o={}),this._value=i,this._quoteMark=this._determineQuoteMark(o),this._syncRawValue()},n.smartQuoteMark=function(i){var o=this.value,u=o.replace(/[^']/g,\"\").length,s=o.replace(/[^\"]/g,\"\").length;if(u+s===0){var a=(0,ir.default)(o,{isIdentifier:!0});if(a===o)return t.NO_QUOTE;var l=this.preferredQuoteMark(i);if(l===t.NO_QUOTE){var f=this.quoteMark||i.quoteMark||t.DOUBLE_QUOTE,c=Si[f],p=(0,ir.default)(o,c);if(p.length<a.length)return f}return l}else return s===u?this.preferredQuoteMark(i):s<u?t.DOUBLE_QUOTE:t.SINGLE_QUOTE},n.preferredQuoteMark=function(i){var o=i.preferCurrentQuoteMark?this.quoteMark:i.quoteMark;return o===void 0&&(o=i.preferCurrentQuoteMark?i.quoteMark:this.quoteMark),o===void 0&&(o=t.DOUBLE_QUOTE),o},n._syncRawValue=function(){var i=(0,ir.default)(this._value,Si[this.quoteMark]);i===this._value?this.raws&&delete this.raws.value:this.raws.value=i},n._handleEscapes=function(i,o){if(this._constructed){var u=(0,ir.default)(o,{isIdentifier:!0});u!==o?this.raws[i]=u:delete this.raws[i]}},n._spacesFor=function(i){var o={before:\"\",after:\"\"},u=this.spaces[i]||{},s=this.raws.spaces&&this.raws.spaces[i]||{};return Object.assign(o,u,s)},n._stringFor=function(i,o,u){o===void 0&&(o=i),u===void 0&&(u=ks);var s=this._spacesFor(o);return u(this.stringifyProperty(i),s)},n.offsetOf=function(i){var o=1,u=this._spacesFor(\"attribute\");if(o+=u.before.length,i===\"namespace\"||i===\"ns\")return this.namespace?o:-1;if(i===\"attributeNS\"||(o+=this.namespaceString.length,this.namespace&&(o+=1),i===\"attribute\"))return o;o+=this.stringifyProperty(\"attribute\").length,o+=u.after.length;var s=this._spacesFor(\"operator\");o+=s.before.length;var a=this.stringifyProperty(\"operator\");if(i===\"operator\")return a?o:-1;o+=a.length,o+=s.after.length;var l=this._spacesFor(\"value\");o+=l.before.length;var f=this.stringifyProperty(\"value\");if(i===\"value\")return f?o:-1;o+=f.length,o+=l.after.length;var c=this._spacesFor(\"insensitive\");return o+=c.before.length,i===\"insensitive\"&&this.insensitive?o:-1},n.toString=function(){var i=this,o=[this.rawSpaceBefore,\"[\"];return o.push(this._stringFor(\"qualifiedAttribute\",\"attribute\")),this.operator&&(this.value||this.value===\"\")&&(o.push(this._stringFor(\"operator\")),o.push(this._stringFor(\"value\")),o.push(this._stringFor(\"insensitiveFlag\",\"insensitive\",function(u,s){return u.length>0&&!i.quoted&&s.before.length===0&&!(i.spaces.value&&i.spaces.value.after)&&(s.before=\" \"),ks(u,s)}))),o.push(\"]\"),o.push(this.rawSpaceAfter),o.join(\"\")},Nd(t,[{key:\"quoted\",get:function(){var i=this.quoteMark;return i===\"'\"||i==='\"'},set:function(i){Ud()}},{key:\"quoteMark\",get:function(){return this._quoteMark},set:function(i){if(!this._constructed){this._quoteMark=i;return}this._quoteMark!==i&&(this._quoteMark=i,this._syncRawValue())}},{key:\"qualifiedAttribute\",get:function(){return this.qualifiedName(this.raws.attribute||this.attribute)}},{key:\"insensitiveFlag\",get:function(){return this.insensitive?\"i\":\"\"}},{key:\"value\",get:function(){return this._value},set:function(i){if(this._constructed){var o=Ai(i),u=o.deprecatedUsage,s=o.unescaped,a=o.quoteMark;if(u&&qd(),s===this._value&&a===this._quoteMark)return;this._value=s,this._quoteMark=a,this._syncRawValue()}else this._value=i}},{key:\"attribute\",get:function(){return this._attribute},set:function(i){this._handleEscapes(\"attribute\",i),this._attribute=i}}]),t}(Ld.default);ur.default=un;un.NO_QUOTE=null;un.SINGLE_QUOTE=\"'\";un.DOUBLE_QUOTE='\"';var Si=(_i={\"'\":{quotes:\"single\",wrap:!0},'\"':{quotes:\"double\",wrap:!0}},_i[null]={isIdentifier:!0},_i);function ks(e,t){return\"\"+t.before+e+t.after}});var Bi=T((sr,Ts)=>{\"use strict\";sr.__esModule=!0;sr.default=void 0;var jd=Vd(on()),Hd=pe();function Vd(e){return e&&e.__esModule?e:{default:e}}function Yd(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Pi(e,t)}function Pi(e,t){return Pi=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},Pi(e,t)}var Xd=function(e){Yd(t,e);function t(n){var r;return r=e.call(this,n)||this,r.type=Hd.UNIVERSAL,r.value=\"*\",r}return t}(jd.default);sr.default=Xd;Ts.exports=sr.default});var Ri=T((ar,As)=>{\"use strict\";ar.__esModule=!0;ar.default=void 0;var Qd=Jd(Ue()),Kd=pe();function Jd(e){return e&&e.__esModule?e:{default:e}}function Zd(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Ii(e,t)}function Ii(e,t){return Ii=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},Ii(e,t)}var ep=function(e){Zd(t,e);function t(n){var r;return r=e.call(this,n)||this,r.type=Kd.COMBINATOR,r}return t}(Qd.default);ar.default=ep;As.exports=ar.default});var Mi=T((lr,Os)=>{\"use strict\";lr.__esModule=!0;lr.default=void 0;var tp=np(Ue()),rp=pe();function np(e){return e&&e.__esModule?e:{default:e}}function ip(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Li(e,t)}function Li(e,t){return Li=Object.setPrototypeOf||function(r,i){return r.__proto__=i,r},Li(e,t)}var op=function(e){ip(t,e);function t(n){var r;return r=e.call(this,n)||this,r.type=rp.NESTING,r.value=\"&\",r}return t}(tp.default);lr.default=op;Os.exports=lr.default});var Bs=T((sn,Ps)=>{\"use strict\";sn.__esModule=!0;sn.default=up;function up(e){return e.sort(function(t,n){return t-n})}Ps.exports=sn.default});var Ni=T(S=>{\"use strict\";S.__esModule=!0;S.combinator=S.word=S.comment=S.str=S.tab=S.newline=S.feed=S.cr=S.backslash=S.bang=S.slash=S.doubleQuote=S.singleQuote=S.space=S.greaterThan=S.pipe=S.equals=S.plus=S.caret=S.tilde=S.dollar=S.closeSquare=S.openSquare=S.closeParenthesis=S.openParenthesis=S.semicolon=S.colon=S.comma=S.at=S.asterisk=S.ampersand=void 0;var sp=38;S.ampersand=sp;var ap=42;S.asterisk=ap;var lp=64;S.at=lp;var fp=44;S.comma=fp;var cp=58;S.colon=cp;var dp=59;S.semicolon=dp;var pp=40;S.openParenthesis=pp;var hp=41;S.closeParenthesis=hp;var mp=91;S.openSquare=mp;var Dp=93;S.closeSquare=Dp;var gp=36;S.dollar=gp;var bp=126;S.tilde=bp;var vp=94;S.caret=vp;var yp=43;S.plus=yp;var xp=61;S.equals=xp;var Fp=124;S.pipe=Fp;var wp=62;S.greaterThan=wp;var Ep=32;S.space=Ep;var Is=39;S.singleQuote=Is;var Cp=34;S.doubleQuote=Cp;var _p=47;S.slash=_p;var Sp=33;S.bang=Sp;var kp=92;S.backslash=kp;var Tp=13;S.cr=Tp;var Ap=12;S.feed=Ap;var Op=10;S.newline=Op;var Pp=9;S.tab=Pp;var Bp=Is;S.str=Bp;var Ip=-1;S.comment=Ip;var Rp=-2;S.word=Rp;var Lp=-3;S.combinator=Lp});var Ms=T(fr=>{\"use strict\";fr.__esModule=!0;fr.default=zp;fr.FIELDS=void 0;var E=Mp(Ni()),xt,Q;function Ls(){if(typeof WeakMap!=\"function\")return null;var e=new WeakMap;return Ls=function(){return e},e}function Mp(e){if(e&&e.__esModule)return e;if(e===null||typeof e!=\"object\"&&typeof e!=\"function\")return{default:e};var t=Ls();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=r?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}var Np=(xt={},xt[E.tab]=!0,xt[E.newline]=!0,xt[E.cr]=!0,xt[E.feed]=!0,xt),$p=(Q={},Q[E.space]=!0,Q[E.tab]=!0,Q[E.newline]=!0,Q[E.cr]=!0,Q[E.feed]=!0,Q[E.ampersand]=!0,Q[E.asterisk]=!0,Q[E.bang]=!0,Q[E.comma]=!0,Q[E.colon]=!0,Q[E.semicolon]=!0,Q[E.openParenthesis]=!0,Q[E.closeParenthesis]=!0,Q[E.openSquare]=!0,Q[E.closeSquare]=!0,Q[E.singleQuote]=!0,Q[E.doubleQuote]=!0,Q[E.plus]=!0,Q[E.pipe]=!0,Q[E.tilde]=!0,Q[E.greaterThan]=!0,Q[E.equals]=!0,Q[E.dollar]=!0,Q[E.caret]=!0,Q[E.slash]=!0,Q),$i={},Rs=\"0123456789abcdefABCDEF\";for(an=0;an<Rs.length;an++)$i[Rs.charCodeAt(an)]=!0;var an;function Wp(e,t){var n=t,r;do{if(r=e.charCodeAt(n),$p[r])return n-1;r===E.backslash?n=qp(e,n)+1:n++}while(n<e.length);return n-1}function qp(e,t){var n=t,r=e.charCodeAt(n+1);if(!Np[r])if($i[r]){var i=0;do n++,i++,r=e.charCodeAt(n+1);while($i[r]&&i<6);i<6&&r===E.space&&n++}else n++;return n}var Up={TYPE:0,START_LINE:1,START_COL:2,END_LINE:3,END_COL:4,START_POS:5,END_POS:6};fr.FIELDS=Up;function zp(e){var t=[],n=e.css.valueOf(),r=n,i=r.length,o=-1,u=1,s=0,a=0,l,f,c,p,h,d,m,v,g,b,x,F,y;function k(P,B){if(e.safe)n+=B,g=n.length-1;else throw e.error(\"Unclosed \"+P,u,s-o,s)}for(;s<i;){switch(l=n.charCodeAt(s),l===E.newline&&(o=s,u+=1),l){case E.space:case E.tab:case E.newline:case E.cr:case E.feed:g=s;do g+=1,l=n.charCodeAt(g),l===E.newline&&(o=g,u+=1);while(l===E.space||l===E.newline||l===E.tab||l===E.cr||l===E.feed);y=E.space,p=u,c=g-o-1,a=g;break;case E.plus:case E.greaterThan:case E.tilde:case E.pipe:g=s;do g+=1,l=n.charCodeAt(g);while(l===E.plus||l===E.greaterThan||l===E.tilde||l===E.pipe);y=E.combinator,p=u,c=s-o,a=g;break;case E.asterisk:case E.ampersand:case E.bang:case E.comma:case E.equals:case E.dollar:case E.caret:case E.openSquare:case E.closeSquare:case E.colon:case E.semicolon:case E.openParenthesis:case E.closeParenthesis:g=s,y=l,p=u,c=s-o,a=g+1;break;case E.singleQuote:case E.doubleQuote:F=l===E.singleQuote?\"'\":'\"',g=s;do for(h=!1,g=n.indexOf(F,g+1),g===-1&&k(\"quote\",F),d=g;n.charCodeAt(d-1)===E.backslash;)d-=1,h=!h;while(h);y=E.str,p=u,c=s-o,a=g+1;break;default:l===E.slash&&n.charCodeAt(s+1)===E.asterisk?(g=n.indexOf(\"*/\",s+2)+1,g===0&&k(\"comment\",\"*/\"),f=n.slice(s,g+1),v=f.split(`\n`),m=v.length-1,m>0?(b=u+m,x=g-v[m].length):(b=u,x=o),y=E.comment,u=b,p=b,c=g-x):l===E.slash?(g=s,y=l,p=u,c=s-o,a=g+1):(g=Wp(n,s),y=E.word,p=u,c=g-o),a=g+1;break}t.push([y,u,s-o,p,c,s,a]),x&&(o=x,x=null),s=a}return t}});var js=T((cr,Gs)=>{\"use strict\";cr.__esModule=!0;cr.default=void 0;var Gp=_e(li()),Wi=_e(ci()),jp=_e(hi()),Ns=_e(Di()),Hp=_e(bi()),Vp=_e(xi()),qi=_e(wi()),Yp=_e(Ci()),$s=ln(Oi()),Xp=_e(Bi()),Ui=_e(Ri()),Qp=_e(Mi()),Kp=_e(Bs()),w=ln(Ms()),_=ln(Ni()),Jp=ln(pe()),re=Ht(),ut,zi;function zs(){if(typeof WeakMap!=\"function\")return null;var e=new WeakMap;return zs=function(){return e},e}function ln(e){if(e&&e.__esModule)return e;if(e===null||typeof e!=\"object\"&&typeof e!=\"function\")return{default:e};var t=zs();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=r?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}function _e(e){return e&&e.__esModule?e:{default:e}}function Ws(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Zp(e,t,n){return t&&Ws(e.prototype,t),n&&Ws(e,n),e}var Hi=(ut={},ut[_.space]=!0,ut[_.cr]=!0,ut[_.feed]=!0,ut[_.newline]=!0,ut[_.tab]=!0,ut),e0=Object.assign({},Hi,(zi={},zi[_.comment]=!0,zi));function qs(e){return{line:e[w.FIELDS.START_LINE],column:e[w.FIELDS.START_COL]}}function Us(e){return{line:e[w.FIELDS.END_LINE],column:e[w.FIELDS.END_COL]}}function st(e,t,n,r){return{start:{line:e,column:t},end:{line:n,column:r}}}function Ft(e){return st(e[w.FIELDS.START_LINE],e[w.FIELDS.START_COL],e[w.FIELDS.END_LINE],e[w.FIELDS.END_COL])}function Gi(e,t){if(e)return st(e[w.FIELDS.START_LINE],e[w.FIELDS.START_COL],t[w.FIELDS.END_LINE],t[w.FIELDS.END_COL])}function wt(e,t){var n=e[t];if(typeof n==\"string\")return n.indexOf(\"\\\\\")!==-1&&((0,re.ensureObject)(e,\"raws\"),e[t]=(0,re.unesc)(n),e.raws[t]===void 0&&(e.raws[t]=n)),e}function ji(e,t){for(var n=-1,r=[];(n=e.indexOf(t,n+1))!==-1;)r.push(n);return r}function t0(){var e=Array.prototype.concat.apply([],arguments);return e.filter(function(t,n){return n===e.indexOf(t)})}var r0=function(){function e(n,r){r===void 0&&(r={}),this.rule=n,this.options=Object.assign({lossy:!1,safe:!1},r),this.position=0,this.css=typeof this.rule==\"string\"?this.rule:this.rule.selector,this.tokens=(0,w.default)({css:this.css,error:this._errorGenerator(),safe:this.options.safe});var i=Gi(this.tokens[0],this.tokens[this.tokens.length-1]);this.root=new Gp.default({source:i}),this.root.errorGenerator=this._errorGenerator();var o=new Wi.default({source:{start:{line:1,column:1}}});this.root.append(o),this.current=o,this.loop()}var t=e.prototype;return t._errorGenerator=function(){var r=this;return function(i,o){return typeof r.rule==\"string\"?new Error(i):r.rule.error(i,o)}},t.attribute=function(){var r=[],i=this.currToken;for(this.position++;this.position<this.tokens.length&&this.currToken[w.FIELDS.TYPE]!==_.closeSquare;)r.push(this.currToken),this.position++;if(this.currToken[w.FIELDS.TYPE]!==_.closeSquare)return this.expected(\"closing square bracket\",this.currToken[w.FIELDS.START_POS]);var o=r.length,u={source:st(i[1],i[2],this.currToken[3],this.currToken[4]),sourceIndex:i[w.FIELDS.START_POS]};if(o===1&&!~[_.word].indexOf(r[0][w.FIELDS.TYPE]))return this.expected(\"attribute\",r[0][w.FIELDS.START_POS]);for(var s=0,a=\"\",l=\"\",f=null,c=!1;s<o;){var p=r[s],h=this.content(p),d=r[s+1];switch(p[w.FIELDS.TYPE]){case _.space:if(c=!0,this.options.lossy)break;if(f){(0,re.ensureObject)(u,\"spaces\",f);var m=u.spaces[f].after||\"\";u.spaces[f].after=m+h;var v=(0,re.getProp)(u,\"raws\",\"spaces\",f,\"after\")||null;v&&(u.raws.spaces[f].after=v+h)}else a=a+h,l=l+h;break;case _.asterisk:if(d[w.FIELDS.TYPE]===_.equals)u.operator=h,f=\"operator\";else if((!u.namespace||f===\"namespace\"&&!c)&&d){a&&((0,re.ensureObject)(u,\"spaces\",\"attribute\"),u.spaces.attribute.before=a,a=\"\"),l&&((0,re.ensureObject)(u,\"raws\",\"spaces\",\"attribute\"),u.raws.spaces.attribute.before=a,l=\"\"),u.namespace=(u.namespace||\"\")+h;var g=(0,re.getProp)(u,\"raws\",\"namespace\")||null;g&&(u.raws.namespace+=h),f=\"namespace\"}c=!1;break;case _.dollar:if(f===\"value\"){var b=(0,re.getProp)(u,\"raws\",\"value\");u.value+=\"$\",b&&(u.raws.value=b+\"$\");break}case _.caret:d[w.FIELDS.TYPE]===_.equals&&(u.operator=h,f=\"operator\"),c=!1;break;case _.combinator:if(h===\"~\"&&d[w.FIELDS.TYPE]===_.equals&&(u.operator=h,f=\"operator\"),h!==\"|\"){c=!1;break}d[w.FIELDS.TYPE]===_.equals?(u.operator=h,f=\"operator\"):!u.namespace&&!u.attribute&&(u.namespace=!0),c=!1;break;case _.word:if(d&&this.content(d)===\"|\"&&r[s+2]&&r[s+2][w.FIELDS.TYPE]!==_.equals&&!u.operator&&!u.namespace)u.namespace=h,f=\"namespace\";else if(!u.attribute||f===\"attribute\"&&!c){a&&((0,re.ensureObject)(u,\"spaces\",\"attribute\"),u.spaces.attribute.before=a,a=\"\"),l&&((0,re.ensureObject)(u,\"raws\",\"spaces\",\"attribute\"),u.raws.spaces.attribute.before=l,l=\"\"),u.attribute=(u.attribute||\"\")+h;var x=(0,re.getProp)(u,\"raws\",\"attribute\")||null;x&&(u.raws.attribute+=h),f=\"attribute\"}else if(!u.value&&u.value!==\"\"||f===\"value\"&&!c){var F=(0,re.unesc)(h),y=(0,re.getProp)(u,\"raws\",\"value\")||\"\",k=u.value||\"\";u.value=k+F,u.quoteMark=null,(F!==h||y)&&((0,re.ensureObject)(u,\"raws\"),u.raws.value=(y||k)+h),f=\"value\"}else{var P=h===\"i\"||h===\"I\";(u.value||u.value===\"\")&&(u.quoteMark||c)?(u.insensitive=P,(!P||h===\"I\")&&((0,re.ensureObject)(u,\"raws\"),u.raws.insensitiveFlag=h),f=\"insensitive\",a&&((0,re.ensureObject)(u,\"spaces\",\"insensitive\"),u.spaces.insensitive.before=a,a=\"\"),l&&((0,re.ensureObject)(u,\"raws\",\"spaces\",\"insensitive\"),u.raws.spaces.insensitive.before=l,l=\"\")):(u.value||u.value===\"\")&&(f=\"value\",u.value+=h,u.raws.value&&(u.raws.value+=h))}c=!1;break;case _.str:if(!u.attribute||!u.operator)return this.error(\"Expected an attribute followed by an operator preceding the string.\",{index:p[w.FIELDS.START_POS]});var B=(0,$s.unescapeValue)(h),j=B.unescaped,oe=B.quoteMark;u.value=j,u.quoteMark=oe,f=\"value\",(0,re.ensureObject)(u,\"raws\"),u.raws.value=h,c=!1;break;case _.equals:if(!u.attribute)return this.expected(\"attribute\",p[w.FIELDS.START_POS],h);if(u.value)return this.error('Unexpected \"=\" found; an operator was already defined.',{index:p[w.FIELDS.START_POS]});u.operator=u.operator?u.operator+h:h,f=\"operator\",c=!1;break;case _.comment:if(f)if(c||d&&d[w.FIELDS.TYPE]===_.space||f===\"insensitive\"){var ue=(0,re.getProp)(u,\"spaces\",f,\"after\")||\"\",se=(0,re.getProp)(u,\"raws\",\"spaces\",f,\"after\")||ue;(0,re.ensureObject)(u,\"raws\",\"spaces\",f),u.raws.spaces[f].after=se+h}else{var N=u[f]||\"\",L=(0,re.getProp)(u,\"raws\",f)||N;(0,re.ensureObject)(u,\"raws\"),u.raws[f]=L+h}else l=l+h;break;default:return this.error('Unexpected \"'+h+'\" found.',{index:p[w.FIELDS.START_POS]})}s++}wt(u,\"attribute\"),wt(u,\"namespace\"),this.newNode(new $s.default(u)),this.position++},t.parseWhitespaceEquivalentTokens=function(r){r<0&&(r=this.tokens.length);var i=this.position,o=[],u=\"\",s=void 0;do if(Hi[this.currToken[w.FIELDS.TYPE]])this.options.lossy||(u+=this.content());else if(this.currToken[w.FIELDS.TYPE]===_.comment){var a={};u&&(a.before=u,u=\"\"),s=new Ns.default({value:this.content(),source:Ft(this.currToken),sourceIndex:this.currToken[w.FIELDS.START_POS],spaces:a}),o.push(s)}while(++this.position<r);if(u){if(s)s.spaces.after=u;else if(!this.options.lossy){var l=this.tokens[i],f=this.tokens[this.position-1];o.push(new qi.default({value:\"\",source:st(l[w.FIELDS.START_LINE],l[w.FIELDS.START_COL],f[w.FIELDS.END_LINE],f[w.FIELDS.END_COL]),sourceIndex:l[w.FIELDS.START_POS],spaces:{before:u,after:\"\"}}))}}return o},t.convertWhitespaceNodesToSpace=function(r,i){var o=this;i===void 0&&(i=!1);var u=\"\",s=\"\";r.forEach(function(l){var f=o.lossySpace(l.spaces.before,i),c=o.lossySpace(l.rawSpaceBefore,i);u+=f+o.lossySpace(l.spaces.after,i&&f.length===0),s+=f+l.value+o.lossySpace(l.rawSpaceAfter,i&&c.length===0)}),s===u&&(s=void 0);var a={space:u,rawSpace:s};return a},t.isNamedCombinator=function(r){return r===void 0&&(r=this.position),this.tokens[r+0]&&this.tokens[r+0][w.FIELDS.TYPE]===_.slash&&this.tokens[r+1]&&this.tokens[r+1][w.FIELDS.TYPE]===_.word&&this.tokens[r+2]&&this.tokens[r+2][w.FIELDS.TYPE]===_.slash},t.namedCombinator=function(){if(this.isNamedCombinator()){var r=this.content(this.tokens[this.position+1]),i=(0,re.unesc)(r).toLowerCase(),o={};i!==r&&(o.value=\"/\"+r+\"/\");var u=new Ui.default({value:\"/\"+i+\"/\",source:st(this.currToken[w.FIELDS.START_LINE],this.currToken[w.FIELDS.START_COL],this.tokens[this.position+2][w.FIELDS.END_LINE],this.tokens[this.position+2][w.FIELDS.END_COL]),sourceIndex:this.currToken[w.FIELDS.START_POS],raws:o});return this.position=this.position+3,u}else this.unexpected()},t.combinator=function(){var r=this;if(this.content()===\"|\")return this.namespace();var i=this.locateNextMeaningfulToken(this.position);if(i<0||this.tokens[i][w.FIELDS.TYPE]===_.comma){var o=this.parseWhitespaceEquivalentTokens(i);if(o.length>0){var u=this.current.last;if(u){var s=this.convertWhitespaceNodesToSpace(o),a=s.space,l=s.rawSpace;l!==void 0&&(u.rawSpaceAfter+=l),u.spaces.after+=a}else o.forEach(function(y){return r.newNode(y)})}return}var f=this.currToken,c=void 0;i>this.position&&(c=this.parseWhitespaceEquivalentTokens(i));var p;if(this.isNamedCombinator()?p=this.namedCombinator():this.currToken[w.FIELDS.TYPE]===_.combinator?(p=new Ui.default({value:this.content(),source:Ft(this.currToken),sourceIndex:this.currToken[w.FIELDS.START_POS]}),this.position++):Hi[this.currToken[w.FIELDS.TYPE]]||c||this.unexpected(),p){if(c){var h=this.convertWhitespaceNodesToSpace(c),d=h.space,m=h.rawSpace;p.spaces.before=d,p.rawSpaceBefore=m}}else{var v=this.convertWhitespaceNodesToSpace(c,!0),g=v.space,b=v.rawSpace;b||(b=g);var x={},F={spaces:{}};g.endsWith(\" \")&&b.endsWith(\" \")?(x.before=g.slice(0,g.length-1),F.spaces.before=b.slice(0,b.length-1)):g.startsWith(\" \")&&b.startsWith(\" \")?(x.after=g.slice(1),F.spaces.after=b.slice(1)):F.value=b,p=new Ui.default({value:\" \",source:Gi(f,this.tokens[this.position-1]),sourceIndex:f[w.FIELDS.START_POS],spaces:x,raws:F})}return this.currToken&&this.currToken[w.FIELDS.TYPE]===_.space&&(p.spaces.after=this.optionalSpace(this.content()),this.position++),this.newNode(p)},t.comma=function(){if(this.position===this.tokens.length-1){this.root.trailingComma=!0,this.position++;return}this.current._inferEndPosition();var r=new Wi.default({source:{start:qs(this.tokens[this.position+1])}});this.current.parent.append(r),this.current=r,this.position++},t.comment=function(){var r=this.currToken;this.newNode(new Ns.default({value:this.content(),source:Ft(r),sourceIndex:r[w.FIELDS.START_POS]})),this.position++},t.error=function(r,i){throw this.root.error(r,i)},t.missingBackslash=function(){return this.error(\"Expected a backslash preceding the semicolon.\",{index:this.currToken[w.FIELDS.START_POS]})},t.missingParenthesis=function(){return this.expected(\"opening parenthesis\",this.currToken[w.FIELDS.START_POS])},t.missingSquareBracket=function(){return this.expected(\"opening square bracket\",this.currToken[w.FIELDS.START_POS])},t.unexpected=function(){return this.error(\"Unexpected '\"+this.content()+\"'. Escaping special characters with \\\\ may help.\",this.currToken[w.FIELDS.START_POS])},t.namespace=function(){var r=this.prevToken&&this.content(this.prevToken)||!0;if(this.nextToken[w.FIELDS.TYPE]===_.word)return this.position++,this.word(r);if(this.nextToken[w.FIELDS.TYPE]===_.asterisk)return this.position++,this.universal(r)},t.nesting=function(){if(this.nextToken){var r=this.content(this.nextToken);if(r===\"|\"){this.position++;return}}var i=this.currToken;this.newNode(new Qp.default({value:this.content(),source:Ft(i),sourceIndex:i[w.FIELDS.START_POS]})),this.position++},t.parentheses=function(){var r=this.current.last,i=1;if(this.position++,r&&r.type===Jp.PSEUDO){var o=new Wi.default({source:{start:qs(this.tokens[this.position-1])}}),u=this.current;for(r.append(o),this.current=o;this.position<this.tokens.length&&i;)this.currToken[w.FIELDS.TYPE]===_.openParenthesis&&i++,this.currToken[w.FIELDS.TYPE]===_.closeParenthesis&&i--,i?this.parse():(this.current.source.end=Us(this.currToken),this.current.parent.source.end=Us(this.currToken),this.position++);this.current=u}else{for(var s=this.currToken,a=\"(\",l;this.position<this.tokens.length&&i;)this.currToken[w.FIELDS.TYPE]===_.openParenthesis&&i++,this.currToken[w.FIELDS.TYPE]===_.closeParenthesis&&i--,l=this.currToken,a+=this.parseParenthesisToken(this.currToken),this.position++;r?r.appendToPropertyAndEscape(\"value\",a,a):this.newNode(new qi.default({value:a,source:st(s[w.FIELDS.START_LINE],s[w.FIELDS.START_COL],l[w.FIELDS.END_LINE],l[w.FIELDS.END_COL]),sourceIndex:s[w.FIELDS.START_POS]}))}if(i)return this.expected(\"closing parenthesis\",this.currToken[w.FIELDS.START_POS])},t.pseudo=function(){for(var r=this,i=\"\",o=this.currToken;this.currToken&&this.currToken[w.FIELDS.TYPE]===_.colon;)i+=this.content(),this.position++;if(!this.currToken)return this.expected([\"pseudo-class\",\"pseudo-element\"],this.position-1);if(this.currToken[w.FIELDS.TYPE]===_.word)this.splitWord(!1,function(u,s){i+=u,r.newNode(new Yp.default({value:i,source:Gi(o,r.currToken),sourceIndex:o[w.FIELDS.START_POS]})),s>1&&r.nextToken&&r.nextToken[w.FIELDS.TYPE]===_.openParenthesis&&r.error(\"Misplaced parenthesis.\",{index:r.nextToken[w.FIELDS.START_POS]})});else return this.expected([\"pseudo-class\",\"pseudo-element\"],this.currToken[w.FIELDS.START_POS])},t.space=function(){var r=this.content();this.position===0||this.prevToken[w.FIELDS.TYPE]===_.comma||this.prevToken[w.FIELDS.TYPE]===_.openParenthesis||this.current.nodes.every(function(i){return i.type===\"comment\"})?(this.spaces=this.optionalSpace(r),this.position++):this.position===this.tokens.length-1||this.nextToken[w.FIELDS.TYPE]===_.comma||this.nextToken[w.FIELDS.TYPE]===_.closeParenthesis?(this.current.last.spaces.after=this.optionalSpace(r),this.position++):this.combinator()},t.string=function(){var r=this.currToken;this.newNode(new qi.default({value:this.content(),source:Ft(r),sourceIndex:r[w.FIELDS.START_POS]})),this.position++},t.universal=function(r){var i=this.nextToken;if(i&&this.content(i)===\"|\")return this.position++,this.namespace();var o=this.currToken;this.newNode(new Xp.default({value:this.content(),source:Ft(o),sourceIndex:o[w.FIELDS.START_POS]}),r),this.position++},t.splitWord=function(r,i){for(var o=this,u=this.nextToken,s=this.content();u&&~[_.dollar,_.caret,_.equals,_.word].indexOf(u[w.FIELDS.TYPE]);){this.position++;var a=this.content();if(s+=a,a.lastIndexOf(\"\\\\\")===a.length-1){var l=this.nextToken;l&&l[w.FIELDS.TYPE]===_.space&&(s+=this.requiredSpace(this.content(l)),this.position++)}u=this.nextToken}var f=ji(s,\".\").filter(function(d){var m=s[d-1]===\"\\\\\",v=/^\\d+\\.\\d+%$/.test(s);return!m&&!v}),c=ji(s,\"#\").filter(function(d){return s[d-1]!==\"\\\\\"}),p=ji(s,\"#{\");p.length&&(c=c.filter(function(d){return!~p.indexOf(d)}));var h=(0,Kp.default)(t0([0].concat(f,c)));h.forEach(function(d,m){var v=h[m+1]||s.length,g=s.slice(d,v);if(m===0&&i)return i.call(o,g,h.length);var b,x=o.currToken,F=x[w.FIELDS.START_POS]+h[m],y=st(x[1],x[2]+d,x[3],x[2]+(v-1));if(~f.indexOf(d)){var k={value:g.slice(1),source:y,sourceIndex:F};b=new jp.default(wt(k,\"value\"))}else if(~c.indexOf(d)){var P={value:g.slice(1),source:y,sourceIndex:F};b=new Hp.default(wt(P,\"value\"))}else{var B={value:g,source:y,sourceIndex:F};wt(B,\"value\"),b=new Vp.default(B)}o.newNode(b,r),r=null}),this.position++},t.word=function(r){var i=this.nextToken;return i&&this.content(i)===\"|\"?(this.position++,this.namespace()):this.splitWord(r)},t.loop=function(){for(;this.position<this.tokens.length;)this.parse(!0);return this.current._inferEndPosition(),this.root},t.parse=function(r){switch(this.currToken[w.FIELDS.TYPE]){case _.space:this.space();break;case _.comment:this.comment();break;case _.openParenthesis:this.parentheses();break;case _.closeParenthesis:r&&this.missingParenthesis();break;case _.openSquare:this.attribute();break;case _.dollar:case _.caret:case _.equals:case _.word:this.word();break;case _.colon:this.pseudo();break;case _.comma:this.comma();break;case _.asterisk:this.universal();break;case _.ampersand:this.nesting();break;case _.slash:case _.combinator:this.combinator();break;case _.str:this.string();break;case _.closeSquare:this.missingSquareBracket();case _.semicolon:this.missingBackslash();default:this.unexpected()}},t.expected=function(r,i,o){if(Array.isArray(r)){var u=r.pop();r=r.join(\", \")+\" or \"+u}var s=/^[aeiou]/.test(r[0])?\"an\":\"a\";return o?this.error(\"Expected \"+s+\" \"+r+', found \"'+o+'\" instead.',{index:i}):this.error(\"Expected \"+s+\" \"+r+\".\",{index:i})},t.requiredSpace=function(r){return this.options.lossy?\" \":r},t.optionalSpace=function(r){return this.options.lossy?\"\":r},t.lossySpace=function(r,i){return this.options.lossy?i?\" \":\"\":r},t.parseParenthesisToken=function(r){var i=this.content(r);return r[w.FIELDS.TYPE]===_.space?this.requiredSpace(i):i},t.newNode=function(r,i){return i&&(/^ +$/.test(i)&&(this.options.lossy||(this.spaces=(this.spaces||\"\")+i),i=!0),r.namespace=i,wt(r,\"namespace\")),this.spaces&&(r.spaces.before=this.spaces,this.spaces=\"\"),this.current.append(r)},t.content=function(r){return r===void 0&&(r=this.currToken),this.css.slice(r[w.FIELDS.START_POS],r[w.FIELDS.END_POS])},t.locateNextMeaningfulToken=function(r){r===void 0&&(r=this.position+1);for(var i=r;i<this.tokens.length;)if(e0[this.tokens[i][w.FIELDS.TYPE]]){i++;continue}else return i;return-1},Zp(e,[{key:\"currToken\",get:function(){return this.tokens[this.position]}},{key:\"nextToken\",get:function(){return this.tokens[this.position+1]}},{key:\"prevToken\",get:function(){return this.tokens[this.position-1]}}]),e}();cr.default=r0;Gs.exports=cr.default});var Vs=T((dr,Hs)=>{\"use strict\";dr.__esModule=!0;dr.default=void 0;var n0=i0(js());function i0(e){return e&&e.__esModule?e:{default:e}}var o0=function(){function e(n,r){this.func=n||function(){},this.funcRes=null,this.options=r}var t=e.prototype;return t._shouldUpdateSelector=function(r,i){i===void 0&&(i={});var o=Object.assign({},this.options,i);return o.updateSelector===!1?!1:typeof r!=\"string\"},t._isLossy=function(r){r===void 0&&(r={});var i=Object.assign({},this.options,r);return i.lossless===!1},t._root=function(r,i){i===void 0&&(i={});var o=new n0.default(r,this._parseOptions(i));return o.root},t._parseOptions=function(r){return{lossy:this._isLossy(r)}},t._run=function(r,i){var o=this;return i===void 0&&(i={}),new Promise(function(u,s){try{var a=o._root(r,i);Promise.resolve(o.func(a)).then(function(l){var f=void 0;return o._shouldUpdateSelector(r,i)&&(f=a.toString(),r.selector=f),{transform:l,root:a,string:f}}).then(u,s)}catch(l){s(l);return}})},t._runSync=function(r,i){i===void 0&&(i={});var o=this._root(r,i),u=this.func(o);if(u&&typeof u.then==\"function\")throw new Error(\"Selector processor returned a promise to a synchronous call.\");var s=void 0;return i.updateSelector&&typeof r!=\"string\"&&(s=o.toString(),r.selector=s),{transform:u,root:o,string:s}},t.ast=function(r,i){return this._run(r,i).then(function(o){return o.root})},t.astSync=function(r,i){return this._runSync(r,i).root},t.transform=function(r,i){return this._run(r,i).then(function(o){return o.transform})},t.transformSync=function(r,i){return this._runSync(r,i).transform},t.process=function(r,i){return this._run(r,i).then(function(o){return o.string||o.root.toString()})},t.processSync=function(r,i){var o=this._runSync(r,i);return o.string||o.root.toString()},e}();dr.default=o0;Hs.exports=dr.default});var Ys=T(J=>{\"use strict\";J.__esModule=!0;J.universal=J.tag=J.string=J.selector=J.root=J.pseudo=J.nesting=J.id=J.comment=J.combinator=J.className=J.attribute=void 0;var u0=Se(Oi()),s0=Se(hi()),a0=Se(Ri()),l0=Se(Di()),f0=Se(bi()),c0=Se(Mi()),d0=Se(Ci()),p0=Se(li()),h0=Se(ci()),m0=Se(wi()),D0=Se(xi()),g0=Se(Bi());function Se(e){return e&&e.__esModule?e:{default:e}}var b0=function(t){return new u0.default(t)};J.attribute=b0;var v0=function(t){return new s0.default(t)};J.className=v0;var y0=function(t){return new a0.default(t)};J.combinator=y0;var x0=function(t){return new l0.default(t)};J.comment=x0;var F0=function(t){return new f0.default(t)};J.id=F0;var w0=function(t){return new c0.default(t)};J.nesting=w0;var E0=function(t){return new d0.default(t)};J.pseudo=E0;var C0=function(t){return new p0.default(t)};J.root=C0;var _0=function(t){return new h0.default(t)};J.selector=_0;var S0=function(t){return new m0.default(t)};J.string=S0;var k0=function(t){return new D0.default(t)};J.tag=k0;var T0=function(t){return new g0.default(t)};J.universal=T0});var Js=T(U=>{\"use strict\";U.__esModule=!0;U.isNode=Vi;U.isPseudoElement=Ks;U.isPseudoClass=W0;U.isContainer=q0;U.isNamespace=U0;U.isUniversal=U.isTag=U.isString=U.isSelector=U.isRoot=U.isPseudo=U.isNesting=U.isIdentifier=U.isComment=U.isCombinator=U.isClassName=U.isAttribute=void 0;var ne=pe(),ye,A0=(ye={},ye[ne.ATTRIBUTE]=!0,ye[ne.CLASS]=!0,ye[ne.COMBINATOR]=!0,ye[ne.COMMENT]=!0,ye[ne.ID]=!0,ye[ne.NESTING]=!0,ye[ne.PSEUDO]=!0,ye[ne.ROOT]=!0,ye[ne.SELECTOR]=!0,ye[ne.STRING]=!0,ye[ne.TAG]=!0,ye[ne.UNIVERSAL]=!0,ye);function Vi(e){return typeof e==\"object\"&&A0[e.type]}function ke(e,t){return Vi(t)&&t.type===e}var Xs=ke.bind(null,ne.ATTRIBUTE);U.isAttribute=Xs;var O0=ke.bind(null,ne.CLASS);U.isClassName=O0;var P0=ke.bind(null,ne.COMBINATOR);U.isCombinator=P0;var B0=ke.bind(null,ne.COMMENT);U.isComment=B0;var I0=ke.bind(null,ne.ID);U.isIdentifier=I0;var R0=ke.bind(null,ne.NESTING);U.isNesting=R0;var Yi=ke.bind(null,ne.PSEUDO);U.isPseudo=Yi;var L0=ke.bind(null,ne.ROOT);U.isRoot=L0;var M0=ke.bind(null,ne.SELECTOR);U.isSelector=M0;var N0=ke.bind(null,ne.STRING);U.isString=N0;var Qs=ke.bind(null,ne.TAG);U.isTag=Qs;var $0=ke.bind(null,ne.UNIVERSAL);U.isUniversal=$0;function Ks(e){return Yi(e)&&e.value&&(e.value.startsWith(\"::\")||e.value.toLowerCase()===\":before\"||e.value.toLowerCase()===\":after\"||e.value.toLowerCase()===\":first-letter\"||e.value.toLowerCase()===\":first-line\")}function W0(e){return Yi(e)&&!Ks(e)}function q0(e){return!!(Vi(e)&&e.walk)}function U0(e){return Xs(e)||Qs(e)}});var Zs=T(Pe=>{\"use strict\";Pe.__esModule=!0;var Xi=pe();Object.keys(Xi).forEach(function(e){e===\"default\"||e===\"__esModule\"||e in Pe&&Pe[e]===Xi[e]||(Pe[e]=Xi[e])});var Qi=Ys();Object.keys(Qi).forEach(function(e){e===\"default\"||e===\"__esModule\"||e in Pe&&Pe[e]===Qi[e]||(Pe[e]=Qi[e])});var Ki=Js();Object.keys(Ki).forEach(function(e){e===\"default\"||e===\"__esModule\"||e in Pe&&Pe[e]===Ki[e]||(Pe[e]=Ki[e])})});var ra=T((pr,ta)=>{\"use strict\";pr.__esModule=!0;pr.default=void 0;var z0=H0(Vs()),G0=j0(Zs());function ea(){if(typeof WeakMap!=\"function\")return null;var e=new WeakMap;return ea=function(){return e},e}function j0(e){if(e&&e.__esModule)return e;if(e===null||typeof e!=\"object\"&&typeof e!=\"function\")return{default:e};var t=ea();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=r?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}function H0(e){return e&&e.__esModule?e:{default:e}}var Ji=function(t){return new z0.default(t)};Object.assign(Ji,G0);delete Ji.__esModule;var V0=Ji;pr.default=V0;ta.exports=pr.default});var na=T(Zi=>{\"use strict\";Object.defineProperty(Zi,\"__esModule\",{value:!0});Object.defineProperty(Zi,\"default\",{enumerable:!0,get:()=>Y0});function Y0(e){return e.replace(/\\\\,/g,\"\\\\2c \")}});var oa=T((mb,ia)=>{\"use strict\";ia.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}});var to=T(eo=>{\"use strict\";Object.defineProperty(eo,\"__esModule\",{value:!0});function X0(e,t){for(var n in t)Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}X0(eo,{parseColor:()=>th,formatColor:()=>rh});var ua=Q0(oa());function Q0(e){return e&&e.__esModule?e:{default:e}}var K0=/^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i,J0=/^#([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i,Ze=/(?:\\d+|\\d*\\.\\d+)%?/,fn=/(?:\\s*,\\s*|\\s+)/,sa=/\\s*[,/]\\s*/,et=/var\\(--(?:[^ )]*?)\\)/,Z0=new RegExp(`^(rgb)a?\\\\(\\\\s*(${Ze.source}|${et.source})(?:${fn.source}(${Ze.source}|${et.source}))?(?:${fn.source}(${Ze.source}|${et.source}))?(?:${sa.source}(${Ze.source}|${et.source}))?\\\\s*\\\\)$`),eh=new RegExp(`^(hsl)a?\\\\(\\\\s*((?:${Ze.source})(?:deg|rad|grad|turn)?|${et.source})(?:${fn.source}(${Ze.source}|${et.source}))?(?:${fn.source}(${Ze.source}|${et.source}))?(?:${sa.source}(${Ze.source}|${et.source}))?\\\\s*\\\\)$`);function th(e,{loose:t=!1}={}){var n,r;if(typeof e!=\"string\")return null;if(e=e.trim(),e===\"transparent\")return{mode:\"rgb\",color:[\"0\",\"0\",\"0\"],alpha:\"0\"};if(e in ua.default)return{mode:\"rgb\",color:ua.default[e].map(a=>a.toString())};let i=e.replace(J0,(a,l,f,c,p)=>[\"#\",l,l,f,f,c,c,p?p+p:\"\"].join(\"\")).match(K0);if(i!==null)return{mode:\"rgb\",color:[parseInt(i[1],16),parseInt(i[2],16),parseInt(i[3],16)].map(a=>a.toString()),alpha:i[4]?(parseInt(i[4],16)/255).toString():void 0};var o;let u=(o=e.match(Z0))!==null&&o!==void 0?o:e.match(eh);if(u===null)return null;let s=[u[2],u[3],u[4]].filter(Boolean).map(a=>a.toString());return!t&&s.length!==3||s.length<3&&!s.some(a=>/^var\\(.*?\\)$/.test(a))?null:{mode:u[1],color:s,alpha:(n=u[5])===null||n===void 0||(r=n.toString)===null||r===void 0?void 0:r.call(n)}}function rh({mode:e,color:t,alpha:n}){let r=n!==void 0;return`${e}(${t.join(\" \")}${r?` / ${n}`:\"\"})`}});var no=T(ro=>{\"use strict\";Object.defineProperty(ro,\"__esModule\",{value:!0});function nh(e,t){for(var n in t)Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}nh(ro,{withAlphaValue:()=>ih,default:()=>oh});var cn=to();function ih(e,t,n){if(typeof e==\"function\")return e({opacityValue:t});let r=(0,cn.parseColor)(e,{loose:!0});return r===null?n:(0,cn.formatColor)({...r,alpha:t})}function oh({color:e,property:t,variable:n}){let r=[].concat(t);if(typeof e==\"function\")return{[n]:\"1\",...Object.fromEntries(r.map(o=>[o,e({opacityVariable:n,opacityValue:`var(${n})`})]))};let i=(0,cn.parseColor)(e);return i===null?Object.fromEntries(r.map(o=>[o,e])):i.alpha!==void 0?Object.fromEntries(r.map(o=>[o,e])):{[n]:\"1\",...Object.fromEntries(r.map(o=>[o,(0,cn.formatColor)({...i,alpha:`var(${n})`})]))}}});var da=T(io=>{\"use strict\";Object.defineProperty(io,\"__esModule\",{value:!0});function uh(e,t){for(var n in t)Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}uh(io,{pattern:()=>ah,withoutCapturing:()=>la,any:()=>fa,optional:()=>lh,zeroOrMore:()=>fh,nestedBrackets:()=>ca,escape:()=>at});var aa=/[\\\\^$.*+?()[\\]{}|]/g,sh=RegExp(aa.source);function hr(e){return e=Array.isArray(e)?e:[e],e=e.map(t=>t instanceof RegExp?t.source:t),e.join(\"\")}function ah(e){return new RegExp(hr(e),\"g\")}function la(e){return new RegExp(`(?:${hr(e)})`,\"g\")}function fa(e){return`(?:${e.map(hr).join(\"|\")})`}function lh(e){return`(?:${hr(e)})?`}function fh(e){return`(?:${hr(e)})*`}function ca(e,t,n=1){return la([at(e),/[^\\s]*/,n===1?`[^${at(e)}${at(t)}s]*`:fa([`[^${at(e)}${at(t)}s]*`,ca(e,t,n-1)]),/[^\\s]*/,at(t)])}function at(e){return e&&sh.test(e)?e.replace(aa,\"\\\\$&\"):e||\"\"}});var ha=T(oo=>{\"use strict\";Object.defineProperty(oo,\"__esModule\",{value:!0});Object.defineProperty(oo,\"splitAtTopLevelOnly\",{enumerable:!0,get:()=>ph});var ch=dh(da());function pa(e){if(typeof WeakMap!=\"function\")return null;var t=new WeakMap,n=new WeakMap;return(pa=function(r){return r?n:t})(e)}function dh(e,t){if(!t&&e&&e.__esModule)return e;if(e===null||typeof e!=\"object\"&&typeof e!=\"function\")return{default:e};var n=pa(t);if(n&&n.has(e))return n.get(e);var r={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(o!==\"default\"&&Object.prototype.hasOwnProperty.call(e,o)){var u=i?Object.getOwnPropertyDescriptor(e,o):null;u&&(u.get||u.set)?Object.defineProperty(r,o,u):r[o]=e[o]}return r.default=e,n&&n.set(e,r),r}function*ph(e,t){let n=new RegExp(`[(){}\\\\[\\\\]${ch.escape(t)}]`,\"g\"),r=0,i=0,o=!1,u=0,s=0,a=t.length;for(let l of e.matchAll(n)){let f=l[0]===t[u],c=u===a-1,p=f&&c;l[0]===\"(\"&&r++,l[0]===\")\"&&r--,l[0]===\"[\"&&r++,l[0]===\"]\"&&r--,l[0]===\"{\"&&r++,l[0]===\"}\"&&r--,f&&r===0&&(s===0&&(s=l.index),u++),p&&r===0&&(o=!0,yield e.substring(i,s),i=s+a),u===a&&(u=0,s=0)}o?yield e.substring(i):yield e}});var Da=T(uo=>{\"use strict\";Object.defineProperty(uo,\"__esModule\",{value:!0});function hh(e,t){for(var n in t)Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}hh(uo,{parseBoxShadowValue:()=>bh,formatBoxShadowValue:()=>vh});var mh=ha(),Dh=new Set([\"inset\",\"inherit\",\"initial\",\"revert\",\"unset\"]),gh=/\\ +(?![^(]*\\))/g,ma=/^-?(\\d+|\\.\\d+)(.*?)$/g;function bh(e){return Array.from((0,mh.splitAtTopLevelOnly)(e,\",\")).map(n=>{let r=n.trim(),i={raw:r},o=r.split(gh),u=new Set;for(let s of o)ma.lastIndex=0,!u.has(\"KEYWORD\")&&Dh.has(s)?(i.keyword=s,u.add(\"KEYWORD\")):ma.test(s)?u.has(\"X\")?u.has(\"Y\")?u.has(\"BLUR\")?u.has(\"SPREAD\")||(i.spread=s,u.add(\"SPREAD\")):(i.blur=s,u.add(\"BLUR\")):(i.y=s,u.add(\"Y\")):(i.x=s,u.add(\"X\")):i.color?(i.unknown||(i.unknown=[]),i.unknown.push(s)):i.color=s;return i.valid=i.x!==void 0&&i.y!==void 0,i})}function vh(e){return e.map(t=>t.valid?[t.keyword,t.x,t.y,t.blur,t.spread,t.color].filter(Boolean).join(\" \"):t.raw).join(\", \")}});var wa=T(ao=>{\"use strict\";Object.defineProperty(ao,\"__esModule\",{value:!0});function yh(e,t){for(var n in t)Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}yh(ao,{normalize:()=>tt,url:()=>va,number:()=>wh,percentage:()=>ya,length:()=>xa,lineWidth:()=>_h,shadow:()=>Sh,color:()=>kh,image:()=>Th,gradient:()=>Fa,position:()=>Ph,familyName:()=>Bh,genericName:()=>Rh,absoluteSize:()=>Mh,relativeSize:()=>$h});var xh=to(),Fh=Da(),so=[\"min\",\"max\",\"clamp\",\"calc\"],ba=/,(?![^(]*\\))/g,dn=/_(?![^(]*\\))/g;function tt(e,t=!0){return e.includes(\"url(\")?e.split(/(url\\(.*?\\))/g).filter(Boolean).map(n=>/^url\\(.*?\\)$/.test(n)?n:tt(n,!1)).join(\"\"):(e=e.replace(/([^\\\\])_+/g,(n,r)=>r+\" \".repeat(n.length-1)).replace(/^_/g,\" \").replace(/\\\\_/g,\"_\"),t&&(e=e.trim()),e=e.replace(/(calc|min|max|clamp)\\(.+\\)/g,n=>n.replace(/(-?\\d*\\.?\\d(?!\\b-.+[,)](?![^+\\-/*])\\D)(?:%|[a-z]+)?|\\))([+\\-/*])/g,\"$1 $2 \")),e)}function va(e){return e.startsWith(\"url(\")}function wh(e){return!isNaN(Number(e))||so.some(t=>new RegExp(`^${t}\\\\(.+?`).test(e))}function ya(e){return e.split(dn).every(t=>/%$/g.test(t)||so.some(n=>new RegExp(`^${n}\\\\(.+?%`).test(t)))}var Eh=[\"cm\",\"mm\",\"Q\",\"in\",\"pc\",\"pt\",\"px\",\"em\",\"ex\",\"ch\",\"rem\",\"lh\",\"vw\",\"vh\",\"vmin\",\"vmax\"],ga=`(?:${Eh.join(\"|\")})`;function xa(e){return e.split(dn).every(t=>t===\"0\"||new RegExp(`${ga}$`).test(t)||so.some(n=>new RegExp(`^${n}\\\\(.+?${ga}`).test(t)))}var Ch=new Set([\"thin\",\"medium\",\"thick\"]);function _h(e){return Ch.has(e)}function Sh(e){let t=(0,Fh.parseBoxShadowValue)(tt(e));for(let n of t)if(!n.valid)return!1;return!0}function kh(e){let t=0;return e.split(dn).every(r=>(r=tt(r),r.startsWith(\"var(\")?!0:(0,xh.parseColor)(r,{loose:!0})!==null?(t++,!0):!1))?t>0:!1}function Th(e){let t=0;return e.split(ba).every(r=>(r=tt(r),r.startsWith(\"var(\")?!0:va(r)||Fa(r)||[\"element(\",\"image(\",\"cross-fade(\",\"image-set(\"].some(i=>r.startsWith(i))?(t++,!0):!1))?t>0:!1}var Ah=new Set([\"linear-gradient\",\"radial-gradient\",\"repeating-linear-gradient\",\"repeating-radial-gradient\",\"conic-gradient\"]);function Fa(e){e=tt(e);for(let t of Ah)if(e.startsWith(`${t}(`))return!0;return!1}var Oh=new Set([\"center\",\"top\",\"right\",\"bottom\",\"left\"]);function Ph(e){let t=0;return e.split(dn).every(r=>(r=tt(r),r.startsWith(\"var(\")?!0:Oh.has(r)||xa(r)||ya(r)?(t++,!0):!1))?t>0:!1}function Bh(e){let t=0;return e.split(ba).every(r=>(r=tt(r),r.startsWith(\"var(\")?!0:r.includes(\" \")&&!/(['\"])([^\"']+)\\1/g.test(r)||/^\\d/g.test(r)?!1:(t++,!0)))?t>0:!1}var Ih=new Set([\"serif\",\"sans-serif\",\"monospace\",\"cursive\",\"fantasy\",\"system-ui\",\"ui-serif\",\"ui-sans-serif\",\"ui-monospace\",\"ui-rounded\",\"math\",\"emoji\",\"fangsong\"]);function Rh(e){return Ih.has(e)}var Lh=new Set([\"xx-small\",\"x-small\",\"small\",\"medium\",\"large\",\"x-large\",\"x-large\",\"xxx-large\"]);function Mh(e){return Lh.has(e)}var Nh=new Set([\"larger\",\"smaller\"]);function $h(e){return Nh.has(e)}});var Oa=T(co=>{\"use strict\";Object.defineProperty(co,\"__esModule\",{value:!0});function Wh(e,t){for(var n in t)Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}Wh(co,{updateAllClasses:()=>zh,asValue:()=>Dr,parseColorFormat:()=>lo,asColor:()=>ka,asLookupValue:()=>Ta,coerceValue:()=>Vh});var qh=fo(ra()),Uh=fo(na()),Ea=no(),xe=wa(),Ca=fo(Xn());function fo(e){return e&&e.__esModule?e:{default:e}}function zh(e,t){return(0,qh.default)(i=>{i.walkClasses(o=>{let u=t(o.value);o.value=u,o.raws&&o.raws.value&&(o.raws.value=(0,Uh.default)(o.raws.value))})}).processSync(e)}function Sa(e,t){if(!mr(e))return;let n=e.slice(1,-1);if(t(n))return(0,xe.normalize)(n)}function Gh(e,t={},n){let r=t[e];if(r!==void 0)return(0,Ca.default)(r);if(mr(e)){let i=Sa(e,n);return i===void 0?void 0:(0,Ca.default)(i)}}function Dr(e,t={},{validate:n=()=>!0}={}){var r;let i=(r=t.values)===null||r===void 0?void 0:r[e];return i!==void 0?i:t.supportsNegativeValues&&e.startsWith(\"-\")?Gh(e.slice(1),t.values,n):Sa(e,n)}function mr(e){return e.startsWith(\"[\")&&e.endsWith(\"]\")}function jh(e){let t=e.lastIndexOf(\"/\");return t===-1||t===e.length-1?[e]:[e.slice(0,t),e.slice(t+1)]}function lo(e){if(typeof e==\"string\"&&e.includes(\"<alpha-value>\")){let t=e;return({opacityValue:n=1})=>t.replace(\"<alpha-value>\",n)}return e}function ka(e,t={},{tailwindConfig:n={}}={}){var r;if(((r=t.values)===null||r===void 0?void 0:r[e])!==void 0){var i;return lo((i=t.values)===null||i===void 0?void 0:i[e])}let[o,u]=jh(e);if(u!==void 0){var s,a,l,f;let c=(f=(s=t.values)===null||s===void 0?void 0:s[o])!==null&&f!==void 0?f:mr(o)?o.slice(1,-1):void 0;return c===void 0?void 0:(c=lo(c),mr(u)?(0,Ea.withAlphaValue)(c,u.slice(1,-1)):((a=n.theme)===null||a===void 0||(l=a.opacity)===null||l===void 0?void 0:l[u])===void 0?void 0:(0,Ea.withAlphaValue)(c,n.theme.opacity[u]))}return Dr(e,t,{validate:xe.color})}function Ta(e,t={}){var n;return(n=t.values)===null||n===void 0?void 0:n[e]}function Te(e){return(t,n)=>Dr(t,n,{validate:e})}var Aa={any:Dr,color:ka,url:Te(xe.url),image:Te(xe.image),length:Te(xe.length),percentage:Te(xe.percentage),position:Te(xe.position),lookup:Ta,\"generic-name\":Te(xe.genericName),\"family-name\":Te(xe.familyName),number:Te(xe.number),\"line-width\":Te(xe.lineWidth),\"absolute-size\":Te(xe.absoluteSize),\"relative-size\":Te(xe.relativeSize),shadow:Te(xe.shadow)},_a=Object.keys(Aa);function Hh(e,t){let n=e.indexOf(t);return n===-1?[void 0,e]:[e.slice(0,n),e.slice(n+1)]}function Vh(e,t,n,r){if(mr(t)){let i=t.slice(1,-1),[o,u]=Hh(i,\":\");if(!/^[\\w-_]+$/g.test(o))u=i;else if(o!==void 0&&!_a.includes(o))return[];if(u.length>0&&_a.includes(o))return[Dr(`[${u}]`,n),o]}for(let i of[].concat(e)){let o=Aa[i](t,n,{tailwindConfig:r});if(o!==void 0)return[o,i]}return[]}});var Pa=T(po=>{\"use strict\";Object.defineProperty(po,\"__esModule\",{value:!0});Object.defineProperty(po,\"default\",{enumerable:!0,get:()=>Yh});function Yh(e){return typeof e==\"function\"?e({}):e}});var Ma=T(mo=>{\"use strict\";Object.defineProperty(mo,\"__esModule\",{value:!0});Object.defineProperty(mo,\"default\",{enumerable:!0,get:()=>hm});var Xh=lt(Xn()),Qh=lt(Wu()),Kh=lt(qu()),Jh=lt(Jn()),Zh=lt(zu()),Ra=Gu(),Ba=ju(),em=Vu(),tm=lt(Yu()),rm=Xu(),nm=Oa(),im=no(),om=lt(Pa());function lt(e){return e&&e.__esModule?e:{default:e}}function Et(e){return typeof e==\"function\"}function gr(e){return typeof e==\"object\"&&e!==null}function br(e,...t){let n=t.pop();for(let r of t)for(let i in r){let o=n(e[i],r[i]);o===void 0?gr(e[i])&&gr(r[i])?e[i]=br(e[i],r[i],n):e[i]=r[i]:e[i]=o}return e}var ho={colors:Zh.default,negative(e){return Object.keys(e).filter(t=>e[t]!==\"0\").reduce((t,n)=>{let r=(0,Xh.default)(e[n]);return r!==void 0&&(t[`-${n}`]=r),t},{})},breakpoints(e){return Object.keys(e).filter(t=>typeof e[t]==\"string\").reduce((t,n)=>({...t,[`screen-${n}`]:e[n]}),{})}};function um(e,...t){return Et(e)?e(...t):e}function sm(e){return e.reduce((t,{extend:n})=>br(t,n,(r,i)=>r===void 0?[i]:Array.isArray(r)?[i,...r]:[i,r]),{})}function am(e){return{...e.reduce((t,n)=>(0,Ra.defaults)(t,n),{}),extend:sm(e)}}function Ia(e,t){if(Array.isArray(e)&&gr(e[0]))return e.concat(t);if(Array.isArray(t)&&gr(t[0])&&gr(e))return[e,...t];if(Array.isArray(t))return t}function lm({extend:e,...t}){return br(t,e,(n,r)=>!Et(n)&&!r.some(Et)?br({},n,...r,Ia):(i,o)=>br({},...[n,...r].map(u=>um(u,i,o)),Ia))}function*fm(e){let t=(0,Ba.toPath)(e);if(t.length===0||(yield t,Array.isArray(e)))return;let n=/^(.*?)\\s*\\/\\s*([^/]+)$/,r=e.match(n);if(r!==null){let[,i,o]=r,u=(0,Ba.toPath)(i);u.alpha=o,yield u}}function cm(e){let t=(n,r)=>{for(let i of fm(n)){let o=0,u=e;for(;u!=null&&o<i.length;)u=u[i[o++]],u=Et(u)&&(i.alpha===void 0||o<=i.length-1)?u(t,ho):u;if(u!==void 0){if(i.alpha!==void 0){let s=(0,nm.parseColorFormat)(u);return(0,im.withAlphaValue)(s,i.alpha,(0,om.default)(s))}return(0,tm.default)(u)?(0,rm.cloneDeep)(u):u}}return r};return Object.assign(t,{theme:t,...ho}),Object.keys(e).reduce((n,r)=>(n[r]=Et(e[r])?e[r](t,ho):e[r],n),{})}function La(e){let t=[];return e.forEach(n=>{t=[...t,n];var r;let i=(r=n==null?void 0:n.plugins)!==null&&r!==void 0?r:[];i.length!==0&&i.forEach(o=>{o.__isOptionsFunction&&(o=o());var u;t=[...t,...La([(u=o==null?void 0:o.config)!==null&&u!==void 0?u:{}])]})}),t}function dm(e){return[...e].reduceRight((n,r)=>Et(r)?r({corePlugins:n}):(0,Kh.default)(r,n),Qh.default)}function pm(e){return[...e].reduceRight((n,r)=>[...n,...r],[])}function hm(e){let t=[...La(e),{prefix:\"\",important:!1,separator:\":\",variantOrder:Jh.default.variantOrder}];var n,r;return(0,em.normalizeConfig)((0,Ra.defaults)({theme:cm(lm(am(t.map(i=>(n=i==null?void 0:i.theme)!==null&&n!==void 0?n:{})))),corePlugins:dm(t.map(i=>i.corePlugins)),plugins:pm(e.map(i=>(r=i==null?void 0:i.plugins)!==null&&r!==void 0?r:[]))},...t))}});var Na={};yn(Na,{default:()=>mm});var mm,$a=vn(()=>{mm={yellow:e=>e}});var za=T(Do=>{\"use strict\";Object.defineProperty(Do,\"__esModule\",{value:!0});function Dm(e,t){for(var n in t)Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}Dm(Do,{flagEnabled:()=>vm,issueFlagNotices:()=>ym,default:()=>xm});var gm=Ua(($a(),Ir(Na))),bm=Ua((Qr(),Ir(Xr)));function Ua(e){return e&&e.__esModule?e:{default:e}}var Wa={optimizeUniversalDefaults:!1},vr={future:[\"hoverOnlyWhenSupported\",\"respectDefaultRingColorOpacity\"],experimental:[\"optimizeUniversalDefaults\",\"matchVariant\"]};function vm(e,t){if(vr.future.includes(t)){var n,r,i;return e.future===\"all\"||((i=(r=e==null||(n=e.future)===null||n===void 0?void 0:n[t])!==null&&r!==void 0?r:Wa[t])!==null&&i!==void 0?i:!1)}if(vr.experimental.includes(t)){var o,u,s;return e.experimental===\"all\"||((s=(u=e==null||(o=e.experimental)===null||o===void 0?void 0:o[t])!==null&&u!==void 0?u:Wa[t])!==null&&s!==void 0?s:!1)}return!1}function qa(e){if(e.experimental===\"all\")return vr.experimental;var t;return Object.keys((t=e==null?void 0:e.experimental)!==null&&t!==void 0?t:{}).filter(n=>vr.experimental.includes(n)&&e.experimental[n])}function ym(e){if(process.env.JEST_WORKER_ID===void 0&&qa(e).length>0){let t=qa(e).map(n=>gm.default.yellow(n)).join(\", \");bm.default.warn(\"experimental-flags-enabled\",[`You have enabled experimental features: ${t}`,\"Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.\"])}}var xm=vr});var ja=T(go=>{\"use strict\";Object.defineProperty(go,\"__esModule\",{value:!0});Object.defineProperty(go,\"default\",{enumerable:!0,get:()=>Ga});var Fm=Em(Jn()),wm=za();function Em(e){return e&&e.__esModule?e:{default:e}}function Ga(e){var t;let n=((t=e==null?void 0:e.presets)!==null&&t!==void 0?t:[Fm.default]).slice().reverse().flatMap(o=>Ga(typeof o==\"function\"?o():o)),r={respectDefaultRingColorOpacity:{theme:{ringColor:{DEFAULT:\"#3b82f67f\"}}}},i=Object.keys(r).filter(o=>(0,wm.flagEnabled)(e,o)).map(o=>r[o]);return[e,...i,...n]}});var Va=T(bo=>{\"use strict\";Object.defineProperty(bo,\"__esModule\",{value:!0});Object.defineProperty(bo,\"default\",{enumerable:!0,get:()=>Sm});var Cm=Ha(Ma()),_m=Ha(ja());function Ha(e){return e&&e.__esModule?e:{default:e}}function Sm(...e){let[,...t]=(0,_m.default)(e[0]);return(0,Cm.default)([...e,...t])}});var Xa=T((kb,Ya)=>{var vo=Va();Ya.exports=(vo.__esModule?vo:{default:vo}).default});var gt;function Bl(e){gt=e}var At=null;async function qe(){return gt||(At?(await At,gt):(At=Promise.resolve().then(()=>(Ho(),jo)).then(e=>e.getYogaModule()).then(e=>gt=e),await At,At=null,gt))}var Ot=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Il=Ot((e,t)=>{t.exports=[\"em\",\"ex\",\"ch\",\"rem\",\"vh\",\"vw\",\"vmin\",\"vmax\",\"px\",\"mm\",\"cm\",\"in\",\"pt\",\"pc\",\"mozmm\"]}),Rl=Ot((e,t)=>{t.exports=[\"deg\",\"grad\",\"rad\",\"turn\"]}),Ll=Ot((e,t)=>{t.exports=[\"dpi\",\"dpcm\",\"dppx\"]}),Ml=Ot((e,t)=>{t.exports=[\"Hz\",\"kHz\"]}),Nl=Ot((e,t)=>{t.exports=[\"s\",\"ms\"]}),$l=Il(),Vo=Rl(),Yo=Ll(),Xo=Ml(),Qo=Nl();function Fn(e){if(/\\.\\D?$/.test(e))throw new Error(\"The dot should be followed by a number\");if(/^[+-]{2}/.test(e))throw new Error(\"Only one leading +/- is allowed\");if(Wl(e)>1)throw new Error(\"Only one dot is allowed\");if(/%$/.test(e)){this.type=\"percentage\",this.value=xn(e),this.unit=\"%\";return}var t=Ul(e);if(!t){this.type=\"number\",this.value=xn(e);return}this.type=Gl(t),this.value=xn(e.substr(0,e.length-t.length)),this.unit=t}Fn.prototype.valueOf=function(){return this.value};Fn.prototype.toString=function(){return this.value+(this.unit||\"\")};function Qe(e){return new Fn(e)}function Wl(e){var t=e.match(/\\./g);return t?t.length:0}function xn(e){var t=parseFloat(e);if(isNaN(t))throw new Error(\"Invalid number: \"+e);return t}var ql=[].concat(Vo,Xo,$l,Yo,Qo);function Ul(e){var t=e.match(/\\D+$/),n=t&&t[0];if(n&&ql.indexOf(n)===-1)throw new Error(\"Invalid unit: \"+n);return n}var zl=Object.assign(Rr(Vo,\"angle\"),Rr(Xo,\"frequency\"),Rr(Yo,\"resolution\"),Rr(Qo,\"time\"));function Rr(e,t){return Object.fromEntries(e.map(n=>[n,t]))}function Gl(e){return zl[e]||\"length\"}function bt(e){let t=typeof e;return!(t===\"number\"||t===\"bigint\"||t===\"string\"||t===\"boolean\")}function Ko(e){return/^class\\s/.test(e.toString())}function Jo(e){return\"dangerouslySetInnerHTML\"in e}function Zo(e){let t=typeof e>\"u\"?[]:[].concat(e).flat(1/0),n=[];for(let r=0;r<t.length;r++){let i=t[r];typeof i>\"u\"||typeof i==\"boolean\"||i===null||(typeof i==\"number\"&&(i=String(i)),typeof i==\"string\"&&n.length&&typeof n[n.length-1]==\"string\"?n[n.length-1]+=i:n.push(i))}return n}function q(e,t,n,r,i=!1){if(typeof e==\"number\")return e;try{if(e=e.trim(),/[ /\\(,]/.test(e))return;if(e===String(+e))return+e;let o=new Qe(e);if(o.type===\"length\")switch(o.unit){case\"em\":return o.value*t;case\"rem\":return o.value*16;case\"vw\":return~~(o.value*r._viewportWidth/100);case\"vh\":return~~(o.value*r._viewportHeight/100);default:return o.value}else if(o.type===\"angle\")switch(o.unit){case\"deg\":return o.value;case\"rad\":return o.value*180/Math.PI;default:return o.value}else if(o.type===\"percentage\"&&i)return o.value/100*n}catch{}}function Pt(e,t){return[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]]}function ve(e,t,n,r){let i=t[e];if(typeof i>\"u\"){if(r&&typeof e<\"u\")throw new Error(`Invalid value for CSS property \"${r}\". Allowed values: ${Object.keys(t).map(o=>`\"${o}\"`).join(\" | \")}. Received: \"${e}\".`);i=n}return i}var wn,En,eu=[32,160,4961,65792,65793,4153,4241,10].map(e=>String.fromCodePoint(e));function we(e,t,n){if(!wn||!En){if(!(typeof Intl<\"u\"&&\"Segmenter\"in Intl))throw new Error(\"Intl.Segmenter does not exist, please use import a polyfill.\");wn=new Intl.Segmenter(n,{granularity:\"word\"}),En=new Intl.Segmenter(n,{granularity:\"grapheme\"})}if(t===\"grapheme\")return[...En.segment(e)].map(r=>r.segment);{let r=[...wn.segment(e)].map(u=>u.segment),i=[],o=0;for(;o<r.length;){let u=r[o];if(u==\"\\xA0\"){let s=o===0?\"\":i.pop(),a=o===r.length-1?\"\":r[o+1];i.push(s+\"\\xA0\"+a),o+=2}else i.push(u),o++}return i}}function C(e,t,n){let r=\"\";for(let[i,o]of Object.entries(t))typeof o<\"u\"&&(r+=` ${i}=\"${o}\"`);return n?`<${e}${r}>${n}</${e}>`:`<${e}${r}/>`}function tu(e=20){let t=new Map;function n(o,u){if(t.size>=e){let s=t.keys().next().value;t.delete(s)}t.set(o,u)}function r(o){if(!t.has(o))return;let s=t.get(o);return t.delete(o),t.set(o,s),s}function i(){t.clear()}return{set:n,get:r,clear:i}}function vt(e){return e?e.split(/[, ]/).filter(Boolean).map(Number):null}function Hl(e){return Object.prototype.toString.call(e)}function Lr(e){return typeof e==\"string\"}function ru(e){return typeof e==\"number\"}function nu(e){return Hl(e)===\"[object Undefined]\"}function iu(e,t){if(t===\"break-all\")return{words:we(e,\"grapheme\"),requiredBreaks:[]};if(t===\"keep-all\")return{words:we(e,\"word\"),requiredBreaks:[]};let n=new linebreak__WEBPACK_IMPORTED_MODULE_0__[\"default\"](e),r=0,i=n.nextBreak(),o=[],u=[!1];for(;i;){let s=e.slice(r,i.position);o.push(s),i.required?u.push(!0):u.push(!1),r=i.position,i=n.nextBreak()}return{words:o,requiredBreaks:u}}var ou=e=>e.replaceAll(/([A-Z])/g,(t,n)=>`-${n.toLowerCase()}`);var Vl=\"image/avif\",Yl=\"image/webp\",Mr=\"image/apng\",Nr=\"image/png\",$r=\"image/jpeg\",Wr=\"image/gif\",_n=\"image/svg+xml\";function au(e){let t=new DataView(e),n=4,r=t.byteLength;for(;n<r;){let i=t.getUint16(n,!1);if(i>r)throw new TypeError(\"Invalid JPEG\");let o=t.getUint8(i+1+n);if(o===192||o===193||o===194)return[t.getUint16(i+7+n,!1),t.getUint16(i+5+n,!1)];n+=i+2}throw new TypeError(\"Invalid JPEG\")}function lu(e){let t=new Uint8Array(e.slice(6,10));return[t[0]|t[1]<<8,t[2]|t[3]<<8]}function fu(e){let t=new DataView(e);return[t.getUint16(18,!1),t.getUint16(22,!1)]}var Re=tu(100),Cn=new Map,Xl=[Nr,Mr,$r,Wr,_n];function Ql(e){let t=\"\",n=new Uint8Array(e);for(let r=0;r<n.byteLength;r++)t+=String.fromCharCode(n[r]);return btoa(t)}function Kl(e){let t=atob(e),n=t.length,r=new Uint8Array(n);for(let i=0;i<n;i++)r[i]=t.charCodeAt(i);return r.buffer}function uu(e,t){let n=t.match(/<svg[^>]*>/)[0],r=n.match(/viewBox=['\"](.+)['\"]/),i=r?vt(r[1]):null,o=n.match(/width=['\"](\\d*\\.\\d+|\\d+)['\"]/),u=n.match(/height=['\"](\\d*\\.\\d+|\\d+)['\"]/);if(!i&&(!o||!u))throw new Error(`Failed to parse SVG from ${e}: missing \"viewBox\"`);let s=i?[i[2],i[3]]:[+o[1],+u[1]],a=s[0]/s[1];return o&&u?[+o[1],+u[1]]:o?[+o[1],+o[1]/a]:u?[+u[1]*a,+u[1]]:[s[0],s[1]]}function su(e){let t,n=Jl(new Uint8Array(e));switch(n){case Nr:case Mr:t=fu(e);break;case Wr:t=lu(e);break;case $r:t=au(e);break}if(!Xl.includes(n))throw new Error(`Unsupported image type: ${n||\"unknown\"}`);return[`data:${n};base64,${Ql(e)}`,t]}async function yt(e){if(!e)throw new Error(\"Image source is not provided.\");if(typeof e==\"object\"){let[i,o]=su(e);return[i,...o]}if((e.startsWith('\"')&&e.endsWith('\"')||e.startsWith(\"'\")&&e.endsWith(\"'\"))&&(e=e.slice(1,-1)),typeof window>\"u\"&&!e.startsWith(\"http\")&&!e.startsWith(\"data:\"))throw new Error(`Image source must be an absolute URL: ${e}`);if(e.startsWith(\"data:\")){let i;try{i=/data:(?<imageType>[a-z/+]+)(;(charset=)?(?<encodingType>.*))?,(?<dataString>.*)/g.exec(e).groups}catch{return console.warn(\"Image data URI resolved without size:\"+e),[e]}let{imageType:o,encodingType:u,dataString:s}=i;if(o===_n){let a=u===\"base64\"?atob(s):decodeURIComponent(s.replace(/ /g,\"%20\")),l=u===\"base64\"?e:`data:image/svg+xml;base64,${btoa(a)}`,f=uu(e,a);return Re.set(e,[l,...f]),[l,...f]}else if(u===\"base64\"){let a,l=Kl(s);switch(o){case Nr:case Mr:a=fu(l);break;case Wr:a=lu(l);break;case $r:a=au(l);break}return Re.set(e,[e,...a]),[e,...a]}else return console.warn(\"Image data URI resolved without size:\"+e),Re.set(e,[e]),[e]}if(!globalThis.fetch)throw new Error(\"`fetch` is required to be polyfilled to load images.\");if(Cn.has(e))return Cn.get(e);let t=Re.get(e);if(t)return t;let n=e,r=fetch(n).then(i=>{let o=i.headers.get(\"content-type\");return o===\"image/svg+xml\"||o===\"application/svg+xml\"?i.text():i.arrayBuffer()}).then(i=>{if(typeof i==\"string\")try{let s=`data:image/svg+xml;base64,${btoa(i)}`,a=uu(n,i);return[s,...a]}catch(s){throw new Error(`Failed to parse SVG image: ${s.message}`)}let[o,u]=su(i);return[o,...u]}).then(i=>(Re.set(n,i),i)).catch(i=>(console.error(`Can't load image ${n}: `+i.message),Re.set(n,[]),[]));return Cn.set(n,r),r}function Jl(e){return[255,216,255].every((t,n)=>e[n]===t)?$r:[137,80,78,71,13,10,26,10].every((t,n)=>e[n]===t)?Zl(e)?Mr:Nr:[71,73,70,56].every((t,n)=>e[n]===t)?Wr:[82,73,70,70,0,0,0,0,87,69,66,80].every((t,n)=>!t||e[n]===t)?Yl:[60,63,120,109,108].every((t,n)=>e[n]===t)?_n:[0,0,0,0,102,116,121,112,97,118,105,102].every((t,n)=>!t||e[n]===t)?Vl:null}function Zl(e){let t=new DataView(e.buffer),n,r,i=8,o=!1;for(;!o&&n!==\"IEND\"&&i<e.length;){r=t.getUint32(i);let u=e.subarray(i+4,i+8);n=String.fromCharCode(...u),o=n===\"acTL\",i+=12+r}return o}var Sn={accentHeight:\"accent-height\",alignmentBaseline:\"alignment-baseline\",arabicForm:\"arabic-form\",baselineShift:\"baseline-shift\",capHeight:\"cap-height\",clipPath:\"clip-path\",clipRule:\"clip-rule\",colorInterpolation:\"color-interpolation\",colorInterpolationFilters:\"color-interpolation-filters\",colorProfile:\"color-profile\",colorRendering:\"color-rendering\",dominantBaseline:\"dominant-baseline\",enableBackground:\"enable-background\",fillOpacity:\"fill-opacity\",fillRule:\"fill-rule\",floodColor:\"flood-color\",floodOpacity:\"flood-opacity\",fontFamily:\"font-family\",fontSize:\"font-size\",fontSizeAdjust:\"font-size-adjust\",fontStretch:\"font-stretch\",fontStyle:\"font-style\",fontVariant:\"font-variant\",fontWeight:\"font-weight\",glyphName:\"glyph-name\",glyphOrientationHorizontal:\"glyph-orientation-horizontal\",glyphOrientationVertical:\"glyph-orientation-vertical\",horizAdvX:\"horiz-adv-x\",horizOriginX:\"horiz-origin-x\",href:\"href\",imageRendering:\"image-rendering\",letterSpacing:\"letter-spacing\",lightingColor:\"lighting-color\",markerEnd:\"marker-end\",markerMid:\"marker-mid\",markerStart:\"marker-start\",overlinePosition:\"overline-position\",overlineThickness:\"overline-thickness\",paintOrder:\"paint-order\",panose1:\"panose-1\",pointerEvents:\"pointer-events\",renderingIntent:\"rendering-intent\",shapeRendering:\"shape-rendering\",stopColor:\"stop-color\",stopOpacity:\"stop-opacity\",strikethroughPosition:\"strikethrough-position\",strikethroughThickness:\"strikethrough-thickness\",strokeDasharray:\"stroke-dasharray\",strokeDashoffset:\"stroke-dashoffset\",strokeLinecap:\"stroke-linecap\",strokeLinejoin:\"stroke-linejoin\",strokeMiterlimit:\"stroke-miterlimit\",strokeOpacity:\"stroke-opacity\",strokeWidth:\"stroke-width\",textAnchor:\"text-anchor\",textDecoration:\"text-decoration\",textRendering:\"text-rendering\",underlinePosition:\"underline-position\",underlineThickness:\"underline-thickness\",unicodeBidi:\"unicode-bidi\",unicodeRange:\"unicode-range\",unitsPerEm:\"units-per-em\",vAlphabetic:\"v-alphabetic\",vHanging:\"v-hanging\",vIdeographic:\"v-ideographic\",vMathematical:\"v-mathematical\",vectorEffect:\"vector-effect\",vertAdvY:\"vert-adv-y\",vertOriginX:\"vert-origin-x\",vertOriginY:\"vert-origin-y\",wordSpacing:\"word-spacing\",writingMode:\"writing-mode\",xHeight:\"x-height\",xlinkActuate:\"xlink:actuate\",xlinkArcrole:\"xlink:arcrole\",xlinkHref:\"xlink:href\",xlinkRole:\"xlink:role\",xlinkShow:\"xlink:show\",xlinkTitle:\"xlink:title\",xlinkType:\"xlink:type\",xmlBase:\"xml:base\",xmlLang:\"xml:lang\",xmlSpace:\"xml:space\",xmlnsXlink:\"xmlns:xlink\"},ef=/[\\r\\n%#()<>?[\\\\\\]^`{|}\"']/g;function kn(e,t){if(!e)return\"\";if(Array.isArray(e))return e.map(l=>kn(l,t)).join(\"\");if(typeof e!=\"object\")return String(e);let n=e.type;if(n===\"text\")throw new Error(\"<text> nodes are not currently supported, please convert them to <path>\");let{children:r,style:i,...o}=e.props||{},u=(i==null?void 0:i.color)||t,s=`${Object.entries(o).map(([l,f])=>(typeof f==\"string\"&&f.toLowerCase()===\"currentcolor\"&&(f=u),l===\"href\"&&n===\"image\"?` ${Sn[l]||l}=\"${Re.get(f)[0]}\"`:` ${Sn[l]||l}=\"${f}\"`)).join(\"\")}`,a=i?` style=\"${Object.entries(i).map(([l,f])=>`${ou(l)}:${f}`).join(\";\")}\"`:\"\";return`<${n}${s}${a}>${kn(r,u)}</${n}>`}async function cu(e){let t=new Set,n=r=>{if(r&&bt(r)){if(Array.isArray(r)){r.forEach(i=>n(i));return}else typeof r==\"object\"&&(r.type===\"image\"?t.has(r.props.href)||t.add(r.props.href):r.type===\"img\"&&(t.has(r.props.src)||t.add(r.props.src)));Array.isArray(r.props.children)?r.props.children.map(i=>n(i)):n(r.props.children)}};return n(e),Promise.all(Array.from(t).map(r=>yt(r)))}async function du(e,t){let{viewBox:n,viewbox:r,width:i,height:o,className:u,style:s,children:a,...l}=e.props||{};n||=r,l.xmlns=\"http://www.w3.org/2000/svg\";let f=(s==null?void 0:s.color)||t,c=vt(n),p=c?c[3]/c[2]:null;return i=i||p&&o?o/p:null,o=o||p&&i?i*p:null,l.width=i,l.height=o,n&&(l.viewBox=n),`data:image/svg+xml;utf8,${`<svg ${Object.entries(l).map(([h,d])=>(typeof d==\"string\"&&d.toLowerCase()===\"currentcolor\"&&(d=f),` ${Sn[h]||h}=\"${d}\"`)).join(\"\")}>${kn(a,f)}</svg>`.replace(ef,encodeURIComponent)}`}var Ce=\"flex\",pu={p:{display:Ce,marginTop:\"1em\",marginBottom:\"1em\"},div:{display:Ce},blockquote:{display:Ce,marginTop:\"1em\",marginBottom:\"1em\",marginLeft:40,marginRight:40},center:{display:Ce,textAlign:\"center\"},hr:{display:Ce,marginTop:\"0.5em\",marginBottom:\"0.5em\",marginLeft:\"auto\",marginRight:\"auto\",borderWidth:1,borderStyle:\"solid\"},h1:{display:Ce,fontSize:\"2em\",marginTop:\"0.67em\",marginBottom:\"0.67em\",marginLeft:0,marginRight:0,fontWeight:\"bold\"},h2:{display:Ce,fontSize:\"1.5em\",marginTop:\"0.83em\",marginBottom:\"0.83em\",marginLeft:0,marginRight:0,fontWeight:\"bold\"},h3:{display:Ce,fontSize:\"1.17em\",marginTop:\"1em\",marginBottom:\"1em\",marginLeft:0,marginRight:0,fontWeight:\"bold\"},h4:{display:Ce,marginTop:\"1.33em\",marginBottom:\"1.33em\",marginLeft:0,marginRight:0,fontWeight:\"bold\"},h5:{display:Ce,fontSize:\"0.83em\",marginTop:\"1.67em\",marginBottom:\"1.67em\",marginLeft:0,marginRight:0,fontWeight:\"bold\"},h6:{display:Ce,fontSize:\"0.67em\",marginTop:\"2.33em\",marginBottom:\"2.33em\",marginLeft:0,marginRight:0,fontWeight:\"bold\"},u:{textDecoration:\"underline\"},strong:{fontWeight:\"bold\"},b:{fontWeight:\"bold\"},i:{fontStyle:\"italic\"},em:{fontStyle:\"italic\"},code:{fontFamily:\"monospace\"},kbd:{fontFamily:\"monospace\"},pre:{display:Ce,fontFamily:\"monospace\",whiteSpace:\"pre\",marginTop:\"1em\",marginBottom:\"1em\"},mark:{backgroundColor:\"yellow\",color:\"black\"},big:{fontSize:\"larger\"},small:{fontSize:\"smaller\"},s:{textDecoration:\"line-through\"}};var tf=new Set([\"color\",\"font\",\"fontFamily\",\"fontSize\",\"fontStyle\",\"fontWeight\",\"letterSpacing\",\"lineHeight\",\"textAlign\",\"textTransform\",\"textShadowOffset\",\"textShadowColor\",\"textShadowRadius\",\"textDecorationLine\",\"textDecorationStyle\",\"textDecorationColor\",\"whiteSpace\",\"transform\",\"wordBreak\",\"tabSize\",\"opacity\",\"filter\",\"_viewportWidth\",\"_viewportHeight\",\"_inheritedClipPathId\",\"_inheritedMaskId\",\"_inheritedBackgroundClipTextPath\"]);function Tn(e){let t={};for(let n in e)tf.has(n)&&(t[n]=e[n]);return t}function nf(e,t){try{let n=new Qe(e);switch(n.unit){case\"px\":return{absolute:n.value};case\"em\":return{absolute:n.value*t};case\"rem\":return{absolute:n.value*16};case\"%\":return{relative:n.value};default:return{}}}catch{return{}}}function An(e,t,n){switch(e){case\"top\":return{yRelative:0};case\"left\":return{xRelative:0};case\"right\":return{xRelative:100};case\"bottom\":return{yRelative:100};case\"center\":return{};default:{let r=nf(e,t);return r.absolute?{[n?\"xAbsolute\":\"yAbsolute\"]:r.absolute}:r.relative?{[n?\"xRelative\":\"yRelative\"]:r.relative}:{}}}}function On(e,t){if(typeof e==\"number\")return{xAbsolute:e};let n;try{n=postcss_value_parser__WEBPACK_IMPORTED_MODULE_5__(e).nodes.filter(r=>r.type===\"word\").map(r=>r.value)}catch{return{}}return n.length===1?An(n[0],t,!0):n.length===2?((n[0]===\"top\"||n[0]===\"bottom\"||n[1]===\"left\"||n[1]===\"right\")&&n.reverse(),{...An(n[0],t,!0),...An(n[1],t,!1)}):{}}function Bt(e,t){let n=(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getPropertyName)(`mask-${t}`);return e[n]||e[`WebkitM${n.substring(1)}`]}function uf(e){let t=[],n=0,r=0;for(let i=0;i<e.length;i++)e[i]===\"(\"?r++:e[i]===\")\"&&r--,r===0&&e[i]===\",\"&&(t.push(e.slice(n,i).trim()),n=i+1);return t.push(e.slice(n).trim()),t}function hu(e){let t=e.maskImage||e.WebkitMaskImage,n={position:Bt(e,\"position\")||\"0% 0%\",size:Bt(e,\"size\")||\"100% 100%\",repeat:Bt(e,\"repeat\")||\"repeat\",origin:Bt(e,\"origin\")||\"border-box\",clip:Bt(e,\"origin\")||\"border-box\"};return uf(t).filter(i=>i&&i!==\"none\").reverse().map(i=>({image:i,...n}))}var cf=new Set([\"flex\",\"flexGrow\",\"flexShrink\",\"flexBasis\",\"fontWeight\",\"lineHeight\",\"opacity\",\"scale\",\"scaleX\",\"scaleY\"]),df=new Set([\"lineHeight\"]);function pf(e,t,n,r){return e===\"textDecoration\"&&!n.includes(t.textDecorationColor)&&(t.textDecorationColor=r),t}function It(e,t){let n=Number(t);return isNaN(n)?t:cf.has(e)?df.has(e)?n:String(t):n+\"px\"}function hf(e,t,n){if(e===\"lineHeight\")return{lineHeight:It(e,t)};if(e===\"fontFamily\")return{fontFamily:t.split(\",\").map(r=>r.trim().replace(/(^['\"])|(['\"]$)/g,\"\").toLocaleLowerCase())};if(e===\"borderRadius\"){if(typeof t!=\"string\"||!t.includes(\"/\"))return;let[r,i]=t.split(\"/\"),o=(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getStylesForProperty)(e,r,!0),u=(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getStylesForProperty)(e,i,!0);for(let s in o)u[s]=It(e,o[s])+\" \"+It(e,u[s]);return u}if(/^border(Top|Right|Bottom|Left)?$/.test(e)){let r=(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getStylesForProperty)(\"border\",t,!0);r.borderWidth===1&&!String(t).includes(\"1px\")&&(r.borderWidth=3),r.borderColor===\"black\"&&!String(t).includes(\"black\")&&(r.borderColor=n);let i={Width:It(e+\"Width\",r.borderWidth),Style:ve(r.borderStyle,{solid:\"solid\",dashed:\"dashed\"},\"solid\",e+\"Style\"),Color:r.borderColor},o={};for(let u of e===\"border\"?[\"Top\",\"Right\",\"Bottom\",\"Left\"]:[e.slice(6)])for(let s in i)o[\"border\"+u+s]=i[s];return o}if(e===\"boxShadow\"){if(!t)throw new Error('Invalid `boxShadow` value: \"'+t+'\".');return{[e]:typeof t==\"string\"?(0,css_box_shadow__WEBPACK_IMPORTED_MODULE_3__.parse)(t):t}}if(e===\"transform\"){if(typeof t!=\"string\")throw new Error(\"Invalid `transform` value.\");let r={},i=t.replace(/(-?[\\d.]+%)/g,(u,s)=>{let a=~~(Math.random()*1e9);return r[a]=s,a+\"px\"}),o=(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getStylesForProperty)(\"transform\",i,!0);for(let u of o.transform)for(let s in u)r[u[s]]&&(u[s]=r[u[s]]);return o}if(e===\"background\")return t=t.toString().trim(),/^(linear-gradient|radial-gradient|url)\\(/.test(t)?(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getStylesForProperty)(\"backgroundImage\",t,!0):(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getStylesForProperty)(\"background\",t,!0);if(e===\"textShadow\"&&(t=t.toString().trim(),t.includes(\",\"))){let r=mf(t),i={};for(let o of r){let u=(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getStylesForProperty)(\"textShadow\",o,!0);for(let s in u)i[s]?i[s].push(u[s]):i[s]=[u[s]]}return i}}function mf(e){let t=[],n=!1,r=0,i=e.length;for(let o=0;o<i;++o){let u=e[o];u===\")\"&&(n=!1),!n&&(u===\"(\"&&(n=!0),u===\",\"&&(t.push(e.substring(r,o)),r=o+1))}return t.push(e.substring(r,i)),t.map(o=>o.trim())}function mu(e){return e===\"transform\"?\" Only absolute lengths such as `10px` are supported.\":\"\"}var Du=/rgb\\((\\d+)\\s+(\\d+)\\s+(\\d+)\\s*\\/\\s*([\\.\\d]+)\\)/;function bu(e){if(typeof e==\"string\"&&Du.test(e.trim()))return e.trim().replace(Du,(t,n,r,i,o)=>`rgba(${n}, ${r}, ${i}, ${o})`);if(typeof e==\"object\"&&e!==null){for(let t in e)e[t]=bu(e[t]);return e}return e}function qr(e,t){let n={};if(e){let i=gf(e.color,t.color);n.color=i;for(let o in e){if(o.startsWith(\"_\")){n[o]=e[o];continue}if(o===\"color\")continue;let u=(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getPropertyName)(o),s=vf(e[o],i);try{let a=hf(u,s,i)||pf(u,(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getStylesForProperty)(u,It(u,s),!0),s,i);Object.assign(n,a)}catch(a){throw new Error(a.message+(a.message.includes(s)?`\n  `+mu(u):`\n  in CSS rule \\`${u}: ${s}\\`.${mu(u)}`))}}}if(n.backgroundImage){let{backgrounds:i}=(0,css_background_parser__WEBPACK_IMPORTED_MODULE_2__.parseElementStyle)(n);n.backgroundImage=i}if(n.maskImage||n.WebkitMaskImage){let i=hu(n);n.maskImage=i}let r=Df(n.fontSize,t.fontSize);typeof n.fontSize<\"u\"&&(n.fontSize=r),n.transformOrigin&&(n.transformOrigin=On(n.transformOrigin,r));for(let i in n){let o=n[i];if(i===\"lineHeight\")typeof o==\"string\"&&(o=n[i]=q(o,r,r,t,!0)/r);else{if(typeof o==\"string\"){let u=q(o,r,r,t);typeof u<\"u\"&&(n[i]=u),o=n[i]}if(typeof o==\"string\"||typeof o==\"object\"){let u=bu(o);u&&(n[i]=u),o=n[i]}}if(i===\"opacity\"&&(o=n[i]=o*t.opacity),i===\"transform\"){let u=o;for(let s of u){let a=Object.keys(s)[0],l=s[a],f=typeof l==\"string\"?q(l,r,r,t)??l:l;s[a]=f}}}return n}function Df(e,t){if(typeof e==\"number\")return e;try{let n=new Qe(e);switch(n.unit){case\"em\":return n.value*t;case\"rem\":return n.value*16}}catch{return t}}function gu(e){if(e.startsWith(\"hsl\")){let t=parse_css_color__WEBPACK_IMPORTED_MODULE_4__(e),[n,r,i]=t.values;return`hsl(${[n,`${r}%`,`${i}%`].concat(t.alpha===1?[]:[t.alpha]).join(\",\")})`}return e}function gf(e,t){return e&&e.toLowerCase()!==\"currentcolor\"?gu(e):gu(t)}function bf(e,t){return e.replace(/currentcolor/gi,t)}function vf(e,t){return Lr(e)&&(e=bf(e,t)),e}async function Pn(e,t,n,r,i){let o=await qe(),u={...n,...qr(pu[t],n),...qr(r,n)};if(t===\"img\"){let[s,a,l]=await yt(i.src);if(a===void 0&&l===void 0){if(i.width===void 0||i.height===void 0)throw new Error(\"Image size cannot be determined. Please provide the width and height of the image.\");a=parseInt(i.width),l=parseInt(i.height)}let f=l/a,c=(u.borderLeftWidth||0)+(u.borderRightWidth||0)+(u.paddingLeft||0)+(u.paddingRight||0),p=(u.borderTopWidth||0)+(u.borderBottomWidth||0)+(u.paddingTop||0)+(u.paddingBottom||0),h=u.width||i.width,d=u.height||i.height,m=typeof h==\"number\"&&typeof d==\"number\";m&&(h-=c,d-=p),h===void 0&&d===void 0?(h=\"100%\",e.setAspectRatio(1/f)):h===void 0?typeof d==\"number\"?h=d/f:e.setAspectRatio(1/f):d===void 0&&(typeof h==\"number\"?d=h*f:e.setAspectRatio(1/f)),u.width=m?h+c:h,u.height=m?d+p:d,u.__src=s}if(t===\"svg\"){let s=i.viewBox||i.viewbox,a=vt(s),l=a?a[3]/a[2]:null,{width:f,height:c}=i;typeof f>\"u\"&&c?l==null?f=0:typeof c==\"string\"&&c.endsWith(\"%\")?f=parseInt(c)/l+\"%\":(c=q(c,n.fontSize,1,n),f=c/l):typeof c>\"u\"&&f?l==null?f=0:typeof f==\"string\"&&f.endsWith(\"%\")?c=parseInt(f)*l+\"%\":(f=q(f,n.fontSize,1,n),c=f*l):(typeof f<\"u\"&&(f=q(f,n.fontSize,1,n)||f),typeof c<\"u\"&&(c=q(c,n.fontSize,1,n)||c),f||=a==null?void 0:a[2],c||=a==null?void 0:a[3]),!u.width&&f&&(u.width=f),!u.height&&c&&(u.height=c)}return e.setDisplay(ve(u.display,{flex:o.DISPLAY_FLEX,block:o.DISPLAY_FLEX,none:o.DISPLAY_NONE,\"-webkit-box\":o.DISPLAY_FLEX},o.DISPLAY_FLEX,\"display\")),e.setAlignContent(ve(u.alignContent,{stretch:o.ALIGN_STRETCH,center:o.ALIGN_CENTER,\"flex-start\":o.ALIGN_FLEX_START,\"flex-end\":o.ALIGN_FLEX_END,\"space-between\":o.ALIGN_SPACE_BETWEEN,\"space-around\":o.ALIGN_SPACE_AROUND,baseline:o.ALIGN_BASELINE,normal:o.ALIGN_AUTO},o.ALIGN_AUTO,\"alignContent\")),e.setAlignItems(ve(u.alignItems,{stretch:o.ALIGN_STRETCH,center:o.ALIGN_CENTER,\"flex-start\":o.ALIGN_FLEX_START,\"flex-end\":o.ALIGN_FLEX_END,baseline:o.ALIGN_BASELINE,normal:o.ALIGN_AUTO},o.ALIGN_STRETCH,\"alignItems\")),e.setAlignSelf(ve(u.alignSelf,{stretch:o.ALIGN_STRETCH,center:o.ALIGN_CENTER,\"flex-start\":o.ALIGN_FLEX_START,\"flex-end\":o.ALIGN_FLEX_END,baseline:o.ALIGN_BASELINE,normal:o.ALIGN_AUTO},o.ALIGN_AUTO,\"alignSelf\")),e.setJustifyContent(ve(u.justifyContent,{center:o.JUSTIFY_CENTER,\"flex-start\":o.JUSTIFY_FLEX_START,\"flex-end\":o.JUSTIFY_FLEX_END,\"space-between\":o.JUSTIFY_SPACE_BETWEEN,\"space-around\":o.JUSTIFY_SPACE_AROUND},o.JUSTIFY_FLEX_START,\"justifyContent\")),e.setFlexDirection(ve(u.flexDirection,{row:o.FLEX_DIRECTION_ROW,column:o.FLEX_DIRECTION_COLUMN,\"row-reverse\":o.FLEX_DIRECTION_ROW_REVERSE,\"column-reverse\":o.FLEX_DIRECTION_COLUMN_REVERSE},o.FLEX_DIRECTION_ROW,\"flexDirection\")),e.setFlexWrap(ve(u.flexWrap,{wrap:o.WRAP_WRAP,nowrap:o.WRAP_NO_WRAP,\"wrap-reverse\":o.WRAP_WRAP_REVERSE},o.WRAP_NO_WRAP,\"flexWrap\")),typeof u.gap<\"u\"&&e.setGap(o.GUTTER_ALL,u.gap),typeof u.rowGap<\"u\"&&e.setGap(o.GUTTER_ROW,u.rowGap),typeof u.columnGap<\"u\"&&e.setGap(o.GUTTER_COLUMN,u.columnGap),typeof u.flexBasis<\"u\"&&e.setFlexBasis(u.flexBasis),e.setFlexGrow(typeof u.flexGrow>\"u\"?0:u.flexGrow),e.setFlexShrink(typeof u.flexShrink>\"u\"?0:u.flexShrink),typeof u.maxHeight<\"u\"&&e.setMaxHeight(u.maxHeight),typeof u.maxWidth<\"u\"&&e.setMaxWidth(u.maxWidth),typeof u.minHeight<\"u\"&&e.setMinHeight(u.minHeight),typeof u.minWidth<\"u\"&&e.setMinWidth(u.minWidth),e.setOverflow(ve(u.overflow,{visible:o.OVERFLOW_VISIBLE,hidden:o.OVERFLOW_HIDDEN},o.OVERFLOW_VISIBLE,\"overflow\")),e.setMargin(o.EDGE_TOP,u.marginTop||0),e.setMargin(o.EDGE_BOTTOM,u.marginBottom||0),e.setMargin(o.EDGE_LEFT,u.marginLeft||0),e.setMargin(o.EDGE_RIGHT,u.marginRight||0),e.setBorder(o.EDGE_TOP,u.borderTopWidth||0),e.setBorder(o.EDGE_BOTTOM,u.borderBottomWidth||0),e.setBorder(o.EDGE_LEFT,u.borderLeftWidth||0),e.setBorder(o.EDGE_RIGHT,u.borderRightWidth||0),e.setPadding(o.EDGE_TOP,u.paddingTop||0),e.setPadding(o.EDGE_BOTTOM,u.paddingBottom||0),e.setPadding(o.EDGE_LEFT,u.paddingLeft||0),e.setPadding(o.EDGE_RIGHT,u.paddingRight||0),e.setPositionType(ve(u.position,{absolute:o.POSITION_TYPE_ABSOLUTE,relative:o.POSITION_TYPE_RELATIVE},o.POSITION_TYPE_RELATIVE,\"position\")),typeof u.top<\"u\"&&e.setPosition(o.EDGE_TOP,u.top),typeof u.bottom<\"u\"&&e.setPosition(o.EDGE_BOTTOM,u.bottom),typeof u.left<\"u\"&&e.setPosition(o.EDGE_LEFT,u.left),typeof u.right<\"u\"&&e.setPosition(o.EDGE_RIGHT,u.right),typeof u.height<\"u\"?e.setHeight(u.height):e.setHeightAuto(),typeof u.width<\"u\"?e.setWidth(u.width):e.setWidthAuto(),[u,Tn(u)]}var vu=[1,0,0,1,0,0];function yf(e,t,n){let r=[...vu];for(let i of e){let o=Object.keys(i)[0],u=i[o];if(typeof u==\"string\")if(o===\"translateX\")u=parseFloat(u)/100*t,i[o]=u;else if(o===\"translateY\")u=parseFloat(u)/100*n,i[o]=u;else throw new Error(`Invalid transform: \"${o}: ${u}\".`);let s=u,a=[...vu];switch(o){case\"translateX\":a[4]=s;break;case\"translateY\":a[5]=s;break;case\"scale\":a[0]=s,a[3]=s;break;case\"scaleX\":a[0]=s;break;case\"scaleY\":a[3]=s;break;case\"rotate\":{let l=s*Math.PI/180,f=Math.cos(l),c=Math.sin(l);a[0]=f,a[1]=c,a[2]=-c,a[3]=f;break}case\"skewX\":a[2]=Math.tan(s*Math.PI/180);break;case\"skewY\":a[1]=Math.tan(s*Math.PI/180);break}r=Pt(a,r)}e.splice(0,e.length),e.push(...r),e.__resolved=!0}function Rt({left:e,top:t,width:n,height:r},i,o,u){let s;i.__resolved||yf(i,n,r);let a=i;if(o)s=a;else{let l=(u==null?void 0:u.xAbsolute)??((u==null?void 0:u.xRelative)??50)*n/100,f=(u==null?void 0:u.yAbsolute)??((u==null?void 0:u.yRelative)??50)*r/100,c=e+l,p=t+f;s=Pt([1,0,0,1,c,p],Pt(a,[1,0,0,1,-c,-p])),a.__parent&&(s=Pt(a.__parent,s)),a.splice(0,6,...s)}return`matrix(${s.map(l=>l.toFixed(2)).join(\",\")})`}function xu({left:e,top:t,width:n,height:r,isInheritingTransform:i},o){let u=\"\",s=1;return o.transform&&(u=Rt({left:e,top:t,width:n,height:r},o.transform,i,o.transformOrigin)),o.opacity!==void 0&&(s=+o.opacity),{matrix:u,opacity:s}}function Bn({id:e,content:t,filter:n,left:r,top:i,width:o,height:u,matrix:s,opacity:a,image:l,clipPathId:f,debug:c,shape:p,decorationShape:h},d){let m=\"\";if(c&&(m=C(\"rect\",{x:r,y:i-u,width:o,height:u,fill:\"transparent\",stroke:\"#575eff\",\"stroke-width\":1,transform:s||void 0,\"clip-path\":f?`url(#${f})`:void 0})),l){let g={href:l,x:r,y:i,width:o,height:u,transform:s||void 0,\"clip-path\":f?`url(#${f})`:void 0,style:d.filter?`filter:${d.filter}`:void 0};return[(n?`${n}<g filter=\"url(#satori_s-${e})\">`:\"\")+C(\"image\",{...g,opacity:a!==1?a:void 0})+(h||\"\")+(n?\"</g>\":\"\")+m,\"\"]}let v={x:r,y:i,width:o,height:u,\"font-weight\":d.fontWeight,\"font-style\":d.fontStyle,\"font-size\":d.fontSize,\"font-family\":d.fontFamily,\"letter-spacing\":d.letterSpacing||void 0,transform:s||void 0,\"clip-path\":f?`url(#${f})`:void 0,style:d.filter?`filter:${d.filter}`:void 0};return[(n?`${n}<g filter=\"url(#satori_s-${e})\">`:\"\")+C(\"text\",{...v,fill:d.color,opacity:a!==1?a:void 0},escape_html__WEBPACK_IMPORTED_MODULE_6__(t))+(h||\"\")+(n?\"</g>\":\"\")+m,p?C(\"text\",v,escape_html__WEBPACK_IMPORTED_MODULE_6__(t)):\"\"]}function xf(e,t,n){return e.replace(/([MA])([0-9.-]+),([0-9.-]+)/g,function(r,i,o,u){return i+(parseFloat(o)+t)+\",\"+(parseFloat(u)+n)})}var Ur=1.1;function Fu({id:e,width:t,height:n},r){if(!r.shadowColor||!r.shadowOffset||typeof r.shadowRadius>\"u\")return\"\";let i=r.shadowColor.length,o=\"\",u=\"\",s=0,a=t,l=0,f=n;for(let c=0;c<i;c++){let p=r.shadowRadius[c]*r.shadowRadius[c]/4;s=Math.min(r.shadowOffset[c].width-p,s),a=Math.max(r.shadowOffset[c].width+p+t,a),l=Math.min(r.shadowOffset[c].height-p,l),f=Math.max(r.shadowOffset[c].height+p+n,f),o+=C(\"feDropShadow\",{dx:r.shadowOffset[c].width,dy:r.shadowOffset[c].height,stdDeviation:r.shadowRadius[c]/2,\"flood-color\":r.shadowColor[c],\"flood-opacity\":1,...i>1?{in:\"SourceGraphic\",result:`satori_s-${e}-result-${c}`}:{}}),i>1&&(u=C(\"feMergeNode\",{in:`satori_s-${e}-result-${c}`})+u)}return C(\"filter\",{id:`satori_s-${e}`,x:(s/t*100*Ur).toFixed(2)+\"%\",y:(l/n*100*Ur).toFixed(2)+\"%\",width:((a-s)/t*100*Ur).toFixed(2)+\"%\",height:((f-l)/n*100*Ur).toFixed(2)+\"%\"},o+(u?C(\"feMerge\",{},u):\"\"))}function wu({width:e,height:t,shape:n,opacity:r,id:i},o){if(!o.boxShadow)return null;let u=\"\",s=\"\";for(let a=o.boxShadow.length-1;a>=0;a--){let l=\"\",f=o.boxShadow[a];f.spreadRadius&&f.inset&&(f.spreadRadius=-f.spreadRadius);let c=f.blurRadius*f.blurRadius/4+(f.spreadRadius||0),p=Math.min(-c-(f.inset?f.offsetX:0),0),h=Math.max(c+e-(f.inset?f.offsetX:0),e),d=Math.min(-c-(f.inset?f.offsetY:0),0),m=Math.max(c+t-(f.inset?f.offsetY:0),t),v=`satori_s-${i}-${a}`,g=`satori_ms-${i}-${a}`,b=f.spreadRadius?n.replace('stroke-width=\"0\"',`stroke-width=\"${f.spreadRadius*2}\"`):n;l+=C(\"mask\",{id:g,maskUnits:\"userSpaceOnUse\"},C(\"rect\",{x:0,y:0,width:o._viewportWidth||\"100%\",height:o._viewportHeight||\"100%\",fill:f.inset?\"#000\":\"#fff\"})+b.replace('fill=\"#fff\"',f.inset?'fill=\"#fff\"':'fill=\"#000\"').replace('stroke=\"#fff\"',\"\"));let x=b.replace(/d=\"([^\"]+)\"/,(F,y)=>'d=\"'+xf(y,f.offsetX,f.offsetY)+'\"').replace(/x=\"([^\"]+)\"/,(F,y)=>'x=\"'+(parseFloat(y)+f.offsetX)+'\"').replace(/y=\"([^\"]+)\"/,(F,y)=>'y=\"'+(parseFloat(y)+f.offsetY)+'\"');f.spreadRadius&&f.spreadRadius<0&&(l+=C(\"mask\",{id:g+\"-neg\",maskUnits:\"userSpaceOnUse\"},x.replace('stroke=\"#fff\"','stroke=\"#000\"').replace(/stroke-width=\"[^\"]+\"/,`stroke-width=\"${-f.spreadRadius*2}\"`))),f.spreadRadius&&f.spreadRadius<0&&(x=C(\"g\",{mask:`url(#${g}-neg)`},x)),l+=C(\"defs\",{},C(\"filter\",{id:v,x:`${p/e*100}%`,y:`${d/t*100}%`,width:`${(h-p)/e*100}%`,height:`${(m-d)/t*100}%`},C(\"feGaussianBlur\",{stdDeviation:f.blurRadius/2,result:\"b\"})+C(\"feFlood\",{\"flood-color\":f.color,in:\"SourceGraphic\",result:\"f\"})+C(\"feComposite\",{in:\"f\",in2:\"b\",operator:f.inset?\"out\":\"in\"})))+C(\"g\",{mask:`url(#${g})`,filter:`url(#${v})`,opacity:r},x),f.inset?s+=l:u+=l}return[u,s]}function In({width:e,left:t,top:n,ascender:r,clipPathId:i},o){let{textDecorationColor:u,textDecorationStyle:s,textDecorationLine:a,fontSize:l,color:f}=o;if(!a||a===\"none\")return\"\";let c=Math.max(1,l*.1),p=a===\"line-through\"?n+r*.7:a===\"underline\"?n+r*1.1:n,h=s===\"dashed\"?`${c*1.2} ${c*2}`:s===\"dotted\"?`0 ${c*2}`:void 0;return C(\"line\",{x1:t,y1:p,x2:t+e,y2:p,stroke:u||f,\"stroke-width\":c,\"stroke-dasharray\":h,\"stroke-linecap\":s===\"dotted\"?\"round\":\"square\",\"clip-path\":i?`url(#${i})`:void 0})}function Rn(e){return e=e.replace(\"U+\",\"0x\"),String.fromCodePoint(Number(e))}var Lt=Rn(\"U+0020\"),Ln=Rn(\"U+0009\"),Mt=Rn(\"U+2026\");var Ff=new Set([Ln]);function wf(e){return Ff.has(e)}async function*Mn(e,t){let n=await qe(),{parentStyle:r,inheritedStyle:i,parent:o,font:u,id:s,isInheritingTransform:a,debug:l,embedFont:f,graphemeImages:c,locale:p,canLoadAdditionalAssets:h}=t,{textAlign:d,whiteSpace:m,wordBreak:v,lineHeight:g,textTransform:b,textWrap:x,fontSize:F,filter:y,tabSize:k=8,_inheritedBackgroundClipTextPath:P}=r;e=Ef(e,b,p);let{content:B,shouldCollapseTabsAndSpaces:j,allowSoftWrap:oe}=Sf(e,m),{words:ue,requiredBreaks:se,allowBreakWord:N}=_f(B,v),[L,V]=Cf(r,oe),de=kf(n,d);o.insertChild(de,o.getChildCount()),nu(r.flexShrink)&&o.setFlexShrink(1);let Y=u.getEngine(F,g,r,p),ee=h?we(B,\"grapheme\").filter(I=>!wf(I)&&!Y.has(I)):[];yield ee.map(I=>({word:I,locale:p})),ee.length&&(Y=u.getEngine(F,g,r,p));function le(I){return!!(c&&c[I])}let he=Tf(Y,r);function A(I){let $=0;for(let X of I)le(X)?$+=F:$+=he(X);return $}function O(I){return A(we(I,\"grapheme\"))}let M=Lr(k)?q(k,F,1,r):he(Lt)*k,R=(I,$)=>{if(I.length===0)return{originWidth:0,endingSpacesWidth:0,text:I};let{index:X,tabCount:G}=Af(I),ie=0,H=\"\";if(G>0){H=I.slice(0,X);let fe=I.slice(X+G),te=O(H),Ie=te+$;ie=(M===0?te:(Math.floor(Ie/M)+G)*M)+O(fe)}else ie=O(I);let me=I.trimEnd()===I?ie:O(I.trimEnd());return{originWidth:ie,endingSpacesWidth:ie-me,text:I}},ae=[],be=[],Be=[],dt=[],St=[];function Dn(I){let $=0,X=0,G=-1,ie=0,H=0,me=0,fe=0;ae=[],Be=[0],dt=[],St=[];let te=0,Ie=0;for(;te<ue.length&&$<L;){let W=ue[te],nt=se[te],Ee=0,{originWidth:Ve,endingSpacesWidth:Or,text:Ye}=R(W,H);W=Ye,Ee=Ve;let Z=Or;nt&&me===0&&(me=Y.height(W));let De=\",.!?:-@)>]}%#\".indexOf(W[0])<0,Xe=!H,Pr=te&&De&&H+Ee>I+Z&&oe;if(N&&Ee>I&&(!H||Pr||nt)){let ge=we(W,\"grapheme\");ue.splice(te,1,...ge),H>0&&(ae.push(H-Ie),be.push(fe),$++,ie+=me,H=0,me=0,fe=0,Be.push(1),G=-1),Ie=Z;continue}if(nt||Pr)j&&W===\" \"&&(Ee=0),ae.push(H-Ie),be.push(fe),$++,ie+=me,H=Ee,me=Ee?Y.height(W):0,fe=Ee?Y.baseline(W):0,Be.push(1),G=-1,nt||(X=Math.max(X,I));else{H+=Ee;let ge=Y.height(W);ge>me&&(me=ge,fe=Y.baseline(W)),Xe&&Be[Be.length-1]++}Xe&&G++,X=Math.max(X,H);let it=H-Ee;if(Ee===0)St.push({y:ie,x:it,width:0,line:$,lineIndex:G,isImage:!1});else{let ge=we(W,\"word\");for(let Oe=0;Oe<ge.length;Oe++){let ot=ge[Oe],We=0,Tt=!1;le(ot)?(We=F,Tt=!0):We=he(ot),dt.push(ot),St.push({y:ie,x:it,width:We,line:$,lineIndex:G,isImage:Tt}),it+=We}}te++,Ie=Z}return H&&($<L&&(ie+=me),$++,ae.push(H),be.push(fe)),{width:X,height:ie}}let Cr={width:0,height:0};de.setMeasureFunc(I=>{let{width:$,height:X}=Dn(I);if(x===\"balance\"){let G=$/2,ie=$,H=$;for(;G+1<ie;){H=(G+ie)/2;let{height:me}=Dn(H);me>X?G=H:ie=H}return Dn(ie),Cr={width:ie,height:X},{width:Math.ceil(ie),height:X}}return Cr={width:$,height:X},{width:Math.ceil($),height:X}});let[Fl,wl]=yield,gn=\"\",_r=\"\",je=i._inheritedClipPathId,Mo=i._inheritedMaskId,{left:No,top:$o,width:bn,height:El}=de.getComputedLayout(),Sr=o.getComputedWidth()-o.getComputedPadding(n.EDGE_LEFT)-o.getComputedPadding(n.EDGE_RIGHT)-o.getComputedBorder(n.EDGE_LEFT)-o.getComputedBorder(n.EDGE_RIGHT),pt=Fl+No,ht=wl+$o,{matrix:$e,opacity:kr}=xu({left:No,top:$o,width:bn,height:El,isInheritingTransform:a},r),mt=\"\";if(r.textShadowOffset){let{textShadowColor:I,textShadowOffset:$,textShadowRadius:X}=r;Array.isArray(r.textShadowOffset)||(I=[I],$=[$],X=[X]),mt=Fu({width:Cr.width,height:Cr.height,id:s},{shadowColor:I,shadowOffset:$,shadowRadius:X}),mt=C(\"defs\",{},mt)}let kt=\"\",Tr=\"\",Wo=\"\",Ar=-1,Dt={},He=null,qo=0;for(let I=0;I<dt.length;I++){let $=St[I],X=St[I+1];if(!$)continue;let G=dt[I],ie=null,H=!1,me=c?c[G]:null,fe=$.y,te=$.x,Ie=$.width,W=$.line;if(W===Ar)continue;let nt=!1;if(ae.length>1){let Z=bn-ae[W];if(d===\"right\"||d===\"end\")te+=Z;else if(d===\"center\")te+=Z/2;else if(d===\"justify\"&&W<ae.length-1){let De=Be[W],Xe=De>1?Z/(De-1):0;te+=Xe*$.lineIndex,nt=!0}}let Ee=be[W],Ve=Y.baseline(G),Or=Y.height(G),Ye=Ee-Ve;if(Dt[W]||(Dt[W]=[te,ht+fe+Ye,Ve,nt?bn:ae[W]]),L!==1/0){let it=function(ge,Oe){let ot=we(Oe,\"grapheme\",p),We=\"\",Tt=0;for(let Uo of ot){let zo=ge+A([We+Uo]);if(We&&zo+De>Sr)break;We+=Uo,Tt=zo}return{subset:We,resolvedWidth:Tt}},Z=V,De=he(V);De>Sr&&(Z=Mt,De=he(Z));let Xe=he(Lt),Pr=W<ae.length-1;if(W+1===L&&(Pr||ae[W]>Sr)){if(te+Ie+De+Xe>Sr){let{subset:ge,resolvedWidth:Oe}=it(te,G);G=ge+Z,Ar=W,Dt[W][2]=Oe,H=!0}else if(X&&X.line!==W)if(d===\"center\"){let{subset:ge,resolvedWidth:Oe}=it(te,G);G=ge+Z,Ar=W,Dt[W][2]=Oe,H=!0}else{let ge=dt[I+1],{subset:Oe,resolvedWidth:ot}=it(Ie+te,ge);G=G+Oe+Z,Ar=W,Dt[W][2]=ot,H=!0}}}if(me)fe+=0;else if(f){if(!G.includes(Ln)&&!eu.includes(G)&&dt[I+1]&&X&&!X.isImage&&fe===X.y&&!H){He===null&&(qo=te),He=He===null?G:He+G;continue}let Z=He===null?G:He+G,De=He===null?te:qo,Xe=$.width+te-De;ie=Y.getSVG(Z.replace(/(\\t)+/g,\"\"),{...r,left:pt+De,top:ht+fe+Ve+Ye,letterSpacing:r.letterSpacing}),He=null,l&&(Wo+=C(\"rect\",{x:pt+De,y:ht+fe+Ye,width:Xe,height:Or,fill:\"transparent\",stroke:\"#575eff\",\"stroke-width\":1,transform:$e||void 0,\"clip-path\":je?`url(#${je})`:void 0})+C(\"line\",{x1:pt+te,x2:pt+te+$.width,y1:ht+fe+Ye+Ve,y2:ht+fe+Ye+Ve,stroke:\"#14c000\",\"stroke-width\":1,transform:$e||void 0,\"clip-path\":je?`url(#${je})`:void 0}))}else fe+=Ve+Ye;if(r.textDecorationLine){let Z=Dt[W];Z&&!Z[4]&&(kt+=In({left:pt+Z[0],top:Z[1],width:Z[3],ascender:Z[2],clipPathId:je},r),Z[4]=1)}if(ie!==null)Tr+=ie+\" \";else{let[Z,De]=Bn({content:G,filter:mt,id:s,left:pt+te,top:ht+fe,width:Ie,height:Or,matrix:$e,opacity:kr,image:me,clipPathId:je,debug:l,shape:!!P,decorationShape:kt},r);gn+=Z,_r+=De,kt=\"\"}if(H)break}if(Tr){let I=r.color!==\"transparent\"&&kr!==0?C(\"path\",{fill:r.color,d:Tr,transform:$e||void 0,opacity:kr!==1?kr:void 0,\"clip-path\":je?`url(#${je})`:void 0,mask:Mo?`url(#${Mo})`:void 0,style:y?`filter:${y}`:void 0}):\"\";P&&(_r=C(\"path\",{d:Tr,transform:$e||void 0})),gn+=(mt?mt+C(\"g\",{filter:`url(#satori_s-${s})`},I+kt):I+kt)+Wo}return _r&&(r._inheritedBackgroundClipTextPath.value+=_r),gn}function Ef(e,t,n){return t===\"uppercase\"?e=e.toLocaleUpperCase(n):t===\"lowercase\"?e=e.toLocaleLowerCase(n):t===\"capitalize\"&&(e=we(e,\"word\",n).map(r=>we(r,\"grapheme\",n).map((i,o)=>o===0?i.toLocaleUpperCase(n):i).join(\"\")).join(\"\")),e}function Cf(e,t){let{textOverflow:n,lineClamp:r,WebkitLineClamp:i,WebkitBoxOrient:o,overflow:u,display:s}=e;if(s===\"block\"&&r){let[a,l=Mt]=Of(r);if(a)return[a,l]}return n===\"ellipsis\"&&s===\"-webkit-box\"&&o===\"vertical\"&&ru(i)&&i>0?[i,Mt]:n===\"ellipsis\"&&u===\"hidden\"&&!t?[1,Mt]:[1/0]}function _f(e,t){let n=[\"break-all\",\"break-word\"].includes(t),{words:r,requiredBreaks:i}=iu(e,t);return{words:r,requiredBreaks:i,allowBreakWord:n}}function Sf(e,t){let n=[\"pre\",\"pre-wrap\",\"pre-line\"].includes(t),r=[\"normal\",\"nowrap\",\"pre-line\"].includes(t),i=![\"pre\",\"nowrap\"].includes(t);return n||(e=e.replace(/\\n/g,Lt)),r&&(e=e.replace(/([ ]|\\t)+/g,Lt).trim()),{content:e,shouldCollapseTabsAndSpaces:r,allowSoftWrap:i}}function kf(e,t){let n=e.Node.create();return n.setAlignItems(e.ALIGN_BASELINE),n.setJustifyContent(ve(t,{left:e.JUSTIFY_FLEX_START,right:e.JUSTIFY_FLEX_END,center:e.JUSTIFY_CENTER,justify:e.JUSTIFY_SPACE_BETWEEN,start:e.JUSTIFY_FLEX_START,end:e.JUSTIFY_FLEX_END},e.JUSTIFY_FLEX_START,\"textAlign\")),n}function Tf(e,t){let n=new Map;return function(i){if(n.has(i))return n.get(i);let o=e.measure(i,t);return n.set(i,o),o}}function Af(e){let t=/(\\t)+/.exec(e);return t?{index:t.index,tabCount:t[0].length}:{index:null,tabCount:0}}function Of(e){if(typeof e==\"number\")return[e];let t=/^(\\d+)\\s*\"(.*)\"$/,n=/^(\\d+)\\s*'(.*)'$/,r=t.exec(e),i=n.exec(e);if(r){let o=+r[1],u=r[2];return[o,u]}else if(i){let o=+i[1],u=i[2];return[o,u]}return[]}var Nn=Nn||{},Eu={type:\"directional\",value:\"bottom\"};Nn.parse=function(){var e={linearGradient:/^(\\-(webkit|o|ms|moz)\\-)?(linear\\-gradient)/i,repeatingLinearGradient:/^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-linear\\-gradient)/i,radialGradient:/^(\\-(webkit|o|ms|moz)\\-)?(radial\\-gradient)/i,repeatingRadialGradient:/^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-radial\\-gradient)/i,sideOrCorner:/^to (left (top|bottom)|right (top|bottom)|top (left|right)|bottom (left|right)|left|right|top|bottom)/i,extentKeywords:/^(closest\\-side|closest\\-corner|farthest\\-side|farthest\\-corner|contain|cover)/,positionKeywords:/^(left|center|right|top|bottom)/i,pixelValue:/^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))px/,percentageValue:/^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))\\%/,emLikeValue:/^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))(r?em|vw|vh)/,angleValue:/^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))deg/,zeroValue:/[0]/,startCall:/^\\(/,endCall:/^\\)/,comma:/^,/,hexColor:/^\\#([0-9a-fA-F]+)/,literalColor:/^([a-zA-Z]+)/,rgbColor:/^rgb/i,rgbaColor:/^rgba/i,number:/^(([0-9]*\\.[0-9]+)|([0-9]+\\.?))/},t=\"\";function n(A){var O=new Error(t+\": \"+A);throw O.source=t,O}function r(){var A=i();return t.length>0&&n(\"Invalid input not EOF\"),A}function i(){return k(o)}function o(){return s(\"linear-gradient\",e.linearGradient,l,Eu)||s(\"repeating-linear-gradient\",e.repeatingLinearGradient,l,Eu)||s(\"radial-gradient\",e.radialGradient,h)||s(\"repeating-radial-gradient\",e.repeatingRadialGradient,h)}function u(A={}){var M,R,ae,be;let O={...A};return Object.assign(O,{style:(O.style||[]).length>0?O.style:[{type:\"extent-keyword\",value:\"farthest-corner\"}],at:{type:\"position\",value:{x:{type:\"position-keyword\",value:\"center\",...((R=(M=O.at)==null?void 0:M.value)==null?void 0:R.x)||{}},y:{type:\"position-keyword\",value:\"center\",...((be=(ae=O.at)==null?void 0:ae.value)==null?void 0:be.y)||{}}}}}),A.value||Object.assign(O,{type:\"shape\",value:O.style.some(Be=>[\"%\",\"extent-keyword\"].includes(Be.type))?\"ellipse\":\"circle\"}),O}function s(A,O,M,R){return a(O,function(ae){var be=M();return be?le(e.comma)||n(\"Missing comma before color stops\"):be=R,{type:A,orientation:A.endsWith(\"radial-gradient\")?(be==null?void 0:be.map(Be=>u(Be)))??[u()]:be,colorStops:k(P)}})}function a(A,O){var M=le(A);if(M){le(e.startCall)||n(\"Missing (\");var R=O(M);return le(e.endCall)||n(\"Missing )\"),R}}function l(){return f()||c()||p()}function f(){return ee(\"directional\",e.sideOrCorner,1)}function c(){return ee(\"angular\",e.angleValue,1)}function p(){return ee(\"directional\",e.zeroValue,0)}function h(){var A,O=d(),M;return O&&(A=[],A.push(O),M=t,le(e.comma)&&(O=d(),O?A.push(O):t=M)),A}function d(){let A=m(),O=x();if(!(!A&&!O))return{...A,at:O}}function m(){let A=v()||g(),O=b()||de()||L(),M=ee(\"%\",e.percentageValue,1);if(A)return{...A,style:[O,M].filter(R=>R)};if(O)return{style:[O,M].filter(R=>R),...v()||g()}}function v(){return ee(\"shape\",/^(circle)/i,0)}function g(){return ee(\"shape\",/^(ellipse)/i,0)}function b(){return ee(\"extent-keyword\",e.extentKeywords,1)}function x(){if(ee(\"position\",/^at/,0)){var A=F();return A||n(\"Missing positioning value\"),A}}function F(){var A=y();if(A.x||A.y)return{type:\"position\",value:A}}function y(){return{x:L(),y:L()}}function k(A){var O=A(),M=[];if(O)for(M.push(O);le(e.comma);)O=A(),O?M.push(O):n(\"One extra comma\");return M}function P(){var A=B();return A||n(\"Expected color definition\"),A.length=L(),A}function B(){return oe()||se()||ue()||j()}function j(){return ee(\"literal\",e.literalColor,0)}function oe(){return ee(\"hex\",e.hexColor,1)}function ue(){return a(e.rgbColor,function(){return{type:\"rgb\",value:k(N)}})}function se(){return a(e.rgbaColor,function(){return{type:\"rgba\",value:k(N)}})}function N(){return le(e.number)[1]}function L(){return ee(\"%\",e.percentageValue,1)||V()||de()}function V(){return ee(\"position-keyword\",e.positionKeywords,1)}function de(){return ee(\"px\",e.pixelValue,1)||Y(e.emLikeValue,1)}function Y(A,O){var M=le(A);if(M)return{type:M[5],value:M[O]}}function ee(A,O,M){var R=le(O);if(R)return{type:A,value:R[M]}}function le(A){var O,M;return M=/^[\\n\\r\\t\\s]+/.exec(t),M&&he(M[0].length),O=A.exec(t),O&&he(O[0].length),O}function he(A){t=t.substr(A)}return function(A){return t=A.toString(),r()}}();var $n=Nn;function Bf(e){return e.type===\"literal\"?e.value:e.type===\"hex\"?`#${e.value}`:e.type===\"rgb\"?`rgb(${e.value.join(\",\")})`:e.type===\"rgba\"?`rgba(${e.value.join(\",\")})`:\"transparent\"}function If(e){let t=0,n=0,r=0,i=0;return e.includes(\"top\")?n=1:e.includes(\"bottom\")&&(i=1),e.includes(\"left\")?t=1:e.includes(\"right\")&&(r=1),!t&&!r&&!n&&!i&&(n=1),[t,n,r,i]}function Rf(e,t){return typeof e==\"string\"&&e.endsWith(\"%\")?t*parseFloat(e)/100:+e}function Wn(e,{x:t,y:n,defaultX:r,defaultY:i}){return(e?e.split(\" \").map(o=>{try{let u=new Qe(o);return u.type===\"length\"||u.type===\"number\"?u.value:u.value+u.unit}catch{return null}}).filter(o=>o!==null):[r,i]).map((o,u)=>Rf(o,[t,n][u]))}function Cu(e,t,n){let r=[];for(let s of t){let a=Bf(s);if(!r.length&&(r.push({offset:0,color:a}),typeof s.length>\"u\"||s.length.value===\"0\"))continue;let l=typeof s.length>\"u\"?void 0:s.length.type===\"%\"?s.length.value/100:s.length.value/e;r.push({offset:l,color:a})}r.length||r.push({offset:0,color:\"transparent\"});let i=r[r.length-1];i.offset!==1&&(typeof i.offset>\"u\"?i.offset=1:r.push({offset:1,color:i.color}));let o=0,u=1;for(let s=0;s<r.length;s++)if(typeof r[s].offset>\"u\"){for(u<s&&(u=s);typeof r[u].offset>\"u\";)u++;r[s].offset=(r[u].offset-r[o].offset)/(u-o)*(s-o)+r[o].offset}else o=s;return n===\"mask\"?r.map(s=>{let a=parse_css_color__WEBPACK_IMPORTED_MODULE_4__(s.color);return a.alpha===0?{...s,color:\"rgba(0, 0, 0, 1)\"}:{...s,color:`rgba(255, 255, 255, ${a.alpha})`}}):r}async function Nt({id:e,width:t,height:n,left:r,top:i},{image:o,size:u,position:s,repeat:a},l,f){a=a||\"repeat\",f=f||\"background\";let c=a===\"repeat-x\"||a===\"repeat\",p=a===\"repeat-y\"||a===\"repeat\",h=Wn(u,{x:t,y:n,defaultX:t,defaultY:n}),d=Wn(s,{x:t,y:n,defaultX:0,defaultY:0});if(o.startsWith(\"linear-gradient(\")){let m=$n.parse(o)[0],[v,g]=h,b,x,F,y,k;if(m.orientation.type===\"directional\")[b,x,F,y]=If(m.orientation.value),k=Math.sqrt(Math.pow((F-b)*v,2)+Math.pow((y-x)*g,2));else if(m.orientation.type===\"angular\"){let N=function(L){if(L=(L%(Math.PI*2)+Math.PI*2)%(Math.PI*2),Math.abs(L-Math.PI/2)<1e-6){b=0,x=0,F=1,y=0,k=v;return}else if(Math.abs(L)<1e-6){b=0,x=1,F=0,y=0,k=g;return}if(L>=Math.PI/2&&L<Math.PI){N(Math.PI-L),x=1-x,y=1-y;return}else if(L>=Math.PI){N(L-Math.PI);let M=b;b=F,F=M,M=x,x=y,y=M;return}let V=Math.tan(L),de=V*se,Y=Math.atan(de),ee=Math.sqrt(2)*Math.cos(Math.PI/4-Y);b=0,x=1,F=Math.sin(Y)*ee,y=1-Math.cos(Y)*ee;let le=1,he=1/V,A=Math.abs((le*se+he)/Math.sqrt(le*le+he*he)/Math.sqrt(se*se+1));k=Math.sqrt(v*v+g*g)*A},se=v/g;N(+m.orientation.value/180*Math.PI)}let P=Cu(k,m.colorStops,f),B=`satori_bi${e}`,j=`satori_pattern_${e}`,oe=C(\"pattern\",{id:j,x:d[0]/t,y:d[1]/n,width:c?v/t:\"1\",height:p?g/n:\"1\",patternUnits:\"objectBoundingBox\"},C(\"linearGradient\",{id:B,x1:b,y1:x,x2:F,y2:y},P.map(ue=>C(\"stop\",{offset:ue.offset*100+\"%\",\"stop-color\":ue.color})).join(\"\"))+C(\"rect\",{x:0,y:0,width:v,height:g,fill:`url(#${B})`}));return[j,oe]}if(o.startsWith(\"radial-gradient(\")){let m=$n.parse(o)[0],v=m.orientation[0],[g,b]=h,x=\"circle\",F=g/2,y=b/2;if(v.type===\"shape\"){if(x=v.value,v.at)if(v.at.type===\"position\"){let N=Lf(v.at.value.x,v.at.value.y,g,b,l.fontSize,l);F=N.x,y=N.y}else throw new Error(\"orientation.at.type not implemented: \"+v.at.type)}else throw new Error(\"orientation.type not implemented: \"+v.type);let k=Cu(t,m.colorStops,f),P=`satori_radial_${e}`,B=`satori_pattern_${e}`,j=`satori_mask_${e}`,oe=Mf(x,v.style,l.fontSize,{x:F,y},[g,b],l),ue=C(\"pattern\",{id:B,x:d[0]/t,y:d[1]/n,width:c?g/t:\"1\",height:p?b/n:\"1\",patternUnits:\"objectBoundingBox\"},C(\"radialGradient\",{id:P},k.map(N=>C(\"stop\",{offset:N.offset,\"stop-color\":N.color})).join(\"\"))+C(\"mask\",{id:j},C(\"rect\",{x:0,y:0,width:g,height:b,fill:\"#fff\"}))+C(\"rect\",{x:0,y:0,width:g,height:b,fill:k.at(-1).color})+C(x,{cx:F,cy:y,width:g,height:b,...oe,fill:`url(#${P})`,mask:`url(#${j})`}));return[B,ue]}if(o.startsWith(\"url(\")){let m=Wn(u,{x:t,y:n,defaultX:0,defaultY:0}),[v,g,b]=await yt(o.slice(4,-1)),x=f===\"mask\"?g||m[0]:m[0]||g,F=f===\"mask\"?b||m[1]:m[1]||b;return[`satori_bi${e}`,C(\"pattern\",{id:`satori_bi${e}`,patternContentUnits:\"userSpaceOnUse\",patternUnits:\"userSpaceOnUse\",x:d[0]+r,y:d[1]+i,width:c?x:\"100%\",height:p?F:\"100%\"},C(\"image\",{x:0,y:0,width:x,height:F,preserveAspectRatio:\"none\",href:v}))]}throw new Error(`Invalid background image: \"${o}\"`)}function Lf(e,t,n,r,i,o){let u={x:n/2,y:r/2};return e.type===\"position-keyword\"?Object.assign(u,_u(e.value,n,r,\"x\")):u.x=q(`${e.value}${e.type}`,i,n,o,!0),t.type===\"position-keyword\"?Object.assign(u,_u(t.value,n,r,\"y\")):u.y=q(`${t.value}${t.type}`,i,r,o,!0),u}function _u(e,t,n,r){switch(e){case\"center\":return{[r]:r===\"x\"?t/2:n/2};case\"left\":return{x:0};case\"top\":return{y:0};case\"right\":return{x:t};case\"bottom\":return{y:n}}}function Mf(e,t,n,r,i,o){let[u,s]=i,{x:a,y:l}=r,f={},c=0,p=0;if(!t.some(d=>d.type===\"extent-keyword\")){if(t.some(d=>d.value.startsWith(\"-\")))throw new Error(\"disallow setting negative values to the size of the shape. Check https://w3c.github.io/csswg-drafts/css-images/#valdef-rg-size-length-0\");return e===\"circle\"?{r:q(`${t[0].value}${t[0].type}`,n,u,o,!0)}:{rx:q(`${t[0].value}${t[0].type}`,n,u,o,!0),ry:q(`${t[1].value}${t[1].type}`,n,s,o,!0)}}switch(t[0].value){case\"farthest-corner\":c=Math.max(Math.abs(u-a),Math.abs(a)),p=Math.max(Math.abs(s-l),Math.abs(l));break;case\"closest-corner\":c=Math.min(Math.abs(u-a),Math.abs(a)),p=Math.min(Math.abs(s-l),Math.abs(l));break;case\"farthest-side\":return e===\"circle\"?f.r=Math.max(Math.abs(u-a),Math.abs(a),Math.abs(s-l),Math.abs(l)):(f.rx=Math.max(Math.abs(u-a),Math.abs(a)),f.ry=Math.max(Math.abs(s-l),Math.abs(l))),f;case\"closest-side\":return e===\"circle\"?f.r=Math.min(Math.abs(u-a),Math.abs(a),Math.abs(s-l),Math.abs(l)):(f.rx=Math.min(Math.abs(u-a),Math.abs(a)),f.ry=Math.min(Math.abs(s-l),Math.abs(l))),f}if(e===\"circle\")f.r=Math.sqrt(c*c+p*p);else{let d=p!==0?c/p:1;c===0?(f.rx=0,f.ry=0):(f.ry=Math.sqrt(c*c+p*p*d*d)/d,f.rx=f.ry*d)}return f}function Nf([e,t]){return Math.round(e*1e3)===0&&Math.round(t*1e3)===0?0:Math.round(e*t/Math.sqrt(e*e+t*t)*1e3)/1e3}function zr(e,t,n){return n<e+t&&(n/2<e&&n/2<t?e=t=n/2:n/2<e?e=n-t:n/2<t&&(t=n-e)),[e,t]}function Gr(e){e[0]=e[1]=Math.min(e[0],e[1])}function jr(e,t,n,r,i){if(typeof e==\"string\"){let o=e.split(\" \").map(s=>s.trim()),u=!o[1]&&!o[0].endsWith(\"%\");return o[1]=o[1]||o[0],[u,[Math.min(q(o[0],r,t,i,!0),t),Math.min(q(o[1],r,n,i,!0),n)]]}return typeof e==\"number\"?[!0,[Math.min(e,t),Math.min(e,n)]]:[!0,void 0]}var Hr=e=>e&&e[0]!==0&&e[1]!==0;function Je({left:e,top:t,width:n,height:r},i,o){let{borderTopLeftRadius:u,borderTopRightRadius:s,borderBottomLeftRadius:a,borderBottomRightRadius:l,fontSize:f}=i,c,p,h,d;if([c,u]=jr(u,n,r,f,i),[p,s]=jr(s,n,r,f,i),[h,a]=jr(a,n,r,f,i),[d,l]=jr(l,n,r,f,i),!o&&!Hr(u)&&!Hr(s)&&!Hr(a)&&!Hr(l))return\"\";u||=[0,0],s||=[0,0],a||=[0,0],l||=[0,0],[u[0],s[0]]=zr(u[0],s[0],n),[a[0],l[0]]=zr(a[0],l[0],n),[u[1],a[1]]=zr(u[1],a[1],r),[s[1],l[1]]=zr(s[1],l[1],r),c&&Gr(u),p&&Gr(s),h&&Gr(a),d&&Gr(l);let m=[];m[0]=[s,s],m[1]=[l,[-l[0],l[1]]],m[2]=[a,[-a[0],-a[1]]],m[3]=[u,[u[0],-u[1]]];let v=`h${n-u[0]-s[0]} a${m[0][0]} 0 0 1 ${m[0][1]}`,g=`v${r-s[1]-l[1]} a${m[1][0]} 0 0 1 ${m[1][1]}`,b=`h${l[0]+a[0]-n} a${m[2][0]} 0 0 1 ${m[2][1]}`,x=`v${a[1]+u[1]-r} a${m[3][0]} 0 0 1 ${m[3][1]}`;if(o){let y=function(se){let N=Nf([u,s,l,a][se]);return se===0?[[e+u[0]-N,t+u[1]-N],[e+u[0],t]]:se===1?[[e+n-s[0]+N,t+s[1]-N],[e+n,t+s[1]]]:se===2?[[e+n-l[0]+N,t+r-l[1]+N],[e+n-l[0],t+r]]:[[e+a[0]-N,t+r-a[1]+N],[e,t+r-a[1]]]},F=o.indexOf(!1);if(!o.includes(!0))throw new Error(\"Invalid `partialSides`.\");if(F===-1)F=0;else for(;!o[F];)F=(F+1)%4;let k=\"\",P=y(F),B=`M${P[0]} A${m[(F+3)%4][0]} 0 0 1 ${P[1]}`,j=0;for(;j<4&&o[(F+j)%4];j++)k+=B+\" \",B=[v,g,b,x][(F+j)%4];let oe=(F+j)%4;k+=B.split(\" \")[0];let ue=y(oe);return k+=` A${m[(oe+3)%4][0]} 0 0 1 ${ue[0]}`,k}return`M${e+u[0]},${t} ${v} ${g} ${b} ${x}`}function Su(e,t,n){return n[e+\"Width\"]===n[t+\"Width\"]&&n[e+\"Style\"]===n[t+\"Style\"]&&n[e+\"Color\"]===n[t+\"Color\"]}function ku({id:e,currentClipPathId:t,borderPath:n,borderType:r,left:i,top:o,width:u,height:s},a){if(!(a.borderTopWidth||a.borderRightWidth||a.borderBottomWidth||a.borderLeftWidth))return null;let f=`satori_bc-${e}`;return[C(\"clipPath\",{id:f,\"clip-path\":t?`url(#${t})`:void 0},C(r,{x:i,y:o,width:u,height:s,d:n||void 0})),f]}function $t({left:e,top:t,width:n,height:r,props:i,asContentMask:o,maskBorderOnly:u},s){let a=[\"borderTop\",\"borderRight\",\"borderBottom\",\"borderLeft\"];if(!o&&!a.some(h=>s[h+\"Width\"]))return\"\";let l=\"\",f=0;for(;f>0&&Su(a[f],a[(f+3)%4],s);)f=(f+3)%4;let c=[!1,!1,!1,!1],p=[];for(let h=0;h<4;h++){let d=(f+h)%4,m=(f+h+1)%4,v=a[d],g=a[m];if(c[d]=!0,p=[s[v+\"Width\"],s[v+\"Style\"],s[v+\"Color\"],v],!Su(v,g,s)){let b=(p[0]||0)+(o&&!u&&s[v.replace(\"border\",\"padding\")]||0);b&&(l+=C(\"path\",{width:n,height:r,...i,fill:\"none\",stroke:o?\"#000\":p[2],\"stroke-width\":b*2,\"stroke-dasharray\":!o&&p[1]===\"dashed\"?b*2+\" \"+b:void 0,d:Je({left:e,top:t,width:n,height:r},s,c)})),c=[!1,!1,!1,!1]}}if(c.some(Boolean)){let h=(p[0]||0)+(o&&!u&&s[p[3].replace(\"border\",\"padding\")]||0);h&&(l+=C(\"path\",{width:n,height:r,...i,fill:\"none\",stroke:o?\"#000\":p[2],\"stroke-width\":h*2,\"stroke-dasharray\":!o&&p[1]===\"dashed\"?h*2+\" \"+h:void 0,d:Je({left:e,top:t,width:n,height:r},s,c)}))}return l}function qn({id:e,left:t,top:n,width:r,height:i,matrix:o,borderOnly:u},s){let a=(s.borderLeftWidth||0)+(u?0:s.paddingLeft||0),l=(s.borderTopWidth||0)+(u?0:s.paddingTop||0),f=(s.borderRightWidth||0)+(u?0:s.paddingRight||0),c=(s.borderBottomWidth||0)+(u?0:s.paddingBottom||0),p={x:t+a,y:n+l,width:r-a-f,height:i-l-c};return C(\"mask\",{id:e},C(\"rect\",{...p,fill:\"#fff\",mask:s._inheritedMaskId?`url(#${s._inheritedMaskId})`:void 0})+$t({left:t,top:n,width:r,height:i,props:{transform:o||void 0},asContentMask:!0,maskBorderOnly:u},s))}var Wt={circle:/circle\\((.+)\\)/,ellipse:/ellipse\\((.+)\\)/,path:/path\\((.+)\\)/,polygon:/polygon\\((.+)\\)/,inset:/inset\\((.+)\\)/};function Pu({width:e,height:t},n,r){function i(l){let f=l.match(Wt.circle);if(!f)return null;let[,c]=f,[p,h=\"\"]=c.split(\"at\").map(v=>v.trim()),{x:d,y:m}=Ou(h,e,t);return{type:\"circle\",r:q(p,r.fontSize,Math.sqrt(Math.pow(e,2)+Math.pow(t,2))/Math.sqrt(2),r,!0),cx:q(d,r.fontSize,e,r,!0),cy:q(m,r.fontSize,t,r,!0)}}function o(l){let f=l.match(Wt.ellipse);if(!f)return null;let[,c]=f,[p,h=\"\"]=c.split(\"at\").map(b=>b.trim()),[d,m]=p.split(\" \"),{x:v,y:g}=Ou(h,e,t);return{type:\"ellipse\",rx:q(d||\"50%\",r.fontSize,e,r,!0),ry:q(m||\"50%\",r.fontSize,t,r,!0),cx:q(v,r.fontSize,e,r,!0),cy:q(g,r.fontSize,t,r,!0)}}function u(l){let f=l.match(Wt.path);if(!f)return null;let[c,p]=Au(f[1]);return{type:\"path\",d:p,\"fill-rule\":c}}function s(l){let f=l.match(Wt.polygon);if(!f)return null;let[c,p]=Au(f[1]);return{type:\"polygon\",\"fill-rule\":c,points:p.split(\",\").map(h=>h.split(\" \").map((d,m)=>q(d,r.fontSize,m===0?e:t,r,!0)).join(\" \")).join(\",\")}}function a(l){let f=l.match(Wt.inset);if(!f)return null;let[c,p]=(f[1].includes(\"round\")?f[1]:`${f[1].trim()} round 0`).split(\"round\"),h=(0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getStylesForProperty)(\"borderRadius\",p,!0),d=Object.values(h).map(F=>String(F)).map((F,y)=>q(F,r.fontSize,y===0||y===2?t:e,r,!0)||0),m=Object.values((0,css_to_react_native__WEBPACK_IMPORTED_MODULE_1__.getStylesForProperty)(\"margin\",c,!0)).map(F=>String(F)).map((F,y)=>q(F,r.fontSize,y===0||y===2?t:e,r,!0)||0),v=m[3],g=m[0],b=e-(m[1]+m[3]),x=t-(m[0]+m[2]);return d.some(F=>F>0)?{type:\"path\",d:Je({left:v,top:g,width:b,height:x},{...n,...h})}:{type:\"rect\",x:v,y:g,width:b,height:x}}return{parseCircle:i,parseEllipse:o,parsePath:u,parsePolygon:s,parseInset:a}}function Au(e){let[,t=\"nonzero\",n]=e.replace(/('|\")/g,\"\").match(/^(nonzero|evenodd)?,?(.+)/)||[];return[t,n]}function Ou(e,t,n){let r=e.split(\" \"),i={x:r[0]||\"50%\",y:r[1]||\"50%\"};return r.forEach(o=>{o===\"top\"?i.y=0:o===\"bottom\"?i.y=n:o===\"left\"?i.x=0:o===\"right\"?i.x=t:o===\"center\"&&(i.x=t/2,i.y=n/2)}),i}function Vr(e){return`satori_cp-${e}`}function Bu(e){return`url(#${Vr(e)})`}function Iu(e,t,n){if(t.clipPath===\"none\")return\"\";let r=Pu(e,t,n),i=t.clipPath,o={type:\"\"};for(let u of Object.keys(r))if(o=r[u](i),o)break;if(o){let{type:u,...s}=o;return C(\"clipPath\",{id:Vr(e.id),\"clip-path\":e.currentClipPath,transform:`translate(${e.left}, ${e.top})`},C(u,s))}return\"\"}function Un({left:e,top:t,width:n,height:r,path:i,matrix:o,id:u,currentClipPath:s,src:a},l,f){let c=\"\",p=l.clipPath&&l.clipPath!==\"none\"?Iu({left:e,top:t,width:n,height:r,path:i,id:u,matrix:o,currentClipPath:s,src:a},l,f):\"\";if(l.overflow!==\"hidden\"&&!a)c=\"\";else{let d=p?`satori_ocp-${u}`:Vr(u);c=C(\"clipPath\",{id:d,\"clip-path\":s},C(i?\"path\":\"rect\",{x:e,y:t,width:n,height:r,d:i||void 0}))}let h=qn({id:`satori_om-${u}`,left:e,top:t,width:n,height:r,matrix:o,borderOnly:!a},l);return p+c+h}var $f=e=>`satori_mi-${e}`;async function zn(e,t,n){if(!t.maskImage)return[\"\",\"\"];let{left:r,top:i,width:o,height:u,id:s}=e,a=t.maskImage,l=a.length;if(!l)return[\"\",\"\"];let f=$f(s),c=\"\";for(let p=0;p<l;p++){let h=a[p],[d,m]=await Nt({id:`${f}-${p}`,left:r,top:i,width:o,height:u},h,n,\"mask\");c+=m+C(\"rect\",{x:0,y:0,width:o,height:u,fill:`url(#${d})`})}return c=C(\"mask\",{id:f},c),[f,c]}async function qt({id:e,left:t,top:n,width:r,height:i,isInheritingTransform:o,src:u,debug:s},a,l){if(a.display===\"none\")return\"\";let f=!!u,c=\"rect\",p=\"\",h=\"\",d=[],m=1,v=\"\";a.backgroundColor&&d.push(a.backgroundColor),a.opacity!==void 0&&(m=+a.opacity),a.transform&&(p=Rt({left:t,top:n,width:r,height:i},a.transform,o,a.transformOrigin));let g=\"\";if(a.backgroundImage){let L=[];for(let V=0;V<a.backgroundImage.length;V++){let de=a.backgroundImage[V],Y=await Nt({id:e+\"_\"+V,width:r,height:i,left:t,top:n},de,l);Y&&L.unshift(Y)}for(let V of L)d.push(`url(#${V[0]})`),h+=V[1],V[2]&&(g+=V[2])}let[b,x]=await zn({id:e,left:t,top:n,width:r,height:i},a,l);h+=x;let F=b?`url(#${b})`:a._inheritedMaskId?`url(#${a._inheritedMaskId})`:void 0,y=Je({left:t,top:n,width:r,height:i},a);y&&(c=\"path\");let k=a._inheritedClipPathId;s&&(v=C(\"rect\",{x:t,y:n,width:r,height:i,fill:\"transparent\",stroke:\"#ff5757\",\"stroke-width\":1,transform:p||void 0,\"clip-path\":k?`url(#${k})`:void 0}));let{backgroundClip:P,filter:B}=a,j=P===\"text\"?`url(#satori_bct-${e})`:k?`url(#${k})`:a.clipPath?Bu(e):void 0,oe=Un({left:t,top:n,width:r,height:i,path:y,id:e,matrix:p,currentClipPath:j,src:u},a,l),ue=d.map(L=>C(c,{x:t,y:n,width:r,height:i,fill:L,d:y||void 0,transform:p||void 0,\"clip-path\":j,style:B?`filter:${B}`:void 0,mask:F})).join(\"\"),se=ku({id:e,left:t,top:n,width:r,height:i,currentClipPathId:k,borderPath:y,borderType:c},a);if(f){let L=(a.borderLeftWidth||0)+(a.paddingLeft||0),V=(a.borderTopWidth||0)+(a.paddingTop||0),de=(a.borderRightWidth||0)+(a.paddingRight||0),Y=(a.borderBottomWidth||0)+(a.paddingBottom||0),ee=a.objectFit===\"contain\"?\"xMidYMid\":a.objectFit===\"cover\"?\"xMidYMid slice\":\"none\";ue+=C(\"image\",{x:t+L,y:n+V,width:r-L-de,height:i-V-Y,href:u,preserveAspectRatio:ee,transform:p||void 0,style:B?`filter:${B}`:void 0,\"clip-path\":`url(#satori_cp-${e})`,mask:b?`url(#${b})`:`url(#satori_om-${e})`})}if(se){h+=se[0];let L=se[1];ue+=$t({left:t,top:n,width:r,height:i,props:{transform:p||void 0,\"clip-path\":`url(#${L})`}},a)}let N=wu({width:r,height:i,id:e,opacity:m,shape:C(c,{x:t,y:n,width:r,height:i,fill:\"#fff\",stroke:\"#fff\",\"stroke-width\":0,d:y||void 0,transform:p||void 0,\"clip-path\":j,mask:F})},a);return(h?C(\"defs\",{},h):\"\")+(N?N[0]:\"\")+oe+(m!==1?`<g opacity=\"${m}\">`:\"\")+(g||ue)+(m!==1?\"</g>\":\"\")+(N?N[1]:\"\")+v}var Ru=()=>/[#*0-9]\\uFE0F?\\u20E3|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26AA\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C8\\u26CF\\u26D1\\u26D3\\u26E9\\u26F0-\\u26F5\\u26F7\\u26F8\\u26FA\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B55\\u3030\\u303D\\u3297\\u3299]\\uFE0F?|[\\u261D\\u270C\\u270D](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\u270A\\u270B](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u2693\\u26A1\\u26AB\\u26C5\\u26CE\\u26D4\\u26EA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2795-\\u2797\\u27B0\\u27BF\\u2B50]|\\u26F9(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\u2764\\uFE0F?(?:\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79))?|\\uD83C(?:[\\uDC04\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDE02\\uDE37\\uDF21\\uDF24-\\uDF2C\\uDF36\\uDF7D\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E\\uDF9F\\uDFCD\\uDFCE\\uDFD4-\\uDFDF\\uDFF5\\uDFF7]\\uFE0F?|[\\uDF85\\uDFC2\\uDFC7](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDFC3\\uDFC4\\uDFCA](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDFCB\\uDFCC](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF84\\uDF86-\\uDF93\\uDFA0-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF8-\\uDFFF]|\\uDDE6\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF]|\\uDDE7\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF]|\\uDDE8\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF]|\\uDDE9\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF]|\\uDDEA\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA]|\\uDDEB\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7]|\\uDDEC\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE]|\\uDDED\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA]|\\uDDEE\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9]|\\uDDEF\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5]|\\uDDF0\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF]|\\uDDF1\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE]|\\uDDF2\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF]|\\uDDF3\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF]|\\uDDF4\\uD83C\\uDDF2|\\uDDF5\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE]|\\uDDF6\\uD83C\\uDDE6|\\uDDF7\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC]|\\uDDF8\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF]|\\uDDF9\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF]|\\uDDFA\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF]|\\uDDFB\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA]|\\uDDFC\\uD83C[\\uDDEB\\uDDF8]|\\uDDFD\\uD83C\\uDDF0|\\uDDFE\\uD83C[\\uDDEA\\uDDF9]|\\uDDFF\\uD83C[\\uDDE6\\uDDF2\\uDDFC]|\\uDFF3\\uFE0F?(?:\\u200D(?:\\u26A7\\uFE0F?|\\uD83C\\uDF08))?|\\uDFF4(?:\\u200D\\u2620\\uFE0F?|\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40(?:\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F)?)|\\uD83D(?:[\\uDC08\\uDC26](?:\\u200D\\u2B1B)?|[\\uDC3F\\uDCFD\\uDD49\\uDD4A\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA\\uDECB\\uDECD-\\uDECF\\uDEE0-\\uDEE5\\uDEE9\\uDEF0\\uDEF3]\\uFE0F?|[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD74\\uDD90](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC25\\uDC27-\\uDC3A\\uDC3C-\\uDC3E\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC6A\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDDA4\\uDDFB-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEDC-\\uDEDF\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uDC15(?:\\u200D\\uD83E\\uDDBA)?|\\uDC3B(?:\\u200D\\u2744\\uFE0F?)?|\\uDC41\\uFE0F?(?:\\u200D\\uD83D\\uDDE8\\uFE0F?)?|\\uDC68(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDC68\\uDC69]\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC69(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?[\\uDC68\\uDC69]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?|\\uDC69\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?))|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC6F(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDD75(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDE2E(?:\\u200D\\uD83D\\uDCA8)?|\\uDE35(?:\\u200D\\uD83D\\uDCAB)?|\\uDE36(?:\\u200D\\uD83C\\uDF2B\\uFE0F?)?)|\\uD83E(?:[\\uDD0C\\uDD0F\\uDD18-\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5\\uDEC3-\\uDEC5\\uDEF0\\uDEF2-\\uDEF8](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDDDE\\uDDDF](?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78-\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCC\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC2\\uDECE-\\uDEDB\\uDEE0-\\uDEE8]|\\uDD3C(?:\\u200D[\\u2640\\u2642]\\uFE0F?|\\uD83C[\\uDFFB-\\uDFFF])?|\\uDDD1(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFC-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFD-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFD\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFE]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?))?|\\uDEF1(?:\\uD83C(?:\\uDFFB(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFC-\\uDFFF])?|\\uDFFC(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])?|\\uDFFD(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])?|\\uDFFE(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])?|\\uDFFF(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFE])?))?)/g;var Wf=new RegExp(Ru(),\"\"),Gn={emoji:Wf,symbol:/\\p{Symbol}/u,math:/\\p{Math}/u},jn={\"ja-JP\":/\\p{scx=Hira}|\\p{scx=Kana}|\\p{scx=Han}|[\\u3000]|[\\uFF00-\\uFFEF]/u,\"ko-KR\":/\\p{scx=Hangul}/u,\"zh-CN\":/\\p{scx=Han}/u,\"zh-TW\":/\\p{scx=Han}/u,\"zh-HK\":/\\p{scx=Han}/u,\"th-TH\":/\\p{scx=Thai}/u,\"bn-IN\":/\\p{scx=Bengali}/u,\"ar-AR\":/\\p{scx=Arabic}/u,\"ta-IN\":/\\p{scx=Tamil}/u,\"ml-IN\":/\\p{scx=Malayalam}/u,\"he-IL\":/\\p{scx=Hebrew}/u,\"te-IN\":/\\p{scx=Telugu}/u,devanagari:/\\p{scx=Devanagari}/u,kannada:/\\p{scx=Kannada}/u},Yr=Object.keys({...jn,...Gn});function Lu(e){return Yr.includes(e)}function Mu(e,t){for(let r of Object.keys(Gn))if(Gn[r].test(e))return[r];let n=Object.keys(jn).filter(r=>jn[r].test(e));if(n.length===0)return[\"unknown\"];if(t){let r=n.findIndex(i=>i===t);r!==-1&&(n.splice(r,1),n.unshift(t))}return n}function Nu(e){if(e)return Yr.find(t=>t.toLowerCase().startsWith(e.toLowerCase()))}async function*Ut(e,t){var M;let n=await qe(),{id:r,inheritedStyle:i,parent:o,font:u,debug:s,locale:a,embedFont:l=!0,graphemeImages:f,canLoadAdditionalAssets:c,getTwStyles:p}=t;if(e===null||typeof e>\"u\")return yield,yield,\"\";if(!bt(e)||typeof e.type==\"function\"){let R;if(!bt(e))R=Mn(String(e),t),yield(await R.next()).value;else{if(Ko(e.type))throw new Error(\"Class component is not supported.\");R=Ut(e.type(e.props),t),yield(await R.next()).value}await R.next();let ae=yield;return(await R.next(ae)).value}let{type:h,props:d}=e;if(d&&Jo(d))throw new Error(\"dangerouslySetInnerHTML property is not supported. See documentation for more information https://github.com/vercel/satori#jsx.\");let{style:m,children:v,tw:g,lang:b=a}=d||{},x=Nu(b);if(g){let R=p(g,m);m=Object.assign(R,m)}let F=n.Node.create();o.insertChild(F,o.getChildCount());let[y,k]=await Pn(F,h,i,m,d),P=y.transform===i.transform;if(P||(y.transform.__parent=i.transform),(y.overflow===\"hidden\"||y.clipPath&&y.clipPath!==\"none\")&&(k._inheritedClipPathId=`satori_cp-${r}`,k._inheritedMaskId=`satori_om-${r}`),y.maskImage&&(k._inheritedMaskId=`satori_mi-${r}`),y.backgroundClip===\"text\"){let R={value:\"\"};k._inheritedBackgroundClipTextPath=R,y._inheritedBackgroundClipTextPath=R}let B=Zo(v),j=[],oe=0,ue=[];for(let R of B){let ae=Ut(R,{id:r+\"-\"+oe++,parentStyle:y,inheritedStyle:k,isInheritingTransform:!0,parent:F,font:u,embedFont:l,debug:s,graphemeImages:f,canLoadAdditionalAssets:c,locale:x,getTwStyles:p,onNodeDetected:t.onNodeDetected});c?ue.push(...(await ae.next()).value||[]):await ae.next(),j.push(ae)}yield ue;for(let R of j)await R.next();let[se,N]=yield,{left:L,top:V,width:de,height:Y}=F.getComputedLayout();L+=se,V+=N;let ee=\"\",le=\"\",he=\"\",{children:A,...O}=d;if((M=t.onNodeDetected)==null||M.call(t,{left:L,top:V,width:de,height:Y,type:h,props:O,key:e.key,textContent:bt(A)?void 0:A}),h===\"img\"){let R=y.__src;le=await qt({id:r,left:L,top:V,width:de,height:Y,src:R,isInheritingTransform:P,debug:s},y,k)}else if(h===\"svg\"){let R=y.color,ae=await du(e,R);le=await qt({id:r,left:L,top:V,width:de,height:Y,src:ae,isInheritingTransform:P,debug:s},y,k)}else{let R=m==null?void 0:m.display;if(h===\"div\"&&v&&typeof v!=\"string\"&&R!==\"flex\"&&R!==\"none\")throw new Error('Expected <div> to have explicit \"display: flex\" or \"display: none\" if it has more than one child node.');le=await qt({id:r,left:L,top:V,width:de,height:Y,isInheritingTransform:P,debug:s},y,k)}for(let R of j)ee+=(await R.next([L,V])).value;return y._inheritedBackgroundClipTextPath&&(he+=C(\"clipPath\",{id:`satori_bct-${r}`,\"clip-path\":y._inheritedClipPathId?`url(#${y._inheritedClipPathId})`:void 0},y._inheritedBackgroundClipTextPath.value)),he+le+ee}var $u=\"unknown\";function qf(e,t,[n,r],[i,o]){if(n!==i)return n?!i||n===e?-1:i===e?1:e===400&&n===500||e===500&&n===400?-1:e===400&&i===500||e===500&&i===400?1:e<400?n<e&&i<e?i-n:n<e?-1:i<e?1:n-i:e<n&&e<i?n-i:e<n?-1:e<i?1:i-n:1;if(r!==o){if(r===t)return-1;if(o===t)return 1}return-1}var zt=class{constructor(t){this.fonts=new Map;this.addFonts(t)}get({name:t,weight:n,style:r}){if(!this.fonts.has(t))return null;n===\"normal\"&&(n=400),n===\"bold\"&&(n=700),typeof n==\"string\"&&(n=Number.parseInt(n,10));let i=[...this.fonts.get(t)],o=i[0];for(let u=1;u<i.length;u++){let[,s,a]=o,[,l,f]=i[u];qf(n,r,[s,a],[l,f])>0&&(o=i[u])}return o[0]}addFonts(t){for(let n of t){let{name:r,data:i,lang:o}=n;if(o&&!Lu(o))throw new Error(`Invalid value for props \\`lang\\`: \"${o}\". The value must be one of the following: ${Yr.join(\", \")}.`);let u=o??$u,s=_shuding_opentype_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].parse(\"buffer\"in i?i.buffer.slice(i.byteOffset,i.byteOffset+i.byteLength):i,{lowMemory:!0}),a=s.charToGlyphIndex;s.charToGlyphIndex=f=>{let c=a.call(s,f);return c===0&&s._trackBrokenChars&&s._trackBrokenChars.push(f),c},this.defaultFont||(this.defaultFont=s);let l=`${r.toLowerCase()}_${u}`;this.fonts.has(l)||this.fonts.set(l,[]),this.fonts.get(l).push([s,n.weight,n.style])}}getEngine(t=16,n=1.2,{fontFamily:r=\"sans-serif\",fontWeight:i=400,fontStyle:o=\"normal\"},u){if(!this.fonts.size)throw new Error(\"No fonts are loaded. At least one font is required to calculate the layout.\");r=(Array.isArray(r)?r:[r]).map(b=>b.toLowerCase());let s=[];r.forEach(b=>{let x=this.get({name:b,weight:i,style:o});if(x){s.push(x);return}let F=this.get({name:b+\"_unknown\",weight:i,style:o});if(F){s.push(F);return}});let a=Array.from(this.fonts.keys()),l=[],f=[],c=[];for(let b of a)if(!r.includes(b))if(u){let x=Uf(b);x?x===u?l.push(this.get({name:b,weight:i,style:o})):f.push(this.get({name:b,weight:i,style:o})):c.push(this.get({name:b,weight:i,style:o}))}else c.push(this.get({name:b,weight:i,style:o}));let p=new Map,h=(b,x=!0)=>{let F=[...s,...c,...l,...x?f:[]];if(typeof b>\"u\")return x?F[F.length-1]:void 0;let y=b.charCodeAt(0);if(p.has(y))return p.get(y);let k=F.find((P,B)=>!!P.charToGlyphIndex(b)||x&&B===F.length-1);return k&&p.set(y,k),k},d=(b,x=!1)=>{var y,k;return((x?(k=(y=b.tables)==null?void 0:y.os2)==null?void 0:k.sTypoAscender:0)||b.ascender)/b.unitsPerEm*t},m=(b,x=!1)=>{var y,k;return((x?(k=(y=b.tables)==null?void 0:y.os2)==null?void 0:k.sTypoDescender:0)||b.descender)/b.unitsPerEm*t},v=b=>h(b,!1),g={has:b=>{if(b===`\n`)return!0;let x=v(b);return x?(x._trackBrokenChars=[],x.stringToGlyphs(b),x._trackBrokenChars.length?(x._trackBrokenChars=void 0,!1):!0):!1},baseline:(b,x=typeof b>\"u\"?s[0]:h(b))=>{let F=d(x,!0),y=m(x,!0),k=g.height(b,x),{yMax:P,yMin:B}=x.tables.head,j=F-y,oe=(P/(P-B)-1)*j;return k*((1.2/n+1)/2)+oe},height:(b,x=typeof b>\"u\"?s[0]:h(b))=>(d(x)-m(x))*(n/1.2),measure:(b,x)=>this.measure(h,b,x),getSVG:(b,x)=>this.getSVG(h,b,x)};return g}patchFontFallbackResolver(t,n){let r=[];t._trackBrokenChars=r;let i=t.stringToGlyphs;return t.stringToGlyphs=(o,...u)=>{let s=i.call(t,o,...u);for(let a=0;a<s.length;a++)if(s[a].unicode===void 0){let l=r.shift(),f=n(l);if(f!==t){let c=f.charToGlyph(l),p=t.unitsPerEm/f.unitsPerEm,h=new _shuding_opentype_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].Path;h.unitsPerEm=t.unitsPerEm,h.commands=c.path.commands.map(m=>{let v={...m};for(let g in v)typeof v[g]==\"number\"&&(v[g]*=p);return v});let d=new _shuding_opentype_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].Glyph({...c,advanceWidth:c.advanceWidth*p,xMin:c.xMin*p,xMax:c.xMax*p,yMin:c.yMin*p,yMax:c.yMax*p,path:h});s[a]=d}}return s},()=>{t.stringToGlyphs=i,t._trackBrokenChars=void 0}}measure(t,n,{fontSize:r,letterSpacing:i=0}){let o=t(n),u=this.patchFontFallbackResolver(o,t);try{return o.getAdvanceWidth(n,r,{letterSpacing:i/r})}finally{u()}}getSVG(t,n,{fontSize:r,top:i,left:o,letterSpacing:u=0}){let s=t(n),a=this.patchFontFallbackResolver(s,t);try{return r===0?\"\":s.getPath(n.replace(/\\n/g,\"\"),o,i,r,{letterSpacing:u/r}).toPathData(1)}finally{a()}}};function Uf(e){let t=e.split(\"_\"),n=t[t.length-1];return n===$u?void 0:n}function Vn({width:e,height:t,content:n}){return C(\"svg\",{width:e,height:t,viewBox:`0 0 ${e} ${t}`,xmlns:\"http://www.w3.org/2000/svg\"},n)}var bl=Ol(Xa());var km=[\"ios\",\"android\",\"windows\",\"macos\",\"web\"];function Ka(e){return km.includes(e)}var Tm=[\"portrait\",\"landscape\"];function Ja(e){return Tm.includes(e)}var Qa;(function(e){e.fontSize=\"fontSize\",e.lineHeight=\"lineHeight\"})(Qa||(Qa={}));var z;(function(e){e.rem=\"rem\",e.em=\"em\",e.px=\"px\",e.percent=\"%\",e.vw=\"vw\",e.vh=\"vh\",e.none=\"<no-css-unit>\"})(z||(z={}));function yo(e){return typeof e==\"string\"}function xo(e){return typeof e==\"object\"}var Fo;function D(e){return{kind:\"complete\",style:e}}function ce(e,t={}){let{fractions:n}=t;if(n&&e.includes(\"/\")){let[o=\"\",u=\"\"]=e.split(\"/\",2),s=ce(o),a=ce(u);return!s||!a?null:[s[0]/a[0],a[1]]}let r=parseFloat(e);if(Number.isNaN(r))return null;let i=e.match(/(([a-z]{2,}|%))$/);if(!i)return[r,z.none];switch(i==null?void 0:i[1]){case\"rem\":return[r,z.rem];case\"px\":return[r,z.px];case\"em\":return[r,z.em];case\"%\":return[r,z.percent];case\"vw\":return[r,z.vw];case\"vh\":return[r,z.vh];default:return null}}function Ge(e,t,n={}){let r=Me(t,n);return r===null?null:D({[e]:r})}function pn(e,t,n){let r=Me(t);return r!==null&&(n[e]=r),n}function el(e,t){let n=Me(t);return n===null?null:{[e]:n}}function Me(e,t={}){if(e===void 0)return null;let n=ce(String(e),t);return n?rt(...n,t):null}function rt(e,t,n={}){let{isNegative:r,device:i}=n;switch(t){case z.rem:return e*16*(r?-1:1);case z.px:return e*(r?-1:1);case z.percent:return`${r?\"-\":\"\"}${e}%`;case z.none:return e*(r?-1:1);case z.vw:return i!=null&&i.windowDimensions?i.windowDimensions.width*(e/100):(Fe(\"`vw` CSS unit requires configuration with `useDeviceContext()`\"),null);case z.vh:return i!=null&&i.windowDimensions?i.windowDimensions.height*(e/100):(Fe(\"`vh` CSS unit requires configuration with `useDeviceContext()`\"),null);default:return null}}function wo(e){let t=ce(e);if(!t)return null;let[n,r]=t;switch(r){case z.rem:return n*16;case z.px:return n;default:return null}}var Am={t:\"Top\",tr:\"TopRight\",tl:\"TopLeft\",b:\"Bottom\",br:\"BottomRight\",bl:\"BottomLeft\",l:\"Left\",r:\"Right\",x:\"Horizontal\",y:\"Vertical\"};function Eo(e){return Am[e??\"\"]||\"All\"}function Co(e){let t=\"All\";return[e.replace(/^-(t|b|r|l|tr|tl|br|bl)(-|$)/,(r,i)=>(t=Eo(i),\"\")),t]}function ft(e,t={}){if(e.includes(\"/\")){let n=Za(e,{...t,fractions:!0});if(n)return n}return e[0]===\"[\"&&(e=e.slice(1,-1)),Za(e,t)}function Ae(e,t,n={}){let r=ft(t,n);return r===null?null:D({[e]:r})}function Za(e,t={}){if(e===\"px\")return 1;let n=ce(e,t);if(!n)return null;let[r,i]=n;return t.fractions&&(i=z.percent,r*=100),i===z.none&&(r=r/4,i=z.rem),rt(r,i,t)}function Om(...e){console.warn(...e)}function Pm(...e){}var Fe=typeof process>\"u\"||((Fo=process==null?void 0:process.env)===null||Fo===void 0?void 0:Fo.JEST_WORKER_ID)===void 0?Om:Pm;var Bm=[[\"aspect-square\",D({aspectRatio:1})],[\"aspect-video\",D({aspectRatio:16/9})],[\"items-center\",D({alignItems:\"center\"})],[\"items-start\",D({alignItems:\"flex-start\"})],[\"items-end\",D({alignItems:\"flex-end\"})],[\"items-baseline\",D({alignItems:\"baseline\"})],[\"items-stretch\",D({alignItems:\"stretch\"})],[\"justify-start\",D({justifyContent:\"flex-start\"})],[\"justify-end\",D({justifyContent:\"flex-end\"})],[\"justify-center\",D({justifyContent:\"center\"})],[\"justify-between\",D({justifyContent:\"space-between\"})],[\"justify-around\",D({justifyContent:\"space-around\"})],[\"justify-evenly\",D({justifyContent:\"space-evenly\"})],[\"content-start\",D({alignContent:\"flex-start\"})],[\"content-end\",D({alignContent:\"flex-end\"})],[\"content-between\",D({alignContent:\"space-between\"})],[\"content-around\",D({alignContent:\"space-around\"})],[\"content-stretch\",D({alignContent:\"stretch\"})],[\"content-center\",D({alignContent:\"center\"})],[\"self-auto\",D({alignSelf:\"auto\"})],[\"self-start\",D({alignSelf:\"flex-start\"})],[\"self-end\",D({alignSelf:\"flex-end\"})],[\"self-center\",D({alignSelf:\"center\"})],[\"self-stretch\",D({alignSelf:\"stretch\"})],[\"self-baseline\",D({alignSelf:\"baseline\"})],[\"direction-inherit\",D({direction:\"inherit\"})],[\"direction-ltr\",D({direction:\"ltr\"})],[\"direction-rtl\",D({direction:\"rtl\"})],[\"hidden\",D({display:\"none\"})],[\"flex\",D({display:\"flex\"})],[\"flex-row\",D({flexDirection:\"row\"})],[\"flex-row-reverse\",D({flexDirection:\"row-reverse\"})],[\"flex-col\",D({flexDirection:\"column\"})],[\"flex-col-reverse\",D({flexDirection:\"column-reverse\"})],[\"flex-wrap\",D({flexWrap:\"wrap\"})],[\"flex-wrap-reverse\",D({flexWrap:\"wrap-reverse\"})],[\"flex-nowrap\",D({flexWrap:\"nowrap\"})],[\"flex-auto\",D({flexGrow:1,flexShrink:1,flexBasis:\"auto\"})],[\"flex-initial\",D({flexGrow:0,flexShrink:1,flexBasis:\"auto\"})],[\"flex-none\",D({flexGrow:0,flexShrink:0,flexBasis:\"auto\"})],[\"overflow-hidden\",D({overflow:\"hidden\"})],[\"overflow-visible\",D({overflow:\"visible\"})],[\"overflow-scroll\",D({overflow:\"scroll\"})],[\"absolute\",D({position:\"absolute\"})],[\"relative\",D({position:\"relative\"})],[\"italic\",D({fontStyle:\"italic\"})],[\"not-italic\",D({fontStyle:\"normal\"})],[\"oldstyle-nums\",yr(\"oldstyle-nums\")],[\"small-caps\",yr(\"small-caps\")],[\"lining-nums\",yr(\"lining-nums\")],[\"tabular-nums\",yr(\"tabular-nums\")],[\"proportional-nums\",yr(\"proportional-nums\")],[\"font-thin\",D({fontWeight:\"100\"})],[\"font-100\",D({fontWeight:\"100\"})],[\"font-extralight\",D({fontWeight:\"200\"})],[\"font-200\",D({fontWeight:\"200\"})],[\"font-light\",D({fontWeight:\"300\"})],[\"font-300\",D({fontWeight:\"300\"})],[\"font-normal\",D({fontWeight:\"normal\"})],[\"font-400\",D({fontWeight:\"400\"})],[\"font-medium\",D({fontWeight:\"500\"})],[\"font-500\",D({fontWeight:\"500\"})],[\"font-semibold\",D({fontWeight:\"600\"})],[\"font-600\",D({fontWeight:\"600\"})],[\"font-bold\",D({fontWeight:\"bold\"})],[\"font-700\",D({fontWeight:\"700\"})],[\"font-extrabold\",D({fontWeight:\"800\"})],[\"font-800\",D({fontWeight:\"800\"})],[\"font-black\",D({fontWeight:\"900\"})],[\"font-900\",D({fontWeight:\"900\"})],[\"include-font-padding\",D({includeFontPadding:!0})],[\"remove-font-padding\",D({includeFontPadding:!1})],[\"max-w-none\",D({maxWidth:\"99999%\"})],[\"text-left\",D({textAlign:\"left\"})],[\"text-center\",D({textAlign:\"center\"})],[\"text-right\",D({textAlign:\"right\"})],[\"text-justify\",D({textAlign:\"justify\"})],[\"text-auto\",D({textAlign:\"auto\"})],[\"underline\",D({textDecorationLine:\"underline\"})],[\"line-through\",D({textDecorationLine:\"line-through\"})],[\"no-underline\",D({textDecorationLine:\"none\"})],[\"uppercase\",D({textTransform:\"uppercase\"})],[\"lowercase\",D({textTransform:\"lowercase\"})],[\"capitalize\",D({textTransform:\"capitalize\"})],[\"normal-case\",D({textTransform:\"none\"})],[\"w-auto\",D({width:\"auto\"})],[\"h-auto\",D({height:\"auto\"})],[\"shadow-sm\",D({shadowOffset:{width:1,height:1},shadowColor:\"#000\",shadowRadius:1,shadowOpacity:.025,elevation:1})],[\"shadow\",D({shadowOffset:{width:1,height:1},shadowColor:\"#000\",shadowRadius:1,shadowOpacity:.075,elevation:2})],[\"shadow-md\",D({shadowOffset:{width:1,height:1},shadowColor:\"#000\",shadowRadius:3,shadowOpacity:.125,elevation:3})],[\"shadow-lg\",D({shadowOffset:{width:1,height:1},shadowColor:\"#000\",shadowOpacity:.15,shadowRadius:8,elevation:8})],[\"shadow-xl\",D({shadowOffset:{width:1,height:1},shadowColor:\"#000\",shadowOpacity:.19,shadowRadius:20,elevation:12})],[\"shadow-2xl\",D({shadowOffset:{width:1,height:1},shadowColor:\"#000\",shadowOpacity:.25,shadowRadius:30,elevation:16})],[\"shadow-none\",D({shadowOffset:{width:0,height:0},shadowColor:\"#000\",shadowRadius:0,shadowOpacity:0,elevation:0})]],_o=Bm;function yr(e){return{kind:\"dependent\",complete(t){(!t.fontVariant||!Array.isArray(t.fontVariant))&&(t.fontVariant=[]),t.fontVariant.push(e)}}}var xr=class{constructor(t){this.ir=new Map(_o),this.styles=new Map,this.prefixes=new Map,this.ir=new Map([..._o,...t??[]])}getStyle(t){return this.styles.get(t)}setStyle(t,n){this.styles.set(t,n)}getIr(t){return this.ir.get(t)}setIr(t,n){this.ir.set(t,n)}getPrefixMatch(t){return this.prefixes.get(t)}setPrefixMatch(t,n){this.prefixes.set(t,n)}};function So(e,t,n={}){let r=t==null?void 0:t[e];if(!r)return Ae(\"fontSize\",e,n);if(typeof r==\"string\")return Ge(\"fontSize\",r);let i={},[o,u]=r,s=el(\"fontSize\",o);if(s&&(i=s),typeof u==\"string\")return D(pn(\"lineHeight\",tl(u,i),i));let{lineHeight:a,letterSpacing:l}=u;return a&&pn(\"lineHeight\",tl(a,i),i),l&&pn(\"letterSpacing\",l,i),D(i)}function tl(e,t){let n=ce(e);if(n){let[r,i]=n;if((i===z.none||i===z.em)&&typeof t.fontSize==\"number\")return t.fontSize*r}return e}function ko(e,t){var n;let r=(n=t==null?void 0:t[e])!==null&&n!==void 0?n:e.startsWith(\"[\")?e.slice(1,-1):e,i=ce(r);if(!i)return null;let[o,u]=i;if(u===z.none)return{kind:\"dependent\",complete(a){if(typeof a.fontSize!=\"number\")return\"relative line-height utilities require that font-size be set\";a.lineHeight=a.fontSize*o}};let s=rt(o,u);return s!==null?D({lineHeight:s}):null}function To(e,t,n,r,i){let o=\"\";if(r[0]===\"[\")o=r.slice(1,-1);else{let l=i==null?void 0:i[r];if(l)o=l;else{let f=ft(r);return f&&typeof f==\"number\"?rl(f,z.px,t,e):null}}if(o===\"auto\")return nl(t,e,\"auto\");let u=ce(o);if(!u)return null;let[s,a]=u;return n&&(s=-s),rl(s,a,t,e)}function rl(e,t,n,r){let i=rt(e,t);return i===null?null:nl(n,r,i)}function nl(e,t,n){switch(e){case\"All\":return{kind:\"complete\",style:{[`${t}Top`]:n,[`${t}Right`]:n,[`${t}Bottom`]:n,[`${t}Left`]:n}};case\"Bottom\":case\"Top\":case\"Left\":case\"Right\":return{kind:\"complete\",style:{[`${t}${e}`]:n}};case\"Vertical\":return{kind:\"complete\",style:{[`${t}Top`]:n,[`${t}Bottom`]:n}};case\"Horizontal\":return{kind:\"complete\",style:{[`${t}Left`]:n,[`${t}Right`]:n}};default:return null}}function Ao(e){if(!e)return{};let t=Object.entries(e).reduce((i,[o,u])=>{let s=[0,1/0,0],a=typeof u==\"string\"?{min:u}:u,l=a.min?wo(a.min):0;l===null?Fe(`invalid screen config value: ${o}->min: ${a.min}`):s[0]=l;let f=a.max?wo(a.max):1/0;return f===null?Fe(`invalid screen config value: ${o}->max: ${a.max}`):s[1]=f,i[o]=s,i},{}),n=Object.values(t);n.sort((i,o)=>{let[u,s]=i,[a,l]=o;return s===1/0||l===1/0?u-a:s-l});let r=0;return n.forEach(i=>i[2]=r++),t}function Oo(e,t){let n=t==null?void 0:t[e];if(!n)return null;if(typeof n==\"string\")return D({fontFamily:n});let r=n[0];return r?D({fontFamily:r}):null}function ct(e,t,n){if(!n)return null;let r;t.includes(\"/\")&&([t=\"\",r]=t.split(\"/\",2));let i=\"\";if(t.startsWith(\"[#\")||t.startsWith(\"[rgb\")?i=t.slice(1,-1):i=ul(t,n),!i)return null;if(r){let o=Number(r);if(!Number.isNaN(o))return i=il(i,o/100),D({[hn[e].color]:i})}return{kind:\"dependent\",complete(o){let u=hn[e].opacity,s=o[u];typeof s==\"number\"&&(i=il(i,s)),o[hn[e].color]=i}}}function Fr(e,t){let n=parseInt(t,10);if(Number.isNaN(n))return null;let r=n/100;return{kind:\"complete\",style:{[hn[e].opacity]:r}}}function il(e,t){return e.startsWith(\"#\")?e=Im(e):e.startsWith(\"rgb(\")&&(e=e.replace(/^rgb\\(/,\"rgba(\").replace(/\\)$/,\", 1)\")),e.replace(/, ?\\d*\\.?(\\d+)\\)$/,`, ${t})`)}function ol(e){for(let t in e)t.startsWith(\"__opacity_\")&&delete e[t]}var hn={bg:{opacity:\"__opacity_bg\",color:\"backgroundColor\"},text:{opacity:\"__opacity_text\",color:\"color\"},border:{opacity:\"__opacity_border\",color:\"borderColor\"},borderTop:{opacity:\"__opacity_border\",color:\"borderTopColor\"},borderBottom:{opacity:\"__opacity_border\",color:\"borderBottomColor\"},borderLeft:{opacity:\"__opacity_border\",color:\"borderLeftColor\"},borderRight:{opacity:\"__opacity_border\",color:\"borderRightColor\"},shadow:{opacity:\"__opacity_shadow\",color:\"shadowColor\"},tint:{opacity:\"__opacity_tint\",color:\"tintColor\"}};function Im(e){let t=e;e=e.replace(Rm,(u,s,a,l)=>s+s+a+a+l+l);let n=Lm.exec(e);if(!n)return Fe(`invalid config hex color value: ${t}`),\"rgba(0, 0, 0, 1)\";let r=parseInt(n[1],16),i=parseInt(n[2],16),o=parseInt(n[3],16);return`rgba(${r}, ${i}, ${o}, 1)`}function ul(e,t){let n=t[e];if(yo(n))return n;if(xo(n)&&yo(n.DEFAULT))return n.DEFAULT;let[r=\"\",...i]=e.split(\"-\");for(;r!==e;){let o=t[r];if(xo(o))return ul(i.join(\"-\"),o);if(i.length===0)return\"\";r=`${r}-${i.shift()}`}return\"\"}var Rm=/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,Lm=/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;function al(e,t){let[n,r]=Co(e);if(n.match(/^(-?(\\d)+)?$/))return Mm(n,r,t==null?void 0:t.borderWidth);if(n=n.replace(/^-/,\"\"),[\"dashed\",\"solid\",\"dotted\"].includes(n))return D({borderStyle:n});let o=\"border\";switch(r){case\"Bottom\":o=\"borderBottom\";break;case\"Top\":o=\"borderTop\";break;case\"Left\":o=\"borderLeft\";break;case\"Right\":o=\"borderRight\";break}let u=ct(o,n,t==null?void 0:t.borderColor);if(u)return u;let s=`border${r===\"All\"?\"\":r}Width`;n=n.replace(/^-/,\"\");let a=n.slice(1,-1),l=Ae(s,a);return typeof(l==null?void 0:l.style[s])!=\"number\"?null:l}function Mm(e,t,n){if(!n)return null;e=e.replace(/^-/,\"\");let i=n[e===\"\"?\"DEFAULT\":e];if(i===void 0)return null;let o=`border${t===\"All\"?\"\":t}Width`;return Ge(o,i)}function ll(e,t){if(!t)return null;let[n,r]=Co(e);n=n.replace(/^-/,\"\"),n===\"\"&&(n=\"DEFAULT\");let i=`border${r===\"All\"?\"\":r}Radius`,o=t[n];if(o)return sl(Ge(i,o));let u=Ae(i,n);return typeof(u==null?void 0:u.style[i])!=\"number\"?null:sl(u)}function sl(e){if((e==null?void 0:e.kind)!==\"complete\")return e;let t=e.style.borderTopRadius;t!==void 0&&(e.style.borderTopLeftRadius=t,e.style.borderTopRightRadius=t,delete e.style.borderTopRadius);let n=e.style.borderBottomRadius;n!==void 0&&(e.style.borderBottomLeftRadius=n,e.style.borderBottomRightRadius=n,delete e.style.borderBottomRadius);let r=e.style.borderLeftRadius;r!==void 0&&(e.style.borderBottomLeftRadius=r,e.style.borderTopLeftRadius=r,delete e.style.borderLeftRadius);let i=e.style.borderRightRadius;return i!==void 0&&(e.style.borderBottomRightRadius=i,e.style.borderTopRightRadius=i,delete e.style.borderRightRadius),e}function Ct(e,t,n,r){let i=null;e===\"inset\"&&(t=t.replace(/^(x|y)-/,(s,a)=>(i=a===\"x\"?\"x\":\"y\",\"\")));let o=r==null?void 0:r[t];if(o){let s=Me(o,{isNegative:n});if(s!==null)return fl(e,i,s)}let u=ft(t,{isNegative:n});return u!==null?fl(e,i,u):null}function fl(e,t,n){if(e!==\"inset\")return D({[e]:n});switch(t){case null:return D({top:n,left:n,right:n,bottom:n});case\"y\":return D({top:n,bottom:n});case\"x\":return D({left:n,right:n})}}function wr(e,t,n){var r;t=t.replace(/^-/,\"\");let i=t===\"\"?\"DEFAULT\":t,o=Number((r=n==null?void 0:n[i])!==null&&r!==void 0?r:t);return Number.isNaN(o)?null:D({[`flex${e}`]:o})}function cl(e,t){var n,r;if(e=(t==null?void 0:t[e])||e,[\"min-content\",\"revert\",\"unset\"].includes(e))return null;if(e.match(/^\\d+(\\.\\d+)?$/))return D({flexGrow:Number(e),flexBasis:\"0%\"});let i=e.match(/^(\\d+)\\s+(\\d+)$/);if(i)return D({flexGrow:Number(i[1]),flexShrink:Number(i[2])});if(i=e.match(/^(\\d+)\\s+([^ ]+)$/),i){let o=Me((n=i[2])!==null&&n!==void 0?n:\"\");return o?D({flexGrow:Number(i[1]),flexBasis:o}):null}if(i=e.match(/^(\\d+)\\s+(\\d+)\\s+(.+)$/),i){let o=Me((r=i[3])!==null&&r!==void 0?r:\"\");return o?D({flexGrow:Number(i[1]),flexShrink:Number(i[2]),flexBasis:o}):null}return null}function Po(e,t,n={},r){let i=r==null?void 0:r[t];return i!==void 0?Ge(e,i,n):Ae(e,t,n)}function Er(e,t,n={},r){let i=Me(r==null?void 0:r[t],n);return i?D({[e]:i}):(t===\"screen\"&&(t=e.includes(\"Width\")?\"100vw\":\"100vh\"),Ae(e,t,n))}function dl(e,t,n){let r=n==null?void 0:n[e];if(r){let i=ce(r,{isNegative:t});if(!i)return null;let[o,u]=i;if(u===z.em)return Nm(o);if(u===z.percent)return Fe(\"percentage-based letter-spacing configuration currently unsupported, switch to `em`s, or open an issue if you'd like to see support added.\"),null;let s=rt(o,u,{isNegative:t});return s!==null?D({letterSpacing:s}):null}return Ae(\"letterSpacing\",e,{isNegative:t})}function Nm(e){return{kind:\"dependent\",complete(t){let n=t.fontSize;if(typeof n!=\"number\"||Number.isNaN(n))return\"tracking-X relative letter spacing classes require font-size to be set\";t.letterSpacing=Math.round((e*n+Number.EPSILON)*100)/100}}}function pl(e,t){let n=t==null?void 0:t[e];if(n){let i=ce(String(n));if(i)return D({opacity:i[0]})}let r=ce(e);return r?D({opacity:r[0]/100}):null}function hl(e){let t=parseInt(e,10);return Number.isNaN(t)?null:{kind:\"complete\",style:{shadowOpacity:t/100}}}function ml(e){if(e.includes(\"/\")){let[n=\"\",r=\"\"]=e.split(\"/\",2),i=Bo(n),o=Bo(r);return i===null||o===null?null:{kind:\"complete\",style:{shadowOffset:{width:i,height:o}}}}let t=Bo(e);return t===null?null:{kind:\"complete\",style:{shadowOffset:{width:t,height:t}}}}function Bo(e){let t=ft(e);return typeof t==\"number\"?t:null}var _t=class{constructor(t,n={},r,i,o){var u,s,a,l,f,c;this.config=n,this.cache=r,this.position=0,this.isNull=!1,this.isNegative=!1,this.context={},this.context.device=i;let p=t.trim().split(\":\"),h=[];p.length===1?this.string=t:(this.string=(u=p.pop())!==null&&u!==void 0?u:\"\",h=p),this.char=this.string[0];let d=Ao((s=this.config.theme)===null||s===void 0?void 0:s.screens);for(let m of h)if(d[m]){let v=(a=d[m])===null||a===void 0?void 0:a[2];v!==void 0&&(this.order=((l=this.order)!==null&&l!==void 0?l:0)+v);let g=(f=i.windowDimensions)===null||f===void 0?void 0:f.width;if(g){let[b,x]=(c=d[m])!==null&&c!==void 0?c:[0,0];(g<=b||g>x)&&(this.isNull=!0)}else this.isNull=!0}else Ka(m)?this.isNull=m!==o:Ja(m)?i.windowDimensions?(i.windowDimensions.width>i.windowDimensions.height?\"landscape\":\"portrait\")!==m?this.isNull=!0:this.incrementOrder():this.isNull=!0:m===\"retina\"?i.pixelDensity===2?this.incrementOrder():this.isNull=!0:m===\"dark\"?i.colorScheme!==\"dark\"?this.isNull=!0:this.incrementOrder():this.handlePossibleArbitraryBreakpointPrefix(m)||(this.isNull=!0)}parse(){if(this.isNull)return{kind:\"null\"};let t=this.cache.getIr(this.rest);if(t)return t;this.parseIsNegative();let n=this.parseUtility();return n?this.order!==void 0?{kind:\"ordered\",order:this.order,styleIr:n}:n:{kind:\"null\"}}parseUtility(){var t,n,r,i,o;let u=this.config.theme,s=null;switch(this.char){case\"m\":case\"p\":{let a=this.peekSlice(1,3).match(/^(t|b|r|l|x|y)?-/);if(a){let l=this.char===\"m\"?\"margin\":\"padding\";this.advance(((n=(t=a[0])===null||t===void 0?void 0:t.length)!==null&&n!==void 0?n:0)+1);let f=Eo(a[1]),c=To(l,f,this.isNegative,this.rest,(r=this.config.theme)===null||r===void 0?void 0:r[l]);if(c)return c}}}if(this.consumePeeked(\"h-\")&&(s=Po(\"height\",this.rest,this.context,u==null?void 0:u.height),s)||this.consumePeeked(\"w-\")&&(s=Po(\"width\",this.rest,this.context,u==null?void 0:u.width),s)||this.consumePeeked(\"min-w-\")&&(s=Er(\"minWidth\",this.rest,this.context,u==null?void 0:u.minWidth),s)||this.consumePeeked(\"min-h-\")&&(s=Er(\"minHeight\",this.rest,this.context,u==null?void 0:u.minHeight),s)||this.consumePeeked(\"max-w-\")&&(s=Er(\"maxWidth\",this.rest,this.context,u==null?void 0:u.maxWidth),s)||this.consumePeeked(\"max-h-\")&&(s=Er(\"maxHeight\",this.rest,this.context,u==null?void 0:u.maxHeight),s)||this.consumePeeked(\"leading-\")&&(s=ko(this.rest,u==null?void 0:u.lineHeight),s)||this.consumePeeked(\"text-\")&&(s=So(this.rest,u==null?void 0:u.fontSize,this.context),s||(s=ct(\"text\",this.rest,u==null?void 0:u.textColor),s)||this.consumePeeked(\"opacity-\")&&(s=Fr(\"text\",this.rest),s))||this.consumePeeked(\"font-\")&&(s=Oo(this.rest,u==null?void 0:u.fontFamily),s)||this.consumePeeked(\"aspect-\")&&(this.consumePeeked(\"ratio-\")&&Fe(\"`aspect-ratio-{ratio}` is deprecated, use `aspect-{ratio}` instead\"),s=Ge(\"aspectRatio\",this.rest,{fractions:!0}),s)||this.consumePeeked(\"tint-\")&&(s=ct(\"tint\",this.rest,u==null?void 0:u.colors),s)||this.consumePeeked(\"bg-\")&&(s=ct(\"bg\",this.rest,u==null?void 0:u.backgroundColor),s||this.consumePeeked(\"opacity-\")&&(s=Fr(\"bg\",this.rest),s))||this.consumePeeked(\"border\")&&(s=al(this.rest,u),s||this.consumePeeked(\"-opacity-\")&&(s=Fr(\"border\",this.rest),s))||this.consumePeeked(\"rounded\")&&(s=ll(this.rest,u==null?void 0:u.borderRadius),s)||this.consumePeeked(\"bottom-\")&&(s=Ct(\"bottom\",this.rest,this.isNegative,u==null?void 0:u.inset),s)||this.consumePeeked(\"top-\")&&(s=Ct(\"top\",this.rest,this.isNegative,u==null?void 0:u.inset),s)||this.consumePeeked(\"left-\")&&(s=Ct(\"left\",this.rest,this.isNegative,u==null?void 0:u.inset),s)||this.consumePeeked(\"right-\")&&(s=Ct(\"right\",this.rest,this.isNegative,u==null?void 0:u.inset),s)||this.consumePeeked(\"inset-\")&&(s=Ct(\"inset\",this.rest,this.isNegative,u==null?void 0:u.inset),s)||this.consumePeeked(\"flex-\")&&(this.consumePeeked(\"grow\")?s=wr(\"Grow\",this.rest,u==null?void 0:u.flexGrow):this.consumePeeked(\"shrink\")?s=wr(\"Shrink\",this.rest,u==null?void 0:u.flexShrink):s=cl(this.rest,u==null?void 0:u.flex),s)||this.consumePeeked(\"grow\")&&(s=wr(\"Grow\",this.rest,u==null?void 0:u.flexGrow),s)||this.consumePeeked(\"shrink\")&&(s=wr(\"Shrink\",this.rest,u==null?void 0:u.flexShrink),s)||this.consumePeeked(\"shadow-color-opacity-\")&&(s=Fr(\"shadow\",this.rest),s)||this.consumePeeked(\"shadow-opacity-\")&&(s=hl(this.rest),s)||this.consumePeeked(\"shadow-offset-\")&&(s=ml(this.rest),s)||this.consumePeeked(\"shadow-radius-\")&&(s=Ae(\"shadowRadius\",this.rest),s)||this.consumePeeked(\"shadow-\")&&(s=ct(\"shadow\",this.rest,u==null?void 0:u.colors),s))return s;if(this.consumePeeked(\"elevation-\")){let a=parseInt(this.rest,10);if(!Number.isNaN(a))return D({elevation:a})}if(this.consumePeeked(\"opacity-\")&&(s=pl(this.rest,u==null?void 0:u.opacity),s)||this.consumePeeked(\"tracking-\")&&(s=dl(this.rest,this.isNegative,u==null?void 0:u.letterSpacing),s))return s;if(this.consumePeeked(\"z-\")){let a=Number((o=(i=u==null?void 0:u.zIndex)===null||i===void 0?void 0:i[this.rest])!==null&&o!==void 0?o:this.rest);if(!Number.isNaN(a))return D({zIndex:a})}return Fe(`\\`${this.rest}\\` unknown or invalid utility`),null}handlePossibleArbitraryBreakpointPrefix(t){var n;if(t[0]!==\"m\")return!1;let r=t.match(/^(min|max)-(w|h)-\\[([^\\]]+)\\]$/);if(!r)return!1;if(!(!((n=this.context.device)===null||n===void 0)&&n.windowDimensions))return this.isNull=!0,!0;let i=this.context.device.windowDimensions,[,o=\"\",u=\"\",s=\"\"]=r,a=u===\"w\"?i.width:i.height,l=ce(s,this.context);if(l===null)return this.isNull=!0,!0;let[f,c]=l;return c!==\"px\"&&(this.isNull=!0),(o===\"min\"?a>=f:a<=f)?this.incrementOrder():this.isNull=!0,!0}advance(t=1){this.position+=t,this.char=this.string[this.position]}get rest(){return this.peekSlice(0,this.string.length)}peekSlice(t,n){return this.string.slice(this.position+t,this.position+n)}consumePeeked(t){return this.peekSlice(0,t.length)===t?(this.advance(t.length),!0):!1}parseIsNegative(){this.char===\"-\"&&(this.advance(),this.isNegative=!0,this.context.isNegative=!0)}incrementOrder(){var t;this.order=((t=this.order)!==null&&t!==void 0?t:0)+1}};function Dl(e){let t=[],n=null;return e.forEach(r=>{if(typeof r==\"string\")t=[...t,...Io(r)];else if(Array.isArray(r))t=[...t,...r.flatMap(Io)];else if(typeof r==\"object\"&&r!==null)for(let[i,o]of Object.entries(r))typeof o==\"boolean\"?t=[...t,...o?Io(i):[]]:n?n[i]=o:n={[i]:o}}),[t.filter(Boolean).filter($m),n]}function Io(e){return e.trim().split(/\\s+/)}function $m(e,t,n){return n.indexOf(e)===t}function gl(e){var t;return(t=e==null?void 0:e.reduce((n,r)=>({...n,...Wm(r.handler)}),{}))!==null&&t!==void 0?t:{}}function Wm(e){let t={};return e({addUtilities:n=>{t=n},...qm}),t}function Ne(e){throw new Error(`tailwindcss plugin function argument object prop \"${e}\" not implemented`)}var qm={addComponents:Ne,addBase:Ne,addVariant:Ne,e:Ne,prefix:Ne,theme:Ne,variants:Ne,config:Ne,corePlugins:Ne,matchUtilities:Ne,postcss:null};function vl(e,t){let n=(0,bl.default)(Um(e)),r={},i=gl(n.plugins),o={},u=Object.entries(i).map(([d,m])=>typeof m==\"string\"?(o[d]=m,[d,{kind:\"null\"}]):[d,D(m)]).filter(([,d])=>d.kind!==\"null\");function s(){return[r.windowDimensions?`w${r.windowDimensions.width}`:!1,r.windowDimensions?`h${r.windowDimensions.height}`:!1,r.fontScale?`fs${r.fontScale}`:!1,r.colorScheme===\"dark\"?\"dark\":!1,r.pixelDensity===2?\"retina\":!1].filter(Boolean).join(\"--\")||\"default\"}let a=s(),l={};function f(){let d=l[a];if(d)return d;let m=new xr(u);return l[a]=m,m}function c(...d){let m=f(),v={},g=[],b=[],[x,F]=Dl(d),y=x.join(\" \"),k=m.getStyle(y);if(k)return{...k,...F||{}};for(let P of x){let B=m.getIr(P);if(!B&&P in o){let oe=c(o[P]);m.setIr(P,D(oe)),v={...v,...oe};continue}switch(B=new _t(P,n,m,r,t).parse(),B.kind){case\"complete\":v={...v,...B.style},m.setIr(P,B);break;case\"dependent\":g.push(B);break;case\"ordered\":b.push(B);break;case\"null\":m.setIr(P,B);break}}if(b.length>0){b.sort((P,B)=>P.order-B.order);for(let P of b)switch(P.styleIr.kind){case\"complete\":v={...v,...P.styleIr.style};break;case\"dependent\":g.push(P.styleIr);break}}if(g.length>0){for(let P of g){let B=P.complete(v);B&&Fe(B)}ol(v)}return y!==\"\"&&m.setStyle(y,v),F&&(v={...v,...F}),v}function p(d){let m=c(d.split(/\\s+/g).map(v=>v.replace(/^(bg|text|border)-/,\"\")).map(v=>`bg-${v}`).join(\" \"));return typeof m.backgroundColor==\"string\"?m.backgroundColor:void 0}let h=(d,...m)=>{let v=\"\";return d.forEach((g,b)=>{var x;v+=g+((x=m[b])!==null&&x!==void 0?x:\"\")}),c(v)};return h.style=c,h.color=p,h.prefixMatch=(...d)=>{let m=d.sort().join(\":\"),v=f(),g=v.getPrefixMatch(m);if(g!==void 0)return g;let F=new _t(`${m}:flex`,n,v,r,t).parse().kind!==\"null\";return v.setPrefixMatch(m,F),F},h.setWindowDimensions=d=>{r.windowDimensions=d,a=s()},h.setFontScale=d=>{r.fontScale=d,a=s()},h.setPixelDensity=d=>{r.pixelDensity=d,a=s()},h.setColorScheme=d=>{r.colorScheme=d,a=s()},h}function Um(e){return{...e,content:[\"_no_warnings_please\"]}}var Gm={handler:({addUtilities:e})=>{e({\"shadow-sm\":{boxShadow:\"0 1px 2px 0 rgb(0 0 0 / 0.05)\"},shadow:{boxShadow:\"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\"},\"shadow-md\":{boxShadow:\"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\"},\"shadow-lg\":{boxShadow:\"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\"},\"shadow-xl\":{boxShadow:\"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\"},\"shadow-2xl\":{boxShadow:\"0 25px 50px -12px rgb(0 0 0 / 0.25)\"},\"shadow-inner\":{boxShadow:\"inset 0 2px 4px 0 rgb(0 0 0 / 0.05)\"},\"shadow-none\":{boxShadow:\"0 0 #0000\"}})}};function jm(e){return vl({...e,plugins:[...(e==null?void 0:e.plugins)??[],Gm]},\"web\")}var mn;function Ro({width:e,height:t,config:n}){return mn||(mn=jm(n)),mn.setWindowDimensions({width:+e,height:+t}),mn}var Lo=new WeakMap;async function xl(e,t){let n=await qe();if(!n||!n.Node)throw new Error(\"Satori is not initialized: expect `yoga` to be loaded, got \"+n);t.fonts=t.fonts||[];let r;Lo.has(t.fonts)?r=Lo.get(t.fonts):Lo.set(t.fonts,r=new zt(t.fonts));let i=\"width\"in t?t.width:void 0,o=\"height\"in t?t.height:void 0,u=n.Node.create();i&&u.setWidth(i),o&&u.setHeight(o),u.setFlexDirection(n.FLEX_DIRECTION_ROW),u.setFlexWrap(n.WRAP_WRAP),u.setAlignContent(n.ALIGN_AUTO),u.setAlignItems(n.ALIGN_FLEX_START),u.setJustifyContent(n.JUSTIFY_FLEX_START),u.setOverflow(n.OVERFLOW_HIDDEN);let s={...t.graphemeImages},a=new Set;Re.clear(),await cu(e);let l=Ut(e,{id:\"id\",parentStyle:{},inheritedStyle:{fontSize:16,fontWeight:\"normal\",fontFamily:\"serif\",fontStyle:\"normal\",lineHeight:1.2,color:\"black\",opacity:1,whiteSpace:\"normal\",_viewportWidth:i,_viewportHeight:o},parent:u,font:r,embedFont:t.embedFont,debug:t.debug,graphemeImages:s,canLoadAdditionalAssets:!!t.loadAdditionalAsset,onNodeDetected:t.onNodeDetected,getTwStyles:(d,m)=>{let g={...Ro({width:i,height:o,config:t.tailwindConfig})([d])};return typeof g.lineHeight==\"number\"&&(g.lineHeight=g.lineHeight/(+g.fontSize||m.fontSize||16)),g.shadowColor&&g.boxShadow&&(g.boxShadow=g.boxShadow.replace(/rgba?\\([^)]+\\)/,g.shadowColor)),g}}),f=(await l.next()).value;if(t.loadAdditionalAsset&&f.length){let d=Hm(f),m=[],v={};await Promise.all(Object.entries(d).flatMap(([g,b])=>b.map(x=>{let F=`${g}_${x}`;return a.has(F)?null:(a.add(F),t.loadAdditionalAsset(g,x).then(y=>{typeof y==\"string\"?v[x]=y:y&&(Array.isArray(y)?m.push(...y):m.push(y))}))}))),r.addFonts(m),Object.assign(s,v)}await l.next(),u.calculateLayout(i,o,n.DIRECTION_LTR);let c=(await l.next([0,0])).value,p=u.getComputedWidth(),h=u.getComputedHeight();return u.freeRecursive(),Vn({width:p,height:h,content:c})}function Hm(e){let t={},n={};for(let{word:r,locale:i}of e){let o=Mu(r,i).join(\"|\");n[o]=n[o]||\"\",n[o]+=r}return Object.keys(n).forEach(r=>{t[r]=t[r]||[],r===\"emoji\"?t[r].push(...yl(we(n[r],\"grapheme\"))):(t[r][0]=t[r][0]||\"\",t[r][0]+=yl(we(n[r],\"grapheme\",r===\"unknown\"?void 0:r)).join(\"\"))}),t}function yl(e){return Array.from(new Set(e))}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zYXRvcmkvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLHFCQUFxQiw2QkFBNkIsdUNBQXVDLGtDQUFrQyxnRUFBZ0Usb0NBQW9DLDJCQUEyQixXQUFXLG1DQUFtQyx1QkFBdUIsdUJBQXVCLEVBQUUsZ0JBQWdCLGdHQUFnRyxtREFBbUQsRUFBRSxVQUFVLHVDQUF1Qyx5Q0FBeUMsc0JBQXNCLHNCQUFzQixlQUFlLFNBQVMsS0FBSyxVQUFVLE9BQU8scUJBQXFCLEVBQUUsb0JBQW9CLElBQUksVUFBVSxPQUFPLCtPQUEyQixDQUFDLFdBQVcsZ0JBQWdCLEVBQUUsY0FBYyxhQUFhLHVDQUF1QyxTQUFTLEVBQUUsb0NBQW9DLHlCQUF5QixFQUFFLGVBQWUsUUFBUSxFQUFFLG9CQUFvQixvR0FBb0cseURBQXlELEdBQUcsUUFBUSxFQUFFLGNBQWMsYUFBYSx1Q0FBdUMsU0FBUyxFQUFFLG9DQUFvQyx5QkFBeUIsRUFBRSx3NkVBQXc2RSxFQUFFLGNBQWMsYUFBYSx1Q0FBdUMsU0FBUyxFQUFFLG9DQUFvQyx5QkFBeUIsRUFBRSxpQkFBaUIsaUlBQWlJLEVBQUUsbUJBQW1CLFlBQVksOENBQThDLFNBQVMsNkRBQTZELFVBQVUsU0FBUyxLQUFLLDRZQUE0WSxXQUFXLGlRQUFpUSxVQUFVLHlZQUF5WSxZQUFZLGlMQUFpTCxjQUFjLDBDQUEwQyxnQkFBZ0IsUUFBUSxrQ0FBa0MsUUFBUSxzQ0FBc0MsUUFBUSxxQ0FBcUMsUUFBUSxzQ0FBc0MsUUFBUSxtQ0FBbUMsUUFBUSxpQ0FBaUMsUUFBUSxtQ0FBbUMsUUFBUSxpQ0FBaUMsUUFBUSxnQ0FBZ0MsUUFBUSxnQ0FBZ0Msa2xCQUFrbEIscUJBQXFCLFFBQVEsb0NBQW9DLDRLQUE0SyxpQkFBaUIsNENBQTRDLE9BQU8sOEZBQThGLGFBQWEsa0dBQWtHLGVBQWUsUUFBUSxLQUFLLDJEQUEyRCxrQkFBa0IsUUFBUSw4QkFBOEIs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QkFBb0IsTUFBTSxvRUFBb0Usa0ZBQWtGLHNQQUFzUCxPQUFPLG9CQUFvQixXQUFXLHVCQUF1QixZQUFZLHNCQUFzQixpQkFBaUIsb0tBQW9LLDBLQUEwSyxPQUFPLE9BQU8seUNBQXlDLFFBQVEsaU1BQWlNLDJCQUEyQixvQ0FBb0Msc0JBQXNCLCtEQUErRCxTQUFTLEVBQUUsR0FBRyxFQUFFLEVBQUUsbUVBQW1FLHVFQUF1RSxHQUFHLHFDQUFxQyxzREFBc0QsaUZBQWlGLDZCQUE2QiwyQkFBMkIsRUFBRSxlQUFlLFFBQVEsTUFBTSxRQUFRLGdCQUFnQixNQUFNLHdCQUF3QixzQkFBc0Isa0NBQWtDLHVKQUF1SixJQUFJLGVBQWUsOEJBQStEO0FBQ2x5NUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3NhdG9yaS9kaXN0L2luZGV4LmpzPzc1YzAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9sPU9iamVjdC5jcmVhdGU7dmFyIEJyPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgU2w9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIga2w9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7dmFyIFRsPU9iamVjdC5nZXRQcm90b3R5cGVPZixBbD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciB2bj0oZSx0KT0+KCk9PihlJiYodD1lKGU9MCkpLHQpO3ZhciBUPShlLHQpPT4oKT0+KHR8fGUoKHQ9e2V4cG9ydHM6e319KS5leHBvcnRzLHQpLHQuZXhwb3J0cykseW49KGUsdCk9Pntmb3IodmFyIG4gaW4gdClCcihlLG4se2dldDp0W25dLGVudW1lcmFibGU6ITB9KX0sR289KGUsdCxuLHIpPT57aWYodCYmdHlwZW9mIHQ9PVwib2JqZWN0XCJ8fHR5cGVvZiB0PT1cImZ1bmN0aW9uXCIpZm9yKGxldCBpIG9mIGtsKHQpKSFBbC5jYWxsKGUsaSkmJmkhPT1uJiZCcihlLGkse2dldDooKT0+dFtpXSxlbnVtZXJhYmxlOiEocj1TbCh0LGkpKXx8ci5lbnVtZXJhYmxlfSk7cmV0dXJuIGV9O3ZhciBPbD0oZSx0LG4pPT4obj1lIT1udWxsP19sKFRsKGUpKTp7fSxHbyh0fHwhZXx8IWUuX19lc01vZHVsZT9CcihuLFwiZGVmYXVsdFwiLHt2YWx1ZTplLGVudW1lcmFibGU6ITB9KTpuLGUpKSxJcj1lPT5HbyhCcih7fSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlKTt2YXIgam89e307eW4oam8se2dldFlvZ2FNb2R1bGU6KCk9PlBsfSk7YXN5bmMgZnVuY3Rpb24gUGwoKXtsZXR7ZGVmYXVsdDplfT1hd2FpdCBpbXBvcnQoXCJ5b2dhLXdhc20td2ViL2FzbVwiKTtyZXR1cm4gZSgpfXZhciBIbz12bigoKT0+e30pO3ZhciBYbj1UKFluPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KFluLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShZbixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCxnZXQ6KCk9PnpmfSk7ZnVuY3Rpb24gemYoZSl7aWYoZT1gJHtlfWAsZT09PVwiMFwiKXJldHVyblwiMFwiO2lmKC9eWystXT8oXFxkK3xcXGQqXFwuXFxkKykoZVsrLV0/XFxkKyk/KCV8XFx3Kyk/JC8udGVzdChlKSlyZXR1cm4gZS5yZXBsYWNlKC9eWystXT8vLHQ9PnQ9PT1cIi1cIj9cIlwiOlwiLVwiKTtpZihlLmluY2x1ZGVzKFwidmFyKFwiKXx8ZS5pbmNsdWRlcyhcImNhbGMoXCIpKXJldHVybmBjYWxjKCR7ZX0gKiAtMSlgfX0pO3ZhciBXdT1UKFFuPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KFFuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShRbixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCxnZXQ6KCk9PkdmfSk7dmFyIEdmPVtcInByZWZsaWdodFwiLFwiY29udGFpbmVyXCIsXCJhY2Nlc3NpYmlsaXR5XCIsXCJwb2ludGVyRXZlbnRzXCIsXCJ2aXNpYmlsaXR5XCIsXCJwb3NpdGlvblwiLFwiaW5zZXRcIixcImlzb2xhdGlvblwiLFwiekluZGV4XCIsXCJvcmRlclwiLFwiZ3JpZENvbHVtblwiLFwiZ3JpZENvbHVtblN0YXJ0XCIsXCJncmlkQ29sdW1uRW5kXCIsXCJncmlkUm93XCIsXCJncmlkUm93U3RhcnRcIixcImdyaWRSb3dFbmRcIixcImZsb2F0XCIsXCJjbGVhclwiLFwibWFyZ2luXCIsXCJib3hTaXppbmdcIixcImRpc3BsYXlcIixcImFzcGVjdFJhdGlvXCIsXCJoZWlnaHRcIixcIm1heEhlaWdodFwiLFwibWluSGVpZ2h0XCIsXCJ3aWR0aFwiLFwibWluV2lkdGhcIixcIm1heFdpZHRoXCIsXCJmbGV4XCIsXCJmbGV4U2hyaW5rXCIsXCJmbGV4R3Jvd1wiLFwiZmxleEJhc2lzXCIsXCJ0YWJsZUxheW91dFwiLFwiYm9yZGVyQ29sbGFwc2VcIixcImJvcmRlclNwYWNpbmdcIixcInRyYW5zZm9ybU9yaWdpblwiLFwidHJhbnNsYXRlXCIsXCJyb3RhdGVcIixcInNrZXdcIixcInNjYWxlXCIsXCJ0cmFuc2Zvcm1cIixcImFuaW1hdGlvblwiLFwiY3Vyc29yXCIsXCJ0b3VjaEFjdGlvblwiLFwidXNlclNlbGVjdFwiLFwicmVzaXplXCIsXCJzY3JvbGxTbmFwVHlwZVwiLFwic2Nyb2xsU25hcEFsaWduXCIsXCJzY3JvbGxTbmFwU3RvcFwiLFwic2Nyb2xsTWFyZ2luXCIsXCJzY3JvbGxQYWRkaW5nXCIsXCJsaXN0U3R5bGVQb3NpdGlvblwiLFwibGlzdFN0eWxlVHlwZVwiLFwiYXBwZWFyYW5jZVwiLFwiY29sdW1uc1wiLFwiYnJlYWtCZWZvcmVcIixcImJyZWFrSW5zaWRlXCIsXCJicmVha0FmdGVyXCIsXCJncmlkQXV0b0NvbHVtbnNcIixcImdyaWRBdXRvRmxvd1wiLFwiZ3JpZEF1dG9Sb3dzXCIsXCJncmlkVGVtcGxhdGVDb2x1bW5zXCIsXCJncmlkVGVtcGxhdGVSb3dzXCIsXCJmbGV4RGlyZWN0aW9uXCIsXCJmbGV4V3JhcFwiLFwicGxhY2VDb250ZW50XCIsXCJwbGFjZUl0ZW1zXCIsXCJhbGlnbkNvbnRlbnRcIixcImFsaWduSXRlbXNcIixcImp1c3RpZnlDb250ZW50XCIsXCJqdXN0aWZ5SXRlbXNcIixcImdhcFwiLFwic3BhY2VcIixcImRpdmlkZVdpZHRoXCIsXCJkaXZpZGVTdHlsZVwiLFwiZGl2aWRlQ29sb3JcIixcImRpdmlkZU9wYWNpdHlcIixcInBsYWNlU2VsZlwiLFwiYWxpZ25TZWxmXCIsXCJqdXN0aWZ5U2VsZlwiLFwib3ZlcmZsb3dcIixcIm92ZXJzY3JvbGxCZWhhdmlvclwiLFwic2Nyb2xsQmVoYXZpb3JcIixcInRleHRPdmVyZmxvd1wiLFwid2hpdGVzcGFjZVwiLFwid29yZEJyZWFrXCIsXCJib3JkZXJSYWRpdXNcIixcImJvcmRlcldpZHRoXCIsXCJib3JkZXJTdHlsZVwiLFwiYm9yZGVyQ29sb3JcIixcImJvcmRlck9wYWNpdHlcIixcImJhY2tncm91bmRDb2xvclwiLFwiYmFja2dyb3VuZE9wYWNpdHlcIixcImJhY2tncm91bmRJbWFnZVwiLFwiZ3JhZGllbnRDb2xvclN0b3BzXCIsXCJib3hEZWNvcmF0aW9uQnJlYWtcIixcImJhY2tncm91bmRTaXplXCIsXCJiYWNrZ3JvdW5kQXR0YWNobWVudFwiLFwiYmFja2dyb3VuZENsaXBcIixcImJhY2tncm91bmRQb3NpdGlvblwiLFwiYmFja2dyb3VuZFJlcGVhdFwiLFwiYmFja2dyb3VuZE9yaWdpblwiLFwiZmlsbFwiLFwic3Ryb2tlXCIsXCJzdHJva2VXaWR0aFwiLFwib2JqZWN0Rml0XCIsXCJvYmplY3RQb3NpdGlvblwiLFwicGFkZGluZ1wiLFwidGV4dEFsaWduXCIsXCJ0ZXh0SW5kZW50XCIsXCJ2ZXJ0aWNhbEFsaWduXCIsXCJmb250RmFtaWx5XCIsXCJmb250U2l6ZVwiLFwiZm9udFdlaWdodFwiLFwidGV4dFRyYW5zZm9ybVwiLFwiZm9udFN0eWxlXCIsXCJmb250VmFyaWFudE51bWVyaWNcIixcImxpbmVIZWlnaHRcIixcImxldHRlclNwYWNpbmdcIixcInRleHRDb2xvclwiLFwidGV4dE9wYWNpdHlcIixcInRleHREZWNvcmF0aW9uXCIsXCJ0ZXh0RGVjb3JhdGlvbkNvbG9yXCIsXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCIsXCJ0ZXh0RGVjb3JhdGlvblRoaWNrbmVzc1wiLFwidGV4dFVuZGVybGluZU9mZnNldFwiLFwiZm9udFNtb290aGluZ1wiLFwicGxhY2Vob2xkZXJDb2xvclwiLFwicGxhY2Vob2xkZXJPcGFjaXR5XCIsXCJjYXJldENvbG9yXCIsXCJhY2NlbnRDb2xvclwiLFwib3BhY2l0eVwiLFwiYmFja2dyb3VuZEJsZW5kTW9kZVwiLFwibWl4QmxlbmRNb2RlXCIsXCJib3hTaGFkb3dcIixcImJveFNoYWRvd0NvbG9yXCIsXCJvdXRsaW5lU3R5bGVcIixcIm91dGxpbmVXaWR0aFwiLFwib3V0bGluZU9mZnNldFwiLFwib3V0bGluZUNvbG9yXCIsXCJyaW5nV2lkdGhcIixcInJpbmdDb2xvclwiLFwicmluZ09wYWNpdHlcIixcInJpbmdPZmZzZXRXaWR0aFwiLFwicmluZ09mZnNldENvbG9yXCIsXCJibHVyXCIsXCJicmlnaHRuZXNzXCIsXCJjb250cmFzdFwiLFwiZHJvcFNoYWRvd1wiLFwiZ3JheXNjYWxlXCIsXCJodWVSb3RhdGVcIixcImludmVydFwiLFwic2F0dXJhdGVcIixcInNlcGlhXCIsXCJmaWx0ZXJcIixcImJhY2tkcm9wQmx1clwiLFwiYmFja2Ryb3BCcmlnaHRuZXNzXCIsXCJiYWNrZHJvcENvbnRyYXN0XCIsXCJiYWNrZHJvcEdyYXlzY2FsZVwiLFwiYmFja2Ryb3BIdWVSb3RhdGVcIixcImJhY2tkcm9wSW52ZXJ0XCIsXCJiYWNrZHJvcE9wYWNpdHlcIixcImJhY2tkcm9wU2F0dXJhdGVcIixcImJhY2tkcm9wU2VwaWFcIixcImJhY2tkcm9wRmlsdGVyXCIsXCJ0cmFuc2l0aW9uUHJvcGVydHlcIixcInRyYW5zaXRpb25EZWxheVwiLFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIixcIndpbGxDaGFuZ2VcIixcImNvbnRlbnRcIl19KTt2YXIgcXU9VChLbj0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShLbixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoS24sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsZ2V0OigpPT5qZn0pO2Z1bmN0aW9uIGpmKGUsdCl7cmV0dXJuIGU9PT12b2lkIDA/dDpBcnJheS5pc0FycmF5KGUpP2U6Wy4uLm5ldyBTZXQodC5maWx0ZXIocj0+ZSE9PSExJiZlW3JdIT09ITEpLmNvbmNhdChPYmplY3Qua2V5cyhlKS5maWx0ZXIocj0+ZVtyXSE9PSExKSkpXX19KTt2YXIgSm49VCgoS2csVXUpPT57VXUuZXhwb3J0cz17Y29udGVudDpbXSxwcmVzZXRzOltdLGRhcmtNb2RlOlwibWVkaWFcIix0aGVtZTp7c2NyZWVuczp7c206XCI2NDBweFwiLG1kOlwiNzY4cHhcIixsZzpcIjEwMjRweFwiLHhsOlwiMTI4MHB4XCIsXCIyeGxcIjpcIjE1MzZweFwifSxjb2xvcnM6KHtjb2xvcnM6ZX0pPT4oe2luaGVyaXQ6ZS5pbmhlcml0LGN1cnJlbnQ6ZS5jdXJyZW50LHRyYW5zcGFyZW50OmUudHJhbnNwYXJlbnQsYmxhY2s6ZS5ibGFjayx3aGl0ZTplLndoaXRlLHNsYXRlOmUuc2xhdGUsZ3JheTplLmdyYXksemluYzplLnppbmMsbmV1dHJhbDplLm5ldXRyYWwsc3RvbmU6ZS5zdG9uZSxyZWQ6ZS5yZWQsb3JhbmdlOmUub3JhbmdlLGFtYmVyOmUuYW1iZXIseWVsbG93OmUueWVsbG93LGxpbWU6ZS5saW1lLGdyZWVuOmUuZ3JlZW4sZW1lcmFsZDplLmVtZXJhbGQsdGVhbDplLnRlYWwsY3lhbjplLmN5YW4sc2t5OmUuc2t5LGJsdWU6ZS5ibHVlLGluZGlnbzplLmluZGlnbyx2aW9sZXQ6ZS52aW9sZXQscHVycGxlOmUucHVycGxlLGZ1Y2hzaWE6ZS5mdWNoc2lhLHBpbms6ZS5waW5rLHJvc2U6ZS5yb3NlfSksY29sdW1uczp7YXV0bzpcImF1dG9cIiwxOlwiMVwiLDI6XCIyXCIsMzpcIjNcIiw0OlwiNFwiLDU6XCI1XCIsNjpcIjZcIiw3OlwiN1wiLDg6XCI4XCIsOTpcIjlcIiwxMDpcIjEwXCIsMTE6XCIxMVwiLDEyOlwiMTJcIixcIjN4c1wiOlwiMTZyZW1cIixcIjJ4c1wiOlwiMThyZW1cIix4czpcIjIwcmVtXCIsc206XCIyNHJlbVwiLG1kOlwiMjhyZW1cIixsZzpcIjMycmVtXCIseGw6XCIzNnJlbVwiLFwiMnhsXCI6XCI0MnJlbVwiLFwiM3hsXCI6XCI0OHJlbVwiLFwiNHhsXCI6XCI1NnJlbVwiLFwiNXhsXCI6XCI2NHJlbVwiLFwiNnhsXCI6XCI3MnJlbVwiLFwiN3hsXCI6XCI4MHJlbVwifSxzcGFjaW5nOntweDpcIjFweFwiLDA6XCIwcHhcIiwuNTpcIjAuMTI1cmVtXCIsMTpcIjAuMjVyZW1cIiwxLjU6XCIwLjM3NXJlbVwiLDI6XCIwLjVyZW1cIiwyLjU6XCIwLjYyNXJlbVwiLDM6XCIwLjc1cmVtXCIsMy41OlwiMC44NzVyZW1cIiw0OlwiMXJlbVwiLDU6XCIxLjI1cmVtXCIsNjpcIjEuNXJlbVwiLDc6XCIxLjc1cmVtXCIsODpcIjJyZW1cIiw5OlwiMi4yNXJlbVwiLDEwOlwiMi41cmVtXCIsMTE6XCIyLjc1cmVtXCIsMTI6XCIzcmVtXCIsMTQ6XCIzLjVyZW1cIiwxNjpcIjRyZW1cIiwyMDpcIjVyZW1cIiwyNDpcIjZyZW1cIiwyODpcIjdyZW1cIiwzMjpcIjhyZW1cIiwzNjpcIjlyZW1cIiw0MDpcIjEwcmVtXCIsNDQ6XCIxMXJlbVwiLDQ4OlwiMTJyZW1cIiw1MjpcIjEzcmVtXCIsNTY6XCIxNHJlbVwiLDYwOlwiMTVyZW1cIiw2NDpcIjE2cmVtXCIsNzI6XCIxOHJlbVwiLDgwOlwiMjByZW1cIiw5NjpcIjI0cmVtXCJ9LGFuaW1hdGlvbjp7bm9uZTpcIm5vbmVcIixzcGluOlwic3BpbiAxcyBsaW5lYXIgaW5maW5pdGVcIixwaW5nOlwicGluZyAxcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKSBpbmZpbml0ZVwiLHB1bHNlOlwicHVsc2UgMnMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSBpbmZpbml0ZVwiLGJvdW5jZTpcImJvdW5jZSAxcyBpbmZpbml0ZVwifSxhc3BlY3RSYXRpbzp7YXV0bzpcImF1dG9cIixzcXVhcmU6XCIxIC8gMVwiLHZpZGVvOlwiMTYgLyA5XCJ9LGJhY2tkcm9wQmx1cjooe3RoZW1lOmV9KT0+ZShcImJsdXJcIiksYmFja2Ryb3BCcmlnaHRuZXNzOih7dGhlbWU6ZX0pPT5lKFwiYnJpZ2h0bmVzc1wiKSxiYWNrZHJvcENvbnRyYXN0Oih7dGhlbWU6ZX0pPT5lKFwiY29udHJhc3RcIiksYmFja2Ryb3BHcmF5c2NhbGU6KHt0aGVtZTplfSk9PmUoXCJncmF5c2NhbGVcIiksYmFja2Ryb3BIdWVSb3RhdGU6KHt0aGVtZTplfSk9PmUoXCJodWVSb3RhdGVcIiksYmFja2Ryb3BJbnZlcnQ6KHt0aGVtZTplfSk9PmUoXCJpbnZlcnRcIiksYmFja2Ryb3BPcGFjaXR5Oih7dGhlbWU6ZX0pPT5lKFwib3BhY2l0eVwiKSxiYWNrZHJvcFNhdHVyYXRlOih7dGhlbWU6ZX0pPT5lKFwic2F0dXJhdGVcIiksYmFja2Ryb3BTZXBpYTooe3RoZW1lOmV9KT0+ZShcInNlcGlhXCIpLGJhY2tncm91bmRDb2xvcjooe3RoZW1lOmV9KT0+ZShcImNvbG9yc1wiKSxiYWNrZ3JvdW5kSW1hZ2U6e25vbmU6XCJub25lXCIsXCJncmFkaWVudC10by10XCI6XCJsaW5lYXItZ3JhZGllbnQodG8gdG9wLCB2YXIoLS10dy1ncmFkaWVudC1zdG9wcykpXCIsXCJncmFkaWVudC10by10clwiOlwibGluZWFyLWdyYWRpZW50KHRvIHRvcCByaWdodCwgdmFyKC0tdHctZ3JhZGllbnQtc3RvcHMpKVwiLFwiZ3JhZGllbnQtdG8tclwiOlwibGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCB2YXIoLS10dy1ncmFkaWVudC1zdG9wcykpXCIsXCJncmFkaWVudC10by1iclwiOlwibGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSByaWdodCwgdmFyKC0tdHctZ3JhZGllbnQtc3RvcHMpKVwiLFwiZ3JhZGllbnQtdG8tYlwiOlwibGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgdmFyKC0tdHctZ3JhZGllbnQtc3RvcHMpKVwiLFwiZ3JhZGllbnQtdG8tYmxcIjpcImxpbmVhci1ncmFkaWVudCh0byBib3R0b20gbGVmdCwgdmFyKC0tdHctZ3JhZGllbnQtc3RvcHMpKVwiLFwiZ3JhZGllbnQtdG8tbFwiOlwibGluZWFyLWdyYWRpZW50KHRvIGxlZnQsIHZhcigtLXR3LWdyYWRpZW50LXN0b3BzKSlcIixcImdyYWRpZW50LXRvLXRsXCI6XCJsaW5lYXItZ3JhZGllbnQodG8gdG9wIGxlZnQsIHZhcigtLXR3LWdyYWRpZW50LXN0b3BzKSlcIn0sYmFja2dyb3VuZE9wYWNpdHk6KHt0aGVtZTplfSk9PmUoXCJvcGFjaXR5XCIpLGJhY2tncm91bmRQb3NpdGlvbjp7Ym90dG9tOlwiYm90dG9tXCIsY2VudGVyOlwiY2VudGVyXCIsbGVmdDpcImxlZnRcIixcImxlZnQtYm90dG9tXCI6XCJsZWZ0IGJvdHRvbVwiLFwibGVmdC10b3BcIjpcImxlZnQgdG9wXCIscmlnaHQ6XCJyaWdodFwiLFwicmlnaHQtYm90dG9tXCI6XCJyaWdodCBib3R0b21cIixcInJpZ2h0LXRvcFwiOlwicmlnaHQgdG9wXCIsdG9wOlwidG9wXCJ9LGJhY2tncm91bmRTaXplOnthdXRvOlwiYXV0b1wiLGNvdmVyOlwiY292ZXJcIixjb250YWluOlwiY29udGFpblwifSxibHVyOnswOlwiMFwiLG5vbmU6XCIwXCIsc206XCI0cHhcIixERUZBVUxUOlwiOHB4XCIsbWQ6XCIxMnB4XCIsbGc6XCIxNnB4XCIseGw6XCIyNHB4XCIsXCIyeGxcIjpcIjQwcHhcIixcIjN4bFwiOlwiNjRweFwifSxicmlnaHRuZXNzOnswOlwiMFwiLDUwOlwiLjVcIiw3NTpcIi43NVwiLDkwOlwiLjlcIiw5NTpcIi45NVwiLDEwMDpcIjFcIiwxMDU6XCIxLjA1XCIsMTEwOlwiMS4xXCIsMTI1OlwiMS4yNVwiLDE1MDpcIjEuNVwiLDIwMDpcIjJcIn0sYm9yZGVyQ29sb3I6KHt0aGVtZTplfSk9Pih7Li4uZShcImNvbG9yc1wiKSxERUZBVUxUOmUoXCJjb2xvcnMuZ3JheS4yMDBcIixcImN1cnJlbnRDb2xvclwiKX0pLGJvcmRlck9wYWNpdHk6KHt0aGVtZTplfSk9PmUoXCJvcGFjaXR5XCIpLGJvcmRlclJhZGl1czp7bm9uZTpcIjBweFwiLHNtOlwiMC4xMjVyZW1cIixERUZBVUxUOlwiMC4yNXJlbVwiLG1kOlwiMC4zNzVyZW1cIixsZzpcIjAuNXJlbVwiLHhsOlwiMC43NXJlbVwiLFwiMnhsXCI6XCIxcmVtXCIsXCIzeGxcIjpcIjEuNXJlbVwiLGZ1bGw6XCI5OTk5cHhcIn0sYm9yZGVyU3BhY2luZzooe3RoZW1lOmV9KT0+KHsuLi5lKFwic3BhY2luZ1wiKX0pLGJvcmRlcldpZHRoOntERUZBVUxUOlwiMXB4XCIsMDpcIjBweFwiLDI6XCIycHhcIiw0OlwiNHB4XCIsODpcIjhweFwifSxib3hTaGFkb3c6e3NtOlwiMCAxcHggMnB4IDAgcmdiKDAgMCAwIC8gMC4wNSlcIixERUZBVUxUOlwiMCAxcHggM3B4IDAgcmdiKDAgMCAwIC8gMC4xKSwgMCAxcHggMnB4IC0xcHggcmdiKDAgMCAwIC8gMC4xKVwiLG1kOlwiMCA0cHggNnB4IC0xcHggcmdiKDAgMCAwIC8gMC4xKSwgMCAycHggNHB4IC0ycHggcmdiKDAgMCAwIC8gMC4xKVwiLGxnOlwiMCAxMHB4IDE1cHggLTNweCByZ2IoMCAwIDAgLyAwLjEpLCAwIDRweCA2cHggLTRweCByZ2IoMCAwIDAgLyAwLjEpXCIseGw6XCIwIDIwcHggMjVweCAtNXB4IHJnYigwIDAgMCAvIDAuMSksIDAgOHB4IDEwcHggLTZweCByZ2IoMCAwIDAgLyAwLjEpXCIsXCIyeGxcIjpcIjAgMjVweCA1MHB4IC0xMnB4IHJnYigwIDAgMCAvIDAuMjUpXCIsaW5uZXI6XCJpbnNldCAwIDJweCA0cHggMCByZ2IoMCAwIDAgLyAwLjA1KVwiLG5vbmU6XCJub25lXCJ9LGJveFNoYWRvd0NvbG9yOih7dGhlbWU6ZX0pPT5lKFwiY29sb3JzXCIpLGNhcmV0Q29sb3I6KHt0aGVtZTplfSk9PmUoXCJjb2xvcnNcIiksYWNjZW50Q29sb3I6KHt0aGVtZTplfSk9Pih7Li4uZShcImNvbG9yc1wiKSxhdXRvOlwiYXV0b1wifSksY29udHJhc3Q6ezA6XCIwXCIsNTA6XCIuNVwiLDc1OlwiLjc1XCIsMTAwOlwiMVwiLDEyNTpcIjEuMjVcIiwxNTA6XCIxLjVcIiwyMDA6XCIyXCJ9LGNvbnRhaW5lcjp7fSxjb250ZW50Ontub25lOlwibm9uZVwifSxjdXJzb3I6e2F1dG86XCJhdXRvXCIsZGVmYXVsdDpcImRlZmF1bHRcIixwb2ludGVyOlwicG9pbnRlclwiLHdhaXQ6XCJ3YWl0XCIsdGV4dDpcInRleHRcIixtb3ZlOlwibW92ZVwiLGhlbHA6XCJoZWxwXCIsXCJub3QtYWxsb3dlZFwiOlwibm90LWFsbG93ZWRcIixub25lOlwibm9uZVwiLFwiY29udGV4dC1tZW51XCI6XCJjb250ZXh0LW1lbnVcIixwcm9ncmVzczpcInByb2dyZXNzXCIsY2VsbDpcImNlbGxcIixjcm9zc2hhaXI6XCJjcm9zc2hhaXJcIixcInZlcnRpY2FsLXRleHRcIjpcInZlcnRpY2FsLXRleHRcIixhbGlhczpcImFsaWFzXCIsY29weTpcImNvcHlcIixcIm5vLWRyb3BcIjpcIm5vLWRyb3BcIixncmFiOlwiZ3JhYlwiLGdyYWJiaW5nOlwiZ3JhYmJpbmdcIixcImFsbC1zY3JvbGxcIjpcImFsbC1zY3JvbGxcIixcImNvbC1yZXNpemVcIjpcImNvbC1yZXNpemVcIixcInJvdy1yZXNpemVcIjpcInJvdy1yZXNpemVcIixcIm4tcmVzaXplXCI6XCJuLXJlc2l6ZVwiLFwiZS1yZXNpemVcIjpcImUtcmVzaXplXCIsXCJzLXJlc2l6ZVwiOlwicy1yZXNpemVcIixcInctcmVzaXplXCI6XCJ3LXJlc2l6ZVwiLFwibmUtcmVzaXplXCI6XCJuZS1yZXNpemVcIixcIm53LXJlc2l6ZVwiOlwibnctcmVzaXplXCIsXCJzZS1yZXNpemVcIjpcInNlLXJlc2l6ZVwiLFwic3ctcmVzaXplXCI6XCJzdy1yZXNpemVcIixcImV3LXJlc2l6ZVwiOlwiZXctcmVzaXplXCIsXCJucy1yZXNpemVcIjpcIm5zLXJlc2l6ZVwiLFwibmVzdy1yZXNpemVcIjpcIm5lc3ctcmVzaXplXCIsXCJud3NlLXJlc2l6ZVwiOlwibndzZS1yZXNpemVcIixcInpvb20taW5cIjpcInpvb20taW5cIixcInpvb20tb3V0XCI6XCJ6b29tLW91dFwifSxkaXZpZGVDb2xvcjooe3RoZW1lOmV9KT0+ZShcImJvcmRlckNvbG9yXCIpLGRpdmlkZU9wYWNpdHk6KHt0aGVtZTplfSk9PmUoXCJib3JkZXJPcGFjaXR5XCIpLGRpdmlkZVdpZHRoOih7dGhlbWU6ZX0pPT5lKFwiYm9yZGVyV2lkdGhcIiksZHJvcFNoYWRvdzp7c206XCIwIDFweCAxcHggcmdiKDAgMCAwIC8gMC4wNSlcIixERUZBVUxUOltcIjAgMXB4IDJweCByZ2IoMCAwIDAgLyAwLjEpXCIsXCIwIDFweCAxcHggcmdiKDAgMCAwIC8gMC4wNilcIl0sbWQ6W1wiMCA0cHggM3B4IHJnYigwIDAgMCAvIDAuMDcpXCIsXCIwIDJweCAycHggcmdiKDAgMCAwIC8gMC4wNilcIl0sbGc6W1wiMCAxMHB4IDhweCByZ2IoMCAwIDAgLyAwLjA0KVwiLFwiMCA0cHggM3B4IHJnYigwIDAgMCAvIDAuMSlcIl0seGw6W1wiMCAyMHB4IDEzcHggcmdiKDAgMCAwIC8gMC4wMylcIixcIjAgOHB4IDVweCByZ2IoMCAwIDAgLyAwLjA4KVwiXSxcIjJ4bFwiOlwiMCAyNXB4IDI1cHggcmdiKDAgMCAwIC8gMC4xNSlcIixub25lOlwiMCAwICMwMDAwXCJ9LGZpbGw6KHt0aGVtZTplfSk9PmUoXCJjb2xvcnNcIiksZ3JheXNjYWxlOnswOlwiMFwiLERFRkFVTFQ6XCIxMDAlXCJ9LGh1ZVJvdGF0ZTp7MDpcIjBkZWdcIiwxNTpcIjE1ZGVnXCIsMzA6XCIzMGRlZ1wiLDYwOlwiNjBkZWdcIiw5MDpcIjkwZGVnXCIsMTgwOlwiMTgwZGVnXCJ9LGludmVydDp7MDpcIjBcIixERUZBVUxUOlwiMTAwJVwifSxmbGV4OnsxOlwiMSAxIDAlXCIsYXV0bzpcIjEgMSBhdXRvXCIsaW5pdGlhbDpcIjAgMSBhdXRvXCIsbm9uZTpcIm5vbmVcIn0sZmxleEJhc2lzOih7dGhlbWU6ZX0pPT4oe2F1dG86XCJhdXRvXCIsLi4uZShcInNwYWNpbmdcIiksXCIxLzJcIjpcIjUwJVwiLFwiMS8zXCI6XCIzMy4zMzMzMzMlXCIsXCIyLzNcIjpcIjY2LjY2NjY2NyVcIixcIjEvNFwiOlwiMjUlXCIsXCIyLzRcIjpcIjUwJVwiLFwiMy80XCI6XCI3NSVcIixcIjEvNVwiOlwiMjAlXCIsXCIyLzVcIjpcIjQwJVwiLFwiMy81XCI6XCI2MCVcIixcIjQvNVwiOlwiODAlXCIsXCIxLzZcIjpcIjE2LjY2NjY2NyVcIixcIjIvNlwiOlwiMzMuMzMzMzMzJVwiLFwiMy82XCI6XCI1MCVcIixcIjQvNlwiOlwiNjYuNjY2NjY3JVwiLFwiNS82XCI6XCI4My4zMzMzMzMlXCIsXCIxLzEyXCI6XCI4LjMzMzMzMyVcIixcIjIvMTJcIjpcIjE2LjY2NjY2NyVcIixcIjMvMTJcIjpcIjI1JVwiLFwiNC8xMlwiOlwiMzMuMzMzMzMzJVwiLFwiNS8xMlwiOlwiNDEuNjY2NjY3JVwiLFwiNi8xMlwiOlwiNTAlXCIsXCI3LzEyXCI6XCI1OC4zMzMzMzMlXCIsXCI4LzEyXCI6XCI2Ni42NjY2NjclXCIsXCI5LzEyXCI6XCI3NSVcIixcIjEwLzEyXCI6XCI4My4zMzMzMzMlXCIsXCIxMS8xMlwiOlwiOTEuNjY2NjY3JVwiLGZ1bGw6XCIxMDAlXCJ9KSxmbGV4R3Jvdzp7MDpcIjBcIixERUZBVUxUOlwiMVwifSxmbGV4U2hyaW5rOnswOlwiMFwiLERFRkFVTFQ6XCIxXCJ9LGZvbnRGYW1pbHk6e3NhbnM6W1widWktc2Fucy1zZXJpZlwiLFwic3lzdGVtLXVpXCIsXCItYXBwbGUtc3lzdGVtXCIsXCJCbGlua01hY1N5c3RlbUZvbnRcIiwnXCJTZWdvZSBVSVwiJyxcIlJvYm90b1wiLCdcIkhlbHZldGljYSBOZXVlXCInLFwiQXJpYWxcIiwnXCJOb3RvIFNhbnNcIicsXCJzYW5zLXNlcmlmXCIsJ1wiQXBwbGUgQ29sb3IgRW1vamlcIicsJ1wiU2Vnb2UgVUkgRW1vamlcIicsJ1wiU2Vnb2UgVUkgU3ltYm9sXCInLCdcIk5vdG8gQ29sb3IgRW1vamlcIiddLHNlcmlmOltcInVpLXNlcmlmXCIsXCJHZW9yZ2lhXCIsXCJDYW1icmlhXCIsJ1wiVGltZXMgTmV3IFJvbWFuXCInLFwiVGltZXNcIixcInNlcmlmXCJdLG1vbm86W1widWktbW9ub3NwYWNlXCIsXCJTRk1vbm8tUmVndWxhclwiLFwiTWVubG9cIixcIk1vbmFjb1wiLFwiQ29uc29sYXNcIiwnXCJMaWJlcmF0aW9uIE1vbm9cIicsJ1wiQ291cmllciBOZXdcIicsXCJtb25vc3BhY2VcIl19LGZvbnRTaXplOnt4czpbXCIwLjc1cmVtXCIse2xpbmVIZWlnaHQ6XCIxcmVtXCJ9XSxzbTpbXCIwLjg3NXJlbVwiLHtsaW5lSGVpZ2h0OlwiMS4yNXJlbVwifV0sYmFzZTpbXCIxcmVtXCIse2xpbmVIZWlnaHQ6XCIxLjVyZW1cIn1dLGxnOltcIjEuMTI1cmVtXCIse2xpbmVIZWlnaHQ6XCIxLjc1cmVtXCJ9XSx4bDpbXCIxLjI1cmVtXCIse2xpbmVIZWlnaHQ6XCIxLjc1cmVtXCJ9XSxcIjJ4bFwiOltcIjEuNXJlbVwiLHtsaW5lSGVpZ2h0OlwiMnJlbVwifV0sXCIzeGxcIjpbXCIxLjg3NXJlbVwiLHtsaW5lSGVpZ2h0OlwiMi4yNXJlbVwifV0sXCI0eGxcIjpbXCIyLjI1cmVtXCIse2xpbmVIZWlnaHQ6XCIyLjVyZW1cIn1dLFwiNXhsXCI6W1wiM3JlbVwiLHtsaW5lSGVpZ2h0OlwiMVwifV0sXCI2eGxcIjpbXCIzLjc1cmVtXCIse2xpbmVIZWlnaHQ6XCIxXCJ9XSxcIjd4bFwiOltcIjQuNXJlbVwiLHtsaW5lSGVpZ2h0OlwiMVwifV0sXCI4eGxcIjpbXCI2cmVtXCIse2xpbmVIZWlnaHQ6XCIxXCJ9XSxcIjl4bFwiOltcIjhyZW1cIix7bGluZUhlaWdodDpcIjFcIn1dfSxmb250V2VpZ2h0Ont0aGluOlwiMTAwXCIsZXh0cmFsaWdodDpcIjIwMFwiLGxpZ2h0OlwiMzAwXCIsbm9ybWFsOlwiNDAwXCIsbWVkaXVtOlwiNTAwXCIsc2VtaWJvbGQ6XCI2MDBcIixib2xkOlwiNzAwXCIsZXh0cmFib2xkOlwiODAwXCIsYmxhY2s6XCI5MDBcIn0sZ2FwOih7dGhlbWU6ZX0pPT5lKFwic3BhY2luZ1wiKSxncmFkaWVudENvbG9yU3RvcHM6KHt0aGVtZTplfSk9PmUoXCJjb2xvcnNcIiksZ3JpZEF1dG9Db2x1bW5zOnthdXRvOlwiYXV0b1wiLG1pbjpcIm1pbi1jb250ZW50XCIsbWF4OlwibWF4LWNvbnRlbnRcIixmcjpcIm1pbm1heCgwLCAxZnIpXCJ9LGdyaWRBdXRvUm93czp7YXV0bzpcImF1dG9cIixtaW46XCJtaW4tY29udGVudFwiLG1heDpcIm1heC1jb250ZW50XCIsZnI6XCJtaW5tYXgoMCwgMWZyKVwifSxncmlkQ29sdW1uOnthdXRvOlwiYXV0b1wiLFwic3Bhbi0xXCI6XCJzcGFuIDEgLyBzcGFuIDFcIixcInNwYW4tMlwiOlwic3BhbiAyIC8gc3BhbiAyXCIsXCJzcGFuLTNcIjpcInNwYW4gMyAvIHNwYW4gM1wiLFwic3Bhbi00XCI6XCJzcGFuIDQgLyBzcGFuIDRcIixcInNwYW4tNVwiOlwic3BhbiA1IC8gc3BhbiA1XCIsXCJzcGFuLTZcIjpcInNwYW4gNiAvIHNwYW4gNlwiLFwic3Bhbi03XCI6XCJzcGFuIDcgLyBzcGFuIDdcIixcInNwYW4tOFwiOlwic3BhbiA4IC8gc3BhbiA4XCIsXCJzcGFuLTlcIjpcInNwYW4gOSAvIHNwYW4gOVwiLFwic3Bhbi0xMFwiOlwic3BhbiAxMCAvIHNwYW4gMTBcIixcInNwYW4tMTFcIjpcInNwYW4gMTEgLyBzcGFuIDExXCIsXCJzcGFuLTEyXCI6XCJzcGFuIDEyIC8gc3BhbiAxMlwiLFwic3Bhbi1mdWxsXCI6XCIxIC8gLTFcIn0sZ3JpZENvbHVtbkVuZDp7YXV0bzpcImF1dG9cIiwxOlwiMVwiLDI6XCIyXCIsMzpcIjNcIiw0OlwiNFwiLDU6XCI1XCIsNjpcIjZcIiw3OlwiN1wiLDg6XCI4XCIsOTpcIjlcIiwxMDpcIjEwXCIsMTE6XCIxMVwiLDEyOlwiMTJcIiwxMzpcIjEzXCJ9LGdyaWRDb2x1bW5TdGFydDp7YXV0bzpcImF1dG9cIiwxOlwiMVwiLDI6XCIyXCIsMzpcIjNcIiw0OlwiNFwiLDU6XCI1XCIsNjpcIjZcIiw3OlwiN1wiLDg6XCI4XCIsOTpcIjlcIiwxMDpcIjEwXCIsMTE6XCIxMVwiLDEyOlwiMTJcIiwxMzpcIjEzXCJ9LGdyaWRSb3c6e2F1dG86XCJhdXRvXCIsXCJzcGFuLTFcIjpcInNwYW4gMSAvIHNwYW4gMVwiLFwic3Bhbi0yXCI6XCJzcGFuIDIgLyBzcGFuIDJcIixcInNwYW4tM1wiOlwic3BhbiAzIC8gc3BhbiAzXCIsXCJzcGFuLTRcIjpcInNwYW4gNCAvIHNwYW4gNFwiLFwic3Bhbi01XCI6XCJzcGFuIDUgLyBzcGFuIDVcIixcInNwYW4tNlwiOlwic3BhbiA2IC8gc3BhbiA2XCIsXCJzcGFuLWZ1bGxcIjpcIjEgLyAtMVwifSxncmlkUm93U3RhcnQ6e2F1dG86XCJhdXRvXCIsMTpcIjFcIiwyOlwiMlwiLDM6XCIzXCIsNDpcIjRcIiw1OlwiNVwiLDY6XCI2XCIsNzpcIjdcIn0sZ3JpZFJvd0VuZDp7YXV0bzpcImF1dG9cIiwxOlwiMVwiLDI6XCIyXCIsMzpcIjNcIiw0OlwiNFwiLDU6XCI1XCIsNjpcIjZcIiw3OlwiN1wifSxncmlkVGVtcGxhdGVDb2x1bW5zOntub25lOlwibm9uZVwiLDE6XCJyZXBlYXQoMSwgbWlubWF4KDAsIDFmcikpXCIsMjpcInJlcGVhdCgyLCBtaW5tYXgoMCwgMWZyKSlcIiwzOlwicmVwZWF0KDMsIG1pbm1heCgwLCAxZnIpKVwiLDQ6XCJyZXBlYXQoNCwgbWlubWF4KDAsIDFmcikpXCIsNTpcInJlcGVhdCg1LCBtaW5tYXgoMCwgMWZyKSlcIiw2OlwicmVwZWF0KDYsIG1pbm1heCgwLCAxZnIpKVwiLDc6XCJyZXBlYXQoNywgbWlubWF4KDAsIDFmcikpXCIsODpcInJlcGVhdCg4LCBtaW5tYXgoMCwgMWZyKSlcIiw5OlwicmVwZWF0KDksIG1pbm1heCgwLCAxZnIpKVwiLDEwOlwicmVwZWF0KDEwLCBtaW5tYXgoMCwgMWZyKSlcIiwxMTpcInJlcGVhdCgxMSwgbWlubWF4KDAsIDFmcikpXCIsMTI6XCJyZXBlYXQoMTIsIG1pbm1heCgwLCAxZnIpKVwifSxncmlkVGVtcGxhdGVSb3dzOntub25lOlwibm9uZVwiLDE6XCJyZXBlYXQoMSwgbWlubWF4KDAsIDFmcikpXCIsMjpcInJlcGVhdCgyLCBtaW5tYXgoMCwgMWZyKSlcIiwzOlwicmVwZWF0KDMsIG1pbm1heCgwLCAxZnIpKVwiLDQ6XCJyZXBlYXQoNCwgbWlubWF4KDAsIDFmcikpXCIsNTpcInJlcGVhdCg1LCBtaW5tYXgoMCwgMWZyKSlcIiw2OlwicmVwZWF0KDYsIG1pbm1heCgwLCAxZnIpKVwifSxoZWlnaHQ6KHt0aGVtZTplfSk9Pih7YXV0bzpcImF1dG9cIiwuLi5lKFwic3BhY2luZ1wiKSxcIjEvMlwiOlwiNTAlXCIsXCIxLzNcIjpcIjMzLjMzMzMzMyVcIixcIjIvM1wiOlwiNjYuNjY2NjY3JVwiLFwiMS80XCI6XCIyNSVcIixcIjIvNFwiOlwiNTAlXCIsXCIzLzRcIjpcIjc1JVwiLFwiMS81XCI6XCIyMCVcIixcIjIvNVwiOlwiNDAlXCIsXCIzLzVcIjpcIjYwJVwiLFwiNC81XCI6XCI4MCVcIixcIjEvNlwiOlwiMTYuNjY2NjY3JVwiLFwiMi82XCI6XCIzMy4zMzMzMzMlXCIsXCIzLzZcIjpcIjUwJVwiLFwiNC82XCI6XCI2Ni42NjY2NjclXCIsXCI1LzZcIjpcIjgzLjMzMzMzMyVcIixmdWxsOlwiMTAwJVwiLHNjcmVlbjpcIjEwMHZoXCIsbWluOlwibWluLWNvbnRlbnRcIixtYXg6XCJtYXgtY29udGVudFwiLGZpdDpcImZpdC1jb250ZW50XCJ9KSxpbnNldDooe3RoZW1lOmV9KT0+KHthdXRvOlwiYXV0b1wiLC4uLmUoXCJzcGFjaW5nXCIpLFwiMS8yXCI6XCI1MCVcIixcIjEvM1wiOlwiMzMuMzMzMzMzJVwiLFwiMi8zXCI6XCI2Ni42NjY2NjclXCIsXCIxLzRcIjpcIjI1JVwiLFwiMi80XCI6XCI1MCVcIixcIjMvNFwiOlwiNzUlXCIsZnVsbDpcIjEwMCVcIn0pLGtleWZyYW1lczp7c3Bpbjp7dG86e3RyYW5zZm9ybTpcInJvdGF0ZSgzNjBkZWcpXCJ9fSxwaW5nOntcIjc1JSwgMTAwJVwiOnt0cmFuc2Zvcm06XCJzY2FsZSgyKVwiLG9wYWNpdHk6XCIwXCJ9fSxwdWxzZTp7XCI1MCVcIjp7b3BhY2l0eTpcIi41XCJ9fSxib3VuY2U6e1wiMCUsIDEwMCVcIjp7dHJhbnNmb3JtOlwidHJhbnNsYXRlWSgtMjUlKVwiLGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOlwiY3ViaWMtYmV6aWVyKDAuOCwwLDEsMSlcIn0sXCI1MCVcIjp7dHJhbnNmb3JtOlwibm9uZVwiLGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOlwiY3ViaWMtYmV6aWVyKDAsMCwwLjIsMSlcIn19fSxsZXR0ZXJTcGFjaW5nOnt0aWdodGVyOlwiLTAuMDVlbVwiLHRpZ2h0OlwiLTAuMDI1ZW1cIixub3JtYWw6XCIwZW1cIix3aWRlOlwiMC4wMjVlbVwiLHdpZGVyOlwiMC4wNWVtXCIsd2lkZXN0OlwiMC4xZW1cIn0sbGluZUhlaWdodDp7bm9uZTpcIjFcIix0aWdodDpcIjEuMjVcIixzbnVnOlwiMS4zNzVcIixub3JtYWw6XCIxLjVcIixyZWxheGVkOlwiMS42MjVcIixsb29zZTpcIjJcIiwzOlwiLjc1cmVtXCIsNDpcIjFyZW1cIiw1OlwiMS4yNXJlbVwiLDY6XCIxLjVyZW1cIiw3OlwiMS43NXJlbVwiLDg6XCIycmVtXCIsOTpcIjIuMjVyZW1cIiwxMDpcIjIuNXJlbVwifSxsaXN0U3R5bGVUeXBlOntub25lOlwibm9uZVwiLGRpc2M6XCJkaXNjXCIsZGVjaW1hbDpcImRlY2ltYWxcIn0sbWFyZ2luOih7dGhlbWU6ZX0pPT4oe2F1dG86XCJhdXRvXCIsLi4uZShcInNwYWNpbmdcIil9KSxtYXhIZWlnaHQ6KHt0aGVtZTplfSk9Pih7Li4uZShcInNwYWNpbmdcIiksZnVsbDpcIjEwMCVcIixzY3JlZW46XCIxMDB2aFwiLG1pbjpcIm1pbi1jb250ZW50XCIsbWF4OlwibWF4LWNvbnRlbnRcIixmaXQ6XCJmaXQtY29udGVudFwifSksbWF4V2lkdGg6KHt0aGVtZTplLGJyZWFrcG9pbnRzOnR9KT0+KHtub25lOlwibm9uZVwiLDA6XCIwcmVtXCIseHM6XCIyMHJlbVwiLHNtOlwiMjRyZW1cIixtZDpcIjI4cmVtXCIsbGc6XCIzMnJlbVwiLHhsOlwiMzZyZW1cIixcIjJ4bFwiOlwiNDJyZW1cIixcIjN4bFwiOlwiNDhyZW1cIixcIjR4bFwiOlwiNTZyZW1cIixcIjV4bFwiOlwiNjRyZW1cIixcIjZ4bFwiOlwiNzJyZW1cIixcIjd4bFwiOlwiODByZW1cIixmdWxsOlwiMTAwJVwiLG1pbjpcIm1pbi1jb250ZW50XCIsbWF4OlwibWF4LWNvbnRlbnRcIixmaXQ6XCJmaXQtY29udGVudFwiLHByb3NlOlwiNjVjaFwiLC4uLnQoZShcInNjcmVlbnNcIikpfSksbWluSGVpZ2h0OnswOlwiMHB4XCIsZnVsbDpcIjEwMCVcIixzY3JlZW46XCIxMDB2aFwiLG1pbjpcIm1pbi1jb250ZW50XCIsbWF4OlwibWF4LWNvbnRlbnRcIixmaXQ6XCJmaXQtY29udGVudFwifSxtaW5XaWR0aDp7MDpcIjBweFwiLGZ1bGw6XCIxMDAlXCIsbWluOlwibWluLWNvbnRlbnRcIixtYXg6XCJtYXgtY29udGVudFwiLGZpdDpcImZpdC1jb250ZW50XCJ9LG9iamVjdFBvc2l0aW9uOntib3R0b206XCJib3R0b21cIixjZW50ZXI6XCJjZW50ZXJcIixsZWZ0OlwibGVmdFwiLFwibGVmdC1ib3R0b21cIjpcImxlZnQgYm90dG9tXCIsXCJsZWZ0LXRvcFwiOlwibGVmdCB0b3BcIixyaWdodDpcInJpZ2h0XCIsXCJyaWdodC1ib3R0b21cIjpcInJpZ2h0IGJvdHRvbVwiLFwicmlnaHQtdG9wXCI6XCJyaWdodCB0b3BcIix0b3A6XCJ0b3BcIn0sb3BhY2l0eTp7MDpcIjBcIiw1OlwiMC4wNVwiLDEwOlwiMC4xXCIsMjA6XCIwLjJcIiwyNTpcIjAuMjVcIiwzMDpcIjAuM1wiLDQwOlwiMC40XCIsNTA6XCIwLjVcIiw2MDpcIjAuNlwiLDcwOlwiMC43XCIsNzU6XCIwLjc1XCIsODA6XCIwLjhcIiw5MDpcIjAuOVwiLDk1OlwiMC45NVwiLDEwMDpcIjFcIn0sb3JkZXI6e2ZpcnN0OlwiLTk5OTlcIixsYXN0OlwiOTk5OVwiLG5vbmU6XCIwXCIsMTpcIjFcIiwyOlwiMlwiLDM6XCIzXCIsNDpcIjRcIiw1OlwiNVwiLDY6XCI2XCIsNzpcIjdcIiw4OlwiOFwiLDk6XCI5XCIsMTA6XCIxMFwiLDExOlwiMTFcIiwxMjpcIjEyXCJ9LHBhZGRpbmc6KHt0aGVtZTplfSk9PmUoXCJzcGFjaW5nXCIpLHBsYWNlaG9sZGVyQ29sb3I6KHt0aGVtZTplfSk9PmUoXCJjb2xvcnNcIikscGxhY2Vob2xkZXJPcGFjaXR5Oih7dGhlbWU6ZX0pPT5lKFwib3BhY2l0eVwiKSxvdXRsaW5lQ29sb3I6KHt0aGVtZTplfSk9PmUoXCJjb2xvcnNcIiksb3V0bGluZU9mZnNldDp7MDpcIjBweFwiLDE6XCIxcHhcIiwyOlwiMnB4XCIsNDpcIjRweFwiLDg6XCI4cHhcIn0sb3V0bGluZVdpZHRoOnswOlwiMHB4XCIsMTpcIjFweFwiLDI6XCIycHhcIiw0OlwiNHB4XCIsODpcIjhweFwifSxyaW5nQ29sb3I6KHt0aGVtZTplfSk9Pih7REVGQVVMVDplKFwiY29sb3JzLmJsdWUuNTAwXCIsXCIjM2I4MmY2XCIpLC4uLmUoXCJjb2xvcnNcIil9KSxyaW5nT2Zmc2V0Q29sb3I6KHt0aGVtZTplfSk9PmUoXCJjb2xvcnNcIikscmluZ09mZnNldFdpZHRoOnswOlwiMHB4XCIsMTpcIjFweFwiLDI6XCIycHhcIiw0OlwiNHB4XCIsODpcIjhweFwifSxyaW5nT3BhY2l0eTooe3RoZW1lOmV9KT0+KHtERUZBVUxUOlwiMC41XCIsLi4uZShcIm9wYWNpdHlcIil9KSxyaW5nV2lkdGg6e0RFRkFVTFQ6XCIzcHhcIiwwOlwiMHB4XCIsMTpcIjFweFwiLDI6XCIycHhcIiw0OlwiNHB4XCIsODpcIjhweFwifSxyb3RhdGU6ezA6XCIwZGVnXCIsMTpcIjFkZWdcIiwyOlwiMmRlZ1wiLDM6XCIzZGVnXCIsNjpcIjZkZWdcIiwxMjpcIjEyZGVnXCIsNDU6XCI0NWRlZ1wiLDkwOlwiOTBkZWdcIiwxODA6XCIxODBkZWdcIn0sc2F0dXJhdGU6ezA6XCIwXCIsNTA6XCIuNVwiLDEwMDpcIjFcIiwxNTA6XCIxLjVcIiwyMDA6XCIyXCJ9LHNjYWxlOnswOlwiMFwiLDUwOlwiLjVcIiw3NTpcIi43NVwiLDkwOlwiLjlcIiw5NTpcIi45NVwiLDEwMDpcIjFcIiwxMDU6XCIxLjA1XCIsMTEwOlwiMS4xXCIsMTI1OlwiMS4yNVwiLDE1MDpcIjEuNVwifSxzY3JvbGxNYXJnaW46KHt0aGVtZTplfSk9Pih7Li4uZShcInNwYWNpbmdcIil9KSxzY3JvbGxQYWRkaW5nOih7dGhlbWU6ZX0pPT5lKFwic3BhY2luZ1wiKSxzZXBpYTp7MDpcIjBcIixERUZBVUxUOlwiMTAwJVwifSxza2V3OnswOlwiMGRlZ1wiLDE6XCIxZGVnXCIsMjpcIjJkZWdcIiwzOlwiM2RlZ1wiLDY6XCI2ZGVnXCIsMTI6XCIxMmRlZ1wifSxzcGFjZTooe3RoZW1lOmV9KT0+KHsuLi5lKFwic3BhY2luZ1wiKX0pLHN0cm9rZTooe3RoZW1lOmV9KT0+ZShcImNvbG9yc1wiKSxzdHJva2VXaWR0aDp7MDpcIjBcIiwxOlwiMVwiLDI6XCIyXCJ9LHRleHRDb2xvcjooe3RoZW1lOmV9KT0+ZShcImNvbG9yc1wiKSx0ZXh0RGVjb3JhdGlvbkNvbG9yOih7dGhlbWU6ZX0pPT5lKFwiY29sb3JzXCIpLHRleHREZWNvcmF0aW9uVGhpY2tuZXNzOnthdXRvOlwiYXV0b1wiLFwiZnJvbS1mb250XCI6XCJmcm9tLWZvbnRcIiwwOlwiMHB4XCIsMTpcIjFweFwiLDI6XCIycHhcIiw0OlwiNHB4XCIsODpcIjhweFwifSx0ZXh0VW5kZXJsaW5lT2Zmc2V0OnthdXRvOlwiYXV0b1wiLDA6XCIwcHhcIiwxOlwiMXB4XCIsMjpcIjJweFwiLDQ6XCI0cHhcIiw4OlwiOHB4XCJ9LHRleHRJbmRlbnQ6KHt0aGVtZTplfSk9Pih7Li4uZShcInNwYWNpbmdcIil9KSx0ZXh0T3BhY2l0eTooe3RoZW1lOmV9KT0+ZShcIm9wYWNpdHlcIiksdHJhbnNmb3JtT3JpZ2luOntjZW50ZXI6XCJjZW50ZXJcIix0b3A6XCJ0b3BcIixcInRvcC1yaWdodFwiOlwidG9wIHJpZ2h0XCIscmlnaHQ6XCJyaWdodFwiLFwiYm90dG9tLXJpZ2h0XCI6XCJib3R0b20gcmlnaHRcIixib3R0b206XCJib3R0b21cIixcImJvdHRvbS1sZWZ0XCI6XCJib3R0b20gbGVmdFwiLGxlZnQ6XCJsZWZ0XCIsXCJ0b3AtbGVmdFwiOlwidG9wIGxlZnRcIn0sdHJhbnNpdGlvbkRlbGF5Ons3NTpcIjc1bXNcIiwxMDA6XCIxMDBtc1wiLDE1MDpcIjE1MG1zXCIsMjAwOlwiMjAwbXNcIiwzMDA6XCIzMDBtc1wiLDUwMDpcIjUwMG1zXCIsNzAwOlwiNzAwbXNcIiwxZTM6XCIxMDAwbXNcIn0sdHJhbnNpdGlvbkR1cmF0aW9uOntERUZBVUxUOlwiMTUwbXNcIiw3NTpcIjc1bXNcIiwxMDA6XCIxMDBtc1wiLDE1MDpcIjE1MG1zXCIsMjAwOlwiMjAwbXNcIiwzMDA6XCIzMDBtc1wiLDUwMDpcIjUwMG1zXCIsNzAwOlwiNzAwbXNcIiwxZTM6XCIxMDAwbXNcIn0sdHJhbnNpdGlvblByb3BlcnR5Ontub25lOlwibm9uZVwiLGFsbDpcImFsbFwiLERFRkFVTFQ6XCJjb2xvciwgYmFja2dyb3VuZC1jb2xvciwgYm9yZGVyLWNvbG9yLCB0ZXh0LWRlY29yYXRpb24tY29sb3IsIGZpbGwsIHN0cm9rZSwgb3BhY2l0eSwgYm94LXNoYWRvdywgdHJhbnNmb3JtLCBmaWx0ZXIsIGJhY2tkcm9wLWZpbHRlclwiLGNvbG9yczpcImNvbG9yLCBiYWNrZ3JvdW5kLWNvbG9yLCBib3JkZXItY29sb3IsIHRleHQtZGVjb3JhdGlvbi1jb2xvciwgZmlsbCwgc3Ryb2tlXCIsb3BhY2l0eTpcIm9wYWNpdHlcIixzaGFkb3c6XCJib3gtc2hhZG93XCIsdHJhbnNmb3JtOlwidHJhbnNmb3JtXCJ9LHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjp7REVGQVVMVDpcImN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSlcIixsaW5lYXI6XCJsaW5lYXJcIixpbjpcImN1YmljLWJlemllcigwLjQsIDAsIDEsIDEpXCIsb3V0OlwiY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMSlcIixcImluLW91dFwiOlwiY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKVwifSx0cmFuc2xhdGU6KHt0aGVtZTplfSk9Pih7Li4uZShcInNwYWNpbmdcIiksXCIxLzJcIjpcIjUwJVwiLFwiMS8zXCI6XCIzMy4zMzMzMzMlXCIsXCIyLzNcIjpcIjY2LjY2NjY2NyVcIixcIjEvNFwiOlwiMjUlXCIsXCIyLzRcIjpcIjUwJVwiLFwiMy80XCI6XCI3NSVcIixmdWxsOlwiMTAwJVwifSksd2lkdGg6KHt0aGVtZTplfSk9Pih7YXV0bzpcImF1dG9cIiwuLi5lKFwic3BhY2luZ1wiKSxcIjEvMlwiOlwiNTAlXCIsXCIxLzNcIjpcIjMzLjMzMzMzMyVcIixcIjIvM1wiOlwiNjYuNjY2NjY3JVwiLFwiMS80XCI6XCIyNSVcIixcIjIvNFwiOlwiNTAlXCIsXCIzLzRcIjpcIjc1JVwiLFwiMS81XCI6XCIyMCVcIixcIjIvNVwiOlwiNDAlXCIsXCIzLzVcIjpcIjYwJVwiLFwiNC81XCI6XCI4MCVcIixcIjEvNlwiOlwiMTYuNjY2NjY3JVwiLFwiMi82XCI6XCIzMy4zMzMzMzMlXCIsXCIzLzZcIjpcIjUwJVwiLFwiNC82XCI6XCI2Ni42NjY2NjclXCIsXCI1LzZcIjpcIjgzLjMzMzMzMyVcIixcIjEvMTJcIjpcIjguMzMzMzMzJVwiLFwiMi8xMlwiOlwiMTYuNjY2NjY3JVwiLFwiMy8xMlwiOlwiMjUlXCIsXCI0LzEyXCI6XCIzMy4zMzMzMzMlXCIsXCI1LzEyXCI6XCI0MS42NjY2NjclXCIsXCI2LzEyXCI6XCI1MCVcIixcIjcvMTJcIjpcIjU4LjMzMzMzMyVcIixcIjgvMTJcIjpcIjY2LjY2NjY2NyVcIixcIjkvMTJcIjpcIjc1JVwiLFwiMTAvMTJcIjpcIjgzLjMzMzMzMyVcIixcIjExLzEyXCI6XCI5MS42NjY2NjclXCIsZnVsbDpcIjEwMCVcIixzY3JlZW46XCIxMDB2d1wiLG1pbjpcIm1pbi1jb250ZW50XCIsbWF4OlwibWF4LWNvbnRlbnRcIixmaXQ6XCJmaXQtY29udGVudFwifSksd2lsbENoYW5nZTp7YXV0bzpcImF1dG9cIixzY3JvbGw6XCJzY3JvbGwtcG9zaXRpb25cIixjb250ZW50czpcImNvbnRlbnRzXCIsdHJhbnNmb3JtOlwidHJhbnNmb3JtXCJ9LHpJbmRleDp7YXV0bzpcImF1dG9cIiwwOlwiMFwiLDEwOlwiMTBcIiwyMDpcIjIwXCIsMzA6XCIzMFwiLDQwOlwiNDBcIiw1MDpcIjUwXCJ9fSx2YXJpYW50T3JkZXI6W1wiZmlyc3RcIixcImxhc3RcIixcIm9kZFwiLFwiZXZlblwiLFwidmlzaXRlZFwiLFwiY2hlY2tlZFwiLFwiZW1wdHlcIixcInJlYWQtb25seVwiLFwiZ3JvdXAtaG92ZXJcIixcImdyb3VwLWZvY3VzXCIsXCJmb2N1cy13aXRoaW5cIixcImhvdmVyXCIsXCJmb2N1c1wiLFwiZm9jdXMtdmlzaWJsZVwiLFwiYWN0aXZlXCIsXCJkaXNhYmxlZFwiXSxwbHVnaW5zOltdfX0pO3ZhciBYcj17fTt5bihYcix7ZGVmYXVsdDooKT0+SGZ9KTt2YXIgSGYsUXI9dm4oKCk9PntIZj17aW5mbyhlLHQpe2NvbnNvbGUuaW5mbyguLi5BcnJheS5pc0FycmF5KGUpP1tlXTpbdCxlXSl9LHdhcm4oZSx0KXtjb25zb2xlLndhcm4oLi4uQXJyYXkuaXNBcnJheShlKT9bZV06W3QsZV0pfSxyaXNrKGUsdCl7Y29uc29sZS5lcnJvciguLi5BcnJheS5pc0FycmF5KGUpP1tlXTpbdCxlXSl9fX0pO3ZhciB6dT1UKFpuPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KFpuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShabixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCxnZXQ6KCk9PlhmfSk7dmFyIFZmPVlmKChRcigpLElyKFhyKSkpO2Z1bmN0aW9uIFlmKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBHdCh7dmVyc2lvbjplLGZyb206dCx0bzpufSl7VmYuZGVmYXVsdC53YXJuKGAke3R9LWNvbG9yLXJlbmFtZWRgLFtgQXMgb2YgVGFpbHdpbmQgQ1NTICR7ZX0sIFxcYCR7dH1cXGAgaGFzIGJlZW4gcmVuYW1lZCB0byBcXGAke259XFxgLmAsXCJVcGRhdGUgeW91ciBjb25maWd1cmF0aW9uIGZpbGUgdG8gc2lsZW5jZSB0aGlzIHdhcm5pbmcuXCJdKX12YXIgWGY9e2luaGVyaXQ6XCJpbmhlcml0XCIsY3VycmVudDpcImN1cnJlbnRDb2xvclwiLHRyYW5zcGFyZW50OlwidHJhbnNwYXJlbnRcIixibGFjazpcIiMwMDBcIix3aGl0ZTpcIiNmZmZcIixzbGF0ZTp7NTA6XCIjZjhmYWZjXCIsMTAwOlwiI2YxZjVmOVwiLDIwMDpcIiNlMmU4ZjBcIiwzMDA6XCIjY2JkNWUxXCIsNDAwOlwiIzk0YTNiOFwiLDUwMDpcIiM2NDc0OGJcIiw2MDA6XCIjNDc1NTY5XCIsNzAwOlwiIzMzNDE1NVwiLDgwMDpcIiMxZTI5M2JcIiw5MDA6XCIjMGYxNzJhXCJ9LGdyYXk6ezUwOlwiI2Y5ZmFmYlwiLDEwMDpcIiNmM2Y0ZjZcIiwyMDA6XCIjZTVlN2ViXCIsMzAwOlwiI2QxZDVkYlwiLDQwMDpcIiM5Y2EzYWZcIiw1MDA6XCIjNmI3MjgwXCIsNjAwOlwiIzRiNTU2M1wiLDcwMDpcIiMzNzQxNTFcIiw4MDA6XCIjMWYyOTM3XCIsOTAwOlwiIzExMTgyN1wifSx6aW5jOns1MDpcIiNmYWZhZmFcIiwxMDA6XCIjZjRmNGY1XCIsMjAwOlwiI2U0ZTRlN1wiLDMwMDpcIiNkNGQ0ZDhcIiw0MDA6XCIjYTFhMWFhXCIsNTAwOlwiIzcxNzE3YVwiLDYwMDpcIiM1MjUyNWJcIiw3MDA6XCIjM2YzZjQ2XCIsODAwOlwiIzI3MjcyYVwiLDkwMDpcIiMxODE4MWJcIn0sbmV1dHJhbDp7NTA6XCIjZmFmYWZhXCIsMTAwOlwiI2Y1ZjVmNVwiLDIwMDpcIiNlNWU1ZTVcIiwzMDA6XCIjZDRkNGQ0XCIsNDAwOlwiI2EzYTNhM1wiLDUwMDpcIiM3MzczNzNcIiw2MDA6XCIjNTI1MjUyXCIsNzAwOlwiIzQwNDA0MFwiLDgwMDpcIiMyNjI2MjZcIiw5MDA6XCIjMTcxNzE3XCJ9LHN0b25lOns1MDpcIiNmYWZhZjlcIiwxMDA6XCIjZjVmNWY0XCIsMjAwOlwiI2U3ZTVlNFwiLDMwMDpcIiNkNmQzZDFcIiw0MDA6XCIjYThhMjllXCIsNTAwOlwiIzc4NzE2Y1wiLDYwMDpcIiM1NzUzNGVcIiw3MDA6XCIjNDQ0MDNjXCIsODAwOlwiIzI5MjUyNFwiLDkwMDpcIiMxYzE5MTdcIn0scmVkOns1MDpcIiNmZWYyZjJcIiwxMDA6XCIjZmVlMmUyXCIsMjAwOlwiI2ZlY2FjYVwiLDMwMDpcIiNmY2E1YTVcIiw0MDA6XCIjZjg3MTcxXCIsNTAwOlwiI2VmNDQ0NFwiLDYwMDpcIiNkYzI2MjZcIiw3MDA6XCIjYjkxYzFjXCIsODAwOlwiIzk5MWIxYlwiLDkwMDpcIiM3ZjFkMWRcIn0sb3JhbmdlOns1MDpcIiNmZmY3ZWRcIiwxMDA6XCIjZmZlZGQ1XCIsMjAwOlwiI2ZlZDdhYVwiLDMwMDpcIiNmZGJhNzRcIiw0MDA6XCIjZmI5MjNjXCIsNTAwOlwiI2Y5NzMxNlwiLDYwMDpcIiNlYTU4MGNcIiw3MDA6XCIjYzI0MTBjXCIsODAwOlwiIzlhMzQxMlwiLDkwMDpcIiM3YzJkMTJcIn0sYW1iZXI6ezUwOlwiI2ZmZmJlYlwiLDEwMDpcIiNmZWYzYzdcIiwyMDA6XCIjZmRlNjhhXCIsMzAwOlwiI2ZjZDM0ZFwiLDQwMDpcIiNmYmJmMjRcIiw1MDA6XCIjZjU5ZTBiXCIsNjAwOlwiI2Q5NzcwNlwiLDcwMDpcIiNiNDUzMDlcIiw4MDA6XCIjOTI0MDBlXCIsOTAwOlwiIzc4MzUwZlwifSx5ZWxsb3c6ezUwOlwiI2ZlZmNlOFwiLDEwMDpcIiNmZWY5YzNcIiwyMDA6XCIjZmVmMDhhXCIsMzAwOlwiI2ZkZTA0N1wiLDQwMDpcIiNmYWNjMTVcIiw1MDA6XCIjZWFiMzA4XCIsNjAwOlwiI2NhOGEwNFwiLDcwMDpcIiNhMTYyMDdcIiw4MDA6XCIjODU0ZDBlXCIsOTAwOlwiIzcxM2YxMlwifSxsaW1lOns1MDpcIiNmN2ZlZTdcIiwxMDA6XCIjZWNmY2NiXCIsMjAwOlwiI2Q5Zjk5ZFwiLDMwMDpcIiNiZWYyNjRcIiw0MDA6XCIjYTNlNjM1XCIsNTAwOlwiIzg0Y2MxNlwiLDYwMDpcIiM2NWEzMGRcIiw3MDA6XCIjNGQ3YzBmXCIsODAwOlwiIzNmNjIxMlwiLDkwMDpcIiMzNjUzMTRcIn0sZ3JlZW46ezUwOlwiI2YwZmRmNFwiLDEwMDpcIiNkY2ZjZTdcIiwyMDA6XCIjYmJmN2QwXCIsMzAwOlwiIzg2ZWZhY1wiLDQwMDpcIiM0YWRlODBcIiw1MDA6XCIjMjJjNTVlXCIsNjAwOlwiIzE2YTM0YVwiLDcwMDpcIiMxNTgwM2RcIiw4MDA6XCIjMTY2NTM0XCIsOTAwOlwiIzE0NTMyZFwifSxlbWVyYWxkOns1MDpcIiNlY2ZkZjVcIiwxMDA6XCIjZDFmYWU1XCIsMjAwOlwiI2E3ZjNkMFwiLDMwMDpcIiM2ZWU3YjdcIiw0MDA6XCIjMzRkMzk5XCIsNTAwOlwiIzEwYjk4MVwiLDYwMDpcIiMwNTk2NjlcIiw3MDA6XCIjMDQ3ODU3XCIsODAwOlwiIzA2NWY0NlwiLDkwMDpcIiMwNjRlM2JcIn0sdGVhbDp7NTA6XCIjZjBmZGZhXCIsMTAwOlwiI2NjZmJmMVwiLDIwMDpcIiM5OWY2ZTRcIiwzMDA6XCIjNWVlYWQ0XCIsNDAwOlwiIzJkZDRiZlwiLDUwMDpcIiMxNGI4YTZcIiw2MDA6XCIjMGQ5NDg4XCIsNzAwOlwiIzBmNzY2ZVwiLDgwMDpcIiMxMTVlNTlcIiw5MDA6XCIjMTM0ZTRhXCJ9LGN5YW46ezUwOlwiI2VjZmVmZlwiLDEwMDpcIiNjZmZhZmVcIiwyMDA6XCIjYTVmM2ZjXCIsMzAwOlwiIzY3ZThmOVwiLDQwMDpcIiMyMmQzZWVcIiw1MDA6XCIjMDZiNmQ0XCIsNjAwOlwiIzA4OTFiMlwiLDcwMDpcIiMwZTc0OTBcIiw4MDA6XCIjMTU1ZTc1XCIsOTAwOlwiIzE2NGU2M1wifSxza3k6ezUwOlwiI2YwZjlmZlwiLDEwMDpcIiNlMGYyZmVcIiwyMDA6XCIjYmFlNmZkXCIsMzAwOlwiIzdkZDNmY1wiLDQwMDpcIiMzOGJkZjhcIiw1MDA6XCIjMGVhNWU5XCIsNjAwOlwiIzAyODRjN1wiLDcwMDpcIiMwMzY5YTFcIiw4MDA6XCIjMDc1OTg1XCIsOTAwOlwiIzBjNGE2ZVwifSxibHVlOns1MDpcIiNlZmY2ZmZcIiwxMDA6XCIjZGJlYWZlXCIsMjAwOlwiI2JmZGJmZVwiLDMwMDpcIiM5M2M1ZmRcIiw0MDA6XCIjNjBhNWZhXCIsNTAwOlwiIzNiODJmNlwiLDYwMDpcIiMyNTYzZWJcIiw3MDA6XCIjMWQ0ZWQ4XCIsODAwOlwiIzFlNDBhZlwiLDkwMDpcIiMxZTNhOGFcIn0saW5kaWdvOns1MDpcIiNlZWYyZmZcIiwxMDA6XCIjZTBlN2ZmXCIsMjAwOlwiI2M3ZDJmZVwiLDMwMDpcIiNhNWI0ZmNcIiw0MDA6XCIjODE4Y2Y4XCIsNTAwOlwiIzYzNjZmMVwiLDYwMDpcIiM0ZjQ2ZTVcIiw3MDA6XCIjNDMzOGNhXCIsODAwOlwiIzM3MzBhM1wiLDkwMDpcIiMzMTJlODFcIn0sdmlvbGV0Ons1MDpcIiNmNWYzZmZcIiwxMDA6XCIjZWRlOWZlXCIsMjAwOlwiI2RkZDZmZVwiLDMwMDpcIiNjNGI1ZmRcIiw0MDA6XCIjYTc4YmZhXCIsNTAwOlwiIzhiNWNmNlwiLDYwMDpcIiM3YzNhZWRcIiw3MDA6XCIjNmQyOGQ5XCIsODAwOlwiIzViMjFiNlwiLDkwMDpcIiM0YzFkOTVcIn0scHVycGxlOns1MDpcIiNmYWY1ZmZcIiwxMDA6XCIjZjNlOGZmXCIsMjAwOlwiI2U5ZDVmZlwiLDMwMDpcIiNkOGI0ZmVcIiw0MDA6XCIjYzA4NGZjXCIsNTAwOlwiI2E4NTVmN1wiLDYwMDpcIiM5MzMzZWFcIiw3MDA6XCIjN2UyMmNlXCIsODAwOlwiIzZiMjFhOFwiLDkwMDpcIiM1ODFjODdcIn0sZnVjaHNpYTp7NTA6XCIjZmRmNGZmXCIsMTAwOlwiI2ZhZThmZlwiLDIwMDpcIiNmNWQwZmVcIiwzMDA6XCIjZjBhYmZjXCIsNDAwOlwiI2U4NzlmOVwiLDUwMDpcIiNkOTQ2ZWZcIiw2MDA6XCIjYzAyNmQzXCIsNzAwOlwiI2EyMWNhZlwiLDgwMDpcIiM4NjE5OGZcIiw5MDA6XCIjNzAxYTc1XCJ9LHBpbms6ezUwOlwiI2ZkZjJmOFwiLDEwMDpcIiNmY2U3ZjNcIiwyMDA6XCIjZmJjZmU4XCIsMzAwOlwiI2Y5YThkNFwiLDQwMDpcIiNmNDcyYjZcIiw1MDA6XCIjZWM0ODk5XCIsNjAwOlwiI2RiMjc3N1wiLDcwMDpcIiNiZTE4NWRcIiw4MDA6XCIjOWQxNzRkXCIsOTAwOlwiIzgzMTg0M1wifSxyb3NlOns1MDpcIiNmZmYxZjJcIiwxMDA6XCIjZmZlNGU2XCIsMjAwOlwiI2ZlY2RkM1wiLDMwMDpcIiNmZGE0YWZcIiw0MDA6XCIjZmI3MTg1XCIsNTAwOlwiI2Y0M2Y1ZVwiLDYwMDpcIiNlMTFkNDhcIiw3MDA6XCIjYmUxMjNjXCIsODAwOlwiIzlmMTIzOVwiLDkwMDpcIiM4ODEzMzdcIn0sZ2V0IGxpZ2h0Qmx1ZSgpe3JldHVybiBHdCh7dmVyc2lvbjpcInYyLjJcIixmcm9tOlwibGlnaHRCbHVlXCIsdG86XCJza3lcIn0pLHRoaXMuc2t5fSxnZXQgd2FybUdyYXkoKXtyZXR1cm4gR3Qoe3ZlcnNpb246XCJ2My4wXCIsZnJvbTpcIndhcm1HcmF5XCIsdG86XCJzdG9uZVwifSksdGhpcy5zdG9uZX0sZ2V0IHRydWVHcmF5KCl7cmV0dXJuIEd0KHt2ZXJzaW9uOlwidjMuMFwiLGZyb206XCJ0cnVlR3JheVwiLHRvOlwibmV1dHJhbFwifSksdGhpcy5uZXV0cmFsfSxnZXQgY29vbEdyYXkoKXtyZXR1cm4gR3Qoe3ZlcnNpb246XCJ2My4wXCIsZnJvbTpcImNvb2xHcmF5XCIsdG86XCJncmF5XCJ9KSx0aGlzLmdyYXl9LGdldCBibHVlR3JheSgpe3JldHVybiBHdCh7dmVyc2lvbjpcInYzLjBcIixmcm9tOlwiYmx1ZUdyYXlcIix0bzpcInNsYXRlXCJ9KSx0aGlzLnNsYXRlfX19KTt2YXIgR3U9VChlaT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlaSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZWksXCJkZWZhdWx0c1wiLHtlbnVtZXJhYmxlOiEwLGdldDooKT0+UWZ9KTtmdW5jdGlvbiBRZihlLC4uLnQpe2ZvcihsZXQgaSBvZiB0KXtmb3IobGV0IG8gaW4gaSl7dmFyIG47IShlPT1udWxsfHwobj1lLmhhc093blByb3BlcnR5KT09PW51bGx8fG49PT12b2lkIDApJiZuLmNhbGwoZSxvKXx8KGVbb109aVtvXSl9Zm9yKGxldCBvIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaSkpe3ZhciByOyEoZT09bnVsbHx8KHI9ZS5oYXNPd25Qcm9wZXJ0eSk9PT1udWxsfHxyPT09dm9pZCAwKSYmci5jYWxsKGUsbyl8fChlW29dPWlbb10pfX1yZXR1cm4gZX19KTt2YXIganU9VCh0aT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGksXCJ0b1BhdGhcIix7ZW51bWVyYWJsZTohMCxnZXQ6KCk9PktmfSk7ZnVuY3Rpb24gS2YoZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZTtsZXQgdD1lLnNwbGl0KFwiW1wiKS5sZW5ndGgtMSxuPWUuc3BsaXQoXCJdXCIpLmxlbmd0aC0xO2lmKHQhPT1uKXRocm93IG5ldyBFcnJvcihgUGF0aCBpcyBpbnZhbGlkLiBIYXMgdW5iYWxhbmNlZCBicmFja2V0czogJHtlfWApO3JldHVybiBlLnNwbGl0KC9cXC4oPyFbXlxcW10qXFxdKXxbXFxbXFxdXS9nKS5maWx0ZXIoQm9vbGVhbil9fSk7dmFyIFZ1PVQocmk9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkocmksXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHJpLFwibm9ybWFsaXplQ29uZmlnXCIse2VudW1lcmFibGU6ITAsZ2V0OigpPT5aZn0pO3ZhciBqdD1KZigoUXIoKSxJcihYcikpKTtmdW5jdGlvbiBIdShlKXtpZih0eXBlb2YgV2Vha01hcCE9XCJmdW5jdGlvblwiKXJldHVybiBudWxsO3ZhciB0PW5ldyBXZWFrTWFwLG49bmV3IFdlYWtNYXA7cmV0dXJuKEh1PWZ1bmN0aW9uKHIpe3JldHVybiByP246dH0pKGUpfWZ1bmN0aW9uIEpmKGUsdCl7aWYoIXQmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTtpZihlPT09bnVsbHx8dHlwZW9mIGUhPVwib2JqZWN0XCImJnR5cGVvZiBlIT1cImZ1bmN0aW9uXCIpcmV0dXJue2RlZmF1bHQ6ZX07dmFyIG49SHUodCk7aWYobiYmbi5oYXMoZSkpcmV0dXJuIG4uZ2V0KGUpO3ZhciByPXt9LGk9T2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO2Zvcih2YXIgbyBpbiBlKWlmKG8hPT1cImRlZmF1bHRcIiYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbykpe3ZhciB1PWk/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG8pOm51bGw7dSYmKHUuZ2V0fHx1LnNldCk/T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsbyx1KTpyW29dPWVbb119cmV0dXJuIHIuZGVmYXVsdD1lLG4mJm4uc2V0KGUscikscn1mdW5jdGlvbiBaZihlKXtpZigoKCk9PntpZihlLnB1cmdlfHwhZS5jb250ZW50fHwhQXJyYXkuaXNBcnJheShlLmNvbnRlbnQpJiYhKHR5cGVvZiBlLmNvbnRlbnQ9PVwib2JqZWN0XCImJmUuY29udGVudCE9PW51bGwpKXJldHVybiExO2lmKEFycmF5LmlzQXJyYXkoZS5jb250ZW50KSlyZXR1cm4gZS5jb250ZW50LmV2ZXJ5KHI9PnR5cGVvZiByPT1cInN0cmluZ1wiPyEwOiEodHlwZW9mKHI9PW51bGw/dm9pZCAwOnIucmF3KSE9XCJzdHJpbmdcInx8ciE9bnVsbCYmci5leHRlbnNpb24mJnR5cGVvZihyPT1udWxsP3ZvaWQgMDpyLmV4dGVuc2lvbikhPVwic3RyaW5nXCIpKTtpZih0eXBlb2YgZS5jb250ZW50PT1cIm9iamVjdFwiJiZlLmNvbnRlbnQhPT1udWxsKXtpZihPYmplY3Qua2V5cyhlLmNvbnRlbnQpLnNvbWUocj0+IVtcImZpbGVzXCIsXCJleHRyYWN0XCIsXCJ0cmFuc2Zvcm1cIl0uaW5jbHVkZXMocikpKXJldHVybiExO2lmKEFycmF5LmlzQXJyYXkoZS5jb250ZW50LmZpbGVzKSl7aWYoIWUuY29udGVudC5maWxlcy5ldmVyeShyPT50eXBlb2Ygcj09XCJzdHJpbmdcIj8hMDohKHR5cGVvZihyPT1udWxsP3ZvaWQgMDpyLnJhdykhPVwic3RyaW5nXCJ8fHIhPW51bGwmJnIuZXh0ZW5zaW9uJiZ0eXBlb2Yocj09bnVsbD92b2lkIDA6ci5leHRlbnNpb24pIT1cInN0cmluZ1wiKSkpcmV0dXJuITE7aWYodHlwZW9mIGUuY29udGVudC5leHRyYWN0PT1cIm9iamVjdFwiKXtmb3IobGV0IHIgb2YgT2JqZWN0LnZhbHVlcyhlLmNvbnRlbnQuZXh0cmFjdCkpaWYodHlwZW9mIHIhPVwiZnVuY3Rpb25cIilyZXR1cm4hMX1lbHNlIGlmKCEoZS5jb250ZW50LmV4dHJhY3Q9PT12b2lkIDB8fHR5cGVvZiBlLmNvbnRlbnQuZXh0cmFjdD09XCJmdW5jdGlvblwiKSlyZXR1cm4hMTtpZih0eXBlb2YgZS5jb250ZW50LnRyYW5zZm9ybT09XCJvYmplY3RcIil7Zm9yKGxldCByIG9mIE9iamVjdC52YWx1ZXMoZS5jb250ZW50LnRyYW5zZm9ybSkpaWYodHlwZW9mIHIhPVwiZnVuY3Rpb25cIilyZXR1cm4hMX1lbHNlIGlmKCEoZS5jb250ZW50LnRyYW5zZm9ybT09PXZvaWQgMHx8dHlwZW9mIGUuY29udGVudC50cmFuc2Zvcm09PVwiZnVuY3Rpb25cIikpcmV0dXJuITF9cmV0dXJuITB9cmV0dXJuITF9KSgpfHxqdC5kZWZhdWx0Lndhcm4oXCJwdXJnZS1kZXByZWNhdGlvblwiLFtcIlRoZSBgcHVyZ2VgL2Bjb250ZW50YCBvcHRpb25zIGhhdmUgY2hhbmdlZCBpbiBUYWlsd2luZCBDU1MgdjMuMC5cIixcIlVwZGF0ZSB5b3VyIGNvbmZpZ3VyYXRpb24gZmlsZSB0byBlbGltaW5hdGUgdGhpcyB3YXJuaW5nLlwiLFwiaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy91cGdyYWRlLWd1aWRlI2NvbmZpZ3VyZS1jb250ZW50LXNvdXJjZXNcIl0pLGUuc2FmZWxpc3Q9KCgpPT57dmFyIHI7bGV0e2NvbnRlbnQ6aSxwdXJnZTpvLHNhZmVsaXN0OnV9PWU7cmV0dXJuIEFycmF5LmlzQXJyYXkodSk/dTpBcnJheS5pc0FycmF5KGk9PW51bGw/dm9pZCAwOmkuc2FmZWxpc3QpP2kuc2FmZWxpc3Q6QXJyYXkuaXNBcnJheShvPT1udWxsP3ZvaWQgMDpvLnNhZmVsaXN0KT9vLnNhZmVsaXN0OkFycmF5LmlzQXJyYXkobz09bnVsbHx8KHI9by5vcHRpb25zKT09PW51bGx8fHI9PT12b2lkIDA/dm9pZCAwOnIuc2FmZWxpc3QpP28ub3B0aW9ucy5zYWZlbGlzdDpbXX0pKCksdHlwZW9mIGUucHJlZml4PT1cImZ1bmN0aW9uXCIpanQuZGVmYXVsdC53YXJuKFwicHJlZml4LWZ1bmN0aW9uXCIsW1wiQXMgb2YgVGFpbHdpbmQgQ1NTIHYzLjAsIGBwcmVmaXhgIGNhbm5vdCBiZSBhIGZ1bmN0aW9uLlwiLFwiVXBkYXRlIGBwcmVmaXhgIGluIHlvdXIgY29uZmlndXJhdGlvbiB0byBiZSBhIHN0cmluZyB0byBlbGltaW5hdGUgdGhpcyB3YXJuaW5nLlwiLFwiaHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy91cGdyYWRlLWd1aWRlI3ByZWZpeC1jYW5ub3QtYmUtYS1mdW5jdGlvblwiXSksZS5wcmVmaXg9XCJcIjtlbHNle3ZhciBuO2UucHJlZml4PShuPWUucHJlZml4KSE9PW51bGwmJm4hPT12b2lkIDA/bjpcIlwifWUuY29udGVudD17ZmlsZXM6KCgpPT57bGV0e2NvbnRlbnQ6cixwdXJnZTppfT1lO3JldHVybiBBcnJheS5pc0FycmF5KGkpP2k6QXJyYXkuaXNBcnJheShpPT1udWxsP3ZvaWQgMDppLmNvbnRlbnQpP2kuY29udGVudDpBcnJheS5pc0FycmF5KHIpP3I6QXJyYXkuaXNBcnJheShyPT1udWxsP3ZvaWQgMDpyLmNvbnRlbnQpP3IuY29udGVudDpBcnJheS5pc0FycmF5KHI9PW51bGw/dm9pZCAwOnIuZmlsZXMpP3IuZmlsZXM6W119KSgpLGV4dHJhY3Q6KCgpPT57bGV0IHI9KCgpPT57dmFyIHUscyxhLGwsZixjLHAsaCxkLG07cmV0dXJuISgodT1lLnB1cmdlKT09PW51bGx8fHU9PT12b2lkIDApJiZ1LmV4dHJhY3Q/ZS5wdXJnZS5leHRyYWN0OiEoKHM9ZS5jb250ZW50KT09PW51bGx8fHM9PT12b2lkIDApJiZzLmV4dHJhY3Q/ZS5jb250ZW50LmV4dHJhY3Q6ISgoYT1lLnB1cmdlKT09PW51bGx8fGE9PT12b2lkIDB8fChsPWEuZXh0cmFjdCk9PT1udWxsfHxsPT09dm9pZCAwKSYmbC5ERUZBVUxUP2UucHVyZ2UuZXh0cmFjdC5ERUZBVUxUOiEoKGY9ZS5jb250ZW50KT09PW51bGx8fGY9PT12b2lkIDB8fChjPWYuZXh0cmFjdCk9PT1udWxsfHxjPT09dm9pZCAwKSYmYy5ERUZBVUxUP2UuY29udGVudC5leHRyYWN0LkRFRkFVTFQ6ISgocD1lLnB1cmdlKT09PW51bGx8fHA9PT12b2lkIDB8fChoPXAub3B0aW9ucyk9PT1udWxsfHxoPT09dm9pZCAwKSYmaC5leHRyYWN0b3JzP2UucHVyZ2Uub3B0aW9ucy5leHRyYWN0b3JzOiEoKGQ9ZS5jb250ZW50KT09PW51bGx8fGQ9PT12b2lkIDB8fChtPWQub3B0aW9ucyk9PT1udWxsfHxtPT09dm9pZCAwKSYmbS5leHRyYWN0b3JzP2UuY29udGVudC5vcHRpb25zLmV4dHJhY3RvcnM6e319KSgpLGk9e30sbz0oKCk9Pnt2YXIgdSxzLGEsbDtpZighKCh1PWUucHVyZ2UpPT09bnVsbHx8dT09PXZvaWQgMHx8KHM9dS5vcHRpb25zKT09PW51bGx8fHM9PT12b2lkIDApJiZzLmRlZmF1bHRFeHRyYWN0b3IpcmV0dXJuIGUucHVyZ2Uub3B0aW9ucy5kZWZhdWx0RXh0cmFjdG9yO2lmKCEoKGE9ZS5jb250ZW50KT09PW51bGx8fGE9PT12b2lkIDB8fChsPWEub3B0aW9ucyk9PT1udWxsfHxsPT09dm9pZCAwKSYmbC5kZWZhdWx0RXh0cmFjdG9yKXJldHVybiBlLmNvbnRlbnQub3B0aW9ucy5kZWZhdWx0RXh0cmFjdG9yfSkoKTtpZihvIT09dm9pZCAwJiYoaS5ERUZBVUxUPW8pLHR5cGVvZiByPT1cImZ1bmN0aW9uXCIpaS5ERUZBVUxUPXI7ZWxzZSBpZihBcnJheS5pc0FycmF5KHIpKWZvcihsZXR7ZXh0ZW5zaW9uczp1LGV4dHJhY3RvcjpzfW9mIHI/P1tdKWZvcihsZXQgYSBvZiB1KWlbYV09cztlbHNlIHR5cGVvZiByPT1cIm9iamVjdFwiJiZyIT09bnVsbCYmT2JqZWN0LmFzc2lnbihpLHIpO3JldHVybiBpfSkoKSx0cmFuc2Zvcm06KCgpPT57bGV0IHI9KCgpPT57dmFyIG8sdSxzLGEsbCxmO3JldHVybiEoKG89ZS5wdXJnZSk9PT1udWxsfHxvPT09dm9pZCAwKSYmby50cmFuc2Zvcm0/ZS5wdXJnZS50cmFuc2Zvcm06ISgodT1lLmNvbnRlbnQpPT09bnVsbHx8dT09PXZvaWQgMCkmJnUudHJhbnNmb3JtP2UuY29udGVudC50cmFuc2Zvcm06ISgocz1lLnB1cmdlKT09PW51bGx8fHM9PT12b2lkIDB8fChhPXMudHJhbnNmb3JtKT09PW51bGx8fGE9PT12b2lkIDApJiZhLkRFRkFVTFQ/ZS5wdXJnZS50cmFuc2Zvcm0uREVGQVVMVDohKChsPWUuY29udGVudCk9PT1udWxsfHxsPT09dm9pZCAwfHwoZj1sLnRyYW5zZm9ybSk9PT1udWxsfHxmPT09dm9pZCAwKSYmZi5ERUZBVUxUP2UuY29udGVudC50cmFuc2Zvcm0uREVGQVVMVDp7fX0pKCksaT17fTtyZXR1cm4gdHlwZW9mIHI9PVwiZnVuY3Rpb25cIiYmKGkuREVGQVVMVD1yKSx0eXBlb2Ygcj09XCJvYmplY3RcIiYmciE9PW51bGwmJk9iamVjdC5hc3NpZ24oaSxyKSxpfSkoKX07Zm9yKGxldCByIG9mIGUuY29udGVudC5maWxlcylpZih0eXBlb2Ygcj09XCJzdHJpbmdcIiYmL3soW14sXSo/KX0vZy50ZXN0KHIpKXtqdC5kZWZhdWx0Lndhcm4oXCJpbnZhbGlkLWdsb2ItYnJhY2VzXCIsW2BUaGUgZ2xvYiBwYXR0ZXJuICR7KDAsanQuZGltKShyKX0gaW4geW91ciBUYWlsd2luZCBDU1MgY29uZmlndXJhdGlvbiBpcyBpbnZhbGlkLmAsYFVwZGF0ZSBpdCB0byAkeygwLGp0LmRpbSkoci5yZXBsYWNlKC97KFteLF0qPyl9L2csXCIkMVwiKSl9IHRvIHNpbGVuY2UgdGhpcyB3YXJuaW5nLmBdKTticmVha31yZXR1cm4gZX19KTt2YXIgWXU9VChuaT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShuaSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkobmksXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsZ2V0OigpPT5lY30pO2Z1bmN0aW9uIGVjKGUpe2lmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSE9PVwiW29iamVjdCBPYmplY3RdXCIpcmV0dXJuITE7bGV0IHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpO3JldHVybiB0PT09bnVsbHx8dD09PU9iamVjdC5wcm90b3R5cGV9fSk7dmFyIFh1PVQob2k9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkob2ksXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9pLFwiY2xvbmVEZWVwXCIse2VudW1lcmFibGU6ITAsZ2V0OigpPT5paX0pO2Z1bmN0aW9uIGlpKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2UubWFwKHQ9PmlpKHQpKTp0eXBlb2YgZT09XCJvYmplY3RcIiYmZSE9PW51bGw/T2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGUpLm1hcCgoW3Qsbl0pPT5bdCxpaShuKV0pKTplfX0pO3ZhciB1aT1UKChLcixRdSk9PntcInVzZSBzdHJpY3RcIjtLci5fX2VzTW9kdWxlPSEwO0tyLmRlZmF1bHQ9bmM7ZnVuY3Rpb24gdGMoZSl7Zm9yKHZhciB0PWUudG9Mb3dlckNhc2UoKSxuPVwiXCIscj0hMSxpPTA7aTw2JiZ0W2ldIT09dm9pZCAwO2krKyl7dmFyIG89dC5jaGFyQ29kZUF0KGkpLHU9bz49OTcmJm88PTEwMnx8bz49NDgmJm88PTU3O2lmKHI9bz09PTMyLCF1KWJyZWFrO24rPXRbaV19aWYobi5sZW5ndGghPT0wKXt2YXIgcz1wYXJzZUludChuLDE2KSxhPXM+PTU1Mjk2JiZzPD01NzM0MztyZXR1cm4gYXx8cz09PTB8fHM+MTExNDExMT9bXCJcXHVGRkZEXCIsbi5sZW5ndGgrKHI/MTowKV06W1N0cmluZy5mcm9tQ29kZVBvaW50KHMpLG4ubGVuZ3RoKyhyPzE6MCldfX12YXIgcmM9L1xcXFwvO2Z1bmN0aW9uIG5jKGUpe3ZhciB0PXJjLnRlc3QoZSk7aWYoIXQpcmV0dXJuIGU7Zm9yKHZhciBuPVwiXCIscj0wO3I8ZS5sZW5ndGg7cisrKXtpZihlW3JdPT09XCJcXFxcXCIpe3ZhciBpPXRjKGUuc2xpY2UocisxLHIrNykpO2lmKGkhPT12b2lkIDApe24rPWlbMF0scis9aVsxXTtjb250aW51ZX1pZihlW3IrMV09PT1cIlxcXFxcIil7bis9XCJcXFxcXCIscisrO2NvbnRpbnVlfWUubGVuZ3RoPT09cisxJiYobis9ZVtyXSk7Y29udGludWV9bis9ZVtyXX1yZXR1cm4gbn1RdS5leHBvcnRzPUtyLmRlZmF1bHR9KTt2YXIgSnU9VCgoSnIsS3UpPT57XCJ1c2Ugc3RyaWN0XCI7SnIuX19lc01vZHVsZT0hMDtKci5kZWZhdWx0PWljO2Z1bmN0aW9uIGljKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtmb3IoO24ubGVuZ3RoPjA7KXt2YXIgaT1uLnNoaWZ0KCk7aWYoIWVbaV0pcmV0dXJuO2U9ZVtpXX1yZXR1cm4gZX1LdS5leHBvcnRzPUpyLmRlZmF1bHR9KTt2YXIgZXM9VCgoWnIsWnUpPT57XCJ1c2Ugc3RyaWN0XCI7WnIuX19lc01vZHVsZT0hMDtaci5kZWZhdWx0PW9jO2Z1bmN0aW9uIG9jKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtmb3IoO24ubGVuZ3RoPjA7KXt2YXIgaT1uLnNoaWZ0KCk7ZVtpXXx8KGVbaV09e30pLGU9ZVtpXX19WnUuZXhwb3J0cz1aci5kZWZhdWx0fSk7dmFyIHJzPVQoKGVuLHRzKT0+e1widXNlIHN0cmljdFwiO2VuLl9fZXNNb2R1bGU9ITA7ZW4uZGVmYXVsdD11YztmdW5jdGlvbiB1YyhlKXtmb3IodmFyIHQ9XCJcIixuPWUuaW5kZXhPZihcIi8qXCIpLHI9MDtuPj0wOyl7dD10K2Uuc2xpY2UocixuKTt2YXIgaT1lLmluZGV4T2YoXCIqL1wiLG4rMik7aWYoaTwwKXJldHVybiB0O3I9aSsyLG49ZS5pbmRleE9mKFwiLypcIixyKX1yZXR1cm4gdD10K2Uuc2xpY2UociksdH10cy5leHBvcnRzPWVuLmRlZmF1bHR9KTt2YXIgSHQ9VChMZT0+e1widXNlIHN0cmljdFwiO0xlLl9fZXNNb2R1bGU9ITA7TGUuc3RyaXBDb21tZW50cz1MZS5lbnN1cmVPYmplY3Q9TGUuZ2V0UHJvcD1MZS51bmVzYz12b2lkIDA7dmFyIHNjPXRuKHVpKCkpO0xlLnVuZXNjPXNjLmRlZmF1bHQ7dmFyIGFjPXRuKEp1KCkpO0xlLmdldFByb3A9YWMuZGVmYXVsdDt2YXIgbGM9dG4oZXMoKSk7TGUuZW5zdXJlT2JqZWN0PWxjLmRlZmF1bHQ7dmFyIGZjPXRuKHJzKCkpO0xlLnN0cmlwQ29tbWVudHM9ZmMuZGVmYXVsdDtmdW5jdGlvbiB0bihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19fSk7dmFyIFVlPVQoKFZ0LG9zKT0+e1widXNlIHN0cmljdFwiO1Z0Ll9fZXNNb2R1bGU9ITA7VnQuZGVmYXVsdD12b2lkIDA7dmFyIG5zPUh0KCk7ZnVuY3Rpb24gaXMoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIGNjKGUsdCxuKXtyZXR1cm4gdCYmaXMoZS5wcm90b3R5cGUsdCksbiYmaXMoZSxuKSxlfXZhciBkYz1mdW5jdGlvbiBlKHQsbil7aWYodHlwZW9mIHQhPVwib2JqZWN0XCJ8fHQ9PT1udWxsKXJldHVybiB0O3ZhciByPW5ldyB0LmNvbnN0cnVjdG9yO2Zvcih2YXIgaSBpbiB0KWlmKHQuaGFzT3duUHJvcGVydHkoaSkpe3ZhciBvPXRbaV0sdT10eXBlb2YgbztpPT09XCJwYXJlbnRcIiYmdT09PVwib2JqZWN0XCI/biYmKHJbaV09bik6byBpbnN0YW5jZW9mIEFycmF5P3JbaV09by5tYXAoZnVuY3Rpb24ocyl7cmV0dXJuIGUocyxyKX0pOnJbaV09ZShvLHIpfXJldHVybiByfSxwYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUobil7bj09PXZvaWQgMCYmKG49e30pLE9iamVjdC5hc3NpZ24odGhpcyxuKSx0aGlzLnNwYWNlcz10aGlzLnNwYWNlc3x8e30sdGhpcy5zcGFjZXMuYmVmb3JlPXRoaXMuc3BhY2VzLmJlZm9yZXx8XCJcIix0aGlzLnNwYWNlcy5hZnRlcj10aGlzLnNwYWNlcy5hZnRlcnx8XCJcIn12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5yZW1vdmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpLHRoaXMucGFyZW50PXZvaWQgMCx0aGlzfSx0LnJlcGxhY2VXaXRoPWZ1bmN0aW9uKCl7aWYodGhpcy5wYXJlbnQpe2Zvcih2YXIgciBpbiBhcmd1bWVudHMpdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsYXJndW1lbnRzW3JdKTt0aGlzLnJlbW92ZSgpfXJldHVybiB0aGlzfSx0Lm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnQuYXQodGhpcy5wYXJlbnQuaW5kZXgodGhpcykrMSl9LHQucHJldj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcmVudC5hdCh0aGlzLnBhcmVudC5pbmRleCh0aGlzKS0xKX0sdC5jbG9uZT1mdW5jdGlvbihyKXtyPT09dm9pZCAwJiYocj17fSk7dmFyIGk9ZGModGhpcyk7Zm9yKHZhciBvIGluIHIpaVtvXT1yW29dO3JldHVybiBpfSx0LmFwcGVuZFRvUHJvcGVydHlBbmRFc2NhcGU9ZnVuY3Rpb24ocixpLG8pe3RoaXMucmF3c3x8KHRoaXMucmF3cz17fSk7dmFyIHU9dGhpc1tyXSxzPXRoaXMucmF3c1tyXTt0aGlzW3JdPXUraSxzfHxvIT09aT90aGlzLnJhd3Nbcl09KHN8fHUpK286ZGVsZXRlIHRoaXMucmF3c1tyXX0sdC5zZXRQcm9wZXJ0eUFuZEVzY2FwZT1mdW5jdGlvbihyLGksbyl7dGhpcy5yYXdzfHwodGhpcy5yYXdzPXt9KSx0aGlzW3JdPWksdGhpcy5yYXdzW3JdPW99LHQuc2V0UHJvcGVydHlXaXRob3V0RXNjYXBlPWZ1bmN0aW9uKHIsaSl7dGhpc1tyXT1pLHRoaXMucmF3cyYmZGVsZXRlIHRoaXMucmF3c1tyXX0sdC5pc0F0UG9zaXRpb249ZnVuY3Rpb24ocixpKXtpZih0aGlzLnNvdXJjZSYmdGhpcy5zb3VyY2Uuc3RhcnQmJnRoaXMuc291cmNlLmVuZClyZXR1cm4hKHRoaXMuc291cmNlLnN0YXJ0LmxpbmU+cnx8dGhpcy5zb3VyY2UuZW5kLmxpbmU8cnx8dGhpcy5zb3VyY2Uuc3RhcnQubGluZT09PXImJnRoaXMuc291cmNlLnN0YXJ0LmNvbHVtbj5pfHx0aGlzLnNvdXJjZS5lbmQubGluZT09PXImJnRoaXMuc291cmNlLmVuZC5jb2x1bW48aSl9LHQuc3RyaW5naWZ5UHJvcGVydHk9ZnVuY3Rpb24ocil7cmV0dXJuIHRoaXMucmF3cyYmdGhpcy5yYXdzW3JdfHx0aGlzW3JdfSx0LnZhbHVlVG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gU3RyaW5nKHRoaXMuc3RyaW5naWZ5UHJvcGVydHkoXCJ2YWx1ZVwiKSl9LHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5bdGhpcy5yYXdTcGFjZUJlZm9yZSx0aGlzLnZhbHVlVG9TdHJpbmcoKSx0aGlzLnJhd1NwYWNlQWZ0ZXJdLmpvaW4oXCJcIil9LGNjKGUsW3trZXk6XCJyYXdTcGFjZUJlZm9yZVwiLGdldDpmdW5jdGlvbigpe3ZhciByPXRoaXMucmF3cyYmdGhpcy5yYXdzLnNwYWNlcyYmdGhpcy5yYXdzLnNwYWNlcy5iZWZvcmU7cmV0dXJuIHI9PT12b2lkIDAmJihyPXRoaXMuc3BhY2VzJiZ0aGlzLnNwYWNlcy5iZWZvcmUpLHJ8fFwiXCJ9LHNldDpmdW5jdGlvbihyKXsoMCxucy5lbnN1cmVPYmplY3QpKHRoaXMsXCJyYXdzXCIsXCJzcGFjZXNcIiksdGhpcy5yYXdzLnNwYWNlcy5iZWZvcmU9cn19LHtrZXk6XCJyYXdTcGFjZUFmdGVyXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHI9dGhpcy5yYXdzJiZ0aGlzLnJhd3Muc3BhY2VzJiZ0aGlzLnJhd3Muc3BhY2VzLmFmdGVyO3JldHVybiByPT09dm9pZCAwJiYocj10aGlzLnNwYWNlcy5hZnRlcikscnx8XCJcIn0sc2V0OmZ1bmN0aW9uKHIpeygwLG5zLmVuc3VyZU9iamVjdCkodGhpcyxcInJhd3NcIixcInNwYWNlc1wiKSx0aGlzLnJhd3Muc3BhY2VzLmFmdGVyPXJ9fV0pLGV9KCk7VnQuZGVmYXVsdD1wYztvcy5leHBvcnRzPVZ0LmRlZmF1bHR9KTt2YXIgcGU9VChLPT57XCJ1c2Ugc3RyaWN0XCI7Sy5fX2VzTW9kdWxlPSEwO0suVU5JVkVSU0FMPUsuQVRUUklCVVRFPUsuQ0xBU1M9Sy5DT01CSU5BVE9SPUsuQ09NTUVOVD1LLklEPUsuTkVTVElORz1LLlBTRVVETz1LLlJPT1Q9Sy5TRUxFQ1RPUj1LLlNUUklORz1LLlRBRz12b2lkIDA7dmFyIGhjPVwidGFnXCI7Sy5UQUc9aGM7dmFyIG1jPVwic3RyaW5nXCI7Sy5TVFJJTkc9bWM7dmFyIERjPVwic2VsZWN0b3JcIjtLLlNFTEVDVE9SPURjO3ZhciBnYz1cInJvb3RcIjtLLlJPT1Q9Z2M7dmFyIGJjPVwicHNldWRvXCI7Sy5QU0VVRE89YmM7dmFyIHZjPVwibmVzdGluZ1wiO0suTkVTVElORz12Yzt2YXIgeWM9XCJpZFwiO0suSUQ9eWM7dmFyIHhjPVwiY29tbWVudFwiO0suQ09NTUVOVD14Yzt2YXIgRmM9XCJjb21iaW5hdG9yXCI7Sy5DT01CSU5BVE9SPUZjO3ZhciB3Yz1cImNsYXNzXCI7Sy5DTEFTUz13Yzt2YXIgRWM9XCJhdHRyaWJ1dGVcIjtLLkFUVFJJQlVURT1FYzt2YXIgQ2M9XCJ1bml2ZXJzYWxcIjtLLlVOSVZFUlNBTD1DY30pO3ZhciBybj1UKChZdCxscyk9PntcInVzZSBzdHJpY3RcIjtZdC5fX2VzTW9kdWxlPSEwO1l0LmRlZmF1bHQ9dm9pZCAwO3ZhciBfYz1rYyhVZSgpKSx6ZT1TYyhwZSgpKTtmdW5jdGlvbiBhcygpe2lmKHR5cGVvZiBXZWFrTWFwIT1cImZ1bmN0aW9uXCIpcmV0dXJuIG51bGw7dmFyIGU9bmV3IFdlYWtNYXA7cmV0dXJuIGFzPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LGV9ZnVuY3Rpb24gU2MoZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO2lmKGU9PT1udWxsfHx0eXBlb2YgZSE9XCJvYmplY3RcIiYmdHlwZW9mIGUhPVwiZnVuY3Rpb25cIilyZXR1cm57ZGVmYXVsdDplfTt2YXIgdD1hcygpO2lmKHQmJnQuaGFzKGUpKXJldHVybiB0LmdldChlKTt2YXIgbj17fSxyPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtmb3IodmFyIGkgaW4gZSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxpKSl7dmFyIG89cj9PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsaSk6bnVsbDtvJiYoby5nZXR8fG8uc2V0KT9PYmplY3QuZGVmaW5lUHJvcGVydHkobixpLG8pOm5baV09ZVtpXX1yZXR1cm4gbi5kZWZhdWx0PWUsdCYmdC5zZXQoZSxuKSxufWZ1bmN0aW9uIGtjKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBUYyhlLHQpe3ZhciBuO2lmKHR5cGVvZiBTeW1ib2w+XCJ1XCJ8fGVbU3ltYm9sLml0ZXJhdG9yXT09bnVsbCl7aWYoQXJyYXkuaXNBcnJheShlKXx8KG49QWMoZSkpfHx0JiZlJiZ0eXBlb2YgZS5sZW5ndGg9PVwibnVtYmVyXCIpe24mJihlPW4pO3ZhciByPTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHI+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW3IrK119fX10aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuYCl9cmV0dXJuIG49ZVtTeW1ib2wuaXRlcmF0b3JdKCksbi5uZXh0LmJpbmQobil9ZnVuY3Rpb24gQWMoZSx0KXtpZihlKXtpZih0eXBlb2YgZT09XCJzdHJpbmdcIilyZXR1cm4gdXMoZSx0KTt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7aWYobj09PVwiT2JqZWN0XCImJmUuY29uc3RydWN0b3ImJihuPWUuY29uc3RydWN0b3IubmFtZSksbj09PVwiTWFwXCJ8fG49PT1cIlNldFwiKXJldHVybiBBcnJheS5mcm9tKGUpO2lmKG49PT1cIkFyZ3VtZW50c1wifHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSlyZXR1cm4gdXMoZSx0KX19ZnVuY3Rpb24gdXMoZSx0KXsodD09bnVsbHx8dD5lLmxlbmd0aCkmJih0PWUubGVuZ3RoKTtmb3IodmFyIG49MCxyPW5ldyBBcnJheSh0KTtuPHQ7bisrKXJbbl09ZVtuXTtyZXR1cm4gcn1mdW5jdGlvbiBzcyhlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19ZnVuY3Rpb24gT2MoZSx0LG4pe3JldHVybiB0JiZzcyhlLnByb3RvdHlwZSx0KSxuJiZzcyhlLG4pLGV9ZnVuY3Rpb24gUGMoZSx0KXtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLHNpKGUsdCl9ZnVuY3Rpb24gc2koZSx0KXtyZXR1cm4gc2k9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihyLGkpe3JldHVybiByLl9fcHJvdG9fXz1pLHJ9LHNpKGUsdCl9dmFyIEJjPWZ1bmN0aW9uKGUpe1BjKHQsZSk7ZnVuY3Rpb24gdChyKXt2YXIgaTtyZXR1cm4gaT1lLmNhbGwodGhpcyxyKXx8dGhpcyxpLm5vZGVzfHwoaS5ub2Rlcz1bXSksaX12YXIgbj10LnByb3RvdHlwZTtyZXR1cm4gbi5hcHBlbmQ9ZnVuY3Rpb24oaSl7cmV0dXJuIGkucGFyZW50PXRoaXMsdGhpcy5ub2Rlcy5wdXNoKGkpLHRoaXN9LG4ucHJlcGVuZD1mdW5jdGlvbihpKXtyZXR1cm4gaS5wYXJlbnQ9dGhpcyx0aGlzLm5vZGVzLnVuc2hpZnQoaSksdGhpc30sbi5hdD1mdW5jdGlvbihpKXtyZXR1cm4gdGhpcy5ub2Rlc1tpXX0sbi5pbmRleD1mdW5jdGlvbihpKXtyZXR1cm4gdHlwZW9mIGk9PVwibnVtYmVyXCI/aTp0aGlzLm5vZGVzLmluZGV4T2YoaSl9LG4ucmVtb3ZlQ2hpbGQ9ZnVuY3Rpb24oaSl7aT10aGlzLmluZGV4KGkpLHRoaXMuYXQoaSkucGFyZW50PXZvaWQgMCx0aGlzLm5vZGVzLnNwbGljZShpLDEpO3ZhciBvO2Zvcih2YXIgdSBpbiB0aGlzLmluZGV4ZXMpbz10aGlzLmluZGV4ZXNbdV0sbz49aSYmKHRoaXMuaW5kZXhlc1t1XT1vLTEpO3JldHVybiB0aGlzfSxuLnJlbW92ZUFsbD1mdW5jdGlvbigpe2Zvcih2YXIgaT1UYyh0aGlzLm5vZGVzKSxvOyEobz1pKCkpLmRvbmU7KXt2YXIgdT1vLnZhbHVlO3UucGFyZW50PXZvaWQgMH1yZXR1cm4gdGhpcy5ub2Rlcz1bXSx0aGlzfSxuLmVtcHR5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVtb3ZlQWxsKCl9LG4uaW5zZXJ0QWZ0ZXI9ZnVuY3Rpb24oaSxvKXtvLnBhcmVudD10aGlzO3ZhciB1PXRoaXMuaW5kZXgoaSk7dGhpcy5ub2Rlcy5zcGxpY2UodSsxLDAsbyksby5wYXJlbnQ9dGhpczt2YXIgcztmb3IodmFyIGEgaW4gdGhpcy5pbmRleGVzKXM9dGhpcy5pbmRleGVzW2FdLHU8PXMmJih0aGlzLmluZGV4ZXNbYV09cysxKTtyZXR1cm4gdGhpc30sbi5pbnNlcnRCZWZvcmU9ZnVuY3Rpb24oaSxvKXtvLnBhcmVudD10aGlzO3ZhciB1PXRoaXMuaW5kZXgoaSk7dGhpcy5ub2Rlcy5zcGxpY2UodSwwLG8pLG8ucGFyZW50PXRoaXM7dmFyIHM7Zm9yKHZhciBhIGluIHRoaXMuaW5kZXhlcylzPXRoaXMuaW5kZXhlc1thXSxzPD11JiYodGhpcy5pbmRleGVzW2FdPXMrMSk7cmV0dXJuIHRoaXN9LG4uX2ZpbmRDaGlsZEF0UG9zaXRpb249ZnVuY3Rpb24oaSxvKXt2YXIgdT12b2lkIDA7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihzKXtpZihzLmF0UG9zaXRpb24pe3ZhciBhPXMuYXRQb3NpdGlvbihpLG8pO2lmKGEpcmV0dXJuIHU9YSwhMX1lbHNlIGlmKHMuaXNBdFBvc2l0aW9uKGksbykpcmV0dXJuIHU9cywhMX0pLHV9LG4uYXRQb3NpdGlvbj1mdW5jdGlvbihpLG8pe2lmKHRoaXMuaXNBdFBvc2l0aW9uKGksbykpcmV0dXJuIHRoaXMuX2ZpbmRDaGlsZEF0UG9zaXRpb24oaSxvKXx8dGhpc30sbi5faW5mZXJFbmRQb3NpdGlvbj1mdW5jdGlvbigpe3RoaXMubGFzdCYmdGhpcy5sYXN0LnNvdXJjZSYmdGhpcy5sYXN0LnNvdXJjZS5lbmQmJih0aGlzLnNvdXJjZT10aGlzLnNvdXJjZXx8e30sdGhpcy5zb3VyY2UuZW5kPXRoaXMuc291cmNlLmVuZHx8e30sT2JqZWN0LmFzc2lnbih0aGlzLnNvdXJjZS5lbmQsdGhpcy5sYXN0LnNvdXJjZS5lbmQpKX0sbi5lYWNoPWZ1bmN0aW9uKGkpe3RoaXMubGFzdEVhY2h8fCh0aGlzLmxhc3RFYWNoPTApLHRoaXMuaW5kZXhlc3x8KHRoaXMuaW5kZXhlcz17fSksdGhpcy5sYXN0RWFjaCsrO3ZhciBvPXRoaXMubGFzdEVhY2g7aWYodGhpcy5pbmRleGVzW29dPTAsISF0aGlzLmxlbmd0aCl7Zm9yKHZhciB1LHM7dGhpcy5pbmRleGVzW29dPHRoaXMubGVuZ3RoJiYodT10aGlzLmluZGV4ZXNbb10scz1pKHRoaXMuYXQodSksdSkscyE9PSExKTspdGhpcy5pbmRleGVzW29dKz0xO2lmKGRlbGV0ZSB0aGlzLmluZGV4ZXNbb10scz09PSExKXJldHVybiExfX0sbi53YWxrPWZ1bmN0aW9uKGkpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24obyx1KXt2YXIgcz1pKG8sdSk7aWYocyE9PSExJiZvLmxlbmd0aCYmKHM9by53YWxrKGkpKSxzPT09ITEpcmV0dXJuITF9KX0sbi53YWxrQXR0cmlidXRlcz1mdW5jdGlvbihpKXt2YXIgbz10aGlzO3JldHVybiB0aGlzLndhbGsoZnVuY3Rpb24odSl7aWYodS50eXBlPT09emUuQVRUUklCVVRFKXJldHVybiBpLmNhbGwobyx1KX0pfSxuLndhbGtDbGFzc2VzPWZ1bmN0aW9uKGkpe3ZhciBvPXRoaXM7cmV0dXJuIHRoaXMud2FsayhmdW5jdGlvbih1KXtpZih1LnR5cGU9PT16ZS5DTEFTUylyZXR1cm4gaS5jYWxsKG8sdSl9KX0sbi53YWxrQ29tYmluYXRvcnM9ZnVuY3Rpb24oaSl7dmFyIG89dGhpcztyZXR1cm4gdGhpcy53YWxrKGZ1bmN0aW9uKHUpe2lmKHUudHlwZT09PXplLkNPTUJJTkFUT1IpcmV0dXJuIGkuY2FsbChvLHUpfSl9LG4ud2Fsa0NvbW1lbnRzPWZ1bmN0aW9uKGkpe3ZhciBvPXRoaXM7cmV0dXJuIHRoaXMud2FsayhmdW5jdGlvbih1KXtpZih1LnR5cGU9PT16ZS5DT01NRU5UKXJldHVybiBpLmNhbGwobyx1KX0pfSxuLndhbGtJZHM9ZnVuY3Rpb24oaSl7dmFyIG89dGhpcztyZXR1cm4gdGhpcy53YWxrKGZ1bmN0aW9uKHUpe2lmKHUudHlwZT09PXplLklEKXJldHVybiBpLmNhbGwobyx1KX0pfSxuLndhbGtOZXN0aW5nPWZ1bmN0aW9uKGkpe3ZhciBvPXRoaXM7cmV0dXJuIHRoaXMud2FsayhmdW5jdGlvbih1KXtpZih1LnR5cGU9PT16ZS5ORVNUSU5HKXJldHVybiBpLmNhbGwobyx1KX0pfSxuLndhbGtQc2V1ZG9zPWZ1bmN0aW9uKGkpe3ZhciBvPXRoaXM7cmV0dXJuIHRoaXMud2FsayhmdW5jdGlvbih1KXtpZih1LnR5cGU9PT16ZS5QU0VVRE8pcmV0dXJuIGkuY2FsbChvLHUpfSl9LG4ud2Fsa1RhZ3M9ZnVuY3Rpb24oaSl7dmFyIG89dGhpcztyZXR1cm4gdGhpcy53YWxrKGZ1bmN0aW9uKHUpe2lmKHUudHlwZT09PXplLlRBRylyZXR1cm4gaS5jYWxsKG8sdSl9KX0sbi53YWxrVW5pdmVyc2Fscz1mdW5jdGlvbihpKXt2YXIgbz10aGlzO3JldHVybiB0aGlzLndhbGsoZnVuY3Rpb24odSl7aWYodS50eXBlPT09emUuVU5JVkVSU0FMKXJldHVybiBpLmNhbGwobyx1KX0pfSxuLnNwbGl0PWZ1bmN0aW9uKGkpe3ZhciBvPXRoaXMsdT1bXTtyZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24ocyxhLGwpe3ZhciBmPWkuY2FsbChvLGEpO3JldHVybiB1LnB1c2goYSksZj8ocy5wdXNoKHUpLHU9W10pOmw9PT1vLmxlbmd0aC0xJiZzLnB1c2godSksc30sW10pfSxuLm1hcD1mdW5jdGlvbihpKXtyZXR1cm4gdGhpcy5ub2Rlcy5tYXAoaSl9LG4ucmVkdWNlPWZ1bmN0aW9uKGksbyl7cmV0dXJuIHRoaXMubm9kZXMucmVkdWNlKGksbyl9LG4uZXZlcnk9ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXMubm9kZXMuZXZlcnkoaSl9LG4uc29tZT1mdW5jdGlvbihpKXtyZXR1cm4gdGhpcy5ub2Rlcy5zb21lKGkpfSxuLmZpbHRlcj1mdW5jdGlvbihpKXtyZXR1cm4gdGhpcy5ub2Rlcy5maWx0ZXIoaSl9LG4uc29ydD1mdW5jdGlvbihpKXtyZXR1cm4gdGhpcy5ub2Rlcy5zb3J0KGkpfSxuLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKFN0cmluZykuam9pbihcIlwiKX0sT2ModCxbe2tleTpcImZpcnN0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXQoMCl9fSx7a2V5OlwibGFzdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmF0KHRoaXMubGVuZ3RoLTEpfX0se2tleTpcImxlbmd0aFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVzLmxlbmd0aH19XSksdH0oX2MuZGVmYXVsdCk7WXQuZGVmYXVsdD1CYztscy5leHBvcnRzPVl0LmRlZmF1bHR9KTt2YXIgbGk9VCgoWHQsY3MpPT57XCJ1c2Ugc3RyaWN0XCI7WHQuX19lc01vZHVsZT0hMDtYdC5kZWZhdWx0PXZvaWQgMDt2YXIgSWM9TGMocm4oKSksUmM9cGUoKTtmdW5jdGlvbiBMYyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gZnMoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIE1jKGUsdCxuKXtyZXR1cm4gdCYmZnMoZS5wcm90b3R5cGUsdCksbiYmZnMoZSxuKSxlfWZ1bmN0aW9uIE5jKGUsdCl7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxhaShlLHQpfWZ1bmN0aW9uIGFpKGUsdCl7cmV0dXJuIGFpPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24ocixpKXtyZXR1cm4gci5fX3Byb3RvX189aSxyfSxhaShlLHQpfXZhciAkYz1mdW5jdGlvbihlKXtOYyh0LGUpO2Z1bmN0aW9uIHQocil7dmFyIGk7cmV0dXJuIGk9ZS5jYWxsKHRoaXMscil8fHRoaXMsaS50eXBlPVJjLlJPT1QsaX12YXIgbj10LnByb3RvdHlwZTtyZXR1cm4gbi50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBpPXRoaXMucmVkdWNlKGZ1bmN0aW9uKG8sdSl7cmV0dXJuIG8ucHVzaChTdHJpbmcodSkpLG99LFtdKS5qb2luKFwiLFwiKTtyZXR1cm4gdGhpcy50cmFpbGluZ0NvbW1hP2krXCIsXCI6aX0sbi5lcnJvcj1mdW5jdGlvbihpLG8pe3JldHVybiB0aGlzLl9lcnJvcj90aGlzLl9lcnJvcihpLG8pOm5ldyBFcnJvcihpKX0sTWModCxbe2tleTpcImVycm9yR2VuZXJhdG9yXCIsc2V0OmZ1bmN0aW9uKGkpe3RoaXMuX2Vycm9yPWl9fV0pLHR9KEljLmRlZmF1bHQpO1h0LmRlZmF1bHQ9JGM7Y3MuZXhwb3J0cz1YdC5kZWZhdWx0fSk7dmFyIGNpPVQoKFF0LGRzKT0+e1widXNlIHN0cmljdFwiO1F0Ll9fZXNNb2R1bGU9ITA7UXQuZGVmYXVsdD12b2lkIDA7dmFyIFdjPVVjKHJuKCkpLHFjPXBlKCk7ZnVuY3Rpb24gVWMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIHpjKGUsdCl7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxmaShlLHQpfWZ1bmN0aW9uIGZpKGUsdCl7cmV0dXJuIGZpPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24ocixpKXtyZXR1cm4gci5fX3Byb3RvX189aSxyfSxmaShlLHQpfXZhciBHYz1mdW5jdGlvbihlKXt6Yyh0LGUpO2Z1bmN0aW9uIHQobil7dmFyIHI7cmV0dXJuIHI9ZS5jYWxsKHRoaXMsbil8fHRoaXMsci50eXBlPXFjLlNFTEVDVE9SLHJ9cmV0dXJuIHR9KFdjLmRlZmF1bHQpO1F0LmRlZmF1bHQ9R2M7ZHMuZXhwb3J0cz1RdC5kZWZhdWx0fSk7dmFyIG5uPVQoKHViLHBzKT0+e1widXNlIHN0cmljdFwiO3ZhciBqYz17fSxIYz1qYy5oYXNPd25Qcm9wZXJ0eSxWYz1mdW5jdGlvbih0LG4pe2lmKCF0KXJldHVybiBuO3ZhciByPXt9O2Zvcih2YXIgaSBpbiBuKXJbaV09SGMuY2FsbCh0LGkpP3RbaV06bltpXTtyZXR1cm4gcn0sWWM9L1sgLSxcXC5cXC86LUBcXFstXFxeYFxcey1+XS8sWGM9L1sgLSxcXC5cXC86LUBcXFtcXF1cXF5gXFx7LX5dLyxRYz0vKF58XFxcXCspPyhcXFxcW0EtRjAtOV17MSw2fSlcXHgyMCg/IVthLWZBLUYwLTlcXHgyMF0pL2csZGk9ZnVuY3Rpb24gZSh0LG4pe249VmMobixlLm9wdGlvbnMpLG4ucXVvdGVzIT1cInNpbmdsZVwiJiZuLnF1b3RlcyE9XCJkb3VibGVcIiYmKG4ucXVvdGVzPVwic2luZ2xlXCIpO2Zvcih2YXIgcj1uLnF1b3Rlcz09XCJkb3VibGVcIj8nXCInOlwiJ1wiLGk9bi5pc0lkZW50aWZpZXIsbz10LmNoYXJBdCgwKSx1PVwiXCIscz0wLGE9dC5sZW5ndGg7czxhOyl7dmFyIGw9dC5jaGFyQXQocysrKSxmPWwuY2hhckNvZGVBdCgpLGM9dm9pZCAwO2lmKGY8MzJ8fGY+MTI2KXtpZihmPj01NTI5NiYmZjw9NTYzMTkmJnM8YSl7dmFyIHA9dC5jaGFyQ29kZUF0KHMrKyk7KHAmNjQ1MTIpPT01NjMyMD9mPSgoZiYxMDIzKTw8MTApKyhwJjEwMjMpKzY1NTM2OnMtLX1jPVwiXFxcXFwiK2YudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkrXCIgXCJ9ZWxzZSBuLmVzY2FwZUV2ZXJ5dGhpbmc/WWMudGVzdChsKT9jPVwiXFxcXFwiK2w6Yz1cIlxcXFxcIitmLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpK1wiIFwiOi9bXFx0XFxuXFxmXFxyXFx4MEJdLy50ZXN0KGwpP2M9XCJcXFxcXCIrZi50b1N0cmluZygxNikudG9VcHBlckNhc2UoKStcIiBcIjpsPT1cIlxcXFxcInx8IWkmJihsPT0nXCInJiZyPT1sfHxsPT1cIidcIiYmcj09bCl8fGkmJlhjLnRlc3QobCk/Yz1cIlxcXFxcIitsOmM9bDt1Kz1jfXJldHVybiBpJiYoL14tWy1cXGRdLy50ZXN0KHUpP3U9XCJcXFxcLVwiK3Uuc2xpY2UoMSk6L1xcZC8udGVzdChvKSYmKHU9XCJcXFxcM1wiK28rXCIgXCIrdS5zbGljZSgxKSkpLHU9dS5yZXBsYWNlKFFjLGZ1bmN0aW9uKGgsZCxtKXtyZXR1cm4gZCYmZC5sZW5ndGglMj9oOihkfHxcIlwiKSttfSksIWkmJm4ud3JhcD9yK3Urcjp1fTtkaS5vcHRpb25zPXtlc2NhcGVFdmVyeXRoaW5nOiExLGlzSWRlbnRpZmllcjohMSxxdW90ZXM6XCJzaW5nbGVcIix3cmFwOiExfTtkaS52ZXJzaW9uPVwiMy4wLjBcIjtwcy5leHBvcnRzPWRpfSk7dmFyIGhpPVQoKEt0LERzKT0+e1widXNlIHN0cmljdFwiO0t0Ll9fZXNNb2R1bGU9ITA7S3QuZGVmYXVsdD12b2lkIDA7dmFyIEtjPW1zKG5uKCkpLEpjPUh0KCksWmM9bXMoVWUoKSksZWQ9cGUoKTtmdW5jdGlvbiBtcyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gaHMoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIHRkKGUsdCxuKXtyZXR1cm4gdCYmaHMoZS5wcm90b3R5cGUsdCksbiYmaHMoZSxuKSxlfWZ1bmN0aW9uIHJkKGUsdCl7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxwaShlLHQpfWZ1bmN0aW9uIHBpKGUsdCl7cmV0dXJuIHBpPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24ocixpKXtyZXR1cm4gci5fX3Byb3RvX189aSxyfSxwaShlLHQpfXZhciBuZD1mdW5jdGlvbihlKXtyZCh0LGUpO2Z1bmN0aW9uIHQocil7dmFyIGk7cmV0dXJuIGk9ZS5jYWxsKHRoaXMscil8fHRoaXMsaS50eXBlPWVkLkNMQVNTLGkuX2NvbnN0cnVjdGVkPSEwLGl9dmFyIG49dC5wcm90b3R5cGU7cmV0dXJuIG4udmFsdWVUb1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiLlwiK2UucHJvdG90eXBlLnZhbHVlVG9TdHJpbmcuY2FsbCh0aGlzKX0sdGQodCxbe2tleTpcInZhbHVlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ZhbHVlfSxzZXQ6ZnVuY3Rpb24oaSl7aWYodGhpcy5fY29uc3RydWN0ZWQpe3ZhciBvPSgwLEtjLmRlZmF1bHQpKGkse2lzSWRlbnRpZmllcjohMH0pO28hPT1pPygoMCxKYy5lbnN1cmVPYmplY3QpKHRoaXMsXCJyYXdzXCIpLHRoaXMucmF3cy52YWx1ZT1vKTp0aGlzLnJhd3MmJmRlbGV0ZSB0aGlzLnJhd3MudmFsdWV9dGhpcy5fdmFsdWU9aX19XSksdH0oWmMuZGVmYXVsdCk7S3QuZGVmYXVsdD1uZDtEcy5leHBvcnRzPUt0LmRlZmF1bHR9KTt2YXIgRGk9VCgoSnQsZ3MpPT57XCJ1c2Ugc3RyaWN0XCI7SnQuX19lc01vZHVsZT0hMDtKdC5kZWZhdWx0PXZvaWQgMDt2YXIgaWQ9dWQoVWUoKSksb2Q9cGUoKTtmdW5jdGlvbiB1ZChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gc2QoZSx0KXtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLG1pKGUsdCl9ZnVuY3Rpb24gbWkoZSx0KXtyZXR1cm4gbWk9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihyLGkpe3JldHVybiByLl9fcHJvdG9fXz1pLHJ9LG1pKGUsdCl9dmFyIGFkPWZ1bmN0aW9uKGUpe3NkKHQsZSk7ZnVuY3Rpb24gdChuKXt2YXIgcjtyZXR1cm4gcj1lLmNhbGwodGhpcyxuKXx8dGhpcyxyLnR5cGU9b2QuQ09NTUVOVCxyfXJldHVybiB0fShpZC5kZWZhdWx0KTtKdC5kZWZhdWx0PWFkO2dzLmV4cG9ydHM9SnQuZGVmYXVsdH0pO3ZhciBiaT1UKChadCxicyk9PntcInVzZSBzdHJpY3RcIjtadC5fX2VzTW9kdWxlPSEwO1p0LmRlZmF1bHQ9dm9pZCAwO3ZhciBsZD1jZChVZSgpKSxmZD1wZSgpO2Z1bmN0aW9uIGNkKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBkZChlLHQpe2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZ2koZSx0KX1mdW5jdGlvbiBnaShlLHQpe3JldHVybiBnaT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHIsaSl7cmV0dXJuIHIuX19wcm90b19fPWkscn0sZ2koZSx0KX12YXIgcGQ9ZnVuY3Rpb24oZSl7ZGQodCxlKTtmdW5jdGlvbiB0KHIpe3ZhciBpO3JldHVybiBpPWUuY2FsbCh0aGlzLHIpfHx0aGlzLGkudHlwZT1mZC5JRCxpfXZhciBuPXQucHJvdG90eXBlO3JldHVybiBuLnZhbHVlVG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIiNcIitlLnByb3RvdHlwZS52YWx1ZVRvU3RyaW5nLmNhbGwodGhpcyl9LHR9KGxkLmRlZmF1bHQpO1p0LmRlZmF1bHQ9cGQ7YnMuZXhwb3J0cz1adC5kZWZhdWx0fSk7dmFyIG9uPVQoKGVyLHhzKT0+e1widXNlIHN0cmljdFwiO2VyLl9fZXNNb2R1bGU9ITA7ZXIuZGVmYXVsdD12b2lkIDA7dmFyIGhkPXlzKG5uKCkpLG1kPUh0KCksRGQ9eXMoVWUoKSk7ZnVuY3Rpb24geXMoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIHZzKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1mdW5jdGlvbiBnZChlLHQsbil7cmV0dXJuIHQmJnZzKGUucHJvdG90eXBlLHQpLG4mJnZzKGUsbiksZX1mdW5jdGlvbiBiZChlLHQpe2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsdmkoZSx0KX1mdW5jdGlvbiB2aShlLHQpe3JldHVybiB2aT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHIsaSl7cmV0dXJuIHIuX19wcm90b19fPWkscn0sdmkoZSx0KX12YXIgdmQ9ZnVuY3Rpb24oZSl7YmQodCxlKTtmdW5jdGlvbiB0KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXZhciBuPXQucHJvdG90eXBlO3JldHVybiBuLnF1YWxpZmllZE5hbWU9ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXMubmFtZXNwYWNlP3RoaXMubmFtZXNwYWNlU3RyaW5nK1wifFwiK2k6aX0sbi52YWx1ZVRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucXVhbGlmaWVkTmFtZShlLnByb3RvdHlwZS52YWx1ZVRvU3RyaW5nLmNhbGwodGhpcykpfSxnZCh0LFt7a2V5OlwibmFtZXNwYWNlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25hbWVzcGFjZX0sc2V0OmZ1bmN0aW9uKGkpe2lmKGk9PT0hMHx8aT09PVwiKlwifHxpPT09XCImXCIpe3RoaXMuX25hbWVzcGFjZT1pLHRoaXMucmF3cyYmZGVsZXRlIHRoaXMucmF3cy5uYW1lc3BhY2U7cmV0dXJufXZhciBvPSgwLGhkLmRlZmF1bHQpKGkse2lzSWRlbnRpZmllcjohMH0pO3RoaXMuX25hbWVzcGFjZT1pLG8hPT1pPygoMCxtZC5lbnN1cmVPYmplY3QpKHRoaXMsXCJyYXdzXCIpLHRoaXMucmF3cy5uYW1lc3BhY2U9byk6dGhpcy5yYXdzJiZkZWxldGUgdGhpcy5yYXdzLm5hbWVzcGFjZX19LHtrZXk6XCJuc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9uYW1lc3BhY2V9LHNldDpmdW5jdGlvbihpKXt0aGlzLm5hbWVzcGFjZT1pfX0se2tleTpcIm5hbWVzcGFjZVN0cmluZ1wiLGdldDpmdW5jdGlvbigpe2lmKHRoaXMubmFtZXNwYWNlKXt2YXIgaT10aGlzLnN0cmluZ2lmeVByb3BlcnR5KFwibmFtZXNwYWNlXCIpO3JldHVybiBpPT09ITA/XCJcIjppfWVsc2UgcmV0dXJuXCJcIn19XSksdH0oRGQuZGVmYXVsdCk7ZXIuZGVmYXVsdD12ZDt4cy5leHBvcnRzPWVyLmRlZmF1bHR9KTt2YXIgeGk9VCgodHIsRnMpPT57XCJ1c2Ugc3RyaWN0XCI7dHIuX19lc01vZHVsZT0hMDt0ci5kZWZhdWx0PXZvaWQgMDt2YXIgeWQ9RmQob24oKSkseGQ9cGUoKTtmdW5jdGlvbiBGZChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gd2QoZSx0KXtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLHlpKGUsdCl9ZnVuY3Rpb24geWkoZSx0KXtyZXR1cm4geWk9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihyLGkpe3JldHVybiByLl9fcHJvdG9fXz1pLHJ9LHlpKGUsdCl9dmFyIEVkPWZ1bmN0aW9uKGUpe3dkKHQsZSk7ZnVuY3Rpb24gdChuKXt2YXIgcjtyZXR1cm4gcj1lLmNhbGwodGhpcyxuKXx8dGhpcyxyLnR5cGU9eGQuVEFHLHJ9cmV0dXJuIHR9KHlkLmRlZmF1bHQpO3RyLmRlZmF1bHQ9RWQ7RnMuZXhwb3J0cz10ci5kZWZhdWx0fSk7dmFyIHdpPVQoKHJyLHdzKT0+e1widXNlIHN0cmljdFwiO3JyLl9fZXNNb2R1bGU9ITA7cnIuZGVmYXVsdD12b2lkIDA7dmFyIENkPVNkKFVlKCkpLF9kPXBlKCk7ZnVuY3Rpb24gU2QoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIGtkKGUsdCl7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxGaShlLHQpfWZ1bmN0aW9uIEZpKGUsdCl7cmV0dXJuIEZpPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24ocixpKXtyZXR1cm4gci5fX3Byb3RvX189aSxyfSxGaShlLHQpfXZhciBUZD1mdW5jdGlvbihlKXtrZCh0LGUpO2Z1bmN0aW9uIHQobil7dmFyIHI7cmV0dXJuIHI9ZS5jYWxsKHRoaXMsbil8fHRoaXMsci50eXBlPV9kLlNUUklORyxyfXJldHVybiB0fShDZC5kZWZhdWx0KTtyci5kZWZhdWx0PVRkO3dzLmV4cG9ydHM9cnIuZGVmYXVsdH0pO3ZhciBDaT1UKChucixFcyk9PntcInVzZSBzdHJpY3RcIjtuci5fX2VzTW9kdWxlPSEwO25yLmRlZmF1bHQ9dm9pZCAwO3ZhciBBZD1QZChybigpKSxPZD1wZSgpO2Z1bmN0aW9uIFBkKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBCZChlLHQpe2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsRWkoZSx0KX1mdW5jdGlvbiBFaShlLHQpe3JldHVybiBFaT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHIsaSl7cmV0dXJuIHIuX19wcm90b19fPWkscn0sRWkoZSx0KX12YXIgSWQ9ZnVuY3Rpb24oZSl7QmQodCxlKTtmdW5jdGlvbiB0KHIpe3ZhciBpO3JldHVybiBpPWUuY2FsbCh0aGlzLHIpfHx0aGlzLGkudHlwZT1PZC5QU0VVRE8saX12YXIgbj10LnByb3RvdHlwZTtyZXR1cm4gbi50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBpPXRoaXMubGVuZ3RoP1wiKFwiK3RoaXMubWFwKFN0cmluZykuam9pbihcIixcIikrXCIpXCI6XCJcIjtyZXR1cm5bdGhpcy5yYXdTcGFjZUJlZm9yZSx0aGlzLnN0cmluZ2lmeVByb3BlcnR5KFwidmFsdWVcIiksaSx0aGlzLnJhd1NwYWNlQWZ0ZXJdLmpvaW4oXCJcIil9LHR9KEFkLmRlZmF1bHQpO25yLmRlZmF1bHQ9SWQ7RXMuZXhwb3J0cz1uci5kZWZhdWx0fSk7dmFyIF9zPVQoKHNiLENzKT0+e0NzLmV4cG9ydHM9ZnVuY3Rpb24odCxuKXtyZXR1cm4gZnVuY3Rpb24oLi4ucil7cmV0dXJuIGNvbnNvbGUud2FybihuKSx0KC4uLnIpfX19KTt2YXIgT2k9VCh1cj0+e1widXNlIHN0cmljdFwiO3VyLl9fZXNNb2R1bGU9ITA7dXIudW5lc2NhcGVWYWx1ZT1BaTt1ci5kZWZhdWx0PXZvaWQgMDt2YXIgaXI9VGkobm4oKSksUmQ9VGkodWkoKSksTGQ9VGkob24oKSksTWQ9cGUoKSxfaTtmdW5jdGlvbiBUaShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gU3MoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIE5kKGUsdCxuKXtyZXR1cm4gdCYmU3MoZS5wcm90b3R5cGUsdCksbiYmU3MoZSxuKSxlfWZ1bmN0aW9uICRkKGUsdCl7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxraShlLHQpfWZ1bmN0aW9uIGtpKGUsdCl7cmV0dXJuIGtpPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24ocixpKXtyZXR1cm4gci5fX3Byb3RvX189aSxyfSxraShlLHQpfXZhciBvcj1fcygpLFdkPS9eKCd8XCIpKFteXSopXFwxJC8scWQ9b3IoZnVuY3Rpb24oKXt9LFwiQXNzaWduaW5nIGFuIGF0dHJpYnV0ZSBhIHZhbHVlIGNvbnRhaW5pbmcgY2hhcmFjdGVycyB0aGF0IG1pZ2h0IG5lZWQgdG8gYmUgZXNjYXBlZCBpcyBkZXByZWNhdGVkLiBDYWxsIGF0dHJpYnV0ZS5zZXRWYWx1ZSgpIGluc3RlYWQuXCIpLFVkPW9yKGZ1bmN0aW9uKCl7fSxcIkFzc2lnbmluZyBhdHRyLnF1b3RlZCBpcyBkZXByZWNhdGVkIGFuZCBoYXMgbm8gZWZmZWN0LiBBc3NpZ24gdG8gYXR0ci5xdW90ZU1hcmsgaW5zdGVhZC5cIiksemQ9b3IoZnVuY3Rpb24oKXt9LFwiQ29uc3RydWN0aW5nIGFuIEF0dHJpYnV0ZSBzZWxlY3RvciB3aXRoIGEgdmFsdWUgd2l0aG91dCBzcGVjaWZ5aW5nIHF1b3RlTWFyayBpcyBkZXByZWNhdGVkLiBOb3RlOiBUaGUgdmFsdWUgc2hvdWxkIGJlIHVuZXNjYXBlZCBub3cuXCIpO2Z1bmN0aW9uIEFpKGUpe3ZhciB0PSExLG49bnVsbCxyPWUsaT1yLm1hdGNoKFdkKTtyZXR1cm4gaSYmKG49aVsxXSxyPWlbMl0pLHI9KDAsUmQuZGVmYXVsdCkociksciE9PWUmJih0PSEwKSx7ZGVwcmVjYXRlZFVzYWdlOnQsdW5lc2NhcGVkOnIscXVvdGVNYXJrOm59fWZ1bmN0aW9uIEdkKGUpe2lmKGUucXVvdGVNYXJrIT09dm9pZCAwfHxlLnZhbHVlPT09dm9pZCAwKXJldHVybiBlO3pkKCk7dmFyIHQ9QWkoZS52YWx1ZSksbj10LnF1b3RlTWFyayxyPXQudW5lc2NhcGVkO3JldHVybiBlLnJhd3N8fChlLnJhd3M9e30pLGUucmF3cy52YWx1ZT09PXZvaWQgMCYmKGUucmF3cy52YWx1ZT1lLnZhbHVlKSxlLnZhbHVlPXIsZS5xdW90ZU1hcms9bixlfXZhciB1bj1mdW5jdGlvbihlKXskZCh0LGUpO2Z1bmN0aW9uIHQocil7dmFyIGk7cmV0dXJuIHI9PT12b2lkIDAmJihyPXt9KSxpPWUuY2FsbCh0aGlzLEdkKHIpKXx8dGhpcyxpLnR5cGU9TWQuQVRUUklCVVRFLGkucmF3cz1pLnJhd3N8fHt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLnJhd3MsXCJ1bnF1b3RlZFwiLHtnZXQ6b3IoZnVuY3Rpb24oKXtyZXR1cm4gaS52YWx1ZX0sXCJhdHRyLnJhd3MudW5xdW90ZWQgaXMgZGVwcmVjYXRlZC4gQ2FsbCBhdHRyLnZhbHVlIGluc3RlYWQuXCIpLHNldDpvcihmdW5jdGlvbigpe3JldHVybiBpLnZhbHVlfSxcIlNldHRpbmcgYXR0ci5yYXdzLnVucXVvdGVkIGlzIGRlcHJlY2F0ZWQgYW5kIGhhcyBubyBlZmZlY3QuIGF0dHIudmFsdWUgaXMgdW5lc2NhcGVkIGJ5IGRlZmF1bHQgbm93LlwiKX0pLGkuX2NvbnN0cnVjdGVkPSEwLGl9dmFyIG49dC5wcm90b3R5cGU7cmV0dXJuIG4uZ2V0UXVvdGVkVmFsdWU9ZnVuY3Rpb24oaSl7aT09PXZvaWQgMCYmKGk9e30pO3ZhciBvPXRoaXMuX2RldGVybWluZVF1b3RlTWFyayhpKSx1PVNpW29dLHM9KDAsaXIuZGVmYXVsdCkodGhpcy5fdmFsdWUsdSk7cmV0dXJuIHN9LG4uX2RldGVybWluZVF1b3RlTWFyaz1mdW5jdGlvbihpKXtyZXR1cm4gaS5zbWFydD90aGlzLnNtYXJ0UXVvdGVNYXJrKGkpOnRoaXMucHJlZmVycmVkUXVvdGVNYXJrKGkpfSxuLnNldFZhbHVlPWZ1bmN0aW9uKGksbyl7bz09PXZvaWQgMCYmKG89e30pLHRoaXMuX3ZhbHVlPWksdGhpcy5fcXVvdGVNYXJrPXRoaXMuX2RldGVybWluZVF1b3RlTWFyayhvKSx0aGlzLl9zeW5jUmF3VmFsdWUoKX0sbi5zbWFydFF1b3RlTWFyaz1mdW5jdGlvbihpKXt2YXIgbz10aGlzLnZhbHVlLHU9by5yZXBsYWNlKC9bXiddL2csXCJcIikubGVuZ3RoLHM9by5yZXBsYWNlKC9bXlwiXS9nLFwiXCIpLmxlbmd0aDtpZih1K3M9PT0wKXt2YXIgYT0oMCxpci5kZWZhdWx0KShvLHtpc0lkZW50aWZpZXI6ITB9KTtpZihhPT09bylyZXR1cm4gdC5OT19RVU9URTt2YXIgbD10aGlzLnByZWZlcnJlZFF1b3RlTWFyayhpKTtpZihsPT09dC5OT19RVU9URSl7dmFyIGY9dGhpcy5xdW90ZU1hcmt8fGkucXVvdGVNYXJrfHx0LkRPVUJMRV9RVU9URSxjPVNpW2ZdLHA9KDAsaXIuZGVmYXVsdCkobyxjKTtpZihwLmxlbmd0aDxhLmxlbmd0aClyZXR1cm4gZn1yZXR1cm4gbH1lbHNlIHJldHVybiBzPT09dT90aGlzLnByZWZlcnJlZFF1b3RlTWFyayhpKTpzPHU/dC5ET1VCTEVfUVVPVEU6dC5TSU5HTEVfUVVPVEV9LG4ucHJlZmVycmVkUXVvdGVNYXJrPWZ1bmN0aW9uKGkpe3ZhciBvPWkucHJlZmVyQ3VycmVudFF1b3RlTWFyaz90aGlzLnF1b3RlTWFyazppLnF1b3RlTWFyaztyZXR1cm4gbz09PXZvaWQgMCYmKG89aS5wcmVmZXJDdXJyZW50UXVvdGVNYXJrP2kucXVvdGVNYXJrOnRoaXMucXVvdGVNYXJrKSxvPT09dm9pZCAwJiYobz10LkRPVUJMRV9RVU9URSksb30sbi5fc3luY1Jhd1ZhbHVlPWZ1bmN0aW9uKCl7dmFyIGk9KDAsaXIuZGVmYXVsdCkodGhpcy5fdmFsdWUsU2lbdGhpcy5xdW90ZU1hcmtdKTtpPT09dGhpcy5fdmFsdWU/dGhpcy5yYXdzJiZkZWxldGUgdGhpcy5yYXdzLnZhbHVlOnRoaXMucmF3cy52YWx1ZT1pfSxuLl9oYW5kbGVFc2NhcGVzPWZ1bmN0aW9uKGksbyl7aWYodGhpcy5fY29uc3RydWN0ZWQpe3ZhciB1PSgwLGlyLmRlZmF1bHQpKG8se2lzSWRlbnRpZmllcjohMH0pO3UhPT1vP3RoaXMucmF3c1tpXT11OmRlbGV0ZSB0aGlzLnJhd3NbaV19fSxuLl9zcGFjZXNGb3I9ZnVuY3Rpb24oaSl7dmFyIG89e2JlZm9yZTpcIlwiLGFmdGVyOlwiXCJ9LHU9dGhpcy5zcGFjZXNbaV18fHt9LHM9dGhpcy5yYXdzLnNwYWNlcyYmdGhpcy5yYXdzLnNwYWNlc1tpXXx8e307cmV0dXJuIE9iamVjdC5hc3NpZ24obyx1LHMpfSxuLl9zdHJpbmdGb3I9ZnVuY3Rpb24oaSxvLHUpe289PT12b2lkIDAmJihvPWkpLHU9PT12b2lkIDAmJih1PWtzKTt2YXIgcz10aGlzLl9zcGFjZXNGb3Iobyk7cmV0dXJuIHUodGhpcy5zdHJpbmdpZnlQcm9wZXJ0eShpKSxzKX0sbi5vZmZzZXRPZj1mdW5jdGlvbihpKXt2YXIgbz0xLHU9dGhpcy5fc3BhY2VzRm9yKFwiYXR0cmlidXRlXCIpO2lmKG8rPXUuYmVmb3JlLmxlbmd0aCxpPT09XCJuYW1lc3BhY2VcInx8aT09PVwibnNcIilyZXR1cm4gdGhpcy5uYW1lc3BhY2U/bzotMTtpZihpPT09XCJhdHRyaWJ1dGVOU1wifHwobys9dGhpcy5uYW1lc3BhY2VTdHJpbmcubGVuZ3RoLHRoaXMubmFtZXNwYWNlJiYobys9MSksaT09PVwiYXR0cmlidXRlXCIpKXJldHVybiBvO28rPXRoaXMuc3RyaW5naWZ5UHJvcGVydHkoXCJhdHRyaWJ1dGVcIikubGVuZ3RoLG8rPXUuYWZ0ZXIubGVuZ3RoO3ZhciBzPXRoaXMuX3NwYWNlc0ZvcihcIm9wZXJhdG9yXCIpO28rPXMuYmVmb3JlLmxlbmd0aDt2YXIgYT10aGlzLnN0cmluZ2lmeVByb3BlcnR5KFwib3BlcmF0b3JcIik7aWYoaT09PVwib3BlcmF0b3JcIilyZXR1cm4gYT9vOi0xO28rPWEubGVuZ3RoLG8rPXMuYWZ0ZXIubGVuZ3RoO3ZhciBsPXRoaXMuX3NwYWNlc0ZvcihcInZhbHVlXCIpO28rPWwuYmVmb3JlLmxlbmd0aDt2YXIgZj10aGlzLnN0cmluZ2lmeVByb3BlcnR5KFwidmFsdWVcIik7aWYoaT09PVwidmFsdWVcIilyZXR1cm4gZj9vOi0xO28rPWYubGVuZ3RoLG8rPWwuYWZ0ZXIubGVuZ3RoO3ZhciBjPXRoaXMuX3NwYWNlc0ZvcihcImluc2Vuc2l0aXZlXCIpO3JldHVybiBvKz1jLmJlZm9yZS5sZW5ndGgsaT09PVwiaW5zZW5zaXRpdmVcIiYmdGhpcy5pbnNlbnNpdGl2ZT9vOi0xfSxuLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcyxvPVt0aGlzLnJhd1NwYWNlQmVmb3JlLFwiW1wiXTtyZXR1cm4gby5wdXNoKHRoaXMuX3N0cmluZ0ZvcihcInF1YWxpZmllZEF0dHJpYnV0ZVwiLFwiYXR0cmlidXRlXCIpKSx0aGlzLm9wZXJhdG9yJiYodGhpcy52YWx1ZXx8dGhpcy52YWx1ZT09PVwiXCIpJiYoby5wdXNoKHRoaXMuX3N0cmluZ0ZvcihcIm9wZXJhdG9yXCIpKSxvLnB1c2godGhpcy5fc3RyaW5nRm9yKFwidmFsdWVcIikpLG8ucHVzaCh0aGlzLl9zdHJpbmdGb3IoXCJpbnNlbnNpdGl2ZUZsYWdcIixcImluc2Vuc2l0aXZlXCIsZnVuY3Rpb24odSxzKXtyZXR1cm4gdS5sZW5ndGg+MCYmIWkucXVvdGVkJiZzLmJlZm9yZS5sZW5ndGg9PT0wJiYhKGkuc3BhY2VzLnZhbHVlJiZpLnNwYWNlcy52YWx1ZS5hZnRlcikmJihzLmJlZm9yZT1cIiBcIiksa3ModSxzKX0pKSksby5wdXNoKFwiXVwiKSxvLnB1c2godGhpcy5yYXdTcGFjZUFmdGVyKSxvLmpvaW4oXCJcIil9LE5kKHQsW3trZXk6XCJxdW90ZWRcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgaT10aGlzLnF1b3RlTWFyaztyZXR1cm4gaT09PVwiJ1wifHxpPT09J1wiJ30sc2V0OmZ1bmN0aW9uKGkpe1VkKCl9fSx7a2V5OlwicXVvdGVNYXJrXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3F1b3RlTWFya30sc2V0OmZ1bmN0aW9uKGkpe2lmKCF0aGlzLl9jb25zdHJ1Y3RlZCl7dGhpcy5fcXVvdGVNYXJrPWk7cmV0dXJufXRoaXMuX3F1b3RlTWFyayE9PWkmJih0aGlzLl9xdW90ZU1hcms9aSx0aGlzLl9zeW5jUmF3VmFsdWUoKSl9fSx7a2V5OlwicXVhbGlmaWVkQXR0cmlidXRlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucXVhbGlmaWVkTmFtZSh0aGlzLnJhd3MuYXR0cmlidXRlfHx0aGlzLmF0dHJpYnV0ZSl9fSx7a2V5OlwiaW5zZW5zaXRpdmVGbGFnXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5zZW5zaXRpdmU/XCJpXCI6XCJcIn19LHtrZXk6XCJ2YWx1ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl92YWx1ZX0sc2V0OmZ1bmN0aW9uKGkpe2lmKHRoaXMuX2NvbnN0cnVjdGVkKXt2YXIgbz1BaShpKSx1PW8uZGVwcmVjYXRlZFVzYWdlLHM9by51bmVzY2FwZWQsYT1vLnF1b3RlTWFyaztpZih1JiZxZCgpLHM9PT10aGlzLl92YWx1ZSYmYT09PXRoaXMuX3F1b3RlTWFyaylyZXR1cm47dGhpcy5fdmFsdWU9cyx0aGlzLl9xdW90ZU1hcms9YSx0aGlzLl9zeW5jUmF3VmFsdWUoKX1lbHNlIHRoaXMuX3ZhbHVlPWl9fSx7a2V5OlwiYXR0cmlidXRlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZX0sc2V0OmZ1bmN0aW9uKGkpe3RoaXMuX2hhbmRsZUVzY2FwZXMoXCJhdHRyaWJ1dGVcIixpKSx0aGlzLl9hdHRyaWJ1dGU9aX19XSksdH0oTGQuZGVmYXVsdCk7dXIuZGVmYXVsdD11bjt1bi5OT19RVU9URT1udWxsO3VuLlNJTkdMRV9RVU9URT1cIidcIjt1bi5ET1VCTEVfUVVPVEU9J1wiJzt2YXIgU2k9KF9pPXtcIidcIjp7cXVvdGVzOlwic2luZ2xlXCIsd3JhcDohMH0sJ1wiJzp7cXVvdGVzOlwiZG91YmxlXCIsd3JhcDohMH19LF9pW251bGxdPXtpc0lkZW50aWZpZXI6ITB9LF9pKTtmdW5jdGlvbiBrcyhlLHQpe3JldHVyblwiXCIrdC5iZWZvcmUrZSt0LmFmdGVyfX0pO3ZhciBCaT1UKChzcixUcyk9PntcInVzZSBzdHJpY3RcIjtzci5fX2VzTW9kdWxlPSEwO3NyLmRlZmF1bHQ9dm9pZCAwO3ZhciBqZD1WZChvbigpKSxIZD1wZSgpO2Z1bmN0aW9uIFZkKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBZZChlLHQpe2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsUGkoZSx0KX1mdW5jdGlvbiBQaShlLHQpe3JldHVybiBQaT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHIsaSl7cmV0dXJuIHIuX19wcm90b19fPWkscn0sUGkoZSx0KX12YXIgWGQ9ZnVuY3Rpb24oZSl7WWQodCxlKTtmdW5jdGlvbiB0KG4pe3ZhciByO3JldHVybiByPWUuY2FsbCh0aGlzLG4pfHx0aGlzLHIudHlwZT1IZC5VTklWRVJTQUwsci52YWx1ZT1cIipcIixyfXJldHVybiB0fShqZC5kZWZhdWx0KTtzci5kZWZhdWx0PVhkO1RzLmV4cG9ydHM9c3IuZGVmYXVsdH0pO3ZhciBSaT1UKChhcixBcyk9PntcInVzZSBzdHJpY3RcIjthci5fX2VzTW9kdWxlPSEwO2FyLmRlZmF1bHQ9dm9pZCAwO3ZhciBRZD1KZChVZSgpKSxLZD1wZSgpO2Z1bmN0aW9uIEpkKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBaZChlLHQpe2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsSWkoZSx0KX1mdW5jdGlvbiBJaShlLHQpe3JldHVybiBJaT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHIsaSl7cmV0dXJuIHIuX19wcm90b19fPWkscn0sSWkoZSx0KX12YXIgZXA9ZnVuY3Rpb24oZSl7WmQodCxlKTtmdW5jdGlvbiB0KG4pe3ZhciByO3JldHVybiByPWUuY2FsbCh0aGlzLG4pfHx0aGlzLHIudHlwZT1LZC5DT01CSU5BVE9SLHJ9cmV0dXJuIHR9KFFkLmRlZmF1bHQpO2FyLmRlZmF1bHQ9ZXA7QXMuZXhwb3J0cz1hci5kZWZhdWx0fSk7dmFyIE1pPVQoKGxyLE9zKT0+e1widXNlIHN0cmljdFwiO2xyLl9fZXNNb2R1bGU9ITA7bHIuZGVmYXVsdD12b2lkIDA7dmFyIHRwPW5wKFVlKCkpLHJwPXBlKCk7ZnVuY3Rpb24gbnAoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIGlwKGUsdCl7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxMaShlLHQpfWZ1bmN0aW9uIExpKGUsdCl7cmV0dXJuIExpPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24ocixpKXtyZXR1cm4gci5fX3Byb3RvX189aSxyfSxMaShlLHQpfXZhciBvcD1mdW5jdGlvbihlKXtpcCh0LGUpO2Z1bmN0aW9uIHQobil7dmFyIHI7cmV0dXJuIHI9ZS5jYWxsKHRoaXMsbil8fHRoaXMsci50eXBlPXJwLk5FU1RJTkcsci52YWx1ZT1cIiZcIixyfXJldHVybiB0fSh0cC5kZWZhdWx0KTtsci5kZWZhdWx0PW9wO09zLmV4cG9ydHM9bHIuZGVmYXVsdH0pO3ZhciBCcz1UKChzbixQcyk9PntcInVzZSBzdHJpY3RcIjtzbi5fX2VzTW9kdWxlPSEwO3NuLmRlZmF1bHQ9dXA7ZnVuY3Rpb24gdXAoZSl7cmV0dXJuIGUuc29ydChmdW5jdGlvbih0LG4pe3JldHVybiB0LW59KX1Qcy5leHBvcnRzPXNuLmRlZmF1bHR9KTt2YXIgTmk9VChTPT57XCJ1c2Ugc3RyaWN0XCI7Uy5fX2VzTW9kdWxlPSEwO1MuY29tYmluYXRvcj1TLndvcmQ9Uy5jb21tZW50PVMuc3RyPVMudGFiPVMubmV3bGluZT1TLmZlZWQ9Uy5jcj1TLmJhY2tzbGFzaD1TLmJhbmc9Uy5zbGFzaD1TLmRvdWJsZVF1b3RlPVMuc2luZ2xlUXVvdGU9Uy5zcGFjZT1TLmdyZWF0ZXJUaGFuPVMucGlwZT1TLmVxdWFscz1TLnBsdXM9Uy5jYXJldD1TLnRpbGRlPVMuZG9sbGFyPVMuY2xvc2VTcXVhcmU9Uy5vcGVuU3F1YXJlPVMuY2xvc2VQYXJlbnRoZXNpcz1TLm9wZW5QYXJlbnRoZXNpcz1TLnNlbWljb2xvbj1TLmNvbG9uPVMuY29tbWE9Uy5hdD1TLmFzdGVyaXNrPVMuYW1wZXJzYW5kPXZvaWQgMDt2YXIgc3A9Mzg7Uy5hbXBlcnNhbmQ9c3A7dmFyIGFwPTQyO1MuYXN0ZXJpc2s9YXA7dmFyIGxwPTY0O1MuYXQ9bHA7dmFyIGZwPTQ0O1MuY29tbWE9ZnA7dmFyIGNwPTU4O1MuY29sb249Y3A7dmFyIGRwPTU5O1Muc2VtaWNvbG9uPWRwO3ZhciBwcD00MDtTLm9wZW5QYXJlbnRoZXNpcz1wcDt2YXIgaHA9NDE7Uy5jbG9zZVBhcmVudGhlc2lzPWhwO3ZhciBtcD05MTtTLm9wZW5TcXVhcmU9bXA7dmFyIERwPTkzO1MuY2xvc2VTcXVhcmU9RHA7dmFyIGdwPTM2O1MuZG9sbGFyPWdwO3ZhciBicD0xMjY7Uy50aWxkZT1icDt2YXIgdnA9OTQ7Uy5jYXJldD12cDt2YXIgeXA9NDM7Uy5wbHVzPXlwO3ZhciB4cD02MTtTLmVxdWFscz14cDt2YXIgRnA9MTI0O1MucGlwZT1GcDt2YXIgd3A9NjI7Uy5ncmVhdGVyVGhhbj13cDt2YXIgRXA9MzI7Uy5zcGFjZT1FcDt2YXIgSXM9Mzk7Uy5zaW5nbGVRdW90ZT1Jczt2YXIgQ3A9MzQ7Uy5kb3VibGVRdW90ZT1DcDt2YXIgX3A9NDc7Uy5zbGFzaD1fcDt2YXIgU3A9MzM7Uy5iYW5nPVNwO3ZhciBrcD05MjtTLmJhY2tzbGFzaD1rcDt2YXIgVHA9MTM7Uy5jcj1UcDt2YXIgQXA9MTI7Uy5mZWVkPUFwO3ZhciBPcD0xMDtTLm5ld2xpbmU9T3A7dmFyIFBwPTk7Uy50YWI9UHA7dmFyIEJwPUlzO1Muc3RyPUJwO3ZhciBJcD0tMTtTLmNvbW1lbnQ9SXA7dmFyIFJwPS0yO1Mud29yZD1ScDt2YXIgTHA9LTM7Uy5jb21iaW5hdG9yPUxwfSk7dmFyIE1zPVQoZnI9PntcInVzZSBzdHJpY3RcIjtmci5fX2VzTW9kdWxlPSEwO2ZyLmRlZmF1bHQ9enA7ZnIuRklFTERTPXZvaWQgMDt2YXIgRT1NcChOaSgpKSx4dCxRO2Z1bmN0aW9uIExzKCl7aWYodHlwZW9mIFdlYWtNYXAhPVwiZnVuY3Rpb25cIilyZXR1cm4gbnVsbDt2YXIgZT1uZXcgV2Vha01hcDtyZXR1cm4gTHM9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX1mdW5jdGlvbiBNcChlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7aWYoZT09PW51bGx8fHR5cGVvZiBlIT1cIm9iamVjdFwiJiZ0eXBlb2YgZSE9XCJmdW5jdGlvblwiKXJldHVybntkZWZhdWx0OmV9O3ZhciB0PUxzKCk7aWYodCYmdC5oYXMoZSkpcmV0dXJuIHQuZ2V0KGUpO3ZhciBuPXt9LHI9T2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO2Zvcih2YXIgaSBpbiBlKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLGkpKXt2YXIgbz1yP09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxpKTpudWxsO28mJihvLmdldHx8by5zZXQpP09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLGksbyk6bltpXT1lW2ldfXJldHVybiBuLmRlZmF1bHQ9ZSx0JiZ0LnNldChlLG4pLG59dmFyIE5wPSh4dD17fSx4dFtFLnRhYl09ITAseHRbRS5uZXdsaW5lXT0hMCx4dFtFLmNyXT0hMCx4dFtFLmZlZWRdPSEwLHh0KSwkcD0oUT17fSxRW0Uuc3BhY2VdPSEwLFFbRS50YWJdPSEwLFFbRS5uZXdsaW5lXT0hMCxRW0UuY3JdPSEwLFFbRS5mZWVkXT0hMCxRW0UuYW1wZXJzYW5kXT0hMCxRW0UuYXN0ZXJpc2tdPSEwLFFbRS5iYW5nXT0hMCxRW0UuY29tbWFdPSEwLFFbRS5jb2xvbl09ITAsUVtFLnNlbWljb2xvbl09ITAsUVtFLm9wZW5QYXJlbnRoZXNpc109ITAsUVtFLmNsb3NlUGFyZW50aGVzaXNdPSEwLFFbRS5vcGVuU3F1YXJlXT0hMCxRW0UuY2xvc2VTcXVhcmVdPSEwLFFbRS5zaW5nbGVRdW90ZV09ITAsUVtFLmRvdWJsZVF1b3RlXT0hMCxRW0UucGx1c109ITAsUVtFLnBpcGVdPSEwLFFbRS50aWxkZV09ITAsUVtFLmdyZWF0ZXJUaGFuXT0hMCxRW0UuZXF1YWxzXT0hMCxRW0UuZG9sbGFyXT0hMCxRW0UuY2FyZXRdPSEwLFFbRS5zbGFzaF09ITAsUSksJGk9e30sUnM9XCIwMTIzNDU2Nzg5YWJjZGVmQUJDREVGXCI7Zm9yKGFuPTA7YW48UnMubGVuZ3RoO2FuKyspJGlbUnMuY2hhckNvZGVBdChhbildPSEwO3ZhciBhbjtmdW5jdGlvbiBXcChlLHQpe3ZhciBuPXQscjtkb3tpZihyPWUuY2hhckNvZGVBdChuKSwkcFtyXSlyZXR1cm4gbi0xO3I9PT1FLmJhY2tzbGFzaD9uPXFwKGUsbikrMTpuKyt9d2hpbGUobjxlLmxlbmd0aCk7cmV0dXJuIG4tMX1mdW5jdGlvbiBxcChlLHQpe3ZhciBuPXQscj1lLmNoYXJDb2RlQXQobisxKTtpZighTnBbcl0paWYoJGlbcl0pe3ZhciBpPTA7ZG8gbisrLGkrKyxyPWUuY2hhckNvZGVBdChuKzEpO3doaWxlKCRpW3JdJiZpPDYpO2k8NiYmcj09PUUuc3BhY2UmJm4rK31lbHNlIG4rKztyZXR1cm4gbn12YXIgVXA9e1RZUEU6MCxTVEFSVF9MSU5FOjEsU1RBUlRfQ09MOjIsRU5EX0xJTkU6MyxFTkRfQ09MOjQsU1RBUlRfUE9TOjUsRU5EX1BPUzo2fTtmci5GSUVMRFM9VXA7ZnVuY3Rpb24genAoZSl7dmFyIHQ9W10sbj1lLmNzcy52YWx1ZU9mKCkscj1uLGk9ci5sZW5ndGgsbz0tMSx1PTEscz0wLGE9MCxsLGYsYyxwLGgsZCxtLHYsZyxiLHgsRix5O2Z1bmN0aW9uIGsoUCxCKXtpZihlLnNhZmUpbis9QixnPW4ubGVuZ3RoLTE7ZWxzZSB0aHJvdyBlLmVycm9yKFwiVW5jbG9zZWQgXCIrUCx1LHMtbyxzKX1mb3IoO3M8aTspe3N3aXRjaChsPW4uY2hhckNvZGVBdChzKSxsPT09RS5uZXdsaW5lJiYobz1zLHUrPTEpLGwpe2Nhc2UgRS5zcGFjZTpjYXNlIEUudGFiOmNhc2UgRS5uZXdsaW5lOmNhc2UgRS5jcjpjYXNlIEUuZmVlZDpnPXM7ZG8gZys9MSxsPW4uY2hhckNvZGVBdChnKSxsPT09RS5uZXdsaW5lJiYobz1nLHUrPTEpO3doaWxlKGw9PT1FLnNwYWNlfHxsPT09RS5uZXdsaW5lfHxsPT09RS50YWJ8fGw9PT1FLmNyfHxsPT09RS5mZWVkKTt5PUUuc3BhY2UscD11LGM9Zy1vLTEsYT1nO2JyZWFrO2Nhc2UgRS5wbHVzOmNhc2UgRS5ncmVhdGVyVGhhbjpjYXNlIEUudGlsZGU6Y2FzZSBFLnBpcGU6Zz1zO2RvIGcrPTEsbD1uLmNoYXJDb2RlQXQoZyk7d2hpbGUobD09PUUucGx1c3x8bD09PUUuZ3JlYXRlclRoYW58fGw9PT1FLnRpbGRlfHxsPT09RS5waXBlKTt5PUUuY29tYmluYXRvcixwPXUsYz1zLW8sYT1nO2JyZWFrO2Nhc2UgRS5hc3RlcmlzazpjYXNlIEUuYW1wZXJzYW5kOmNhc2UgRS5iYW5nOmNhc2UgRS5jb21tYTpjYXNlIEUuZXF1YWxzOmNhc2UgRS5kb2xsYXI6Y2FzZSBFLmNhcmV0OmNhc2UgRS5vcGVuU3F1YXJlOmNhc2UgRS5jbG9zZVNxdWFyZTpjYXNlIEUuY29sb246Y2FzZSBFLnNlbWljb2xvbjpjYXNlIEUub3BlblBhcmVudGhlc2lzOmNhc2UgRS5jbG9zZVBhcmVudGhlc2lzOmc9cyx5PWwscD11LGM9cy1vLGE9ZysxO2JyZWFrO2Nhc2UgRS5zaW5nbGVRdW90ZTpjYXNlIEUuZG91YmxlUXVvdGU6Rj1sPT09RS5zaW5nbGVRdW90ZT9cIidcIjonXCInLGc9cztkbyBmb3IoaD0hMSxnPW4uaW5kZXhPZihGLGcrMSksZz09PS0xJiZrKFwicXVvdGVcIixGKSxkPWc7bi5jaGFyQ29kZUF0KGQtMSk9PT1FLmJhY2tzbGFzaDspZC09MSxoPSFoO3doaWxlKGgpO3k9RS5zdHIscD11LGM9cy1vLGE9ZysxO2JyZWFrO2RlZmF1bHQ6bD09PUUuc2xhc2gmJm4uY2hhckNvZGVBdChzKzEpPT09RS5hc3Rlcmlzaz8oZz1uLmluZGV4T2YoXCIqL1wiLHMrMikrMSxnPT09MCYmayhcImNvbW1lbnRcIixcIiovXCIpLGY9bi5zbGljZShzLGcrMSksdj1mLnNwbGl0KGBcbmApLG09di5sZW5ndGgtMSxtPjA/KGI9dSttLHg9Zy12W21dLmxlbmd0aCk6KGI9dSx4PW8pLHk9RS5jb21tZW50LHU9YixwPWIsYz1nLXgpOmw9PT1FLnNsYXNoPyhnPXMseT1sLHA9dSxjPXMtbyxhPWcrMSk6KGc9V3AobixzKSx5PUUud29yZCxwPXUsYz1nLW8pLGE9ZysxO2JyZWFrfXQucHVzaChbeSx1LHMtbyxwLGMscyxhXSkseCYmKG89eCx4PW51bGwpLHM9YX1yZXR1cm4gdH19KTt2YXIganM9VCgoY3IsR3MpPT57XCJ1c2Ugc3RyaWN0XCI7Y3IuX19lc01vZHVsZT0hMDtjci5kZWZhdWx0PXZvaWQgMDt2YXIgR3A9X2UobGkoKSksV2k9X2UoY2koKSksanA9X2UoaGkoKSksTnM9X2UoRGkoKSksSHA9X2UoYmkoKSksVnA9X2UoeGkoKSkscWk9X2Uod2koKSksWXA9X2UoQ2koKSksJHM9bG4oT2koKSksWHA9X2UoQmkoKSksVWk9X2UoUmkoKSksUXA9X2UoTWkoKSksS3A9X2UoQnMoKSksdz1sbihNcygpKSxfPWxuKE5pKCkpLEpwPWxuKHBlKCkpLHJlPUh0KCksdXQsemk7ZnVuY3Rpb24genMoKXtpZih0eXBlb2YgV2Vha01hcCE9XCJmdW5jdGlvblwiKXJldHVybiBudWxsO3ZhciBlPW5ldyBXZWFrTWFwO3JldHVybiB6cz1mdW5jdGlvbigpe3JldHVybiBlfSxlfWZ1bmN0aW9uIGxuKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTtpZihlPT09bnVsbHx8dHlwZW9mIGUhPVwib2JqZWN0XCImJnR5cGVvZiBlIT1cImZ1bmN0aW9uXCIpcmV0dXJue2RlZmF1bHQ6ZX07dmFyIHQ9enMoKTtpZih0JiZ0LmhhcyhlKSlyZXR1cm4gdC5nZXQoZSk7dmFyIG49e30scj1PYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7Zm9yKHZhciBpIGluIGUpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsaSkpe3ZhciBvPXI/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLGkpOm51bGw7byYmKG8uZ2V0fHxvLnNldCk/T2JqZWN0LmRlZmluZVByb3BlcnR5KG4saSxvKTpuW2ldPWVbaV19cmV0dXJuIG4uZGVmYXVsdD1lLHQmJnQuc2V0KGUsbiksbn1mdW5jdGlvbiBfZShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gV3MoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIFpwKGUsdCxuKXtyZXR1cm4gdCYmV3MoZS5wcm90b3R5cGUsdCksbiYmV3MoZSxuKSxlfXZhciBIaT0odXQ9e30sdXRbXy5zcGFjZV09ITAsdXRbXy5jcl09ITAsdXRbXy5mZWVkXT0hMCx1dFtfLm5ld2xpbmVdPSEwLHV0W18udGFiXT0hMCx1dCksZTA9T2JqZWN0LmFzc2lnbih7fSxIaSwoemk9e30semlbXy5jb21tZW50XT0hMCx6aSkpO2Z1bmN0aW9uIHFzKGUpe3JldHVybntsaW5lOmVbdy5GSUVMRFMuU1RBUlRfTElORV0sY29sdW1uOmVbdy5GSUVMRFMuU1RBUlRfQ09MXX19ZnVuY3Rpb24gVXMoZSl7cmV0dXJue2xpbmU6ZVt3LkZJRUxEUy5FTkRfTElORV0sY29sdW1uOmVbdy5GSUVMRFMuRU5EX0NPTF19fWZ1bmN0aW9uIHN0KGUsdCxuLHIpe3JldHVybntzdGFydDp7bGluZTplLGNvbHVtbjp0fSxlbmQ6e2xpbmU6bixjb2x1bW46cn19fWZ1bmN0aW9uIEZ0KGUpe3JldHVybiBzdChlW3cuRklFTERTLlNUQVJUX0xJTkVdLGVbdy5GSUVMRFMuU1RBUlRfQ09MXSxlW3cuRklFTERTLkVORF9MSU5FXSxlW3cuRklFTERTLkVORF9DT0xdKX1mdW5jdGlvbiBHaShlLHQpe2lmKGUpcmV0dXJuIHN0KGVbdy5GSUVMRFMuU1RBUlRfTElORV0sZVt3LkZJRUxEUy5TVEFSVF9DT0xdLHRbdy5GSUVMRFMuRU5EX0xJTkVdLHRbdy5GSUVMRFMuRU5EX0NPTF0pfWZ1bmN0aW9uIHd0KGUsdCl7dmFyIG49ZVt0XTtpZih0eXBlb2Ygbj09XCJzdHJpbmdcIilyZXR1cm4gbi5pbmRleE9mKFwiXFxcXFwiKSE9PS0xJiYoKDAscmUuZW5zdXJlT2JqZWN0KShlLFwicmF3c1wiKSxlW3RdPSgwLHJlLnVuZXNjKShuKSxlLnJhd3NbdF09PT12b2lkIDAmJihlLnJhd3NbdF09bikpLGV9ZnVuY3Rpb24gamkoZSx0KXtmb3IodmFyIG49LTEscj1bXTsobj1lLmluZGV4T2YodCxuKzEpKSE9PS0xOylyLnB1c2gobik7cmV0dXJuIHJ9ZnVuY3Rpb24gdDAoKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLGFyZ3VtZW50cyk7cmV0dXJuIGUuZmlsdGVyKGZ1bmN0aW9uKHQsbil7cmV0dXJuIG49PT1lLmluZGV4T2YodCl9KX12YXIgcjA9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4scil7cj09PXZvaWQgMCYmKHI9e30pLHRoaXMucnVsZT1uLHRoaXMub3B0aW9ucz1PYmplY3QuYXNzaWduKHtsb3NzeTohMSxzYWZlOiExfSxyKSx0aGlzLnBvc2l0aW9uPTAsdGhpcy5jc3M9dHlwZW9mIHRoaXMucnVsZT09XCJzdHJpbmdcIj90aGlzLnJ1bGU6dGhpcy5ydWxlLnNlbGVjdG9yLHRoaXMudG9rZW5zPSgwLHcuZGVmYXVsdCkoe2Nzczp0aGlzLmNzcyxlcnJvcjp0aGlzLl9lcnJvckdlbmVyYXRvcigpLHNhZmU6dGhpcy5vcHRpb25zLnNhZmV9KTt2YXIgaT1HaSh0aGlzLnRva2Vuc1swXSx0aGlzLnRva2Vuc1t0aGlzLnRva2Vucy5sZW5ndGgtMV0pO3RoaXMucm9vdD1uZXcgR3AuZGVmYXVsdCh7c291cmNlOml9KSx0aGlzLnJvb3QuZXJyb3JHZW5lcmF0b3I9dGhpcy5fZXJyb3JHZW5lcmF0b3IoKTt2YXIgbz1uZXcgV2kuZGVmYXVsdCh7c291cmNlOntzdGFydDp7bGluZToxLGNvbHVtbjoxfX19KTt0aGlzLnJvb3QuYXBwZW5kKG8pLHRoaXMuY3VycmVudD1vLHRoaXMubG9vcCgpfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Ll9lcnJvckdlbmVyYXRvcj1mdW5jdGlvbigpe3ZhciByPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKGksbyl7cmV0dXJuIHR5cGVvZiByLnJ1bGU9PVwic3RyaW5nXCI/bmV3IEVycm9yKGkpOnIucnVsZS5lcnJvcihpLG8pfX0sdC5hdHRyaWJ1dGU9ZnVuY3Rpb24oKXt2YXIgcj1bXSxpPXRoaXMuY3VyclRva2VuO2Zvcih0aGlzLnBvc2l0aW9uKys7dGhpcy5wb3NpdGlvbjx0aGlzLnRva2Vucy5sZW5ndGgmJnRoaXMuY3VyclRva2VuW3cuRklFTERTLlRZUEVdIT09Xy5jbG9zZVNxdWFyZTspci5wdXNoKHRoaXMuY3VyclRva2VuKSx0aGlzLnBvc2l0aW9uKys7aWYodGhpcy5jdXJyVG9rZW5bdy5GSUVMRFMuVFlQRV0hPT1fLmNsb3NlU3F1YXJlKXJldHVybiB0aGlzLmV4cGVjdGVkKFwiY2xvc2luZyBzcXVhcmUgYnJhY2tldFwiLHRoaXMuY3VyclRva2VuW3cuRklFTERTLlNUQVJUX1BPU10pO3ZhciBvPXIubGVuZ3RoLHU9e3NvdXJjZTpzdChpWzFdLGlbMl0sdGhpcy5jdXJyVG9rZW5bM10sdGhpcy5jdXJyVG9rZW5bNF0pLHNvdXJjZUluZGV4Omlbdy5GSUVMRFMuU1RBUlRfUE9TXX07aWYobz09PTEmJiF+W18ud29yZF0uaW5kZXhPZihyWzBdW3cuRklFTERTLlRZUEVdKSlyZXR1cm4gdGhpcy5leHBlY3RlZChcImF0dHJpYnV0ZVwiLHJbMF1bdy5GSUVMRFMuU1RBUlRfUE9TXSk7Zm9yKHZhciBzPTAsYT1cIlwiLGw9XCJcIixmPW51bGwsYz0hMTtzPG87KXt2YXIgcD1yW3NdLGg9dGhpcy5jb250ZW50KHApLGQ9cltzKzFdO3N3aXRjaChwW3cuRklFTERTLlRZUEVdKXtjYXNlIF8uc3BhY2U6aWYoYz0hMCx0aGlzLm9wdGlvbnMubG9zc3kpYnJlYWs7aWYoZil7KDAscmUuZW5zdXJlT2JqZWN0KSh1LFwic3BhY2VzXCIsZik7dmFyIG09dS5zcGFjZXNbZl0uYWZ0ZXJ8fFwiXCI7dS5zcGFjZXNbZl0uYWZ0ZXI9bStoO3ZhciB2PSgwLHJlLmdldFByb3ApKHUsXCJyYXdzXCIsXCJzcGFjZXNcIixmLFwiYWZ0ZXJcIil8fG51bGw7diYmKHUucmF3cy5zcGFjZXNbZl0uYWZ0ZXI9ditoKX1lbHNlIGE9YStoLGw9bCtoO2JyZWFrO2Nhc2UgXy5hc3RlcmlzazppZihkW3cuRklFTERTLlRZUEVdPT09Xy5lcXVhbHMpdS5vcGVyYXRvcj1oLGY9XCJvcGVyYXRvclwiO2Vsc2UgaWYoKCF1Lm5hbWVzcGFjZXx8Zj09PVwibmFtZXNwYWNlXCImJiFjKSYmZCl7YSYmKCgwLHJlLmVuc3VyZU9iamVjdCkodSxcInNwYWNlc1wiLFwiYXR0cmlidXRlXCIpLHUuc3BhY2VzLmF0dHJpYnV0ZS5iZWZvcmU9YSxhPVwiXCIpLGwmJigoMCxyZS5lbnN1cmVPYmplY3QpKHUsXCJyYXdzXCIsXCJzcGFjZXNcIixcImF0dHJpYnV0ZVwiKSx1LnJhd3Muc3BhY2VzLmF0dHJpYnV0ZS5iZWZvcmU9YSxsPVwiXCIpLHUubmFtZXNwYWNlPSh1Lm5hbWVzcGFjZXx8XCJcIikraDt2YXIgZz0oMCxyZS5nZXRQcm9wKSh1LFwicmF3c1wiLFwibmFtZXNwYWNlXCIpfHxudWxsO2cmJih1LnJhd3MubmFtZXNwYWNlKz1oKSxmPVwibmFtZXNwYWNlXCJ9Yz0hMTticmVhaztjYXNlIF8uZG9sbGFyOmlmKGY9PT1cInZhbHVlXCIpe3ZhciBiPSgwLHJlLmdldFByb3ApKHUsXCJyYXdzXCIsXCJ2YWx1ZVwiKTt1LnZhbHVlKz1cIiRcIixiJiYodS5yYXdzLnZhbHVlPWIrXCIkXCIpO2JyZWFrfWNhc2UgXy5jYXJldDpkW3cuRklFTERTLlRZUEVdPT09Xy5lcXVhbHMmJih1Lm9wZXJhdG9yPWgsZj1cIm9wZXJhdG9yXCIpLGM9ITE7YnJlYWs7Y2FzZSBfLmNvbWJpbmF0b3I6aWYoaD09PVwiflwiJiZkW3cuRklFTERTLlRZUEVdPT09Xy5lcXVhbHMmJih1Lm9wZXJhdG9yPWgsZj1cIm9wZXJhdG9yXCIpLGghPT1cInxcIil7Yz0hMTticmVha31kW3cuRklFTERTLlRZUEVdPT09Xy5lcXVhbHM/KHUub3BlcmF0b3I9aCxmPVwib3BlcmF0b3JcIik6IXUubmFtZXNwYWNlJiYhdS5hdHRyaWJ1dGUmJih1Lm5hbWVzcGFjZT0hMCksYz0hMTticmVhaztjYXNlIF8ud29yZDppZihkJiZ0aGlzLmNvbnRlbnQoZCk9PT1cInxcIiYmcltzKzJdJiZyW3MrMl1bdy5GSUVMRFMuVFlQRV0hPT1fLmVxdWFscyYmIXUub3BlcmF0b3ImJiF1Lm5hbWVzcGFjZSl1Lm5hbWVzcGFjZT1oLGY9XCJuYW1lc3BhY2VcIjtlbHNlIGlmKCF1LmF0dHJpYnV0ZXx8Zj09PVwiYXR0cmlidXRlXCImJiFjKXthJiYoKDAscmUuZW5zdXJlT2JqZWN0KSh1LFwic3BhY2VzXCIsXCJhdHRyaWJ1dGVcIiksdS5zcGFjZXMuYXR0cmlidXRlLmJlZm9yZT1hLGE9XCJcIiksbCYmKCgwLHJlLmVuc3VyZU9iamVjdCkodSxcInJhd3NcIixcInNwYWNlc1wiLFwiYXR0cmlidXRlXCIpLHUucmF3cy5zcGFjZXMuYXR0cmlidXRlLmJlZm9yZT1sLGw9XCJcIiksdS5hdHRyaWJ1dGU9KHUuYXR0cmlidXRlfHxcIlwiKStoO3ZhciB4PSgwLHJlLmdldFByb3ApKHUsXCJyYXdzXCIsXCJhdHRyaWJ1dGVcIil8fG51bGw7eCYmKHUucmF3cy5hdHRyaWJ1dGUrPWgpLGY9XCJhdHRyaWJ1dGVcIn1lbHNlIGlmKCF1LnZhbHVlJiZ1LnZhbHVlIT09XCJcInx8Zj09PVwidmFsdWVcIiYmIWMpe3ZhciBGPSgwLHJlLnVuZXNjKShoKSx5PSgwLHJlLmdldFByb3ApKHUsXCJyYXdzXCIsXCJ2YWx1ZVwiKXx8XCJcIixrPXUudmFsdWV8fFwiXCI7dS52YWx1ZT1rK0YsdS5xdW90ZU1hcms9bnVsbCwoRiE9PWh8fHkpJiYoKDAscmUuZW5zdXJlT2JqZWN0KSh1LFwicmF3c1wiKSx1LnJhd3MudmFsdWU9KHl8fGspK2gpLGY9XCJ2YWx1ZVwifWVsc2V7dmFyIFA9aD09PVwiaVwifHxoPT09XCJJXCI7KHUudmFsdWV8fHUudmFsdWU9PT1cIlwiKSYmKHUucXVvdGVNYXJrfHxjKT8odS5pbnNlbnNpdGl2ZT1QLCghUHx8aD09PVwiSVwiKSYmKCgwLHJlLmVuc3VyZU9iamVjdCkodSxcInJhd3NcIiksdS5yYXdzLmluc2Vuc2l0aXZlRmxhZz1oKSxmPVwiaW5zZW5zaXRpdmVcIixhJiYoKDAscmUuZW5zdXJlT2JqZWN0KSh1LFwic3BhY2VzXCIsXCJpbnNlbnNpdGl2ZVwiKSx1LnNwYWNlcy5pbnNlbnNpdGl2ZS5iZWZvcmU9YSxhPVwiXCIpLGwmJigoMCxyZS5lbnN1cmVPYmplY3QpKHUsXCJyYXdzXCIsXCJzcGFjZXNcIixcImluc2Vuc2l0aXZlXCIpLHUucmF3cy5zcGFjZXMuaW5zZW5zaXRpdmUuYmVmb3JlPWwsbD1cIlwiKSk6KHUudmFsdWV8fHUudmFsdWU9PT1cIlwiKSYmKGY9XCJ2YWx1ZVwiLHUudmFsdWUrPWgsdS5yYXdzLnZhbHVlJiYodS5yYXdzLnZhbHVlKz1oKSl9Yz0hMTticmVhaztjYXNlIF8uc3RyOmlmKCF1LmF0dHJpYnV0ZXx8IXUub3BlcmF0b3IpcmV0dXJuIHRoaXMuZXJyb3IoXCJFeHBlY3RlZCBhbiBhdHRyaWJ1dGUgZm9sbG93ZWQgYnkgYW4gb3BlcmF0b3IgcHJlY2VkaW5nIHRoZSBzdHJpbmcuXCIse2luZGV4OnBbdy5GSUVMRFMuU1RBUlRfUE9TXX0pO3ZhciBCPSgwLCRzLnVuZXNjYXBlVmFsdWUpKGgpLGo9Qi51bmVzY2FwZWQsb2U9Qi5xdW90ZU1hcms7dS52YWx1ZT1qLHUucXVvdGVNYXJrPW9lLGY9XCJ2YWx1ZVwiLCgwLHJlLmVuc3VyZU9iamVjdCkodSxcInJhd3NcIiksdS5yYXdzLnZhbHVlPWgsYz0hMTticmVhaztjYXNlIF8uZXF1YWxzOmlmKCF1LmF0dHJpYnV0ZSlyZXR1cm4gdGhpcy5leHBlY3RlZChcImF0dHJpYnV0ZVwiLHBbdy5GSUVMRFMuU1RBUlRfUE9TXSxoKTtpZih1LnZhbHVlKXJldHVybiB0aGlzLmVycm9yKCdVbmV4cGVjdGVkIFwiPVwiIGZvdW5kOyBhbiBvcGVyYXRvciB3YXMgYWxyZWFkeSBkZWZpbmVkLicse2luZGV4OnBbdy5GSUVMRFMuU1RBUlRfUE9TXX0pO3Uub3BlcmF0b3I9dS5vcGVyYXRvcj91Lm9wZXJhdG9yK2g6aCxmPVwib3BlcmF0b3JcIixjPSExO2JyZWFrO2Nhc2UgXy5jb21tZW50OmlmKGYpaWYoY3x8ZCYmZFt3LkZJRUxEUy5UWVBFXT09PV8uc3BhY2V8fGY9PT1cImluc2Vuc2l0aXZlXCIpe3ZhciB1ZT0oMCxyZS5nZXRQcm9wKSh1LFwic3BhY2VzXCIsZixcImFmdGVyXCIpfHxcIlwiLHNlPSgwLHJlLmdldFByb3ApKHUsXCJyYXdzXCIsXCJzcGFjZXNcIixmLFwiYWZ0ZXJcIil8fHVlOygwLHJlLmVuc3VyZU9iamVjdCkodSxcInJhd3NcIixcInNwYWNlc1wiLGYpLHUucmF3cy5zcGFjZXNbZl0uYWZ0ZXI9c2UraH1lbHNle3ZhciBOPXVbZl18fFwiXCIsTD0oMCxyZS5nZXRQcm9wKSh1LFwicmF3c1wiLGYpfHxOOygwLHJlLmVuc3VyZU9iamVjdCkodSxcInJhd3NcIiksdS5yYXdzW2ZdPUwraH1lbHNlIGw9bCtoO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIHRoaXMuZXJyb3IoJ1VuZXhwZWN0ZWQgXCInK2grJ1wiIGZvdW5kLicse2luZGV4OnBbdy5GSUVMRFMuU1RBUlRfUE9TXX0pfXMrK313dCh1LFwiYXR0cmlidXRlXCIpLHd0KHUsXCJuYW1lc3BhY2VcIiksdGhpcy5uZXdOb2RlKG5ldyAkcy5kZWZhdWx0KHUpKSx0aGlzLnBvc2l0aW9uKyt9LHQucGFyc2VXaGl0ZXNwYWNlRXF1aXZhbGVudFRva2Vucz1mdW5jdGlvbihyKXtyPDAmJihyPXRoaXMudG9rZW5zLmxlbmd0aCk7dmFyIGk9dGhpcy5wb3NpdGlvbixvPVtdLHU9XCJcIixzPXZvaWQgMDtkbyBpZihIaVt0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5UWVBFXV0pdGhpcy5vcHRpb25zLmxvc3N5fHwodSs9dGhpcy5jb250ZW50KCkpO2Vsc2UgaWYodGhpcy5jdXJyVG9rZW5bdy5GSUVMRFMuVFlQRV09PT1fLmNvbW1lbnQpe3ZhciBhPXt9O3UmJihhLmJlZm9yZT11LHU9XCJcIikscz1uZXcgTnMuZGVmYXVsdCh7dmFsdWU6dGhpcy5jb250ZW50KCksc291cmNlOkZ0KHRoaXMuY3VyclRva2VuKSxzb3VyY2VJbmRleDp0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5TVEFSVF9QT1NdLHNwYWNlczphfSksby5wdXNoKHMpfXdoaWxlKCsrdGhpcy5wb3NpdGlvbjxyKTtpZih1KXtpZihzKXMuc3BhY2VzLmFmdGVyPXU7ZWxzZSBpZighdGhpcy5vcHRpb25zLmxvc3N5KXt2YXIgbD10aGlzLnRva2Vuc1tpXSxmPXRoaXMudG9rZW5zW3RoaXMucG9zaXRpb24tMV07by5wdXNoKG5ldyBxaS5kZWZhdWx0KHt2YWx1ZTpcIlwiLHNvdXJjZTpzdChsW3cuRklFTERTLlNUQVJUX0xJTkVdLGxbdy5GSUVMRFMuU1RBUlRfQ09MXSxmW3cuRklFTERTLkVORF9MSU5FXSxmW3cuRklFTERTLkVORF9DT0xdKSxzb3VyY2VJbmRleDpsW3cuRklFTERTLlNUQVJUX1BPU10sc3BhY2VzOntiZWZvcmU6dSxhZnRlcjpcIlwifX0pKX19cmV0dXJuIG99LHQuY29udmVydFdoaXRlc3BhY2VOb2Rlc1RvU3BhY2U9ZnVuY3Rpb24ocixpKXt2YXIgbz10aGlzO2k9PT12b2lkIDAmJihpPSExKTt2YXIgdT1cIlwiLHM9XCJcIjtyLmZvckVhY2goZnVuY3Rpb24obCl7dmFyIGY9by5sb3NzeVNwYWNlKGwuc3BhY2VzLmJlZm9yZSxpKSxjPW8ubG9zc3lTcGFjZShsLnJhd1NwYWNlQmVmb3JlLGkpO3UrPWYrby5sb3NzeVNwYWNlKGwuc3BhY2VzLmFmdGVyLGkmJmYubGVuZ3RoPT09MCkscys9ZitsLnZhbHVlK28ubG9zc3lTcGFjZShsLnJhd1NwYWNlQWZ0ZXIsaSYmYy5sZW5ndGg9PT0wKX0pLHM9PT11JiYocz12b2lkIDApO3ZhciBhPXtzcGFjZTp1LHJhd1NwYWNlOnN9O3JldHVybiBhfSx0LmlzTmFtZWRDb21iaW5hdG9yPWZ1bmN0aW9uKHIpe3JldHVybiByPT09dm9pZCAwJiYocj10aGlzLnBvc2l0aW9uKSx0aGlzLnRva2Vuc1tyKzBdJiZ0aGlzLnRva2Vuc1tyKzBdW3cuRklFTERTLlRZUEVdPT09Xy5zbGFzaCYmdGhpcy50b2tlbnNbcisxXSYmdGhpcy50b2tlbnNbcisxXVt3LkZJRUxEUy5UWVBFXT09PV8ud29yZCYmdGhpcy50b2tlbnNbcisyXSYmdGhpcy50b2tlbnNbcisyXVt3LkZJRUxEUy5UWVBFXT09PV8uc2xhc2h9LHQubmFtZWRDb21iaW5hdG9yPWZ1bmN0aW9uKCl7aWYodGhpcy5pc05hbWVkQ29tYmluYXRvcigpKXt2YXIgcj10aGlzLmNvbnRlbnQodGhpcy50b2tlbnNbdGhpcy5wb3NpdGlvbisxXSksaT0oMCxyZS51bmVzYykocikudG9Mb3dlckNhc2UoKSxvPXt9O2khPT1yJiYoby52YWx1ZT1cIi9cIityK1wiL1wiKTt2YXIgdT1uZXcgVWkuZGVmYXVsdCh7dmFsdWU6XCIvXCIraStcIi9cIixzb3VyY2U6c3QodGhpcy5jdXJyVG9rZW5bdy5GSUVMRFMuU1RBUlRfTElORV0sdGhpcy5jdXJyVG9rZW5bdy5GSUVMRFMuU1RBUlRfQ09MXSx0aGlzLnRva2Vuc1t0aGlzLnBvc2l0aW9uKzJdW3cuRklFTERTLkVORF9MSU5FXSx0aGlzLnRva2Vuc1t0aGlzLnBvc2l0aW9uKzJdW3cuRklFTERTLkVORF9DT0xdKSxzb3VyY2VJbmRleDp0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5TVEFSVF9QT1NdLHJhd3M6b30pO3JldHVybiB0aGlzLnBvc2l0aW9uPXRoaXMucG9zaXRpb24rMyx1fWVsc2UgdGhpcy51bmV4cGVjdGVkKCl9LHQuY29tYmluYXRvcj1mdW5jdGlvbigpe3ZhciByPXRoaXM7aWYodGhpcy5jb250ZW50KCk9PT1cInxcIilyZXR1cm4gdGhpcy5uYW1lc3BhY2UoKTt2YXIgaT10aGlzLmxvY2F0ZU5leHRNZWFuaW5nZnVsVG9rZW4odGhpcy5wb3NpdGlvbik7aWYoaTwwfHx0aGlzLnRva2Vuc1tpXVt3LkZJRUxEUy5UWVBFXT09PV8uY29tbWEpe3ZhciBvPXRoaXMucGFyc2VXaGl0ZXNwYWNlRXF1aXZhbGVudFRva2VucyhpKTtpZihvLmxlbmd0aD4wKXt2YXIgdT10aGlzLmN1cnJlbnQubGFzdDtpZih1KXt2YXIgcz10aGlzLmNvbnZlcnRXaGl0ZXNwYWNlTm9kZXNUb1NwYWNlKG8pLGE9cy5zcGFjZSxsPXMucmF3U3BhY2U7bCE9PXZvaWQgMCYmKHUucmF3U3BhY2VBZnRlcis9bCksdS5zcGFjZXMuYWZ0ZXIrPWF9ZWxzZSBvLmZvckVhY2goZnVuY3Rpb24oeSl7cmV0dXJuIHIubmV3Tm9kZSh5KX0pfXJldHVybn12YXIgZj10aGlzLmN1cnJUb2tlbixjPXZvaWQgMDtpPnRoaXMucG9zaXRpb24mJihjPXRoaXMucGFyc2VXaGl0ZXNwYWNlRXF1aXZhbGVudFRva2VucyhpKSk7dmFyIHA7aWYodGhpcy5pc05hbWVkQ29tYmluYXRvcigpP3A9dGhpcy5uYW1lZENvbWJpbmF0b3IoKTp0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5UWVBFXT09PV8uY29tYmluYXRvcj8ocD1uZXcgVWkuZGVmYXVsdCh7dmFsdWU6dGhpcy5jb250ZW50KCksc291cmNlOkZ0KHRoaXMuY3VyclRva2VuKSxzb3VyY2VJbmRleDp0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5TVEFSVF9QT1NdfSksdGhpcy5wb3NpdGlvbisrKTpIaVt0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5UWVBFXV18fGN8fHRoaXMudW5leHBlY3RlZCgpLHApe2lmKGMpe3ZhciBoPXRoaXMuY29udmVydFdoaXRlc3BhY2VOb2Rlc1RvU3BhY2UoYyksZD1oLnNwYWNlLG09aC5yYXdTcGFjZTtwLnNwYWNlcy5iZWZvcmU9ZCxwLnJhd1NwYWNlQmVmb3JlPW19fWVsc2V7dmFyIHY9dGhpcy5jb252ZXJ0V2hpdGVzcGFjZU5vZGVzVG9TcGFjZShjLCEwKSxnPXYuc3BhY2UsYj12LnJhd1NwYWNlO2J8fChiPWcpO3ZhciB4PXt9LEY9e3NwYWNlczp7fX07Zy5lbmRzV2l0aChcIiBcIikmJmIuZW5kc1dpdGgoXCIgXCIpPyh4LmJlZm9yZT1nLnNsaWNlKDAsZy5sZW5ndGgtMSksRi5zcGFjZXMuYmVmb3JlPWIuc2xpY2UoMCxiLmxlbmd0aC0xKSk6Zy5zdGFydHNXaXRoKFwiIFwiKSYmYi5zdGFydHNXaXRoKFwiIFwiKT8oeC5hZnRlcj1nLnNsaWNlKDEpLEYuc3BhY2VzLmFmdGVyPWIuc2xpY2UoMSkpOkYudmFsdWU9YixwPW5ldyBVaS5kZWZhdWx0KHt2YWx1ZTpcIiBcIixzb3VyY2U6R2koZix0aGlzLnRva2Vuc1t0aGlzLnBvc2l0aW9uLTFdKSxzb3VyY2VJbmRleDpmW3cuRklFTERTLlNUQVJUX1BPU10sc3BhY2VzOngscmF3czpGfSl9cmV0dXJuIHRoaXMuY3VyclRva2VuJiZ0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5UWVBFXT09PV8uc3BhY2UmJihwLnNwYWNlcy5hZnRlcj10aGlzLm9wdGlvbmFsU3BhY2UodGhpcy5jb250ZW50KCkpLHRoaXMucG9zaXRpb24rKyksdGhpcy5uZXdOb2RlKHApfSx0LmNvbW1hPWZ1bmN0aW9uKCl7aWYodGhpcy5wb3NpdGlvbj09PXRoaXMudG9rZW5zLmxlbmd0aC0xKXt0aGlzLnJvb3QudHJhaWxpbmdDb21tYT0hMCx0aGlzLnBvc2l0aW9uKys7cmV0dXJufXRoaXMuY3VycmVudC5faW5mZXJFbmRQb3NpdGlvbigpO3ZhciByPW5ldyBXaS5kZWZhdWx0KHtzb3VyY2U6e3N0YXJ0OnFzKHRoaXMudG9rZW5zW3RoaXMucG9zaXRpb24rMV0pfX0pO3RoaXMuY3VycmVudC5wYXJlbnQuYXBwZW5kKHIpLHRoaXMuY3VycmVudD1yLHRoaXMucG9zaXRpb24rK30sdC5jb21tZW50PWZ1bmN0aW9uKCl7dmFyIHI9dGhpcy5jdXJyVG9rZW47dGhpcy5uZXdOb2RlKG5ldyBOcy5kZWZhdWx0KHt2YWx1ZTp0aGlzLmNvbnRlbnQoKSxzb3VyY2U6RnQociksc291cmNlSW5kZXg6clt3LkZJRUxEUy5TVEFSVF9QT1NdfSkpLHRoaXMucG9zaXRpb24rK30sdC5lcnJvcj1mdW5jdGlvbihyLGkpe3Rocm93IHRoaXMucm9vdC5lcnJvcihyLGkpfSx0Lm1pc3NpbmdCYWNrc2xhc2g9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcnJvcihcIkV4cGVjdGVkIGEgYmFja3NsYXNoIHByZWNlZGluZyB0aGUgc2VtaWNvbG9uLlwiLHtpbmRleDp0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5TVEFSVF9QT1NdfSl9LHQubWlzc2luZ1BhcmVudGhlc2lzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXhwZWN0ZWQoXCJvcGVuaW5nIHBhcmVudGhlc2lzXCIsdGhpcy5jdXJyVG9rZW5bdy5GSUVMRFMuU1RBUlRfUE9TXSl9LHQubWlzc2luZ1NxdWFyZUJyYWNrZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5leHBlY3RlZChcIm9wZW5pbmcgc3F1YXJlIGJyYWNrZXRcIix0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5TVEFSVF9QT1NdKX0sdC51bmV4cGVjdGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXJyb3IoXCJVbmV4cGVjdGVkICdcIit0aGlzLmNvbnRlbnQoKStcIicuIEVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyB3aXRoIFxcXFwgbWF5IGhlbHAuXCIsdGhpcy5jdXJyVG9rZW5bdy5GSUVMRFMuU1RBUlRfUE9TXSl9LHQubmFtZXNwYWNlPWZ1bmN0aW9uKCl7dmFyIHI9dGhpcy5wcmV2VG9rZW4mJnRoaXMuY29udGVudCh0aGlzLnByZXZUb2tlbil8fCEwO2lmKHRoaXMubmV4dFRva2VuW3cuRklFTERTLlRZUEVdPT09Xy53b3JkKXJldHVybiB0aGlzLnBvc2l0aW9uKyssdGhpcy53b3JkKHIpO2lmKHRoaXMubmV4dFRva2VuW3cuRklFTERTLlRZUEVdPT09Xy5hc3RlcmlzaylyZXR1cm4gdGhpcy5wb3NpdGlvbisrLHRoaXMudW5pdmVyc2FsKHIpfSx0Lm5lc3Rpbmc9ZnVuY3Rpb24oKXtpZih0aGlzLm5leHRUb2tlbil7dmFyIHI9dGhpcy5jb250ZW50KHRoaXMubmV4dFRva2VuKTtpZihyPT09XCJ8XCIpe3RoaXMucG9zaXRpb24rKztyZXR1cm59fXZhciBpPXRoaXMuY3VyclRva2VuO3RoaXMubmV3Tm9kZShuZXcgUXAuZGVmYXVsdCh7dmFsdWU6dGhpcy5jb250ZW50KCksc291cmNlOkZ0KGkpLHNvdXJjZUluZGV4Omlbdy5GSUVMRFMuU1RBUlRfUE9TXX0pKSx0aGlzLnBvc2l0aW9uKyt9LHQucGFyZW50aGVzZXM9ZnVuY3Rpb24oKXt2YXIgcj10aGlzLmN1cnJlbnQubGFzdCxpPTE7aWYodGhpcy5wb3NpdGlvbisrLHImJnIudHlwZT09PUpwLlBTRVVETyl7dmFyIG89bmV3IFdpLmRlZmF1bHQoe3NvdXJjZTp7c3RhcnQ6cXModGhpcy50b2tlbnNbdGhpcy5wb3NpdGlvbi0xXSl9fSksdT10aGlzLmN1cnJlbnQ7Zm9yKHIuYXBwZW5kKG8pLHRoaXMuY3VycmVudD1vO3RoaXMucG9zaXRpb248dGhpcy50b2tlbnMubGVuZ3RoJiZpOyl0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5UWVBFXT09PV8ub3BlblBhcmVudGhlc2lzJiZpKyssdGhpcy5jdXJyVG9rZW5bdy5GSUVMRFMuVFlQRV09PT1fLmNsb3NlUGFyZW50aGVzaXMmJmktLSxpP3RoaXMucGFyc2UoKToodGhpcy5jdXJyZW50LnNvdXJjZS5lbmQ9VXModGhpcy5jdXJyVG9rZW4pLHRoaXMuY3VycmVudC5wYXJlbnQuc291cmNlLmVuZD1Vcyh0aGlzLmN1cnJUb2tlbiksdGhpcy5wb3NpdGlvbisrKTt0aGlzLmN1cnJlbnQ9dX1lbHNle2Zvcih2YXIgcz10aGlzLmN1cnJUb2tlbixhPVwiKFwiLGw7dGhpcy5wb3NpdGlvbjx0aGlzLnRva2Vucy5sZW5ndGgmJmk7KXRoaXMuY3VyclRva2VuW3cuRklFTERTLlRZUEVdPT09Xy5vcGVuUGFyZW50aGVzaXMmJmkrKyx0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5UWVBFXT09PV8uY2xvc2VQYXJlbnRoZXNpcyYmaS0tLGw9dGhpcy5jdXJyVG9rZW4sYSs9dGhpcy5wYXJzZVBhcmVudGhlc2lzVG9rZW4odGhpcy5jdXJyVG9rZW4pLHRoaXMucG9zaXRpb24rKztyP3IuYXBwZW5kVG9Qcm9wZXJ0eUFuZEVzY2FwZShcInZhbHVlXCIsYSxhKTp0aGlzLm5ld05vZGUobmV3IHFpLmRlZmF1bHQoe3ZhbHVlOmEsc291cmNlOnN0KHNbdy5GSUVMRFMuU1RBUlRfTElORV0sc1t3LkZJRUxEUy5TVEFSVF9DT0xdLGxbdy5GSUVMRFMuRU5EX0xJTkVdLGxbdy5GSUVMRFMuRU5EX0NPTF0pLHNvdXJjZUluZGV4OnNbdy5GSUVMRFMuU1RBUlRfUE9TXX0pKX1pZihpKXJldHVybiB0aGlzLmV4cGVjdGVkKFwiY2xvc2luZyBwYXJlbnRoZXNpc1wiLHRoaXMuY3VyclRva2VuW3cuRklFTERTLlNUQVJUX1BPU10pfSx0LnBzZXVkbz1mdW5jdGlvbigpe2Zvcih2YXIgcj10aGlzLGk9XCJcIixvPXRoaXMuY3VyclRva2VuO3RoaXMuY3VyclRva2VuJiZ0aGlzLmN1cnJUb2tlblt3LkZJRUxEUy5UWVBFXT09PV8uY29sb247KWkrPXRoaXMuY29udGVudCgpLHRoaXMucG9zaXRpb24rKztpZighdGhpcy5jdXJyVG9rZW4pcmV0dXJuIHRoaXMuZXhwZWN0ZWQoW1wicHNldWRvLWNsYXNzXCIsXCJwc2V1ZG8tZWxlbWVudFwiXSx0aGlzLnBvc2l0aW9uLTEpO2lmKHRoaXMuY3VyclRva2VuW3cuRklFTERTLlRZUEVdPT09Xy53b3JkKXRoaXMuc3BsaXRXb3JkKCExLGZ1bmN0aW9uKHUscyl7aSs9dSxyLm5ld05vZGUobmV3IFlwLmRlZmF1bHQoe3ZhbHVlOmksc291cmNlOkdpKG8sci5jdXJyVG9rZW4pLHNvdXJjZUluZGV4Om9bdy5GSUVMRFMuU1RBUlRfUE9TXX0pKSxzPjEmJnIubmV4dFRva2VuJiZyLm5leHRUb2tlblt3LkZJRUxEUy5UWVBFXT09PV8ub3BlblBhcmVudGhlc2lzJiZyLmVycm9yKFwiTWlzcGxhY2VkIHBhcmVudGhlc2lzLlwiLHtpbmRleDpyLm5leHRUb2tlblt3LkZJRUxEUy5TVEFSVF9QT1NdfSl9KTtlbHNlIHJldHVybiB0aGlzLmV4cGVjdGVkKFtcInBzZXVkby1jbGFzc1wiLFwicHNldWRvLWVsZW1lbnRcIl0sdGhpcy5jdXJyVG9rZW5bdy5GSUVMRFMuU1RBUlRfUE9TXSl9LHQuc3BhY2U9ZnVuY3Rpb24oKXt2YXIgcj10aGlzLmNvbnRlbnQoKTt0aGlzLnBvc2l0aW9uPT09MHx8dGhpcy5wcmV2VG9rZW5bdy5GSUVMRFMuVFlQRV09PT1fLmNvbW1hfHx0aGlzLnByZXZUb2tlblt3LkZJRUxEUy5UWVBFXT09PV8ub3BlblBhcmVudGhlc2lzfHx0aGlzLmN1cnJlbnQubm9kZXMuZXZlcnkoZnVuY3Rpb24oaSl7cmV0dXJuIGkudHlwZT09PVwiY29tbWVudFwifSk/KHRoaXMuc3BhY2VzPXRoaXMub3B0aW9uYWxTcGFjZShyKSx0aGlzLnBvc2l0aW9uKyspOnRoaXMucG9zaXRpb249PT10aGlzLnRva2Vucy5sZW5ndGgtMXx8dGhpcy5uZXh0VG9rZW5bdy5GSUVMRFMuVFlQRV09PT1fLmNvbW1hfHx0aGlzLm5leHRUb2tlblt3LkZJRUxEUy5UWVBFXT09PV8uY2xvc2VQYXJlbnRoZXNpcz8odGhpcy5jdXJyZW50Lmxhc3Quc3BhY2VzLmFmdGVyPXRoaXMub3B0aW9uYWxTcGFjZShyKSx0aGlzLnBvc2l0aW9uKyspOnRoaXMuY29tYmluYXRvcigpfSx0LnN0cmluZz1mdW5jdGlvbigpe3ZhciByPXRoaXMuY3VyclRva2VuO3RoaXMubmV3Tm9kZShuZXcgcWkuZGVmYXVsdCh7dmFsdWU6dGhpcy5jb250ZW50KCksc291cmNlOkZ0KHIpLHNvdXJjZUluZGV4OnJbdy5GSUVMRFMuU1RBUlRfUE9TXX0pKSx0aGlzLnBvc2l0aW9uKyt9LHQudW5pdmVyc2FsPWZ1bmN0aW9uKHIpe3ZhciBpPXRoaXMubmV4dFRva2VuO2lmKGkmJnRoaXMuY29udGVudChpKT09PVwifFwiKXJldHVybiB0aGlzLnBvc2l0aW9uKyssdGhpcy5uYW1lc3BhY2UoKTt2YXIgbz10aGlzLmN1cnJUb2tlbjt0aGlzLm5ld05vZGUobmV3IFhwLmRlZmF1bHQoe3ZhbHVlOnRoaXMuY29udGVudCgpLHNvdXJjZTpGdChvKSxzb3VyY2VJbmRleDpvW3cuRklFTERTLlNUQVJUX1BPU119KSxyKSx0aGlzLnBvc2l0aW9uKyt9LHQuc3BsaXRXb3JkPWZ1bmN0aW9uKHIsaSl7Zm9yKHZhciBvPXRoaXMsdT10aGlzLm5leHRUb2tlbixzPXRoaXMuY29udGVudCgpO3UmJn5bXy5kb2xsYXIsXy5jYXJldCxfLmVxdWFscyxfLndvcmRdLmluZGV4T2YodVt3LkZJRUxEUy5UWVBFXSk7KXt0aGlzLnBvc2l0aW9uKys7dmFyIGE9dGhpcy5jb250ZW50KCk7aWYocys9YSxhLmxhc3RJbmRleE9mKFwiXFxcXFwiKT09PWEubGVuZ3RoLTEpe3ZhciBsPXRoaXMubmV4dFRva2VuO2wmJmxbdy5GSUVMRFMuVFlQRV09PT1fLnNwYWNlJiYocys9dGhpcy5yZXF1aXJlZFNwYWNlKHRoaXMuY29udGVudChsKSksdGhpcy5wb3NpdGlvbisrKX11PXRoaXMubmV4dFRva2VufXZhciBmPWppKHMsXCIuXCIpLmZpbHRlcihmdW5jdGlvbihkKXt2YXIgbT1zW2QtMV09PT1cIlxcXFxcIix2PS9eXFxkK1xcLlxcZCslJC8udGVzdChzKTtyZXR1cm4hbSYmIXZ9KSxjPWppKHMsXCIjXCIpLmZpbHRlcihmdW5jdGlvbihkKXtyZXR1cm4gc1tkLTFdIT09XCJcXFxcXCJ9KSxwPWppKHMsXCIje1wiKTtwLmxlbmd0aCYmKGM9Yy5maWx0ZXIoZnVuY3Rpb24oZCl7cmV0dXJuIX5wLmluZGV4T2YoZCl9KSk7dmFyIGg9KDAsS3AuZGVmYXVsdCkodDAoWzBdLmNvbmNhdChmLGMpKSk7aC5mb3JFYWNoKGZ1bmN0aW9uKGQsbSl7dmFyIHY9aFttKzFdfHxzLmxlbmd0aCxnPXMuc2xpY2UoZCx2KTtpZihtPT09MCYmaSlyZXR1cm4gaS5jYWxsKG8sZyxoLmxlbmd0aCk7dmFyIGIseD1vLmN1cnJUb2tlbixGPXhbdy5GSUVMRFMuU1RBUlRfUE9TXStoW21dLHk9c3QoeFsxXSx4WzJdK2QseFszXSx4WzJdKyh2LTEpKTtpZih+Zi5pbmRleE9mKGQpKXt2YXIgaz17dmFsdWU6Zy5zbGljZSgxKSxzb3VyY2U6eSxzb3VyY2VJbmRleDpGfTtiPW5ldyBqcC5kZWZhdWx0KHd0KGssXCJ2YWx1ZVwiKSl9ZWxzZSBpZih+Yy5pbmRleE9mKGQpKXt2YXIgUD17dmFsdWU6Zy5zbGljZSgxKSxzb3VyY2U6eSxzb3VyY2VJbmRleDpGfTtiPW5ldyBIcC5kZWZhdWx0KHd0KFAsXCJ2YWx1ZVwiKSl9ZWxzZXt2YXIgQj17dmFsdWU6Zyxzb3VyY2U6eSxzb3VyY2VJbmRleDpGfTt3dChCLFwidmFsdWVcIiksYj1uZXcgVnAuZGVmYXVsdChCKX1vLm5ld05vZGUoYixyKSxyPW51bGx9KSx0aGlzLnBvc2l0aW9uKyt9LHQud29yZD1mdW5jdGlvbihyKXt2YXIgaT10aGlzLm5leHRUb2tlbjtyZXR1cm4gaSYmdGhpcy5jb250ZW50KGkpPT09XCJ8XCI/KHRoaXMucG9zaXRpb24rKyx0aGlzLm5hbWVzcGFjZSgpKTp0aGlzLnNwbGl0V29yZChyKX0sdC5sb29wPWZ1bmN0aW9uKCl7Zm9yKDt0aGlzLnBvc2l0aW9uPHRoaXMudG9rZW5zLmxlbmd0aDspdGhpcy5wYXJzZSghMCk7cmV0dXJuIHRoaXMuY3VycmVudC5faW5mZXJFbmRQb3NpdGlvbigpLHRoaXMucm9vdH0sdC5wYXJzZT1mdW5jdGlvbihyKXtzd2l0Y2godGhpcy5jdXJyVG9rZW5bdy5GSUVMRFMuVFlQRV0pe2Nhc2UgXy5zcGFjZTp0aGlzLnNwYWNlKCk7YnJlYWs7Y2FzZSBfLmNvbW1lbnQ6dGhpcy5jb21tZW50KCk7YnJlYWs7Y2FzZSBfLm9wZW5QYXJlbnRoZXNpczp0aGlzLnBhcmVudGhlc2VzKCk7YnJlYWs7Y2FzZSBfLmNsb3NlUGFyZW50aGVzaXM6ciYmdGhpcy5taXNzaW5nUGFyZW50aGVzaXMoKTticmVhaztjYXNlIF8ub3BlblNxdWFyZTp0aGlzLmF0dHJpYnV0ZSgpO2JyZWFrO2Nhc2UgXy5kb2xsYXI6Y2FzZSBfLmNhcmV0OmNhc2UgXy5lcXVhbHM6Y2FzZSBfLndvcmQ6dGhpcy53b3JkKCk7YnJlYWs7Y2FzZSBfLmNvbG9uOnRoaXMucHNldWRvKCk7YnJlYWs7Y2FzZSBfLmNvbW1hOnRoaXMuY29tbWEoKTticmVhaztjYXNlIF8uYXN0ZXJpc2s6dGhpcy51bml2ZXJzYWwoKTticmVhaztjYXNlIF8uYW1wZXJzYW5kOnRoaXMubmVzdGluZygpO2JyZWFrO2Nhc2UgXy5zbGFzaDpjYXNlIF8uY29tYmluYXRvcjp0aGlzLmNvbWJpbmF0b3IoKTticmVhaztjYXNlIF8uc3RyOnRoaXMuc3RyaW5nKCk7YnJlYWs7Y2FzZSBfLmNsb3NlU3F1YXJlOnRoaXMubWlzc2luZ1NxdWFyZUJyYWNrZXQoKTtjYXNlIF8uc2VtaWNvbG9uOnRoaXMubWlzc2luZ0JhY2tzbGFzaCgpO2RlZmF1bHQ6dGhpcy51bmV4cGVjdGVkKCl9fSx0LmV4cGVjdGVkPWZ1bmN0aW9uKHIsaSxvKXtpZihBcnJheS5pc0FycmF5KHIpKXt2YXIgdT1yLnBvcCgpO3I9ci5qb2luKFwiLCBcIikrXCIgb3IgXCIrdX12YXIgcz0vXlthZWlvdV0vLnRlc3QoclswXSk/XCJhblwiOlwiYVwiO3JldHVybiBvP3RoaXMuZXJyb3IoXCJFeHBlY3RlZCBcIitzK1wiIFwiK3IrJywgZm91bmQgXCInK28rJ1wiIGluc3RlYWQuJyx7aW5kZXg6aX0pOnRoaXMuZXJyb3IoXCJFeHBlY3RlZCBcIitzK1wiIFwiK3IrXCIuXCIse2luZGV4Oml9KX0sdC5yZXF1aXJlZFNwYWNlPWZ1bmN0aW9uKHIpe3JldHVybiB0aGlzLm9wdGlvbnMubG9zc3k/XCIgXCI6cn0sdC5vcHRpb25hbFNwYWNlPWZ1bmN0aW9uKHIpe3JldHVybiB0aGlzLm9wdGlvbnMubG9zc3k/XCJcIjpyfSx0Lmxvc3N5U3BhY2U9ZnVuY3Rpb24ocixpKXtyZXR1cm4gdGhpcy5vcHRpb25zLmxvc3N5P2k/XCIgXCI6XCJcIjpyfSx0LnBhcnNlUGFyZW50aGVzaXNUb2tlbj1mdW5jdGlvbihyKXt2YXIgaT10aGlzLmNvbnRlbnQocik7cmV0dXJuIHJbdy5GSUVMRFMuVFlQRV09PT1fLnNwYWNlP3RoaXMucmVxdWlyZWRTcGFjZShpKTppfSx0Lm5ld05vZGU9ZnVuY3Rpb24ocixpKXtyZXR1cm4gaSYmKC9eICskLy50ZXN0KGkpJiYodGhpcy5vcHRpb25zLmxvc3N5fHwodGhpcy5zcGFjZXM9KHRoaXMuc3BhY2VzfHxcIlwiKStpKSxpPSEwKSxyLm5hbWVzcGFjZT1pLHd0KHIsXCJuYW1lc3BhY2VcIikpLHRoaXMuc3BhY2VzJiYoci5zcGFjZXMuYmVmb3JlPXRoaXMuc3BhY2VzLHRoaXMuc3BhY2VzPVwiXCIpLHRoaXMuY3VycmVudC5hcHBlbmQocil9LHQuY29udGVudD1mdW5jdGlvbihyKXtyZXR1cm4gcj09PXZvaWQgMCYmKHI9dGhpcy5jdXJyVG9rZW4pLHRoaXMuY3NzLnNsaWNlKHJbdy5GSUVMRFMuU1RBUlRfUE9TXSxyW3cuRklFTERTLkVORF9QT1NdKX0sdC5sb2NhdGVOZXh0TWVhbmluZ2Z1bFRva2VuPWZ1bmN0aW9uKHIpe3I9PT12b2lkIDAmJihyPXRoaXMucG9zaXRpb24rMSk7Zm9yKHZhciBpPXI7aTx0aGlzLnRva2Vucy5sZW5ndGg7KWlmKGUwW3RoaXMudG9rZW5zW2ldW3cuRklFTERTLlRZUEVdXSl7aSsrO2NvbnRpbnVlfWVsc2UgcmV0dXJuIGk7cmV0dXJuLTF9LFpwKGUsW3trZXk6XCJjdXJyVG9rZW5cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b2tlbnNbdGhpcy5wb3NpdGlvbl19fSx7a2V5OlwibmV4dFRva2VuXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9rZW5zW3RoaXMucG9zaXRpb24rMV19fSx7a2V5OlwicHJldlRva2VuXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9rZW5zW3RoaXMucG9zaXRpb24tMV19fV0pLGV9KCk7Y3IuZGVmYXVsdD1yMDtHcy5leHBvcnRzPWNyLmRlZmF1bHR9KTt2YXIgVnM9VCgoZHIsSHMpPT57XCJ1c2Ugc3RyaWN0XCI7ZHIuX19lc01vZHVsZT0hMDtkci5kZWZhdWx0PXZvaWQgMDt2YXIgbjA9aTAoanMoKSk7ZnVuY3Rpb24gaTAoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBvMD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUobixyKXt0aGlzLmZ1bmM9bnx8ZnVuY3Rpb24oKXt9LHRoaXMuZnVuY1Jlcz1udWxsLHRoaXMub3B0aW9ucz1yfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Ll9zaG91bGRVcGRhdGVTZWxlY3Rvcj1mdW5jdGlvbihyLGkpe2k9PT12b2lkIDAmJihpPXt9KTt2YXIgbz1PYmplY3QuYXNzaWduKHt9LHRoaXMub3B0aW9ucyxpKTtyZXR1cm4gby51cGRhdGVTZWxlY3Rvcj09PSExPyExOnR5cGVvZiByIT1cInN0cmluZ1wifSx0Ll9pc0xvc3N5PWZ1bmN0aW9uKHIpe3I9PT12b2lkIDAmJihyPXt9KTt2YXIgaT1PYmplY3QuYXNzaWduKHt9LHRoaXMub3B0aW9ucyxyKTtyZXR1cm4gaS5sb3NzbGVzcz09PSExfSx0Ll9yb290PWZ1bmN0aW9uKHIsaSl7aT09PXZvaWQgMCYmKGk9e30pO3ZhciBvPW5ldyBuMC5kZWZhdWx0KHIsdGhpcy5fcGFyc2VPcHRpb25zKGkpKTtyZXR1cm4gby5yb290fSx0Ll9wYXJzZU9wdGlvbnM9ZnVuY3Rpb24ocil7cmV0dXJue2xvc3N5OnRoaXMuX2lzTG9zc3kocil9fSx0Ll9ydW49ZnVuY3Rpb24ocixpKXt2YXIgbz10aGlzO3JldHVybiBpPT09dm9pZCAwJiYoaT17fSksbmV3IFByb21pc2UoZnVuY3Rpb24odSxzKXt0cnl7dmFyIGE9by5fcm9vdChyLGkpO1Byb21pc2UucmVzb2x2ZShvLmZ1bmMoYSkpLnRoZW4oZnVuY3Rpb24obCl7dmFyIGY9dm9pZCAwO3JldHVybiBvLl9zaG91bGRVcGRhdGVTZWxlY3RvcihyLGkpJiYoZj1hLnRvU3RyaW5nKCksci5zZWxlY3Rvcj1mKSx7dHJhbnNmb3JtOmwscm9vdDphLHN0cmluZzpmfX0pLnRoZW4odSxzKX1jYXRjaChsKXtzKGwpO3JldHVybn19KX0sdC5fcnVuU3luYz1mdW5jdGlvbihyLGkpe2k9PT12b2lkIDAmJihpPXt9KTt2YXIgbz10aGlzLl9yb290KHIsaSksdT10aGlzLmZ1bmMobyk7aWYodSYmdHlwZW9mIHUudGhlbj09XCJmdW5jdGlvblwiKXRocm93IG5ldyBFcnJvcihcIlNlbGVjdG9yIHByb2Nlc3NvciByZXR1cm5lZCBhIHByb21pc2UgdG8gYSBzeW5jaHJvbm91cyBjYWxsLlwiKTt2YXIgcz12b2lkIDA7cmV0dXJuIGkudXBkYXRlU2VsZWN0b3ImJnR5cGVvZiByIT1cInN0cmluZ1wiJiYocz1vLnRvU3RyaW5nKCksci5zZWxlY3Rvcj1zKSx7dHJhbnNmb3JtOnUscm9vdDpvLHN0cmluZzpzfX0sdC5hc3Q9ZnVuY3Rpb24ocixpKXtyZXR1cm4gdGhpcy5fcnVuKHIsaSkudGhlbihmdW5jdGlvbihvKXtyZXR1cm4gby5yb290fSl9LHQuYXN0U3luYz1mdW5jdGlvbihyLGkpe3JldHVybiB0aGlzLl9ydW5TeW5jKHIsaSkucm9vdH0sdC50cmFuc2Zvcm09ZnVuY3Rpb24ocixpKXtyZXR1cm4gdGhpcy5fcnVuKHIsaSkudGhlbihmdW5jdGlvbihvKXtyZXR1cm4gby50cmFuc2Zvcm19KX0sdC50cmFuc2Zvcm1TeW5jPWZ1bmN0aW9uKHIsaSl7cmV0dXJuIHRoaXMuX3J1blN5bmMocixpKS50cmFuc2Zvcm19LHQucHJvY2Vzcz1mdW5jdGlvbihyLGkpe3JldHVybiB0aGlzLl9ydW4ocixpKS50aGVuKGZ1bmN0aW9uKG8pe3JldHVybiBvLnN0cmluZ3x8by5yb290LnRvU3RyaW5nKCl9KX0sdC5wcm9jZXNzU3luYz1mdW5jdGlvbihyLGkpe3ZhciBvPXRoaXMuX3J1blN5bmMocixpKTtyZXR1cm4gby5zdHJpbmd8fG8ucm9vdC50b1N0cmluZygpfSxlfSgpO2RyLmRlZmF1bHQ9bzA7SHMuZXhwb3J0cz1kci5kZWZhdWx0fSk7dmFyIFlzPVQoSj0+e1widXNlIHN0cmljdFwiO0ouX19lc01vZHVsZT0hMDtKLnVuaXZlcnNhbD1KLnRhZz1KLnN0cmluZz1KLnNlbGVjdG9yPUoucm9vdD1KLnBzZXVkbz1KLm5lc3Rpbmc9Si5pZD1KLmNvbW1lbnQ9Si5jb21iaW5hdG9yPUouY2xhc3NOYW1lPUouYXR0cmlidXRlPXZvaWQgMDt2YXIgdTA9U2UoT2koKSksczA9U2UoaGkoKSksYTA9U2UoUmkoKSksbDA9U2UoRGkoKSksZjA9U2UoYmkoKSksYzA9U2UoTWkoKSksZDA9U2UoQ2koKSkscDA9U2UobGkoKSksaDA9U2UoY2koKSksbTA9U2Uod2koKSksRDA9U2UoeGkoKSksZzA9U2UoQmkoKSk7ZnVuY3Rpb24gU2UoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBiMD1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IHUwLmRlZmF1bHQodCl9O0ouYXR0cmlidXRlPWIwO3ZhciB2MD1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IHMwLmRlZmF1bHQodCl9O0ouY2xhc3NOYW1lPXYwO3ZhciB5MD1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGEwLmRlZmF1bHQodCl9O0ouY29tYmluYXRvcj15MDt2YXIgeDA9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBsMC5kZWZhdWx0KHQpfTtKLmNvbW1lbnQ9eDA7dmFyIEYwPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZjAuZGVmYXVsdCh0KX07Si5pZD1GMDt2YXIgdzA9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBjMC5kZWZhdWx0KHQpfTtKLm5lc3Rpbmc9dzA7dmFyIEUwPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZDAuZGVmYXVsdCh0KX07Si5wc2V1ZG89RTA7dmFyIEMwPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgcDAuZGVmYXVsdCh0KX07Si5yb290PUMwO3ZhciBfMD1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGgwLmRlZmF1bHQodCl9O0ouc2VsZWN0b3I9XzA7dmFyIFMwPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgbTAuZGVmYXVsdCh0KX07Si5zdHJpbmc9UzA7dmFyIGswPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgRDAuZGVmYXVsdCh0KX07Si50YWc9azA7dmFyIFQwPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZzAuZGVmYXVsdCh0KX07Si51bml2ZXJzYWw9VDB9KTt2YXIgSnM9VChVPT57XCJ1c2Ugc3RyaWN0XCI7VS5fX2VzTW9kdWxlPSEwO1UuaXNOb2RlPVZpO1UuaXNQc2V1ZG9FbGVtZW50PUtzO1UuaXNQc2V1ZG9DbGFzcz1XMDtVLmlzQ29udGFpbmVyPXEwO1UuaXNOYW1lc3BhY2U9VTA7VS5pc1VuaXZlcnNhbD1VLmlzVGFnPVUuaXNTdHJpbmc9VS5pc1NlbGVjdG9yPVUuaXNSb290PVUuaXNQc2V1ZG89VS5pc05lc3Rpbmc9VS5pc0lkZW50aWZpZXI9VS5pc0NvbW1lbnQ9VS5pc0NvbWJpbmF0b3I9VS5pc0NsYXNzTmFtZT1VLmlzQXR0cmlidXRlPXZvaWQgMDt2YXIgbmU9cGUoKSx5ZSxBMD0oeWU9e30seWVbbmUuQVRUUklCVVRFXT0hMCx5ZVtuZS5DTEFTU109ITAseWVbbmUuQ09NQklOQVRPUl09ITAseWVbbmUuQ09NTUVOVF09ITAseWVbbmUuSURdPSEwLHllW25lLk5FU1RJTkddPSEwLHllW25lLlBTRVVET109ITAseWVbbmUuUk9PVF09ITAseWVbbmUuU0VMRUNUT1JdPSEwLHllW25lLlNUUklOR109ITAseWVbbmUuVEFHXT0hMCx5ZVtuZS5VTklWRVJTQUxdPSEwLHllKTtmdW5jdGlvbiBWaShlKXtyZXR1cm4gdHlwZW9mIGU9PVwib2JqZWN0XCImJkEwW2UudHlwZV19ZnVuY3Rpb24ga2UoZSx0KXtyZXR1cm4gVmkodCkmJnQudHlwZT09PWV9dmFyIFhzPWtlLmJpbmQobnVsbCxuZS5BVFRSSUJVVEUpO1UuaXNBdHRyaWJ1dGU9WHM7dmFyIE8wPWtlLmJpbmQobnVsbCxuZS5DTEFTUyk7VS5pc0NsYXNzTmFtZT1PMDt2YXIgUDA9a2UuYmluZChudWxsLG5lLkNPTUJJTkFUT1IpO1UuaXNDb21iaW5hdG9yPVAwO3ZhciBCMD1rZS5iaW5kKG51bGwsbmUuQ09NTUVOVCk7VS5pc0NvbW1lbnQ9QjA7dmFyIEkwPWtlLmJpbmQobnVsbCxuZS5JRCk7VS5pc0lkZW50aWZpZXI9STA7dmFyIFIwPWtlLmJpbmQobnVsbCxuZS5ORVNUSU5HKTtVLmlzTmVzdGluZz1SMDt2YXIgWWk9a2UuYmluZChudWxsLG5lLlBTRVVETyk7VS5pc1BzZXVkbz1ZaTt2YXIgTDA9a2UuYmluZChudWxsLG5lLlJPT1QpO1UuaXNSb290PUwwO3ZhciBNMD1rZS5iaW5kKG51bGwsbmUuU0VMRUNUT1IpO1UuaXNTZWxlY3Rvcj1NMDt2YXIgTjA9a2UuYmluZChudWxsLG5lLlNUUklORyk7VS5pc1N0cmluZz1OMDt2YXIgUXM9a2UuYmluZChudWxsLG5lLlRBRyk7VS5pc1RhZz1Rczt2YXIgJDA9a2UuYmluZChudWxsLG5lLlVOSVZFUlNBTCk7VS5pc1VuaXZlcnNhbD0kMDtmdW5jdGlvbiBLcyhlKXtyZXR1cm4gWWkoZSkmJmUudmFsdWUmJihlLnZhbHVlLnN0YXJ0c1dpdGgoXCI6OlwiKXx8ZS52YWx1ZS50b0xvd2VyQ2FzZSgpPT09XCI6YmVmb3JlXCJ8fGUudmFsdWUudG9Mb3dlckNhc2UoKT09PVwiOmFmdGVyXCJ8fGUudmFsdWUudG9Mb3dlckNhc2UoKT09PVwiOmZpcnN0LWxldHRlclwifHxlLnZhbHVlLnRvTG93ZXJDYXNlKCk9PT1cIjpmaXJzdC1saW5lXCIpfWZ1bmN0aW9uIFcwKGUpe3JldHVybiBZaShlKSYmIUtzKGUpfWZ1bmN0aW9uIHEwKGUpe3JldHVybiEhKFZpKGUpJiZlLndhbGspfWZ1bmN0aW9uIFUwKGUpe3JldHVybiBYcyhlKXx8UXMoZSl9fSk7dmFyIFpzPVQoUGU9PntcInVzZSBzdHJpY3RcIjtQZS5fX2VzTW9kdWxlPSEwO3ZhciBYaT1wZSgpO09iamVjdC5rZXlzKFhpKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2U9PT1cImRlZmF1bHRcInx8ZT09PVwiX19lc01vZHVsZVwifHxlIGluIFBlJiZQZVtlXT09PVhpW2VdfHwoUGVbZV09WGlbZV0pfSk7dmFyIFFpPVlzKCk7T2JqZWN0LmtleXMoUWkpLmZvckVhY2goZnVuY3Rpb24oZSl7ZT09PVwiZGVmYXVsdFwifHxlPT09XCJfX2VzTW9kdWxlXCJ8fGUgaW4gUGUmJlBlW2VdPT09UWlbZV18fChQZVtlXT1RaVtlXSl9KTt2YXIgS2k9SnMoKTtPYmplY3Qua2V5cyhLaSkuZm9yRWFjaChmdW5jdGlvbihlKXtlPT09XCJkZWZhdWx0XCJ8fGU9PT1cIl9fZXNNb2R1bGVcInx8ZSBpbiBQZSYmUGVbZV09PT1LaVtlXXx8KFBlW2VdPUtpW2VdKX0pfSk7dmFyIHJhPVQoKHByLHRhKT0+e1widXNlIHN0cmljdFwiO3ByLl9fZXNNb2R1bGU9ITA7cHIuZGVmYXVsdD12b2lkIDA7dmFyIHowPUgwKFZzKCkpLEcwPWowKFpzKCkpO2Z1bmN0aW9uIGVhKCl7aWYodHlwZW9mIFdlYWtNYXAhPVwiZnVuY3Rpb25cIilyZXR1cm4gbnVsbDt2YXIgZT1uZXcgV2Vha01hcDtyZXR1cm4gZWE9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZX1mdW5jdGlvbiBqMChlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7aWYoZT09PW51bGx8fHR5cGVvZiBlIT1cIm9iamVjdFwiJiZ0eXBlb2YgZSE9XCJmdW5jdGlvblwiKXJldHVybntkZWZhdWx0OmV9O3ZhciB0PWVhKCk7aWYodCYmdC5oYXMoZSkpcmV0dXJuIHQuZ2V0KGUpO3ZhciBuPXt9LHI9T2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO2Zvcih2YXIgaSBpbiBlKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLGkpKXt2YXIgbz1yP09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxpKTpudWxsO28mJihvLmdldHx8by5zZXQpP09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLGksbyk6bltpXT1lW2ldfXJldHVybiBuLmRlZmF1bHQ9ZSx0JiZ0LnNldChlLG4pLG59ZnVuY3Rpb24gSDAoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBKaT1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IHowLmRlZmF1bHQodCl9O09iamVjdC5hc3NpZ24oSmksRzApO2RlbGV0ZSBKaS5fX2VzTW9kdWxlO3ZhciBWMD1KaTtwci5kZWZhdWx0PVYwO3RhLmV4cG9ydHM9cHIuZGVmYXVsdH0pO3ZhciBuYT1UKFppPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KFppLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShaaSxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCxnZXQ6KCk9PlkwfSk7ZnVuY3Rpb24gWTAoZSl7cmV0dXJuIGUucmVwbGFjZSgvXFxcXCwvZyxcIlxcXFwyYyBcIil9fSk7dmFyIG9hPVQoKG1iLGlhKT0+e1widXNlIHN0cmljdFwiO2lhLmV4cG9ydHM9e2FsaWNlYmx1ZTpbMjQwLDI0OCwyNTVdLGFudGlxdWV3aGl0ZTpbMjUwLDIzNSwyMTVdLGFxdWE6WzAsMjU1LDI1NV0sYXF1YW1hcmluZTpbMTI3LDI1NSwyMTJdLGF6dXJlOlsyNDAsMjU1LDI1NV0sYmVpZ2U6WzI0NSwyNDUsMjIwXSxiaXNxdWU6WzI1NSwyMjgsMTk2XSxibGFjazpbMCwwLDBdLGJsYW5jaGVkYWxtb25kOlsyNTUsMjM1LDIwNV0sYmx1ZTpbMCwwLDI1NV0sYmx1ZXZpb2xldDpbMTM4LDQzLDIyNl0sYnJvd246WzE2NSw0Miw0Ml0sYnVybHl3b29kOlsyMjIsMTg0LDEzNV0sY2FkZXRibHVlOls5NSwxNTgsMTYwXSxjaGFydHJldXNlOlsxMjcsMjU1LDBdLGNob2NvbGF0ZTpbMjEwLDEwNSwzMF0sY29yYWw6WzI1NSwxMjcsODBdLGNvcm5mbG93ZXJibHVlOlsxMDAsMTQ5LDIzN10sY29ybnNpbGs6WzI1NSwyNDgsMjIwXSxjcmltc29uOlsyMjAsMjAsNjBdLGN5YW46WzAsMjU1LDI1NV0sZGFya2JsdWU6WzAsMCwxMzldLGRhcmtjeWFuOlswLDEzOSwxMzldLGRhcmtnb2xkZW5yb2Q6WzE4NCwxMzQsMTFdLGRhcmtncmF5OlsxNjksMTY5LDE2OV0sZGFya2dyZWVuOlswLDEwMCwwXSxkYXJrZ3JleTpbMTY5LDE2OSwxNjldLGRhcmtraGFraTpbMTg5LDE4MywxMDddLGRhcmttYWdlbnRhOlsxMzksMCwxMzldLGRhcmtvbGl2ZWdyZWVuOls4NSwxMDcsNDddLGRhcmtvcmFuZ2U6WzI1NSwxNDAsMF0sZGFya29yY2hpZDpbMTUzLDUwLDIwNF0sZGFya3JlZDpbMTM5LDAsMF0sZGFya3NhbG1vbjpbMjMzLDE1MCwxMjJdLGRhcmtzZWFncmVlbjpbMTQzLDE4OCwxNDNdLGRhcmtzbGF0ZWJsdWU6WzcyLDYxLDEzOV0sZGFya3NsYXRlZ3JheTpbNDcsNzksNzldLGRhcmtzbGF0ZWdyZXk6WzQ3LDc5LDc5XSxkYXJrdHVycXVvaXNlOlswLDIwNiwyMDldLGRhcmt2aW9sZXQ6WzE0OCwwLDIxMV0sZGVlcHBpbms6WzI1NSwyMCwxNDddLGRlZXBza3libHVlOlswLDE5MSwyNTVdLGRpbWdyYXk6WzEwNSwxMDUsMTA1XSxkaW1ncmV5OlsxMDUsMTA1LDEwNV0sZG9kZ2VyYmx1ZTpbMzAsMTQ0LDI1NV0sZmlyZWJyaWNrOlsxNzgsMzQsMzRdLGZsb3JhbHdoaXRlOlsyNTUsMjUwLDI0MF0sZm9yZXN0Z3JlZW46WzM0LDEzOSwzNF0sZnVjaHNpYTpbMjU1LDAsMjU1XSxnYWluc2Jvcm86WzIyMCwyMjAsMjIwXSxnaG9zdHdoaXRlOlsyNDgsMjQ4LDI1NV0sZ29sZDpbMjU1LDIxNSwwXSxnb2xkZW5yb2Q6WzIxOCwxNjUsMzJdLGdyYXk6WzEyOCwxMjgsMTI4XSxncmVlbjpbMCwxMjgsMF0sZ3JlZW55ZWxsb3c6WzE3MywyNTUsNDddLGdyZXk6WzEyOCwxMjgsMTI4XSxob25leWRldzpbMjQwLDI1NSwyNDBdLGhvdHBpbms6WzI1NSwxMDUsMTgwXSxpbmRpYW5yZWQ6WzIwNSw5Miw5Ml0saW5kaWdvOls3NSwwLDEzMF0saXZvcnk6WzI1NSwyNTUsMjQwXSxraGFraTpbMjQwLDIzMCwxNDBdLGxhdmVuZGVyOlsyMzAsMjMwLDI1MF0sbGF2ZW5kZXJibHVzaDpbMjU1LDI0MCwyNDVdLGxhd25ncmVlbjpbMTI0LDI1MiwwXSxsZW1vbmNoaWZmb246WzI1NSwyNTAsMjA1XSxsaWdodGJsdWU6WzE3MywyMTYsMjMwXSxsaWdodGNvcmFsOlsyNDAsMTI4LDEyOF0sbGlnaHRjeWFuOlsyMjQsMjU1LDI1NV0sbGlnaHRnb2xkZW5yb2R5ZWxsb3c6WzI1MCwyNTAsMjEwXSxsaWdodGdyYXk6WzIxMSwyMTEsMjExXSxsaWdodGdyZWVuOlsxNDQsMjM4LDE0NF0sbGlnaHRncmV5OlsyMTEsMjExLDIxMV0sbGlnaHRwaW5rOlsyNTUsMTgyLDE5M10sbGlnaHRzYWxtb246WzI1NSwxNjAsMTIyXSxsaWdodHNlYWdyZWVuOlszMiwxNzgsMTcwXSxsaWdodHNreWJsdWU6WzEzNSwyMDYsMjUwXSxsaWdodHNsYXRlZ3JheTpbMTE5LDEzNiwxNTNdLGxpZ2h0c2xhdGVncmV5OlsxMTksMTM2LDE1M10sbGlnaHRzdGVlbGJsdWU6WzE3NiwxOTYsMjIyXSxsaWdodHllbGxvdzpbMjU1LDI1NSwyMjRdLGxpbWU6WzAsMjU1LDBdLGxpbWVncmVlbjpbNTAsMjA1LDUwXSxsaW5lbjpbMjUwLDI0MCwyMzBdLG1hZ2VudGE6WzI1NSwwLDI1NV0sbWFyb29uOlsxMjgsMCwwXSxtZWRpdW1hcXVhbWFyaW5lOlsxMDIsMjA1LDE3MF0sbWVkaXVtYmx1ZTpbMCwwLDIwNV0sbWVkaXVtb3JjaGlkOlsxODYsODUsMjExXSxtZWRpdW1wdXJwbGU6WzE0NywxMTIsMjE5XSxtZWRpdW1zZWFncmVlbjpbNjAsMTc5LDExM10sbWVkaXVtc2xhdGVibHVlOlsxMjMsMTA0LDIzOF0sbWVkaXVtc3ByaW5nZ3JlZW46WzAsMjUwLDE1NF0sbWVkaXVtdHVycXVvaXNlOls3MiwyMDksMjA0XSxtZWRpdW12aW9sZXRyZWQ6WzE5OSwyMSwxMzNdLG1pZG5pZ2h0Ymx1ZTpbMjUsMjUsMTEyXSxtaW50Y3JlYW06WzI0NSwyNTUsMjUwXSxtaXN0eXJvc2U6WzI1NSwyMjgsMjI1XSxtb2NjYXNpbjpbMjU1LDIyOCwxODFdLG5hdmFqb3doaXRlOlsyNTUsMjIyLDE3M10sbmF2eTpbMCwwLDEyOF0sb2xkbGFjZTpbMjUzLDI0NSwyMzBdLG9saXZlOlsxMjgsMTI4LDBdLG9saXZlZHJhYjpbMTA3LDE0MiwzNV0sb3JhbmdlOlsyNTUsMTY1LDBdLG9yYW5nZXJlZDpbMjU1LDY5LDBdLG9yY2hpZDpbMjE4LDExMiwyMTRdLHBhbGVnb2xkZW5yb2Q6WzIzOCwyMzIsMTcwXSxwYWxlZ3JlZW46WzE1MiwyNTEsMTUyXSxwYWxldHVycXVvaXNlOlsxNzUsMjM4LDIzOF0scGFsZXZpb2xldHJlZDpbMjE5LDExMiwxNDddLHBhcGF5YXdoaXA6WzI1NSwyMzksMjEzXSxwZWFjaHB1ZmY6WzI1NSwyMTgsMTg1XSxwZXJ1OlsyMDUsMTMzLDYzXSxwaW5rOlsyNTUsMTkyLDIwM10scGx1bTpbMjIxLDE2MCwyMjFdLHBvd2RlcmJsdWU6WzE3NiwyMjQsMjMwXSxwdXJwbGU6WzEyOCwwLDEyOF0scmViZWNjYXB1cnBsZTpbMTAyLDUxLDE1M10scmVkOlsyNTUsMCwwXSxyb3N5YnJvd246WzE4OCwxNDMsMTQzXSxyb3lhbGJsdWU6WzY1LDEwNSwyMjVdLHNhZGRsZWJyb3duOlsxMzksNjksMTldLHNhbG1vbjpbMjUwLDEyOCwxMTRdLHNhbmR5YnJvd246WzI0NCwxNjQsOTZdLHNlYWdyZWVuOls0NiwxMzksODddLHNlYXNoZWxsOlsyNTUsMjQ1LDIzOF0sc2llbm5hOlsxNjAsODIsNDVdLHNpbHZlcjpbMTkyLDE5MiwxOTJdLHNreWJsdWU6WzEzNSwyMDYsMjM1XSxzbGF0ZWJsdWU6WzEwNiw5MCwyMDVdLHNsYXRlZ3JheTpbMTEyLDEyOCwxNDRdLHNsYXRlZ3JleTpbMTEyLDEyOCwxNDRdLHNub3c6WzI1NSwyNTAsMjUwXSxzcHJpbmdncmVlbjpbMCwyNTUsMTI3XSxzdGVlbGJsdWU6WzcwLDEzMCwxODBdLHRhbjpbMjEwLDE4MCwxNDBdLHRlYWw6WzAsMTI4LDEyOF0sdGhpc3RsZTpbMjE2LDE5MSwyMTZdLHRvbWF0bzpbMjU1LDk5LDcxXSx0dXJxdW9pc2U6WzY0LDIyNCwyMDhdLHZpb2xldDpbMjM4LDEzMCwyMzhdLHdoZWF0OlsyNDUsMjIyLDE3OV0sd2hpdGU6WzI1NSwyNTUsMjU1XSx3aGl0ZXNtb2tlOlsyNDUsMjQ1LDI0NV0seWVsbG93OlsyNTUsMjU1LDBdLHllbGxvd2dyZWVuOlsxNTQsMjA1LDUwXX19KTt2YXIgdG89VChlbz0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlbyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtmdW5jdGlvbiBYMChlLHQpe2Zvcih2YXIgbiBpbiB0KU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4se2VudW1lcmFibGU6ITAsZ2V0OnRbbl19KX1YMChlbyx7cGFyc2VDb2xvcjooKT0+dGgsZm9ybWF0Q29sb3I6KCk9PnJofSk7dmFyIHVhPVEwKG9hKCkpO2Z1bmN0aW9uIFEwKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgSzA9L14jKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KT8kL2ksSjA9L14jKFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKT8kL2ksWmU9Lyg/OlxcZCt8XFxkKlxcLlxcZCspJT8vLGZuPS8oPzpcXHMqLFxccyp8XFxzKykvLHNhPS9cXHMqWywvXVxccyovLGV0PS92YXJcXCgtLSg/OlteICldKj8pXFwpLyxaMD1uZXcgUmVnRXhwKGBeKHJnYilhP1xcXFwoXFxcXHMqKCR7WmUuc291cmNlfXwke2V0LnNvdXJjZX0pKD86JHtmbi5zb3VyY2V9KCR7WmUuc291cmNlfXwke2V0LnNvdXJjZX0pKT8oPzoke2ZuLnNvdXJjZX0oJHtaZS5zb3VyY2V9fCR7ZXQuc291cmNlfSkpPyg/OiR7c2Euc291cmNlfSgke1plLnNvdXJjZX18JHtldC5zb3VyY2V9KSk/XFxcXHMqXFxcXCkkYCksZWg9bmV3IFJlZ0V4cChgXihoc2wpYT9cXFxcKFxcXFxzKigoPzoke1plLnNvdXJjZX0pKD86ZGVnfHJhZHxncmFkfHR1cm4pP3wke2V0LnNvdXJjZX0pKD86JHtmbi5zb3VyY2V9KCR7WmUuc291cmNlfXwke2V0LnNvdXJjZX0pKT8oPzoke2ZuLnNvdXJjZX0oJHtaZS5zb3VyY2V9fCR7ZXQuc291cmNlfSkpPyg/OiR7c2Euc291cmNlfSgke1plLnNvdXJjZX18JHtldC5zb3VyY2V9KSk/XFxcXHMqXFxcXCkkYCk7ZnVuY3Rpb24gdGgoZSx7bG9vc2U6dD0hMX09e30pe3ZhciBuLHI7aWYodHlwZW9mIGUhPVwic3RyaW5nXCIpcmV0dXJuIG51bGw7aWYoZT1lLnRyaW0oKSxlPT09XCJ0cmFuc3BhcmVudFwiKXJldHVybnttb2RlOlwicmdiXCIsY29sb3I6W1wiMFwiLFwiMFwiLFwiMFwiXSxhbHBoYTpcIjBcIn07aWYoZSBpbiB1YS5kZWZhdWx0KXJldHVybnttb2RlOlwicmdiXCIsY29sb3I6dWEuZGVmYXVsdFtlXS5tYXAoYT0+YS50b1N0cmluZygpKX07bGV0IGk9ZS5yZXBsYWNlKEowLChhLGwsZixjLHApPT5bXCIjXCIsbCxsLGYsZixjLGMscD9wK3A6XCJcIl0uam9pbihcIlwiKSkubWF0Y2goSzApO2lmKGkhPT1udWxsKXJldHVybnttb2RlOlwicmdiXCIsY29sb3I6W3BhcnNlSW50KGlbMV0sMTYpLHBhcnNlSW50KGlbMl0sMTYpLHBhcnNlSW50KGlbM10sMTYpXS5tYXAoYT0+YS50b1N0cmluZygpKSxhbHBoYTppWzRdPyhwYXJzZUludChpWzRdLDE2KS8yNTUpLnRvU3RyaW5nKCk6dm9pZCAwfTt2YXIgbztsZXQgdT0obz1lLm1hdGNoKFowKSkhPT1udWxsJiZvIT09dm9pZCAwP286ZS5tYXRjaChlaCk7aWYodT09PW51bGwpcmV0dXJuIG51bGw7bGV0IHM9W3VbMl0sdVszXSx1WzRdXS5maWx0ZXIoQm9vbGVhbikubWFwKGE9PmEudG9TdHJpbmcoKSk7cmV0dXJuIXQmJnMubGVuZ3RoIT09M3x8cy5sZW5ndGg8MyYmIXMuc29tZShhPT4vXnZhclxcKC4qP1xcKSQvLnRlc3QoYSkpP251bGw6e21vZGU6dVsxXSxjb2xvcjpzLGFscGhhOihuPXVbNV0pPT09bnVsbHx8bj09PXZvaWQgMHx8KHI9bi50b1N0cmluZyk9PT1udWxsfHxyPT09dm9pZCAwP3ZvaWQgMDpyLmNhbGwobil9fWZ1bmN0aW9uIHJoKHttb2RlOmUsY29sb3I6dCxhbHBoYTpufSl7bGV0IHI9biE9PXZvaWQgMDtyZXR1cm5gJHtlfSgke3Quam9pbihcIiBcIil9JHtyP2AgLyAke259YDpcIlwifSlgfX0pO3ZhciBubz1UKHJvPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHJvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2Z1bmN0aW9uIG5oKGUsdCl7Zm9yKHZhciBuIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTohMCxnZXQ6dFtuXX0pfW5oKHJvLHt3aXRoQWxwaGFWYWx1ZTooKT0+aWgsZGVmYXVsdDooKT0+b2h9KTt2YXIgY249dG8oKTtmdW5jdGlvbiBpaChlLHQsbil7aWYodHlwZW9mIGU9PVwiZnVuY3Rpb25cIilyZXR1cm4gZSh7b3BhY2l0eVZhbHVlOnR9KTtsZXQgcj0oMCxjbi5wYXJzZUNvbG9yKShlLHtsb29zZTohMH0pO3JldHVybiByPT09bnVsbD9uOigwLGNuLmZvcm1hdENvbG9yKSh7Li4ucixhbHBoYTp0fSl9ZnVuY3Rpb24gb2goe2NvbG9yOmUscHJvcGVydHk6dCx2YXJpYWJsZTpufSl7bGV0IHI9W10uY29uY2F0KHQpO2lmKHR5cGVvZiBlPT1cImZ1bmN0aW9uXCIpcmV0dXJue1tuXTpcIjFcIiwuLi5PYmplY3QuZnJvbUVudHJpZXMoci5tYXAobz0+W28sZSh7b3BhY2l0eVZhcmlhYmxlOm4sb3BhY2l0eVZhbHVlOmB2YXIoJHtufSlgfSldKSl9O2xldCBpPSgwLGNuLnBhcnNlQ29sb3IpKGUpO3JldHVybiBpPT09bnVsbD9PYmplY3QuZnJvbUVudHJpZXMoci5tYXAobz0+W28sZV0pKTppLmFscGhhIT09dm9pZCAwP09iamVjdC5mcm9tRW50cmllcyhyLm1hcChvPT5bbyxlXSkpOntbbl06XCIxXCIsLi4uT2JqZWN0LmZyb21FbnRyaWVzKHIubWFwKG89PltvLCgwLGNuLmZvcm1hdENvbG9yKSh7Li4uaSxhbHBoYTpgdmFyKCR7bn0pYH0pXSkpfX19KTt2YXIgZGE9VChpbz0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShpbyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtmdW5jdGlvbiB1aChlLHQpe2Zvcih2YXIgbiBpbiB0KU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4se2VudW1lcmFibGU6ITAsZ2V0OnRbbl19KX11aChpbyx7cGF0dGVybjooKT0+YWgsd2l0aG91dENhcHR1cmluZzooKT0+bGEsYW55OigpPT5mYSxvcHRpb25hbDooKT0+bGgsemVyb09yTW9yZTooKT0+ZmgsbmVzdGVkQnJhY2tldHM6KCk9PmNhLGVzY2FwZTooKT0+YXR9KTt2YXIgYWE9L1tcXFxcXiQuKis/KClbXFxde318XS9nLHNoPVJlZ0V4cChhYS5zb3VyY2UpO2Z1bmN0aW9uIGhyKGUpe3JldHVybiBlPUFycmF5LmlzQXJyYXkoZSk/ZTpbZV0sZT1lLm1hcCh0PT50IGluc3RhbmNlb2YgUmVnRXhwP3Quc291cmNlOnQpLGUuam9pbihcIlwiKX1mdW5jdGlvbiBhaChlKXtyZXR1cm4gbmV3IFJlZ0V4cChocihlKSxcImdcIil9ZnVuY3Rpb24gbGEoZSl7cmV0dXJuIG5ldyBSZWdFeHAoYCg/OiR7aHIoZSl9KWAsXCJnXCIpfWZ1bmN0aW9uIGZhKGUpe3JldHVybmAoPzoke2UubWFwKGhyKS5qb2luKFwifFwiKX0pYH1mdW5jdGlvbiBsaChlKXtyZXR1cm5gKD86JHtocihlKX0pP2B9ZnVuY3Rpb24gZmgoZSl7cmV0dXJuYCg/OiR7aHIoZSl9KSpgfWZ1bmN0aW9uIGNhKGUsdCxuPTEpe3JldHVybiBsYShbYXQoZSksL1teXFxzXSovLG49PT0xP2BbXiR7YXQoZSl9JHthdCh0KX1zXSpgOmZhKFtgW14ke2F0KGUpfSR7YXQodCl9c10qYCxjYShlLHQsbi0xKV0pLC9bXlxcc10qLyxhdCh0KV0pfWZ1bmN0aW9uIGF0KGUpe3JldHVybiBlJiZzaC50ZXN0KGUpP2UucmVwbGFjZShhYSxcIlxcXFwkJlwiKTplfHxcIlwifX0pO3ZhciBoYT1UKG9vPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9vLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShvbyxcInNwbGl0QXRUb3BMZXZlbE9ubHlcIix7ZW51bWVyYWJsZTohMCxnZXQ6KCk9PnBofSk7dmFyIGNoPWRoKGRhKCkpO2Z1bmN0aW9uIHBhKGUpe2lmKHR5cGVvZiBXZWFrTWFwIT1cImZ1bmN0aW9uXCIpcmV0dXJuIG51bGw7dmFyIHQ9bmV3IFdlYWtNYXAsbj1uZXcgV2Vha01hcDtyZXR1cm4ocGE9ZnVuY3Rpb24ocil7cmV0dXJuIHI/bjp0fSkoZSl9ZnVuY3Rpb24gZGgoZSx0KXtpZighdCYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO2lmKGU9PT1udWxsfHx0eXBlb2YgZSE9XCJvYmplY3RcIiYmdHlwZW9mIGUhPVwiZnVuY3Rpb25cIilyZXR1cm57ZGVmYXVsdDplfTt2YXIgbj1wYSh0KTtpZihuJiZuLmhhcyhlKSlyZXR1cm4gbi5nZXQoZSk7dmFyIHI9e30saT1PYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7Zm9yKHZhciBvIGluIGUpaWYobyE9PVwiZGVmYXVsdFwiJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKSl7dmFyIHU9aT9PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsbyk6bnVsbDt1JiYodS5nZXR8fHUuc2V0KT9PYmplY3QuZGVmaW5lUHJvcGVydHkocixvLHUpOnJbb109ZVtvXX1yZXR1cm4gci5kZWZhdWx0PWUsbiYmbi5zZXQoZSxyKSxyfWZ1bmN0aW9uKnBoKGUsdCl7bGV0IG49bmV3IFJlZ0V4cChgWygpe31cXFxcW1xcXFxdJHtjaC5lc2NhcGUodCl9XWAsXCJnXCIpLHI9MCxpPTAsbz0hMSx1PTAscz0wLGE9dC5sZW5ndGg7Zm9yKGxldCBsIG9mIGUubWF0Y2hBbGwobikpe2xldCBmPWxbMF09PT10W3VdLGM9dT09PWEtMSxwPWYmJmM7bFswXT09PVwiKFwiJiZyKyssbFswXT09PVwiKVwiJiZyLS0sbFswXT09PVwiW1wiJiZyKyssbFswXT09PVwiXVwiJiZyLS0sbFswXT09PVwie1wiJiZyKyssbFswXT09PVwifVwiJiZyLS0sZiYmcj09PTAmJihzPT09MCYmKHM9bC5pbmRleCksdSsrKSxwJiZyPT09MCYmKG89ITAseWllbGQgZS5zdWJzdHJpbmcoaSxzKSxpPXMrYSksdT09PWEmJih1PTAscz0wKX1vP3lpZWxkIGUuc3Vic3RyaW5nKGkpOnlpZWxkIGV9fSk7dmFyIERhPVQodW89PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodW8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7ZnVuY3Rpb24gaGgoZSx0KXtmb3IodmFyIG4gaW4gdClPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtlbnVtZXJhYmxlOiEwLGdldDp0W25dfSl9aGgodW8se3BhcnNlQm94U2hhZG93VmFsdWU6KCk9PmJoLGZvcm1hdEJveFNoYWRvd1ZhbHVlOigpPT52aH0pO3ZhciBtaD1oYSgpLERoPW5ldyBTZXQoW1wiaW5zZXRcIixcImluaGVyaXRcIixcImluaXRpYWxcIixcInJldmVydFwiLFwidW5zZXRcIl0pLGdoPS9cXCArKD8hW14oXSpcXCkpL2csbWE9L14tPyhcXGQrfFxcLlxcZCspKC4qPykkL2c7ZnVuY3Rpb24gYmgoZSl7cmV0dXJuIEFycmF5LmZyb20oKDAsbWguc3BsaXRBdFRvcExldmVsT25seSkoZSxcIixcIikpLm1hcChuPT57bGV0IHI9bi50cmltKCksaT17cmF3OnJ9LG89ci5zcGxpdChnaCksdT1uZXcgU2V0O2ZvcihsZXQgcyBvZiBvKW1hLmxhc3RJbmRleD0wLCF1LmhhcyhcIktFWVdPUkRcIikmJkRoLmhhcyhzKT8oaS5rZXl3b3JkPXMsdS5hZGQoXCJLRVlXT1JEXCIpKTptYS50ZXN0KHMpP3UuaGFzKFwiWFwiKT91LmhhcyhcIllcIik/dS5oYXMoXCJCTFVSXCIpP3UuaGFzKFwiU1BSRUFEXCIpfHwoaS5zcHJlYWQ9cyx1LmFkZChcIlNQUkVBRFwiKSk6KGkuYmx1cj1zLHUuYWRkKFwiQkxVUlwiKSk6KGkueT1zLHUuYWRkKFwiWVwiKSk6KGkueD1zLHUuYWRkKFwiWFwiKSk6aS5jb2xvcj8oaS51bmtub3dufHwoaS51bmtub3duPVtdKSxpLnVua25vd24ucHVzaChzKSk6aS5jb2xvcj1zO3JldHVybiBpLnZhbGlkPWkueCE9PXZvaWQgMCYmaS55IT09dm9pZCAwLGl9KX1mdW5jdGlvbiB2aChlKXtyZXR1cm4gZS5tYXAodD0+dC52YWxpZD9bdC5rZXl3b3JkLHQueCx0LnksdC5ibHVyLHQuc3ByZWFkLHQuY29sb3JdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTp0LnJhdykuam9pbihcIiwgXCIpfX0pO3ZhciB3YT1UKGFvPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGFvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2Z1bmN0aW9uIHloKGUsdCl7Zm9yKHZhciBuIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTohMCxnZXQ6dFtuXX0pfXloKGFvLHtub3JtYWxpemU6KCk9PnR0LHVybDooKT0+dmEsbnVtYmVyOigpPT53aCxwZXJjZW50YWdlOigpPT55YSxsZW5ndGg6KCk9PnhhLGxpbmVXaWR0aDooKT0+X2gsc2hhZG93OigpPT5TaCxjb2xvcjooKT0+a2gsaW1hZ2U6KCk9PlRoLGdyYWRpZW50OigpPT5GYSxwb3NpdGlvbjooKT0+UGgsZmFtaWx5TmFtZTooKT0+QmgsZ2VuZXJpY05hbWU6KCk9PlJoLGFic29sdXRlU2l6ZTooKT0+TWgscmVsYXRpdmVTaXplOigpPT4kaH0pO3ZhciB4aD10bygpLEZoPURhKCksc289W1wibWluXCIsXCJtYXhcIixcImNsYW1wXCIsXCJjYWxjXCJdLGJhPS8sKD8hW14oXSpcXCkpL2csZG49L18oPyFbXihdKlxcKSkvZztmdW5jdGlvbiB0dChlLHQ9ITApe3JldHVybiBlLmluY2x1ZGVzKFwidXJsKFwiKT9lLnNwbGl0KC8odXJsXFwoLio/XFwpKS9nKS5maWx0ZXIoQm9vbGVhbikubWFwKG49Pi9edXJsXFwoLio/XFwpJC8udGVzdChuKT9uOnR0KG4sITEpKS5qb2luKFwiXCIpOihlPWUucmVwbGFjZSgvKFteXFxcXF0pXysvZywobixyKT0+citcIiBcIi5yZXBlYXQobi5sZW5ndGgtMSkpLnJlcGxhY2UoL15fL2csXCIgXCIpLnJlcGxhY2UoL1xcXFxfL2csXCJfXCIpLHQmJihlPWUudHJpbSgpKSxlPWUucmVwbGFjZSgvKGNhbGN8bWlufG1heHxjbGFtcClcXCguK1xcKS9nLG49Pm4ucmVwbGFjZSgvKC0/XFxkKlxcLj9cXGQoPyFcXGItLitbLCldKD8hW14rXFwtLypdKVxcRCkoPzolfFthLXpdKyk/fFxcKSkoWytcXC0vKl0pL2csXCIkMSAkMiBcIikpLGUpfWZ1bmN0aW9uIHZhKGUpe3JldHVybiBlLnN0YXJ0c1dpdGgoXCJ1cmwoXCIpfWZ1bmN0aW9uIHdoKGUpe3JldHVybiFpc05hTihOdW1iZXIoZSkpfHxzby5zb21lKHQ9Pm5ldyBSZWdFeHAoYF4ke3R9XFxcXCguKz9gKS50ZXN0KGUpKX1mdW5jdGlvbiB5YShlKXtyZXR1cm4gZS5zcGxpdChkbikuZXZlcnkodD0+LyUkL2cudGVzdCh0KXx8c28uc29tZShuPT5uZXcgUmVnRXhwKGBeJHtufVxcXFwoLis/JWApLnRlc3QodCkpKX12YXIgRWg9W1wiY21cIixcIm1tXCIsXCJRXCIsXCJpblwiLFwicGNcIixcInB0XCIsXCJweFwiLFwiZW1cIixcImV4XCIsXCJjaFwiLFwicmVtXCIsXCJsaFwiLFwidndcIixcInZoXCIsXCJ2bWluXCIsXCJ2bWF4XCJdLGdhPWAoPzoke0VoLmpvaW4oXCJ8XCIpfSlgO2Z1bmN0aW9uIHhhKGUpe3JldHVybiBlLnNwbGl0KGRuKS5ldmVyeSh0PT50PT09XCIwXCJ8fG5ldyBSZWdFeHAoYCR7Z2F9JGApLnRlc3QodCl8fHNvLnNvbWUobj0+bmV3IFJlZ0V4cChgXiR7bn1cXFxcKC4rPyR7Z2F9YCkudGVzdCh0KSkpfXZhciBDaD1uZXcgU2V0KFtcInRoaW5cIixcIm1lZGl1bVwiLFwidGhpY2tcIl0pO2Z1bmN0aW9uIF9oKGUpe3JldHVybiBDaC5oYXMoZSl9ZnVuY3Rpb24gU2goZSl7bGV0IHQ9KDAsRmgucGFyc2VCb3hTaGFkb3dWYWx1ZSkodHQoZSkpO2ZvcihsZXQgbiBvZiB0KWlmKCFuLnZhbGlkKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGtoKGUpe2xldCB0PTA7cmV0dXJuIGUuc3BsaXQoZG4pLmV2ZXJ5KHI9PihyPXR0KHIpLHIuc3RhcnRzV2l0aChcInZhcihcIik/ITA6KDAseGgucGFyc2VDb2xvcikocix7bG9vc2U6ITB9KSE9PW51bGw/KHQrKywhMCk6ITEpKT90PjA6ITF9ZnVuY3Rpb24gVGgoZSl7bGV0IHQ9MDtyZXR1cm4gZS5zcGxpdChiYSkuZXZlcnkocj0+KHI9dHQociksci5zdGFydHNXaXRoKFwidmFyKFwiKT8hMDp2YShyKXx8RmEocil8fFtcImVsZW1lbnQoXCIsXCJpbWFnZShcIixcImNyb3NzLWZhZGUoXCIsXCJpbWFnZS1zZXQoXCJdLnNvbWUoaT0+ci5zdGFydHNXaXRoKGkpKT8odCsrLCEwKTohMSkpP3Q+MDohMX12YXIgQWg9bmV3IFNldChbXCJsaW5lYXItZ3JhZGllbnRcIixcInJhZGlhbC1ncmFkaWVudFwiLFwicmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudFwiLFwicmVwZWF0aW5nLXJhZGlhbC1ncmFkaWVudFwiLFwiY29uaWMtZ3JhZGllbnRcIl0pO2Z1bmN0aW9uIEZhKGUpe2U9dHQoZSk7Zm9yKGxldCB0IG9mIEFoKWlmKGUuc3RhcnRzV2l0aChgJHt0fShgKSlyZXR1cm4hMDtyZXR1cm4hMX12YXIgT2g9bmV3IFNldChbXCJjZW50ZXJcIixcInRvcFwiLFwicmlnaHRcIixcImJvdHRvbVwiLFwibGVmdFwiXSk7ZnVuY3Rpb24gUGgoZSl7bGV0IHQ9MDtyZXR1cm4gZS5zcGxpdChkbikuZXZlcnkocj0+KHI9dHQociksci5zdGFydHNXaXRoKFwidmFyKFwiKT8hMDpPaC5oYXMocil8fHhhKHIpfHx5YShyKT8odCsrLCEwKTohMSkpP3Q+MDohMX1mdW5jdGlvbiBCaChlKXtsZXQgdD0wO3JldHVybiBlLnNwbGl0KGJhKS5ldmVyeShyPT4ocj10dChyKSxyLnN0YXJ0c1dpdGgoXCJ2YXIoXCIpPyEwOnIuaW5jbHVkZXMoXCIgXCIpJiYhLyhbJ1wiXSkoW15cIiddKylcXDEvZy50ZXN0KHIpfHwvXlxcZC9nLnRlc3Qocik/ITE6KHQrKywhMCkpKT90PjA6ITF9dmFyIEloPW5ldyBTZXQoW1wic2VyaWZcIixcInNhbnMtc2VyaWZcIixcIm1vbm9zcGFjZVwiLFwiY3Vyc2l2ZVwiLFwiZmFudGFzeVwiLFwic3lzdGVtLXVpXCIsXCJ1aS1zZXJpZlwiLFwidWktc2Fucy1zZXJpZlwiLFwidWktbW9ub3NwYWNlXCIsXCJ1aS1yb3VuZGVkXCIsXCJtYXRoXCIsXCJlbW9qaVwiLFwiZmFuZ3NvbmdcIl0pO2Z1bmN0aW9uIFJoKGUpe3JldHVybiBJaC5oYXMoZSl9dmFyIExoPW5ldyBTZXQoW1wieHgtc21hbGxcIixcIngtc21hbGxcIixcInNtYWxsXCIsXCJtZWRpdW1cIixcImxhcmdlXCIsXCJ4LWxhcmdlXCIsXCJ4LWxhcmdlXCIsXCJ4eHgtbGFyZ2VcIl0pO2Z1bmN0aW9uIE1oKGUpe3JldHVybiBMaC5oYXMoZSl9dmFyIE5oPW5ldyBTZXQoW1wibGFyZ2VyXCIsXCJzbWFsbGVyXCJdKTtmdW5jdGlvbiAkaChlKXtyZXR1cm4gTmguaGFzKGUpfX0pO3ZhciBPYT1UKGNvPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2Z1bmN0aW9uIFdoKGUsdCl7Zm9yKHZhciBuIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTohMCxnZXQ6dFtuXX0pfVdoKGNvLHt1cGRhdGVBbGxDbGFzc2VzOigpPT56aCxhc1ZhbHVlOigpPT5EcixwYXJzZUNvbG9yRm9ybWF0OigpPT5sbyxhc0NvbG9yOigpPT5rYSxhc0xvb2t1cFZhbHVlOigpPT5UYSxjb2VyY2VWYWx1ZTooKT0+Vmh9KTt2YXIgcWg9Zm8ocmEoKSksVWg9Zm8obmEoKSksRWE9bm8oKSx4ZT13YSgpLENhPWZvKFhuKCkpO2Z1bmN0aW9uIGZvKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiB6aChlLHQpe3JldHVybigwLHFoLmRlZmF1bHQpKGk9PntpLndhbGtDbGFzc2VzKG89PntsZXQgdT10KG8udmFsdWUpO28udmFsdWU9dSxvLnJhd3MmJm8ucmF3cy52YWx1ZSYmKG8ucmF3cy52YWx1ZT0oMCxVaC5kZWZhdWx0KShvLnJhd3MudmFsdWUpKX0pfSkucHJvY2Vzc1N5bmMoZSl9ZnVuY3Rpb24gU2EoZSx0KXtpZighbXIoZSkpcmV0dXJuO2xldCBuPWUuc2xpY2UoMSwtMSk7aWYodChuKSlyZXR1cm4oMCx4ZS5ub3JtYWxpemUpKG4pfWZ1bmN0aW9uIEdoKGUsdD17fSxuKXtsZXQgcj10W2VdO2lmKHIhPT12b2lkIDApcmV0dXJuKDAsQ2EuZGVmYXVsdCkocik7aWYobXIoZSkpe2xldCBpPVNhKGUsbik7cmV0dXJuIGk9PT12b2lkIDA/dm9pZCAwOigwLENhLmRlZmF1bHQpKGkpfX1mdW5jdGlvbiBEcihlLHQ9e30se3ZhbGlkYXRlOm49KCk9PiEwfT17fSl7dmFyIHI7bGV0IGk9KHI9dC52YWx1ZXMpPT09bnVsbHx8cj09PXZvaWQgMD92b2lkIDA6cltlXTtyZXR1cm4gaSE9PXZvaWQgMD9pOnQuc3VwcG9ydHNOZWdhdGl2ZVZhbHVlcyYmZS5zdGFydHNXaXRoKFwiLVwiKT9HaChlLnNsaWNlKDEpLHQudmFsdWVzLG4pOlNhKGUsbil9ZnVuY3Rpb24gbXIoZSl7cmV0dXJuIGUuc3RhcnRzV2l0aChcIltcIikmJmUuZW5kc1dpdGgoXCJdXCIpfWZ1bmN0aW9uIGpoKGUpe2xldCB0PWUubGFzdEluZGV4T2YoXCIvXCIpO3JldHVybiB0PT09LTF8fHQ9PT1lLmxlbmd0aC0xP1tlXTpbZS5zbGljZSgwLHQpLGUuc2xpY2UodCsxKV19ZnVuY3Rpb24gbG8oZSl7aWYodHlwZW9mIGU9PVwic3RyaW5nXCImJmUuaW5jbHVkZXMoXCI8YWxwaGEtdmFsdWU+XCIpKXtsZXQgdD1lO3JldHVybih7b3BhY2l0eVZhbHVlOm49MX0pPT50LnJlcGxhY2UoXCI8YWxwaGEtdmFsdWU+XCIsbil9cmV0dXJuIGV9ZnVuY3Rpb24ga2EoZSx0PXt9LHt0YWlsd2luZENvbmZpZzpuPXt9fT17fSl7dmFyIHI7aWYoKChyPXQudmFsdWVzKT09PW51bGx8fHI9PT12b2lkIDA/dm9pZCAwOnJbZV0pIT09dm9pZCAwKXt2YXIgaTtyZXR1cm4gbG8oKGk9dC52YWx1ZXMpPT09bnVsbHx8aT09PXZvaWQgMD92b2lkIDA6aVtlXSl9bGV0W28sdV09amgoZSk7aWYodSE9PXZvaWQgMCl7dmFyIHMsYSxsLGY7bGV0IGM9KGY9KHM9dC52YWx1ZXMpPT09bnVsbHx8cz09PXZvaWQgMD92b2lkIDA6c1tvXSkhPT1udWxsJiZmIT09dm9pZCAwP2Y6bXIobyk/by5zbGljZSgxLC0xKTp2b2lkIDA7cmV0dXJuIGM9PT12b2lkIDA/dm9pZCAwOihjPWxvKGMpLG1yKHUpPygwLEVhLndpdGhBbHBoYVZhbHVlKShjLHUuc2xpY2UoMSwtMSkpOigoYT1uLnRoZW1lKT09PW51bGx8fGE9PT12b2lkIDB8fChsPWEub3BhY2l0eSk9PT1udWxsfHxsPT09dm9pZCAwP3ZvaWQgMDpsW3VdKT09PXZvaWQgMD92b2lkIDA6KDAsRWEud2l0aEFscGhhVmFsdWUpKGMsbi50aGVtZS5vcGFjaXR5W3VdKSl9cmV0dXJuIERyKGUsdCx7dmFsaWRhdGU6eGUuY29sb3J9KX1mdW5jdGlvbiBUYShlLHQ9e30pe3ZhciBuO3JldHVybihuPXQudmFsdWVzKT09PW51bGx8fG49PT12b2lkIDA/dm9pZCAwOm5bZV19ZnVuY3Rpb24gVGUoZSl7cmV0dXJuKHQsbik9PkRyKHQsbix7dmFsaWRhdGU6ZX0pfXZhciBBYT17YW55OkRyLGNvbG9yOmthLHVybDpUZSh4ZS51cmwpLGltYWdlOlRlKHhlLmltYWdlKSxsZW5ndGg6VGUoeGUubGVuZ3RoKSxwZXJjZW50YWdlOlRlKHhlLnBlcmNlbnRhZ2UpLHBvc2l0aW9uOlRlKHhlLnBvc2l0aW9uKSxsb29rdXA6VGEsXCJnZW5lcmljLW5hbWVcIjpUZSh4ZS5nZW5lcmljTmFtZSksXCJmYW1pbHktbmFtZVwiOlRlKHhlLmZhbWlseU5hbWUpLG51bWJlcjpUZSh4ZS5udW1iZXIpLFwibGluZS13aWR0aFwiOlRlKHhlLmxpbmVXaWR0aCksXCJhYnNvbHV0ZS1zaXplXCI6VGUoeGUuYWJzb2x1dGVTaXplKSxcInJlbGF0aXZlLXNpemVcIjpUZSh4ZS5yZWxhdGl2ZVNpemUpLHNoYWRvdzpUZSh4ZS5zaGFkb3cpfSxfYT1PYmplY3Qua2V5cyhBYSk7ZnVuY3Rpb24gSGgoZSx0KXtsZXQgbj1lLmluZGV4T2YodCk7cmV0dXJuIG49PT0tMT9bdm9pZCAwLGVdOltlLnNsaWNlKDAsbiksZS5zbGljZShuKzEpXX1mdW5jdGlvbiBWaChlLHQsbixyKXtpZihtcih0KSl7bGV0IGk9dC5zbGljZSgxLC0xKSxbbyx1XT1IaChpLFwiOlwiKTtpZighL15bXFx3LV9dKyQvZy50ZXN0KG8pKXU9aTtlbHNlIGlmKG8hPT12b2lkIDAmJiFfYS5pbmNsdWRlcyhvKSlyZXR1cm5bXTtpZih1Lmxlbmd0aD4wJiZfYS5pbmNsdWRlcyhvKSlyZXR1cm5bRHIoYFske3V9XWAsbiksb119Zm9yKGxldCBpIG9mW10uY29uY2F0KGUpKXtsZXQgbz1BYVtpXSh0LG4se3RhaWx3aW5kQ29uZmlnOnJ9KTtpZihvIT09dm9pZCAwKXJldHVybltvLGldfXJldHVybltdfX0pO3ZhciBQYT1UKHBvPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHBvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShwbyxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCxnZXQ6KCk9PllofSk7ZnVuY3Rpb24gWWgoZSl7cmV0dXJuIHR5cGVvZiBlPT1cImZ1bmN0aW9uXCI/ZSh7fSk6ZX19KTt2YXIgTWE9VChtbz0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShtbyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkobW8sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsZ2V0OigpPT5obX0pO3ZhciBYaD1sdChYbigpKSxRaD1sdChXdSgpKSxLaD1sdChxdSgpKSxKaD1sdChKbigpKSxaaD1sdCh6dSgpKSxSYT1HdSgpLEJhPWp1KCksZW09VnUoKSx0bT1sdChZdSgpKSxybT1YdSgpLG5tPU9hKCksaW09bm8oKSxvbT1sdChQYSgpKTtmdW5jdGlvbiBsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gRXQoZSl7cmV0dXJuIHR5cGVvZiBlPT1cImZ1bmN0aW9uXCJ9ZnVuY3Rpb24gZ3IoZSl7cmV0dXJuIHR5cGVvZiBlPT1cIm9iamVjdFwiJiZlIT09bnVsbH1mdW5jdGlvbiBicihlLC4uLnQpe2xldCBuPXQucG9wKCk7Zm9yKGxldCByIG9mIHQpZm9yKGxldCBpIGluIHIpe2xldCBvPW4oZVtpXSxyW2ldKTtvPT09dm9pZCAwP2dyKGVbaV0pJiZncihyW2ldKT9lW2ldPWJyKGVbaV0scltpXSxuKTplW2ldPXJbaV06ZVtpXT1vfXJldHVybiBlfXZhciBobz17Y29sb3JzOlpoLmRlZmF1bHQsbmVnYXRpdmUoZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZpbHRlcih0PT5lW3RdIT09XCIwXCIpLnJlZHVjZSgodCxuKT0+e2xldCByPSgwLFhoLmRlZmF1bHQpKGVbbl0pO3JldHVybiByIT09dm9pZCAwJiYodFtgLSR7bn1gXT1yKSx0fSx7fSl9LGJyZWFrcG9pbnRzKGUpe3JldHVybiBPYmplY3Qua2V5cyhlKS5maWx0ZXIodD0+dHlwZW9mIGVbdF09PVwic3RyaW5nXCIpLnJlZHVjZSgodCxuKT0+KHsuLi50LFtgc2NyZWVuLSR7bn1gXTplW25dfSkse30pfX07ZnVuY3Rpb24gdW0oZSwuLi50KXtyZXR1cm4gRXQoZSk/ZSguLi50KTplfWZ1bmN0aW9uIHNtKGUpe3JldHVybiBlLnJlZHVjZSgodCx7ZXh0ZW5kOm59KT0+YnIodCxuLChyLGkpPT5yPT09dm9pZCAwP1tpXTpBcnJheS5pc0FycmF5KHIpP1tpLC4uLnJdOltpLHJdKSx7fSl9ZnVuY3Rpb24gYW0oZSl7cmV0dXJuey4uLmUucmVkdWNlKCh0LG4pPT4oMCxSYS5kZWZhdWx0cykodCxuKSx7fSksZXh0ZW5kOnNtKGUpfX1mdW5jdGlvbiBJYShlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkmJmdyKGVbMF0pKXJldHVybiBlLmNvbmNhdCh0KTtpZihBcnJheS5pc0FycmF5KHQpJiZncih0WzBdKSYmZ3IoZSkpcmV0dXJuW2UsLi4udF07aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gdH1mdW5jdGlvbiBsbSh7ZXh0ZW5kOmUsLi4udH0pe3JldHVybiBicih0LGUsKG4scik9PiFFdChuKSYmIXIuc29tZShFdCk/YnIoe30sbiwuLi5yLElhKTooaSxvKT0+YnIoe30sLi4uW24sLi4ucl0ubWFwKHU9PnVtKHUsaSxvKSksSWEpKX1mdW5jdGlvbipmbShlKXtsZXQgdD0oMCxCYS50b1BhdGgpKGUpO2lmKHQubGVuZ3RoPT09MHx8KHlpZWxkIHQsQXJyYXkuaXNBcnJheShlKSkpcmV0dXJuO2xldCBuPS9eKC4qPylcXHMqXFwvXFxzKihbXi9dKykkLyxyPWUubWF0Y2gobik7aWYociE9PW51bGwpe2xldFssaSxvXT1yLHU9KDAsQmEudG9QYXRoKShpKTt1LmFscGhhPW8seWllbGQgdX19ZnVuY3Rpb24gY20oZSl7bGV0IHQ9KG4scik9Pntmb3IobGV0IGkgb2YgZm0obikpe2xldCBvPTAsdT1lO2Zvcig7dSE9bnVsbCYmbzxpLmxlbmd0aDspdT11W2lbbysrXV0sdT1FdCh1KSYmKGkuYWxwaGE9PT12b2lkIDB8fG88PWkubGVuZ3RoLTEpP3UodCxobyk6dTtpZih1IT09dm9pZCAwKXtpZihpLmFscGhhIT09dm9pZCAwKXtsZXQgcz0oMCxubS5wYXJzZUNvbG9yRm9ybWF0KSh1KTtyZXR1cm4oMCxpbS53aXRoQWxwaGFWYWx1ZSkocyxpLmFscGhhLCgwLG9tLmRlZmF1bHQpKHMpKX1yZXR1cm4oMCx0bS5kZWZhdWx0KSh1KT8oMCxybS5jbG9uZURlZXApKHUpOnV9fXJldHVybiByfTtyZXR1cm4gT2JqZWN0LmFzc2lnbih0LHt0aGVtZTp0LC4uLmhvfSksT2JqZWN0LmtleXMoZSkucmVkdWNlKChuLHIpPT4obltyXT1FdChlW3JdKT9lW3JdKHQsaG8pOmVbcl0sbikse30pfWZ1bmN0aW9uIExhKGUpe2xldCB0PVtdO3JldHVybiBlLmZvckVhY2gobj0+e3Q9Wy4uLnQsbl07dmFyIHI7bGV0IGk9KHI9bj09bnVsbD92b2lkIDA6bi5wbHVnaW5zKSE9PW51bGwmJnIhPT12b2lkIDA/cjpbXTtpLmxlbmd0aCE9PTAmJmkuZm9yRWFjaChvPT57by5fX2lzT3B0aW9uc0Z1bmN0aW9uJiYobz1vKCkpO3ZhciB1O3Q9Wy4uLnQsLi4uTGEoWyh1PW89PW51bGw/dm9pZCAwOm8uY29uZmlnKSE9PW51bGwmJnUhPT12b2lkIDA/dTp7fV0pXX0pfSksdH1mdW5jdGlvbiBkbShlKXtyZXR1cm5bLi4uZV0ucmVkdWNlUmlnaHQoKG4scik9PkV0KHIpP3Ioe2NvcmVQbHVnaW5zOm59KTooMCxLaC5kZWZhdWx0KShyLG4pLFFoLmRlZmF1bHQpfWZ1bmN0aW9uIHBtKGUpe3JldHVyblsuLi5lXS5yZWR1Y2VSaWdodCgobixyKT0+Wy4uLm4sLi4ucl0sW10pfWZ1bmN0aW9uIGhtKGUpe2xldCB0PVsuLi5MYShlKSx7cHJlZml4OlwiXCIsaW1wb3J0YW50OiExLHNlcGFyYXRvcjpcIjpcIix2YXJpYW50T3JkZXI6SmguZGVmYXVsdC52YXJpYW50T3JkZXJ9XTt2YXIgbixyO3JldHVybigwLGVtLm5vcm1hbGl6ZUNvbmZpZykoKDAsUmEuZGVmYXVsdHMpKHt0aGVtZTpjbShsbShhbSh0Lm1hcChpPT4obj1pPT1udWxsP3ZvaWQgMDppLnRoZW1lKSE9PW51bGwmJm4hPT12b2lkIDA/bjp7fSkpKSksY29yZVBsdWdpbnM6ZG0odC5tYXAoaT0+aS5jb3JlUGx1Z2lucykpLHBsdWdpbnM6cG0oZS5tYXAoaT0+KHI9aT09bnVsbD92b2lkIDA6aS5wbHVnaW5zKSE9PW51bGwmJnIhPT12b2lkIDA/cjpbXSkpfSwuLi50KSl9fSk7dmFyIE5hPXt9O3luKE5hLHtkZWZhdWx0OigpPT5tbX0pO3ZhciBtbSwkYT12bigoKT0+e21tPXt5ZWxsb3c6ZT0+ZX19KTt2YXIgemE9VChEbz0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShEbyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtmdW5jdGlvbiBEbShlLHQpe2Zvcih2YXIgbiBpbiB0KU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4se2VudW1lcmFibGU6ITAsZ2V0OnRbbl19KX1EbShEbyx7ZmxhZ0VuYWJsZWQ6KCk9PnZtLGlzc3VlRmxhZ05vdGljZXM6KCk9PnltLGRlZmF1bHQ6KCk9PnhtfSk7dmFyIGdtPVVhKCgkYSgpLElyKE5hKSkpLGJtPVVhKChRcigpLElyKFhyKSkpO2Z1bmN0aW9uIFVhKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgV2E9e29wdGltaXplVW5pdmVyc2FsRGVmYXVsdHM6ITF9LHZyPXtmdXR1cmU6W1wiaG92ZXJPbmx5V2hlblN1cHBvcnRlZFwiLFwicmVzcGVjdERlZmF1bHRSaW5nQ29sb3JPcGFjaXR5XCJdLGV4cGVyaW1lbnRhbDpbXCJvcHRpbWl6ZVVuaXZlcnNhbERlZmF1bHRzXCIsXCJtYXRjaFZhcmlhbnRcIl19O2Z1bmN0aW9uIHZtKGUsdCl7aWYodnIuZnV0dXJlLmluY2x1ZGVzKHQpKXt2YXIgbixyLGk7cmV0dXJuIGUuZnV0dXJlPT09XCJhbGxcInx8KChpPShyPWU9PW51bGx8fChuPWUuZnV0dXJlKT09PW51bGx8fG49PT12b2lkIDA/dm9pZCAwOm5bdF0pIT09bnVsbCYmciE9PXZvaWQgMD9yOldhW3RdKSE9PW51bGwmJmkhPT12b2lkIDA/aTohMSl9aWYodnIuZXhwZXJpbWVudGFsLmluY2x1ZGVzKHQpKXt2YXIgbyx1LHM7cmV0dXJuIGUuZXhwZXJpbWVudGFsPT09XCJhbGxcInx8KChzPSh1PWU9PW51bGx8fChvPWUuZXhwZXJpbWVudGFsKT09PW51bGx8fG89PT12b2lkIDA/dm9pZCAwOm9bdF0pIT09bnVsbCYmdSE9PXZvaWQgMD91OldhW3RdKSE9PW51bGwmJnMhPT12b2lkIDA/czohMSl9cmV0dXJuITF9ZnVuY3Rpb24gcWEoZSl7aWYoZS5leHBlcmltZW50YWw9PT1cImFsbFwiKXJldHVybiB2ci5leHBlcmltZW50YWw7dmFyIHQ7cmV0dXJuIE9iamVjdC5rZXlzKCh0PWU9PW51bGw/dm9pZCAwOmUuZXhwZXJpbWVudGFsKSE9PW51bGwmJnQhPT12b2lkIDA/dDp7fSkuZmlsdGVyKG49PnZyLmV4cGVyaW1lbnRhbC5pbmNsdWRlcyhuKSYmZS5leHBlcmltZW50YWxbbl0pfWZ1bmN0aW9uIHltKGUpe2lmKHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEPT09dm9pZCAwJiZxYShlKS5sZW5ndGg+MCl7bGV0IHQ9cWEoZSkubWFwKG49PmdtLmRlZmF1bHQueWVsbG93KG4pKS5qb2luKFwiLCBcIik7Ym0uZGVmYXVsdC53YXJuKFwiZXhwZXJpbWVudGFsLWZsYWdzLWVuYWJsZWRcIixbYFlvdSBoYXZlIGVuYWJsZWQgZXhwZXJpbWVudGFsIGZlYXR1cmVzOiAke3R9YCxcIkV4cGVyaW1lbnRhbCBmZWF0dXJlcyBpbiBUYWlsd2luZCBDU1MgYXJlIG5vdCBjb3ZlcmVkIGJ5IHNlbXZlciwgbWF5IGludHJvZHVjZSBicmVha2luZyBjaGFuZ2VzLCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgdGltZS5cIl0pfX12YXIgeG09dnJ9KTt2YXIgamE9VChnbz0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShnbyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZ28sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsZ2V0OigpPT5HYX0pO3ZhciBGbT1FbShKbigpKSx3bT16YSgpO2Z1bmN0aW9uIEVtKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBHYShlKXt2YXIgdDtsZXQgbj0oKHQ9ZT09bnVsbD92b2lkIDA6ZS5wcmVzZXRzKSE9PW51bGwmJnQhPT12b2lkIDA/dDpbRm0uZGVmYXVsdF0pLnNsaWNlKCkucmV2ZXJzZSgpLmZsYXRNYXAobz0+R2EodHlwZW9mIG89PVwiZnVuY3Rpb25cIj9vKCk6bykpLHI9e3Jlc3BlY3REZWZhdWx0UmluZ0NvbG9yT3BhY2l0eTp7dGhlbWU6e3JpbmdDb2xvcjp7REVGQVVMVDpcIiMzYjgyZjY3ZlwifX19fSxpPU9iamVjdC5rZXlzKHIpLmZpbHRlcihvPT4oMCx3bS5mbGFnRW5hYmxlZCkoZSxvKSkubWFwKG89PnJbb10pO3JldHVybltlLC4uLmksLi4ubl19fSk7dmFyIFZhPVQoYm89PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoYm8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGJvLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLGdldDooKT0+U219KTt2YXIgQ209SGEoTWEoKSksX209SGEoamEoKSk7ZnVuY3Rpb24gSGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIFNtKC4uLmUpe2xldFssLi4udF09KDAsX20uZGVmYXVsdCkoZVswXSk7cmV0dXJuKDAsQ20uZGVmYXVsdCkoWy4uLmUsLi4udF0pfX0pO3ZhciBYYT1UKChrYixZYSk9Pnt2YXIgdm89VmEoKTtZYS5leHBvcnRzPSh2by5fX2VzTW9kdWxlP3ZvOntkZWZhdWx0OnZvfSkuZGVmYXVsdH0pO3ZhciBndDtmdW5jdGlvbiBCbChlKXtndD1lfXZhciBBdD1udWxsO2FzeW5jIGZ1bmN0aW9uIHFlKCl7cmV0dXJuIGd0fHwoQXQ/KGF3YWl0IEF0LGd0KTooQXQ9UHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+KEhvKCksam8pKS50aGVuKGU9PmUuZ2V0WW9nYU1vZHVsZSgpKS50aGVuKGU9Pmd0PWUpLGF3YWl0IEF0LEF0PW51bGwsZ3QpKX12YXIgT3Q9KGUsdCk9PigpPT4odHx8ZSgodD17ZXhwb3J0czp7fX0pLmV4cG9ydHMsdCksdC5leHBvcnRzKSxJbD1PdCgoZSx0KT0+e3QuZXhwb3J0cz1bXCJlbVwiLFwiZXhcIixcImNoXCIsXCJyZW1cIixcInZoXCIsXCJ2d1wiLFwidm1pblwiLFwidm1heFwiLFwicHhcIixcIm1tXCIsXCJjbVwiLFwiaW5cIixcInB0XCIsXCJwY1wiLFwibW96bW1cIl19KSxSbD1PdCgoZSx0KT0+e3QuZXhwb3J0cz1bXCJkZWdcIixcImdyYWRcIixcInJhZFwiLFwidHVyblwiXX0pLExsPU90KChlLHQpPT57dC5leHBvcnRzPVtcImRwaVwiLFwiZHBjbVwiLFwiZHBweFwiXX0pLE1sPU90KChlLHQpPT57dC5leHBvcnRzPVtcIkh6XCIsXCJrSHpcIl19KSxObD1PdCgoZSx0KT0+e3QuZXhwb3J0cz1bXCJzXCIsXCJtc1wiXX0pLCRsPUlsKCksVm89UmwoKSxZbz1MbCgpLFhvPU1sKCksUW89TmwoKTtmdW5jdGlvbiBGbihlKXtpZigvXFwuXFxEPyQvLnRlc3QoZSkpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGRvdCBzaG91bGQgYmUgZm9sbG93ZWQgYnkgYSBudW1iZXJcIik7aWYoL15bKy1dezJ9Ly50ZXN0KGUpKXRocm93IG5ldyBFcnJvcihcIk9ubHkgb25lIGxlYWRpbmcgKy8tIGlzIGFsbG93ZWRcIik7aWYoV2woZSk+MSl0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IG9uZSBkb3QgaXMgYWxsb3dlZFwiKTtpZigvJSQvLnRlc3QoZSkpe3RoaXMudHlwZT1cInBlcmNlbnRhZ2VcIix0aGlzLnZhbHVlPXhuKGUpLHRoaXMudW5pdD1cIiVcIjtyZXR1cm59dmFyIHQ9VWwoZSk7aWYoIXQpe3RoaXMudHlwZT1cIm51bWJlclwiLHRoaXMudmFsdWU9eG4oZSk7cmV0dXJufXRoaXMudHlwZT1HbCh0KSx0aGlzLnZhbHVlPXhuKGUuc3Vic3RyKDAsZS5sZW5ndGgtdC5sZW5ndGgpKSx0aGlzLnVuaXQ9dH1Gbi5wcm90b3R5cGUudmFsdWVPZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlfTtGbi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZSsodGhpcy51bml0fHxcIlwiKX07ZnVuY3Rpb24gUWUoZSl7cmV0dXJuIG5ldyBGbihlKX1mdW5jdGlvbiBXbChlKXt2YXIgdD1lLm1hdGNoKC9cXC4vZyk7cmV0dXJuIHQ/dC5sZW5ndGg6MH1mdW5jdGlvbiB4bihlKXt2YXIgdD1wYXJzZUZsb2F0KGUpO2lmKGlzTmFOKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbnVtYmVyOiBcIitlKTtyZXR1cm4gdH12YXIgcWw9W10uY29uY2F0KFZvLFhvLCRsLFlvLFFvKTtmdW5jdGlvbiBVbChlKXt2YXIgdD1lLm1hdGNoKC9cXEQrJC8pLG49dCYmdFswXTtpZihuJiZxbC5pbmRleE9mKG4pPT09LTEpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB1bml0OiBcIituKTtyZXR1cm4gbn12YXIgemw9T2JqZWN0LmFzc2lnbihScihWbyxcImFuZ2xlXCIpLFJyKFhvLFwiZnJlcXVlbmN5XCIpLFJyKFlvLFwicmVzb2x1dGlvblwiKSxScihRbyxcInRpbWVcIikpO2Z1bmN0aW9uIFJyKGUsdCl7cmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhlLm1hcChuPT5bbix0XSkpfWZ1bmN0aW9uIEdsKGUpe3JldHVybiB6bFtlXXx8XCJsZW5ndGhcIn1pbXBvcnQgamwgZnJvbVwibGluZWJyZWFrXCI7ZnVuY3Rpb24gYnQoZSl7bGV0IHQ9dHlwZW9mIGU7cmV0dXJuISh0PT09XCJudW1iZXJcInx8dD09PVwiYmlnaW50XCJ8fHQ9PT1cInN0cmluZ1wifHx0PT09XCJib29sZWFuXCIpfWZ1bmN0aW9uIEtvKGUpe3JldHVybi9eY2xhc3NcXHMvLnRlc3QoZS50b1N0cmluZygpKX1mdW5jdGlvbiBKbyhlKXtyZXR1cm5cImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCJpbiBlfWZ1bmN0aW9uIFpvKGUpe2xldCB0PXR5cGVvZiBlPlwidVwiP1tdOltdLmNvbmNhdChlKS5mbGF0KDEvMCksbj1bXTtmb3IobGV0IHI9MDtyPHQubGVuZ3RoO3IrKyl7bGV0IGk9dFtyXTt0eXBlb2YgaT5cInVcInx8dHlwZW9mIGk9PVwiYm9vbGVhblwifHxpPT09bnVsbHx8KHR5cGVvZiBpPT1cIm51bWJlclwiJiYoaT1TdHJpbmcoaSkpLHR5cGVvZiBpPT1cInN0cmluZ1wiJiZuLmxlbmd0aCYmdHlwZW9mIG5bbi5sZW5ndGgtMV09PVwic3RyaW5nXCI/bltuLmxlbmd0aC0xXSs9aTpuLnB1c2goaSkpfXJldHVybiBufWZ1bmN0aW9uIHEoZSx0LG4scixpPSExKXtpZih0eXBlb2YgZT09XCJudW1iZXJcIilyZXR1cm4gZTt0cnl7aWYoZT1lLnRyaW0oKSwvWyAvXFwoLF0vLnRlc3QoZSkpcmV0dXJuO2lmKGU9PT1TdHJpbmcoK2UpKXJldHVybitlO2xldCBvPW5ldyBRZShlKTtpZihvLnR5cGU9PT1cImxlbmd0aFwiKXN3aXRjaChvLnVuaXQpe2Nhc2VcImVtXCI6cmV0dXJuIG8udmFsdWUqdDtjYXNlXCJyZW1cIjpyZXR1cm4gby52YWx1ZSoxNjtjYXNlXCJ2d1wiOnJldHVybn5+KG8udmFsdWUqci5fdmlld3BvcnRXaWR0aC8xMDApO2Nhc2VcInZoXCI6cmV0dXJufn4oby52YWx1ZSpyLl92aWV3cG9ydEhlaWdodC8xMDApO2RlZmF1bHQ6cmV0dXJuIG8udmFsdWV9ZWxzZSBpZihvLnR5cGU9PT1cImFuZ2xlXCIpc3dpdGNoKG8udW5pdCl7Y2FzZVwiZGVnXCI6cmV0dXJuIG8udmFsdWU7Y2FzZVwicmFkXCI6cmV0dXJuIG8udmFsdWUqMTgwL01hdGguUEk7ZGVmYXVsdDpyZXR1cm4gby52YWx1ZX1lbHNlIGlmKG8udHlwZT09PVwicGVyY2VudGFnZVwiJiZpKXJldHVybiBvLnZhbHVlLzEwMCpufWNhdGNoe319ZnVuY3Rpb24gUHQoZSx0KXtyZXR1cm5bZVswXSp0WzBdK2VbMl0qdFsxXSxlWzFdKnRbMF0rZVszXSp0WzFdLGVbMF0qdFsyXStlWzJdKnRbM10sZVsxXSp0WzJdK2VbM10qdFszXSxlWzBdKnRbNF0rZVsyXSp0WzVdK2VbNF0sZVsxXSp0WzRdK2VbM10qdFs1XStlWzVdXX1mdW5jdGlvbiB2ZShlLHQsbixyKXtsZXQgaT10W2VdO2lmKHR5cGVvZiBpPlwidVwiKXtpZihyJiZ0eXBlb2YgZTxcInVcIil0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdmFsdWUgZm9yIENTUyBwcm9wZXJ0eSBcIiR7cn1cIi4gQWxsb3dlZCB2YWx1ZXM6ICR7T2JqZWN0LmtleXModCkubWFwKG89PmBcIiR7b31cImApLmpvaW4oXCIgfCBcIil9LiBSZWNlaXZlZDogXCIke2V9XCIuYCk7aT1ufXJldHVybiBpfXZhciB3bixFbixldT1bMzIsMTYwLDQ5NjEsNjU3OTIsNjU3OTMsNDE1Myw0MjQxLDEwXS5tYXAoZT0+U3RyaW5nLmZyb21Db2RlUG9pbnQoZSkpO2Z1bmN0aW9uIHdlKGUsdCxuKXtpZighd258fCFFbil7aWYoISh0eXBlb2YgSW50bDxcInVcIiYmXCJTZWdtZW50ZXJcImluIEludGwpKXRocm93IG5ldyBFcnJvcihcIkludGwuU2VnbWVudGVyIGRvZXMgbm90IGV4aXN0LCBwbGVhc2UgdXNlIGltcG9ydCBhIHBvbHlmaWxsLlwiKTt3bj1uZXcgSW50bC5TZWdtZW50ZXIobix7Z3JhbnVsYXJpdHk6XCJ3b3JkXCJ9KSxFbj1uZXcgSW50bC5TZWdtZW50ZXIobix7Z3JhbnVsYXJpdHk6XCJncmFwaGVtZVwifSl9aWYodD09PVwiZ3JhcGhlbWVcIilyZXR1cm5bLi4uRW4uc2VnbWVudChlKV0ubWFwKHI9PnIuc2VnbWVudCk7e2xldCByPVsuLi53bi5zZWdtZW50KGUpXS5tYXAodT0+dS5zZWdtZW50KSxpPVtdLG89MDtmb3IoO288ci5sZW5ndGg7KXtsZXQgdT1yW29dO2lmKHU9PVwiXFx4QTBcIil7bGV0IHM9bz09PTA/XCJcIjppLnBvcCgpLGE9bz09PXIubGVuZ3RoLTE/XCJcIjpyW28rMV07aS5wdXNoKHMrXCJcXHhBMFwiK2EpLG8rPTJ9ZWxzZSBpLnB1c2godSksbysrfXJldHVybiBpfX1mdW5jdGlvbiBDKGUsdCxuKXtsZXQgcj1cIlwiO2ZvcihsZXRbaSxvXW9mIE9iamVjdC5lbnRyaWVzKHQpKXR5cGVvZiBvPFwidVwiJiYocis9YCAke2l9PVwiJHtvfVwiYCk7cmV0dXJuIG4/YDwke2V9JHtyfT4ke259PC8ke2V9PmA6YDwke2V9JHtyfS8+YH1mdW5jdGlvbiB0dShlPTIwKXtsZXQgdD1uZXcgTWFwO2Z1bmN0aW9uIG4obyx1KXtpZih0LnNpemU+PWUpe2xldCBzPXQua2V5cygpLm5leHQoKS52YWx1ZTt0LmRlbGV0ZShzKX10LnNldChvLHUpfWZ1bmN0aW9uIHIobyl7aWYoIXQuaGFzKG8pKXJldHVybjtsZXQgcz10LmdldChvKTtyZXR1cm4gdC5kZWxldGUobyksdC5zZXQobyxzKSxzfWZ1bmN0aW9uIGkoKXt0LmNsZWFyKCl9cmV0dXJue3NldDpuLGdldDpyLGNsZWFyOml9fWZ1bmN0aW9uIHZ0KGUpe3JldHVybiBlP2Uuc3BsaXQoL1ssIF0vKS5maWx0ZXIoQm9vbGVhbikubWFwKE51bWJlcik6bnVsbH1mdW5jdGlvbiBIbChlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIExyKGUpe3JldHVybiB0eXBlb2YgZT09XCJzdHJpbmdcIn1mdW5jdGlvbiBydShlKXtyZXR1cm4gdHlwZW9mIGU9PVwibnVtYmVyXCJ9ZnVuY3Rpb24gbnUoZSl7cmV0dXJuIEhsKGUpPT09XCJbb2JqZWN0IFVuZGVmaW5lZF1cIn1mdW5jdGlvbiBpdShlLHQpe2lmKHQ9PT1cImJyZWFrLWFsbFwiKXJldHVybnt3b3Jkczp3ZShlLFwiZ3JhcGhlbWVcIikscmVxdWlyZWRCcmVha3M6W119O2lmKHQ9PT1cImtlZXAtYWxsXCIpcmV0dXJue3dvcmRzOndlKGUsXCJ3b3JkXCIpLHJlcXVpcmVkQnJlYWtzOltdfTtsZXQgbj1uZXcgamwoZSkscj0wLGk9bi5uZXh0QnJlYWsoKSxvPVtdLHU9WyExXTtmb3IoO2k7KXtsZXQgcz1lLnNsaWNlKHIsaS5wb3NpdGlvbik7by5wdXNoKHMpLGkucmVxdWlyZWQ/dS5wdXNoKCEwKTp1LnB1c2goITEpLHI9aS5wb3NpdGlvbixpPW4ubmV4dEJyZWFrKCl9cmV0dXJue3dvcmRzOm8scmVxdWlyZWRCcmVha3M6dX19dmFyIG91PWU9PmUucmVwbGFjZUFsbCgvKFtBLVpdKS9nLCh0LG4pPT5gLSR7bi50b0xvd2VyQ2FzZSgpfWApO3ZhciBWbD1cImltYWdlL2F2aWZcIixZbD1cImltYWdlL3dlYnBcIixNcj1cImltYWdlL2FwbmdcIixOcj1cImltYWdlL3BuZ1wiLCRyPVwiaW1hZ2UvanBlZ1wiLFdyPVwiaW1hZ2UvZ2lmXCIsX249XCJpbWFnZS9zdmcreG1sXCI7ZnVuY3Rpb24gYXUoZSl7bGV0IHQ9bmV3IERhdGFWaWV3KGUpLG49NCxyPXQuYnl0ZUxlbmd0aDtmb3IoO248cjspe2xldCBpPXQuZ2V0VWludDE2KG4sITEpO2lmKGk+cil0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBKUEVHXCIpO2xldCBvPXQuZ2V0VWludDgoaSsxK24pO2lmKG89PT0xOTJ8fG89PT0xOTN8fG89PT0xOTQpcmV0dXJuW3QuZ2V0VWludDE2KGkrNytuLCExKSx0LmdldFVpbnQxNihpKzUrbiwhMSldO24rPWkrMn10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBKUEVHXCIpfWZ1bmN0aW9uIGx1KGUpe2xldCB0PW5ldyBVaW50OEFycmF5KGUuc2xpY2UoNiwxMCkpO3JldHVyblt0WzBdfHRbMV08PDgsdFsyXXx0WzNdPDw4XX1mdW5jdGlvbiBmdShlKXtsZXQgdD1uZXcgRGF0YVZpZXcoZSk7cmV0dXJuW3QuZ2V0VWludDE2KDE4LCExKSx0LmdldFVpbnQxNigyMiwhMSldfXZhciBSZT10dSgxMDApLENuPW5ldyBNYXAsWGw9W05yLE1yLCRyLFdyLF9uXTtmdW5jdGlvbiBRbChlKXtsZXQgdD1cIlwiLG49bmV3IFVpbnQ4QXJyYXkoZSk7Zm9yKGxldCByPTA7cjxuLmJ5dGVMZW5ndGg7cisrKXQrPVN0cmluZy5mcm9tQ2hhckNvZGUobltyXSk7cmV0dXJuIGJ0b2EodCl9ZnVuY3Rpb24gS2woZSl7bGV0IHQ9YXRvYihlKSxuPXQubGVuZ3RoLHI9bmV3IFVpbnQ4QXJyYXkobik7Zm9yKGxldCBpPTA7aTxuO2krKylyW2ldPXQuY2hhckNvZGVBdChpKTtyZXR1cm4gci5idWZmZXJ9ZnVuY3Rpb24gdXUoZSx0KXtsZXQgbj10Lm1hdGNoKC88c3ZnW14+XSo+LylbMF0scj1uLm1hdGNoKC92aWV3Qm94PVsnXCJdKC4rKVsnXCJdLyksaT1yP3Z0KHJbMV0pOm51bGwsbz1uLm1hdGNoKC93aWR0aD1bJ1wiXShcXGQqXFwuXFxkK3xcXGQrKVsnXCJdLyksdT1uLm1hdGNoKC9oZWlnaHQ9WydcIl0oXFxkKlxcLlxcZCt8XFxkKylbJ1wiXS8pO2lmKCFpJiYoIW98fCF1KSl0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBTVkcgZnJvbSAke2V9OiBtaXNzaW5nIFwidmlld0JveFwiYCk7bGV0IHM9aT9baVsyXSxpWzNdXTpbK29bMV0sK3VbMV1dLGE9c1swXS9zWzFdO3JldHVybiBvJiZ1P1srb1sxXSwrdVsxXV06bz9bK29bMV0sK29bMV0vYV06dT9bK3VbMV0qYSwrdVsxXV06W3NbMF0sc1sxXV19ZnVuY3Rpb24gc3UoZSl7bGV0IHQsbj1KbChuZXcgVWludDhBcnJheShlKSk7c3dpdGNoKG4pe2Nhc2UgTnI6Y2FzZSBNcjp0PWZ1KGUpO2JyZWFrO2Nhc2UgV3I6dD1sdShlKTticmVhaztjYXNlICRyOnQ9YXUoZSk7YnJlYWt9aWYoIVhsLmluY2x1ZGVzKG4pKXRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgaW1hZ2UgdHlwZTogJHtufHxcInVua25vd25cIn1gKTtyZXR1cm5bYGRhdGE6JHtufTtiYXNlNjQsJHtRbChlKX1gLHRdfWFzeW5jIGZ1bmN0aW9uIHl0KGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcIkltYWdlIHNvdXJjZSBpcyBub3QgcHJvdmlkZWQuXCIpO2lmKHR5cGVvZiBlPT1cIm9iamVjdFwiKXtsZXRbaSxvXT1zdShlKTtyZXR1cm5baSwuLi5vXX1pZigoZS5zdGFydHNXaXRoKCdcIicpJiZlLmVuZHNXaXRoKCdcIicpfHxlLnN0YXJ0c1dpdGgoXCInXCIpJiZlLmVuZHNXaXRoKFwiJ1wiKSkmJihlPWUuc2xpY2UoMSwtMSkpLHR5cGVvZiB3aW5kb3c+XCJ1XCImJiFlLnN0YXJ0c1dpdGgoXCJodHRwXCIpJiYhZS5zdGFydHNXaXRoKFwiZGF0YTpcIikpdGhyb3cgbmV3IEVycm9yKGBJbWFnZSBzb3VyY2UgbXVzdCBiZSBhbiBhYnNvbHV0ZSBVUkw6ICR7ZX1gKTtpZihlLnN0YXJ0c1dpdGgoXCJkYXRhOlwiKSl7bGV0IGk7dHJ5e2k9L2RhdGE6KD88aW1hZ2VUeXBlPlthLXovK10rKSg7KGNoYXJzZXQ9KT8oPzxlbmNvZGluZ1R5cGU+LiopKT8sKD88ZGF0YVN0cmluZz4uKikvZy5leGVjKGUpLmdyb3Vwc31jYXRjaHtyZXR1cm4gY29uc29sZS53YXJuKFwiSW1hZ2UgZGF0YSBVUkkgcmVzb2x2ZWQgd2l0aG91dCBzaXplOlwiK2UpLFtlXX1sZXR7aW1hZ2VUeXBlOm8sZW5jb2RpbmdUeXBlOnUsZGF0YVN0cmluZzpzfT1pO2lmKG89PT1fbil7bGV0IGE9dT09PVwiYmFzZTY0XCI/YXRvYihzKTpkZWNvZGVVUklDb21wb25lbnQocy5yZXBsYWNlKC8gL2csXCIlMjBcIikpLGw9dT09PVwiYmFzZTY0XCI/ZTpgZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwke2J0b2EoYSl9YCxmPXV1KGUsYSk7cmV0dXJuIFJlLnNldChlLFtsLC4uLmZdKSxbbCwuLi5mXX1lbHNlIGlmKHU9PT1cImJhc2U2NFwiKXtsZXQgYSxsPUtsKHMpO3N3aXRjaChvKXtjYXNlIE5yOmNhc2UgTXI6YT1mdShsKTticmVhaztjYXNlIFdyOmE9bHUobCk7YnJlYWs7Y2FzZSAkcjphPWF1KGwpO2JyZWFrfXJldHVybiBSZS5zZXQoZSxbZSwuLi5hXSksW2UsLi4uYV19ZWxzZSByZXR1cm4gY29uc29sZS53YXJuKFwiSW1hZ2UgZGF0YSBVUkkgcmVzb2x2ZWQgd2l0aG91dCBzaXplOlwiK2UpLFJlLnNldChlLFtlXSksW2VdfWlmKCFnbG9iYWxUaGlzLmZldGNoKXRocm93IG5ldyBFcnJvcihcImBmZXRjaGAgaXMgcmVxdWlyZWQgdG8gYmUgcG9seWZpbGxlZCB0byBsb2FkIGltYWdlcy5cIik7aWYoQ24uaGFzKGUpKXJldHVybiBDbi5nZXQoZSk7bGV0IHQ9UmUuZ2V0KGUpO2lmKHQpcmV0dXJuIHQ7bGV0IG49ZSxyPWZldGNoKG4pLnRoZW4oaT0+e2xldCBvPWkuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIik7cmV0dXJuIG89PT1cImltYWdlL3N2Zyt4bWxcInx8bz09PVwiYXBwbGljYXRpb24vc3ZnK3htbFwiP2kudGV4dCgpOmkuYXJyYXlCdWZmZXIoKX0pLnRoZW4oaT0+e2lmKHR5cGVvZiBpPT1cInN0cmluZ1wiKXRyeXtsZXQgcz1gZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwke2J0b2EoaSl9YCxhPXV1KG4saSk7cmV0dXJuW3MsLi4uYV19Y2F0Y2gocyl7dGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2UgU1ZHIGltYWdlOiAke3MubWVzc2FnZX1gKX1sZXRbbyx1XT1zdShpKTtyZXR1cm5bbywuLi51XX0pLnRoZW4oaT0+KFJlLnNldChuLGkpLGkpKS5jYXRjaChpPT4oY29uc29sZS5lcnJvcihgQ2FuJ3QgbG9hZCBpbWFnZSAke259OiBgK2kubWVzc2FnZSksUmUuc2V0KG4sW10pLFtdKSk7cmV0dXJuIENuLnNldChuLHIpLHJ9ZnVuY3Rpb24gSmwoZSl7cmV0dXJuWzI1NSwyMTYsMjU1XS5ldmVyeSgodCxuKT0+ZVtuXT09PXQpPyRyOlsxMzcsODAsNzgsNzEsMTMsMTAsMjYsMTBdLmV2ZXJ5KCh0LG4pPT5lW25dPT09dCk/WmwoZSk/TXI6TnI6WzcxLDczLDcwLDU2XS5ldmVyeSgodCxuKT0+ZVtuXT09PXQpP1dyOls4Miw3Myw3MCw3MCwwLDAsMCwwLDg3LDY5LDY2LDgwXS5ldmVyeSgodCxuKT0+IXR8fGVbbl09PT10KT9ZbDpbNjAsNjMsMTIwLDEwOSwxMDhdLmV2ZXJ5KCh0LG4pPT5lW25dPT09dCk/X246WzAsMCwwLDAsMTAyLDExNiwxMjEsMTEyLDk3LDExOCwxMDUsMTAyXS5ldmVyeSgodCxuKT0+IXR8fGVbbl09PT10KT9WbDpudWxsfWZ1bmN0aW9uIFpsKGUpe2xldCB0PW5ldyBEYXRhVmlldyhlLmJ1ZmZlciksbixyLGk9OCxvPSExO2Zvcig7IW8mJm4hPT1cIklFTkRcIiYmaTxlLmxlbmd0aDspe3I9dC5nZXRVaW50MzIoaSk7bGV0IHU9ZS5zdWJhcnJheShpKzQsaSs4KTtuPVN0cmluZy5mcm9tQ2hhckNvZGUoLi4udSksbz1uPT09XCJhY1RMXCIsaSs9MTIrcn1yZXR1cm4gb312YXIgU249e2FjY2VudEhlaWdodDpcImFjY2VudC1oZWlnaHRcIixhbGlnbm1lbnRCYXNlbGluZTpcImFsaWdubWVudC1iYXNlbGluZVwiLGFyYWJpY0Zvcm06XCJhcmFiaWMtZm9ybVwiLGJhc2VsaW5lU2hpZnQ6XCJiYXNlbGluZS1zaGlmdFwiLGNhcEhlaWdodDpcImNhcC1oZWlnaHRcIixjbGlwUGF0aDpcImNsaXAtcGF0aFwiLGNsaXBSdWxlOlwiY2xpcC1ydWxlXCIsY29sb3JJbnRlcnBvbGF0aW9uOlwiY29sb3ItaW50ZXJwb2xhdGlvblwiLGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnM6XCJjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnNcIixjb2xvclByb2ZpbGU6XCJjb2xvci1wcm9maWxlXCIsY29sb3JSZW5kZXJpbmc6XCJjb2xvci1yZW5kZXJpbmdcIixkb21pbmFudEJhc2VsaW5lOlwiZG9taW5hbnQtYmFzZWxpbmVcIixlbmFibGVCYWNrZ3JvdW5kOlwiZW5hYmxlLWJhY2tncm91bmRcIixmaWxsT3BhY2l0eTpcImZpbGwtb3BhY2l0eVwiLGZpbGxSdWxlOlwiZmlsbC1ydWxlXCIsZmxvb2RDb2xvcjpcImZsb29kLWNvbG9yXCIsZmxvb2RPcGFjaXR5OlwiZmxvb2Qtb3BhY2l0eVwiLGZvbnRGYW1pbHk6XCJmb250LWZhbWlseVwiLGZvbnRTaXplOlwiZm9udC1zaXplXCIsZm9udFNpemVBZGp1c3Q6XCJmb250LXNpemUtYWRqdXN0XCIsZm9udFN0cmV0Y2g6XCJmb250LXN0cmV0Y2hcIixmb250U3R5bGU6XCJmb250LXN0eWxlXCIsZm9udFZhcmlhbnQ6XCJmb250LXZhcmlhbnRcIixmb250V2VpZ2h0OlwiZm9udC13ZWlnaHRcIixnbHlwaE5hbWU6XCJnbHlwaC1uYW1lXCIsZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWw6XCJnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsXCIsZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsOlwiZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWxcIixob3JpekFkdlg6XCJob3Jpei1hZHYteFwiLGhvcml6T3JpZ2luWDpcImhvcml6LW9yaWdpbi14XCIsaHJlZjpcImhyZWZcIixpbWFnZVJlbmRlcmluZzpcImltYWdlLXJlbmRlcmluZ1wiLGxldHRlclNwYWNpbmc6XCJsZXR0ZXItc3BhY2luZ1wiLGxpZ2h0aW5nQ29sb3I6XCJsaWdodGluZy1jb2xvclwiLG1hcmtlckVuZDpcIm1hcmtlci1lbmRcIixtYXJrZXJNaWQ6XCJtYXJrZXItbWlkXCIsbWFya2VyU3RhcnQ6XCJtYXJrZXItc3RhcnRcIixvdmVybGluZVBvc2l0aW9uOlwib3ZlcmxpbmUtcG9zaXRpb25cIixvdmVybGluZVRoaWNrbmVzczpcIm92ZXJsaW5lLXRoaWNrbmVzc1wiLHBhaW50T3JkZXI6XCJwYWludC1vcmRlclwiLHBhbm9zZTE6XCJwYW5vc2UtMVwiLHBvaW50ZXJFdmVudHM6XCJwb2ludGVyLWV2ZW50c1wiLHJlbmRlcmluZ0ludGVudDpcInJlbmRlcmluZy1pbnRlbnRcIixzaGFwZVJlbmRlcmluZzpcInNoYXBlLXJlbmRlcmluZ1wiLHN0b3BDb2xvcjpcInN0b3AtY29sb3JcIixzdG9wT3BhY2l0eTpcInN0b3Atb3BhY2l0eVwiLHN0cmlrZXRocm91Z2hQb3NpdGlvbjpcInN0cmlrZXRocm91Z2gtcG9zaXRpb25cIixzdHJpa2V0aHJvdWdoVGhpY2tuZXNzOlwic3RyaWtldGhyb3VnaC10aGlja25lc3NcIixzdHJva2VEYXNoYXJyYXk6XCJzdHJva2UtZGFzaGFycmF5XCIsc3Ryb2tlRGFzaG9mZnNldDpcInN0cm9rZS1kYXNob2Zmc2V0XCIsc3Ryb2tlTGluZWNhcDpcInN0cm9rZS1saW5lY2FwXCIsc3Ryb2tlTGluZWpvaW46XCJzdHJva2UtbGluZWpvaW5cIixzdHJva2VNaXRlcmxpbWl0Olwic3Ryb2tlLW1pdGVybGltaXRcIixzdHJva2VPcGFjaXR5Olwic3Ryb2tlLW9wYWNpdHlcIixzdHJva2VXaWR0aDpcInN0cm9rZS13aWR0aFwiLHRleHRBbmNob3I6XCJ0ZXh0LWFuY2hvclwiLHRleHREZWNvcmF0aW9uOlwidGV4dC1kZWNvcmF0aW9uXCIsdGV4dFJlbmRlcmluZzpcInRleHQtcmVuZGVyaW5nXCIsdW5kZXJsaW5lUG9zaXRpb246XCJ1bmRlcmxpbmUtcG9zaXRpb25cIix1bmRlcmxpbmVUaGlja25lc3M6XCJ1bmRlcmxpbmUtdGhpY2tuZXNzXCIsdW5pY29kZUJpZGk6XCJ1bmljb2RlLWJpZGlcIix1bmljb2RlUmFuZ2U6XCJ1bmljb2RlLXJhbmdlXCIsdW5pdHNQZXJFbTpcInVuaXRzLXBlci1lbVwiLHZBbHBoYWJldGljOlwidi1hbHBoYWJldGljXCIsdkhhbmdpbmc6XCJ2LWhhbmdpbmdcIix2SWRlb2dyYXBoaWM6XCJ2LWlkZW9ncmFwaGljXCIsdk1hdGhlbWF0aWNhbDpcInYtbWF0aGVtYXRpY2FsXCIsdmVjdG9yRWZmZWN0OlwidmVjdG9yLWVmZmVjdFwiLHZlcnRBZHZZOlwidmVydC1hZHYteVwiLHZlcnRPcmlnaW5YOlwidmVydC1vcmlnaW4teFwiLHZlcnRPcmlnaW5ZOlwidmVydC1vcmlnaW4teVwiLHdvcmRTcGFjaW5nOlwid29yZC1zcGFjaW5nXCIsd3JpdGluZ01vZGU6XCJ3cml0aW5nLW1vZGVcIix4SGVpZ2h0OlwieC1oZWlnaHRcIix4bGlua0FjdHVhdGU6XCJ4bGluazphY3R1YXRlXCIseGxpbmtBcmNyb2xlOlwieGxpbms6YXJjcm9sZVwiLHhsaW5rSHJlZjpcInhsaW5rOmhyZWZcIix4bGlua1JvbGU6XCJ4bGluazpyb2xlXCIseGxpbmtTaG93OlwieGxpbms6c2hvd1wiLHhsaW5rVGl0bGU6XCJ4bGluazp0aXRsZVwiLHhsaW5rVHlwZTpcInhsaW5rOnR5cGVcIix4bWxCYXNlOlwieG1sOmJhc2VcIix4bWxMYW5nOlwieG1sOmxhbmdcIix4bWxTcGFjZTpcInhtbDpzcGFjZVwiLHhtbG5zWGxpbms6XCJ4bWxuczp4bGlua1wifSxlZj0vW1xcclxcbiUjKCk8Pj9bXFxcXFxcXV5ge3x9XCInXS9nO2Z1bmN0aW9uIGtuKGUsdCl7aWYoIWUpcmV0dXJuXCJcIjtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlLm1hcChsPT5rbihsLHQpKS5qb2luKFwiXCIpO2lmKHR5cGVvZiBlIT1cIm9iamVjdFwiKXJldHVybiBTdHJpbmcoZSk7bGV0IG49ZS50eXBlO2lmKG49PT1cInRleHRcIil0aHJvdyBuZXcgRXJyb3IoXCI8dGV4dD4gbm9kZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLCBwbGVhc2UgY29udmVydCB0aGVtIHRvIDxwYXRoPlwiKTtsZXR7Y2hpbGRyZW46cixzdHlsZTppLC4uLm99PWUucHJvcHN8fHt9LHU9KGk9PW51bGw/dm9pZCAwOmkuY29sb3IpfHx0LHM9YCR7T2JqZWN0LmVudHJpZXMobykubWFwKChbbCxmXSk9Pih0eXBlb2YgZj09XCJzdHJpbmdcIiYmZi50b0xvd2VyQ2FzZSgpPT09XCJjdXJyZW50Y29sb3JcIiYmKGY9dSksbD09PVwiaHJlZlwiJiZuPT09XCJpbWFnZVwiP2AgJHtTbltsXXx8bH09XCIke1JlLmdldChmKVswXX1cImA6YCAke1NuW2xdfHxsfT1cIiR7Zn1cImApKS5qb2luKFwiXCIpfWAsYT1pP2Agc3R5bGU9XCIke09iamVjdC5lbnRyaWVzKGkpLm1hcCgoW2wsZl0pPT5gJHtvdShsKX06JHtmfWApLmpvaW4oXCI7XCIpfVwiYDpcIlwiO3JldHVybmA8JHtufSR7c30ke2F9PiR7a24ocix1KX08LyR7bn0+YH1hc3luYyBmdW5jdGlvbiBjdShlKXtsZXQgdD1uZXcgU2V0LG49cj0+e2lmKHImJmJ0KHIpKXtpZihBcnJheS5pc0FycmF5KHIpKXtyLmZvckVhY2goaT0+bihpKSk7cmV0dXJufWVsc2UgdHlwZW9mIHI9PVwib2JqZWN0XCImJihyLnR5cGU9PT1cImltYWdlXCI/dC5oYXMoci5wcm9wcy5ocmVmKXx8dC5hZGQoci5wcm9wcy5ocmVmKTpyLnR5cGU9PT1cImltZ1wiJiYodC5oYXMoci5wcm9wcy5zcmMpfHx0LmFkZChyLnByb3BzLnNyYykpKTtBcnJheS5pc0FycmF5KHIucHJvcHMuY2hpbGRyZW4pP3IucHJvcHMuY2hpbGRyZW4ubWFwKGk9Pm4oaSkpOm4oci5wcm9wcy5jaGlsZHJlbil9fTtyZXR1cm4gbihlKSxQcm9taXNlLmFsbChBcnJheS5mcm9tKHQpLm1hcChyPT55dChyKSkpfWFzeW5jIGZ1bmN0aW9uIGR1KGUsdCl7bGV0e3ZpZXdCb3g6bix2aWV3Ym94OnIsd2lkdGg6aSxoZWlnaHQ6byxjbGFzc05hbWU6dSxzdHlsZTpzLGNoaWxkcmVuOmEsLi4ubH09ZS5wcm9wc3x8e307bnx8PXIsbC54bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7bGV0IGY9KHM9PW51bGw/dm9pZCAwOnMuY29sb3IpfHx0LGM9dnQobikscD1jP2NbM10vY1syXTpudWxsO3JldHVybiBpPWl8fHAmJm8/by9wOm51bGwsbz1vfHxwJiZpP2kqcDpudWxsLGwud2lkdGg9aSxsLmhlaWdodD1vLG4mJihsLnZpZXdCb3g9biksYGRhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LCR7YDxzdmcgJHtPYmplY3QuZW50cmllcyhsKS5tYXAoKFtoLGRdKT0+KHR5cGVvZiBkPT1cInN0cmluZ1wiJiZkLnRvTG93ZXJDYXNlKCk9PT1cImN1cnJlbnRjb2xvclwiJiYoZD1mKSxgICR7U25baF18fGh9PVwiJHtkfVwiYCkpLmpvaW4oXCJcIil9PiR7a24oYSxmKX08L3N2Zz5gLnJlcGxhY2UoZWYsZW5jb2RlVVJJQ29tcG9uZW50KX1gfXZhciBDZT1cImZsZXhcIixwdT17cDp7ZGlzcGxheTpDZSxtYXJnaW5Ub3A6XCIxZW1cIixtYXJnaW5Cb3R0b206XCIxZW1cIn0sZGl2OntkaXNwbGF5OkNlfSxibG9ja3F1b3RlOntkaXNwbGF5OkNlLG1hcmdpblRvcDpcIjFlbVwiLG1hcmdpbkJvdHRvbTpcIjFlbVwiLG1hcmdpbkxlZnQ6NDAsbWFyZ2luUmlnaHQ6NDB9LGNlbnRlcjp7ZGlzcGxheTpDZSx0ZXh0QWxpZ246XCJjZW50ZXJcIn0saHI6e2Rpc3BsYXk6Q2UsbWFyZ2luVG9wOlwiMC41ZW1cIixtYXJnaW5Cb3R0b206XCIwLjVlbVwiLG1hcmdpbkxlZnQ6XCJhdXRvXCIsbWFyZ2luUmlnaHQ6XCJhdXRvXCIsYm9yZGVyV2lkdGg6MSxib3JkZXJTdHlsZTpcInNvbGlkXCJ9LGgxOntkaXNwbGF5OkNlLGZvbnRTaXplOlwiMmVtXCIsbWFyZ2luVG9wOlwiMC42N2VtXCIsbWFyZ2luQm90dG9tOlwiMC42N2VtXCIsbWFyZ2luTGVmdDowLG1hcmdpblJpZ2h0OjAsZm9udFdlaWdodDpcImJvbGRcIn0saDI6e2Rpc3BsYXk6Q2UsZm9udFNpemU6XCIxLjVlbVwiLG1hcmdpblRvcDpcIjAuODNlbVwiLG1hcmdpbkJvdHRvbTpcIjAuODNlbVwiLG1hcmdpbkxlZnQ6MCxtYXJnaW5SaWdodDowLGZvbnRXZWlnaHQ6XCJib2xkXCJ9LGgzOntkaXNwbGF5OkNlLGZvbnRTaXplOlwiMS4xN2VtXCIsbWFyZ2luVG9wOlwiMWVtXCIsbWFyZ2luQm90dG9tOlwiMWVtXCIsbWFyZ2luTGVmdDowLG1hcmdpblJpZ2h0OjAsZm9udFdlaWdodDpcImJvbGRcIn0saDQ6e2Rpc3BsYXk6Q2UsbWFyZ2luVG9wOlwiMS4zM2VtXCIsbWFyZ2luQm90dG9tOlwiMS4zM2VtXCIsbWFyZ2luTGVmdDowLG1hcmdpblJpZ2h0OjAsZm9udFdlaWdodDpcImJvbGRcIn0saDU6e2Rpc3BsYXk6Q2UsZm9udFNpemU6XCIwLjgzZW1cIixtYXJnaW5Ub3A6XCIxLjY3ZW1cIixtYXJnaW5Cb3R0b206XCIxLjY3ZW1cIixtYXJnaW5MZWZ0OjAsbWFyZ2luUmlnaHQ6MCxmb250V2VpZ2h0OlwiYm9sZFwifSxoNjp7ZGlzcGxheTpDZSxmb250U2l6ZTpcIjAuNjdlbVwiLG1hcmdpblRvcDpcIjIuMzNlbVwiLG1hcmdpbkJvdHRvbTpcIjIuMzNlbVwiLG1hcmdpbkxlZnQ6MCxtYXJnaW5SaWdodDowLGZvbnRXZWlnaHQ6XCJib2xkXCJ9LHU6e3RleHREZWNvcmF0aW9uOlwidW5kZXJsaW5lXCJ9LHN0cm9uZzp7Zm9udFdlaWdodDpcImJvbGRcIn0sYjp7Zm9udFdlaWdodDpcImJvbGRcIn0saTp7Zm9udFN0eWxlOlwiaXRhbGljXCJ9LGVtOntmb250U3R5bGU6XCJpdGFsaWNcIn0sY29kZTp7Zm9udEZhbWlseTpcIm1vbm9zcGFjZVwifSxrYmQ6e2ZvbnRGYW1pbHk6XCJtb25vc3BhY2VcIn0scHJlOntkaXNwbGF5OkNlLGZvbnRGYW1pbHk6XCJtb25vc3BhY2VcIix3aGl0ZVNwYWNlOlwicHJlXCIsbWFyZ2luVG9wOlwiMWVtXCIsbWFyZ2luQm90dG9tOlwiMWVtXCJ9LG1hcms6e2JhY2tncm91bmRDb2xvcjpcInllbGxvd1wiLGNvbG9yOlwiYmxhY2tcIn0sYmlnOntmb250U2l6ZTpcImxhcmdlclwifSxzbWFsbDp7Zm9udFNpemU6XCJzbWFsbGVyXCJ9LHM6e3RleHREZWNvcmF0aW9uOlwibGluZS10aHJvdWdoXCJ9fTt2YXIgdGY9bmV3IFNldChbXCJjb2xvclwiLFwiZm9udFwiLFwiZm9udEZhbWlseVwiLFwiZm9udFNpemVcIixcImZvbnRTdHlsZVwiLFwiZm9udFdlaWdodFwiLFwibGV0dGVyU3BhY2luZ1wiLFwibGluZUhlaWdodFwiLFwidGV4dEFsaWduXCIsXCJ0ZXh0VHJhbnNmb3JtXCIsXCJ0ZXh0U2hhZG93T2Zmc2V0XCIsXCJ0ZXh0U2hhZG93Q29sb3JcIixcInRleHRTaGFkb3dSYWRpdXNcIixcInRleHREZWNvcmF0aW9uTGluZVwiLFwidGV4dERlY29yYXRpb25TdHlsZVwiLFwidGV4dERlY29yYXRpb25Db2xvclwiLFwid2hpdGVTcGFjZVwiLFwidHJhbnNmb3JtXCIsXCJ3b3JkQnJlYWtcIixcInRhYlNpemVcIixcIm9wYWNpdHlcIixcImZpbHRlclwiLFwiX3ZpZXdwb3J0V2lkdGhcIixcIl92aWV3cG9ydEhlaWdodFwiLFwiX2luaGVyaXRlZENsaXBQYXRoSWRcIixcIl9pbmhlcml0ZWRNYXNrSWRcIixcIl9pbmhlcml0ZWRCYWNrZ3JvdW5kQ2xpcFRleHRQYXRoXCJdKTtmdW5jdGlvbiBUbihlKXtsZXQgdD17fTtmb3IobGV0IG4gaW4gZSl0Zi5oYXMobikmJih0W25dPWVbbl0pO3JldHVybiB0fWltcG9ydHtnZXRQcm9wZXJ0eU5hbWUgYXMgc2YsZ2V0U3R5bGVzRm9yUHJvcGVydHkgYXMgS2V9ZnJvbVwiY3NzLXRvLXJlYWN0LW5hdGl2ZVwiO2ltcG9ydHtwYXJzZUVsZW1lbnRTdHlsZSBhcyBhZn1mcm9tXCJjc3MtYmFja2dyb3VuZC1wYXJzZXJcIjtpbXBvcnR7cGFyc2UgYXMgbGZ9ZnJvbVwiY3NzLWJveC1zaGFkb3dcIjtpbXBvcnQgZmYgZnJvbVwicGFyc2UtY3NzLWNvbG9yXCI7aW1wb3J0IHJmIGZyb21cInBvc3Rjc3MtdmFsdWUtcGFyc2VyXCI7ZnVuY3Rpb24gbmYoZSx0KXt0cnl7bGV0IG49bmV3IFFlKGUpO3N3aXRjaChuLnVuaXQpe2Nhc2VcInB4XCI6cmV0dXJue2Fic29sdXRlOm4udmFsdWV9O2Nhc2VcImVtXCI6cmV0dXJue2Fic29sdXRlOm4udmFsdWUqdH07Y2FzZVwicmVtXCI6cmV0dXJue2Fic29sdXRlOm4udmFsdWUqMTZ9O2Nhc2VcIiVcIjpyZXR1cm57cmVsYXRpdmU6bi52YWx1ZX07ZGVmYXVsdDpyZXR1cm57fX19Y2F0Y2h7cmV0dXJue319fWZ1bmN0aW9uIEFuKGUsdCxuKXtzd2l0Y2goZSl7Y2FzZVwidG9wXCI6cmV0dXJue3lSZWxhdGl2ZTowfTtjYXNlXCJsZWZ0XCI6cmV0dXJue3hSZWxhdGl2ZTowfTtjYXNlXCJyaWdodFwiOnJldHVybnt4UmVsYXRpdmU6MTAwfTtjYXNlXCJib3R0b21cIjpyZXR1cm57eVJlbGF0aXZlOjEwMH07Y2FzZVwiY2VudGVyXCI6cmV0dXJue307ZGVmYXVsdDp7bGV0IHI9bmYoZSx0KTtyZXR1cm4gci5hYnNvbHV0ZT97W24/XCJ4QWJzb2x1dGVcIjpcInlBYnNvbHV0ZVwiXTpyLmFic29sdXRlfTpyLnJlbGF0aXZlP3tbbj9cInhSZWxhdGl2ZVwiOlwieVJlbGF0aXZlXCJdOnIucmVsYXRpdmV9Ont9fX19ZnVuY3Rpb24gT24oZSx0KXtpZih0eXBlb2YgZT09XCJudW1iZXJcIilyZXR1cm57eEFic29sdXRlOmV9O2xldCBuO3RyeXtuPXJmKGUpLm5vZGVzLmZpbHRlcihyPT5yLnR5cGU9PT1cIndvcmRcIikubWFwKHI9PnIudmFsdWUpfWNhdGNoe3JldHVybnt9fXJldHVybiBuLmxlbmd0aD09PTE/QW4oblswXSx0LCEwKTpuLmxlbmd0aD09PTI/KChuWzBdPT09XCJ0b3BcInx8blswXT09PVwiYm90dG9tXCJ8fG5bMV09PT1cImxlZnRcInx8blsxXT09PVwicmlnaHRcIikmJm4ucmV2ZXJzZSgpLHsuLi5BbihuWzBdLHQsITApLC4uLkFuKG5bMV0sdCwhMSl9KTp7fX1pbXBvcnR7Z2V0UHJvcGVydHlOYW1lIGFzIG9mfWZyb21cImNzcy10by1yZWFjdC1uYXRpdmVcIjtmdW5jdGlvbiBCdChlLHQpe2xldCBuPW9mKGBtYXNrLSR7dH1gKTtyZXR1cm4gZVtuXXx8ZVtgV2Via2l0TSR7bi5zdWJzdHJpbmcoMSl9YF19ZnVuY3Rpb24gdWYoZSl7bGV0IHQ9W10sbj0wLHI9MDtmb3IobGV0IGk9MDtpPGUubGVuZ3RoO2krKyllW2ldPT09XCIoXCI/cisrOmVbaV09PT1cIilcIiYmci0tLHI9PT0wJiZlW2ldPT09XCIsXCImJih0LnB1c2goZS5zbGljZShuLGkpLnRyaW0oKSksbj1pKzEpO3JldHVybiB0LnB1c2goZS5zbGljZShuKS50cmltKCkpLHR9ZnVuY3Rpb24gaHUoZSl7bGV0IHQ9ZS5tYXNrSW1hZ2V8fGUuV2Via2l0TWFza0ltYWdlLG49e3Bvc2l0aW9uOkJ0KGUsXCJwb3NpdGlvblwiKXx8XCIwJSAwJVwiLHNpemU6QnQoZSxcInNpemVcIil8fFwiMTAwJSAxMDAlXCIscmVwZWF0OkJ0KGUsXCJyZXBlYXRcIil8fFwicmVwZWF0XCIsb3JpZ2luOkJ0KGUsXCJvcmlnaW5cIil8fFwiYm9yZGVyLWJveFwiLGNsaXA6QnQoZSxcIm9yaWdpblwiKXx8XCJib3JkZXItYm94XCJ9O3JldHVybiB1Zih0KS5maWx0ZXIoaT0+aSYmaSE9PVwibm9uZVwiKS5yZXZlcnNlKCkubWFwKGk9Pih7aW1hZ2U6aSwuLi5ufSkpfXZhciBjZj1uZXcgU2V0KFtcImZsZXhcIixcImZsZXhHcm93XCIsXCJmbGV4U2hyaW5rXCIsXCJmbGV4QmFzaXNcIixcImZvbnRXZWlnaHRcIixcImxpbmVIZWlnaHRcIixcIm9wYWNpdHlcIixcInNjYWxlXCIsXCJzY2FsZVhcIixcInNjYWxlWVwiXSksZGY9bmV3IFNldChbXCJsaW5lSGVpZ2h0XCJdKTtmdW5jdGlvbiBwZihlLHQsbixyKXtyZXR1cm4gZT09PVwidGV4dERlY29yYXRpb25cIiYmIW4uaW5jbHVkZXModC50ZXh0RGVjb3JhdGlvbkNvbG9yKSYmKHQudGV4dERlY29yYXRpb25Db2xvcj1yKSx0fWZ1bmN0aW9uIEl0KGUsdCl7bGV0IG49TnVtYmVyKHQpO3JldHVybiBpc05hTihuKT90OmNmLmhhcyhlKT9kZi5oYXMoZSk/bjpTdHJpbmcodCk6bitcInB4XCJ9ZnVuY3Rpb24gaGYoZSx0LG4pe2lmKGU9PT1cImxpbmVIZWlnaHRcIilyZXR1cm57bGluZUhlaWdodDpJdChlLHQpfTtpZihlPT09XCJmb250RmFtaWx5XCIpcmV0dXJue2ZvbnRGYW1pbHk6dC5zcGxpdChcIixcIikubWFwKHI9PnIudHJpbSgpLnJlcGxhY2UoLyheWydcIl0pfChbJ1wiXSQpL2csXCJcIikudG9Mb2NhbGVMb3dlckNhc2UoKSl9O2lmKGU9PT1cImJvcmRlclJhZGl1c1wiKXtpZih0eXBlb2YgdCE9XCJzdHJpbmdcInx8IXQuaW5jbHVkZXMoXCIvXCIpKXJldHVybjtsZXRbcixpXT10LnNwbGl0KFwiL1wiKSxvPUtlKGUsciwhMCksdT1LZShlLGksITApO2ZvcihsZXQgcyBpbiBvKXVbc109SXQoZSxvW3NdKStcIiBcIitJdChlLHVbc10pO3JldHVybiB1fWlmKC9eYm9yZGVyKFRvcHxSaWdodHxCb3R0b218TGVmdCk/JC8udGVzdChlKSl7bGV0IHI9S2UoXCJib3JkZXJcIix0LCEwKTtyLmJvcmRlcldpZHRoPT09MSYmIVN0cmluZyh0KS5pbmNsdWRlcyhcIjFweFwiKSYmKHIuYm9yZGVyV2lkdGg9Myksci5ib3JkZXJDb2xvcj09PVwiYmxhY2tcIiYmIVN0cmluZyh0KS5pbmNsdWRlcyhcImJsYWNrXCIpJiYoci5ib3JkZXJDb2xvcj1uKTtsZXQgaT17V2lkdGg6SXQoZStcIldpZHRoXCIsci5ib3JkZXJXaWR0aCksU3R5bGU6dmUoci5ib3JkZXJTdHlsZSx7c29saWQ6XCJzb2xpZFwiLGRhc2hlZDpcImRhc2hlZFwifSxcInNvbGlkXCIsZStcIlN0eWxlXCIpLENvbG9yOnIuYm9yZGVyQ29sb3J9LG89e307Zm9yKGxldCB1IG9mIGU9PT1cImJvcmRlclwiP1tcIlRvcFwiLFwiUmlnaHRcIixcIkJvdHRvbVwiLFwiTGVmdFwiXTpbZS5zbGljZSg2KV0pZm9yKGxldCBzIGluIGkpb1tcImJvcmRlclwiK3Urc109aVtzXTtyZXR1cm4gb31pZihlPT09XCJib3hTaGFkb3dcIil7aWYoIXQpdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGBib3hTaGFkb3dgIHZhbHVlOiBcIicrdCsnXCIuJyk7cmV0dXJue1tlXTp0eXBlb2YgdD09XCJzdHJpbmdcIj9sZih0KTp0fX1pZihlPT09XCJ0cmFuc2Zvcm1cIil7aWYodHlwZW9mIHQhPVwic3RyaW5nXCIpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBgdHJhbnNmb3JtYCB2YWx1ZS5cIik7bGV0IHI9e30saT10LnJlcGxhY2UoLygtP1tcXGQuXSslKS9nLCh1LHMpPT57bGV0IGE9fn4oTWF0aC5yYW5kb20oKSoxZTkpO3JldHVybiByW2FdPXMsYStcInB4XCJ9KSxvPUtlKFwidHJhbnNmb3JtXCIsaSwhMCk7Zm9yKGxldCB1IG9mIG8udHJhbnNmb3JtKWZvcihsZXQgcyBpbiB1KXJbdVtzXV0mJih1W3NdPXJbdVtzXV0pO3JldHVybiBvfWlmKGU9PT1cImJhY2tncm91bmRcIilyZXR1cm4gdD10LnRvU3RyaW5nKCkudHJpbSgpLC9eKGxpbmVhci1ncmFkaWVudHxyYWRpYWwtZ3JhZGllbnR8dXJsKVxcKC8udGVzdCh0KT9LZShcImJhY2tncm91bmRJbWFnZVwiLHQsITApOktlKFwiYmFja2dyb3VuZFwiLHQsITApO2lmKGU9PT1cInRleHRTaGFkb3dcIiYmKHQ9dC50b1N0cmluZygpLnRyaW0oKSx0LmluY2x1ZGVzKFwiLFwiKSkpe2xldCByPW1mKHQpLGk9e307Zm9yKGxldCBvIG9mIHIpe2xldCB1PUtlKFwidGV4dFNoYWRvd1wiLG8sITApO2ZvcihsZXQgcyBpbiB1KWlbc10/aVtzXS5wdXNoKHVbc10pOmlbc109W3Vbc11dfXJldHVybiBpfX1mdW5jdGlvbiBtZihlKXtsZXQgdD1bXSxuPSExLHI9MCxpPWUubGVuZ3RoO2ZvcihsZXQgbz0wO288aTsrK28pe2xldCB1PWVbb107dT09PVwiKVwiJiYobj0hMSksIW4mJih1PT09XCIoXCImJihuPSEwKSx1PT09XCIsXCImJih0LnB1c2goZS5zdWJzdHJpbmcocixvKSkscj1vKzEpKX1yZXR1cm4gdC5wdXNoKGUuc3Vic3RyaW5nKHIsaSkpLHQubWFwKG89Pm8udHJpbSgpKX1mdW5jdGlvbiBtdShlKXtyZXR1cm4gZT09PVwidHJhbnNmb3JtXCI/XCIgT25seSBhYnNvbHV0ZSBsZW5ndGhzIHN1Y2ggYXMgYDEwcHhgIGFyZSBzdXBwb3J0ZWQuXCI6XCJcIn12YXIgRHU9L3JnYlxcKChcXGQrKVxccysoXFxkKylcXHMrKFxcZCspXFxzKlxcL1xccyooW1xcLlxcZF0rKVxcKS87ZnVuY3Rpb24gYnUoZSl7aWYodHlwZW9mIGU9PVwic3RyaW5nXCImJkR1LnRlc3QoZS50cmltKCkpKXJldHVybiBlLnRyaW0oKS5yZXBsYWNlKER1LCh0LG4scixpLG8pPT5gcmdiYSgke259LCAke3J9LCAke2l9LCAke299KWApO2lmKHR5cGVvZiBlPT1cIm9iamVjdFwiJiZlIT09bnVsbCl7Zm9yKGxldCB0IGluIGUpZVt0XT1idShlW3RdKTtyZXR1cm4gZX1yZXR1cm4gZX1mdW5jdGlvbiBxcihlLHQpe2xldCBuPXt9O2lmKGUpe2xldCBpPWdmKGUuY29sb3IsdC5jb2xvcik7bi5jb2xvcj1pO2ZvcihsZXQgbyBpbiBlKXtpZihvLnN0YXJ0c1dpdGgoXCJfXCIpKXtuW29dPWVbb107Y29udGludWV9aWYobz09PVwiY29sb3JcIiljb250aW51ZTtsZXQgdT1zZihvKSxzPXZmKGVbb10saSk7dHJ5e2xldCBhPWhmKHUscyxpKXx8cGYodSxLZSh1LEl0KHUscyksITApLHMsaSk7T2JqZWN0LmFzc2lnbihuLGEpfWNhdGNoKGEpe3Rocm93IG5ldyBFcnJvcihhLm1lc3NhZ2UrKGEubWVzc2FnZS5pbmNsdWRlcyhzKT9gXG4gIGArbXUodSk6YFxuICBpbiBDU1MgcnVsZSBcXGAke3V9OiAke3N9XFxgLiR7bXUodSl9YCkpfX19aWYobi5iYWNrZ3JvdW5kSW1hZ2Upe2xldHtiYWNrZ3JvdW5kczppfT1hZihuKTtuLmJhY2tncm91bmRJbWFnZT1pfWlmKG4ubWFza0ltYWdlfHxuLldlYmtpdE1hc2tJbWFnZSl7bGV0IGk9aHUobik7bi5tYXNrSW1hZ2U9aX1sZXQgcj1EZihuLmZvbnRTaXplLHQuZm9udFNpemUpO3R5cGVvZiBuLmZvbnRTaXplPFwidVwiJiYobi5mb250U2l6ZT1yKSxuLnRyYW5zZm9ybU9yaWdpbiYmKG4udHJhbnNmb3JtT3JpZ2luPU9uKG4udHJhbnNmb3JtT3JpZ2luLHIpKTtmb3IobGV0IGkgaW4gbil7bGV0IG89bltpXTtpZihpPT09XCJsaW5lSGVpZ2h0XCIpdHlwZW9mIG89PVwic3RyaW5nXCImJihvPW5baV09cShvLHIscix0LCEwKS9yKTtlbHNle2lmKHR5cGVvZiBvPT1cInN0cmluZ1wiKXtsZXQgdT1xKG8scixyLHQpO3R5cGVvZiB1PFwidVwiJiYobltpXT11KSxvPW5baV19aWYodHlwZW9mIG89PVwic3RyaW5nXCJ8fHR5cGVvZiBvPT1cIm9iamVjdFwiKXtsZXQgdT1idShvKTt1JiYobltpXT11KSxvPW5baV19fWlmKGk9PT1cIm9wYWNpdHlcIiYmKG89bltpXT1vKnQub3BhY2l0eSksaT09PVwidHJhbnNmb3JtXCIpe2xldCB1PW87Zm9yKGxldCBzIG9mIHUpe2xldCBhPU9iamVjdC5rZXlzKHMpWzBdLGw9c1thXSxmPXR5cGVvZiBsPT1cInN0cmluZ1wiP3EobCxyLHIsdCk/P2w6bDtzW2FdPWZ9fX1yZXR1cm4gbn1mdW5jdGlvbiBEZihlLHQpe2lmKHR5cGVvZiBlPT1cIm51bWJlclwiKXJldHVybiBlO3RyeXtsZXQgbj1uZXcgUWUoZSk7c3dpdGNoKG4udW5pdCl7Y2FzZVwiZW1cIjpyZXR1cm4gbi52YWx1ZSp0O2Nhc2VcInJlbVwiOnJldHVybiBuLnZhbHVlKjE2fX1jYXRjaHtyZXR1cm4gdH19ZnVuY3Rpb24gZ3UoZSl7aWYoZS5zdGFydHNXaXRoKFwiaHNsXCIpKXtsZXQgdD1mZihlKSxbbixyLGldPXQudmFsdWVzO3JldHVybmBoc2woJHtbbixgJHtyfSVgLGAke2l9JWBdLmNvbmNhdCh0LmFscGhhPT09MT9bXTpbdC5hbHBoYV0pLmpvaW4oXCIsXCIpfSlgfXJldHVybiBlfWZ1bmN0aW9uIGdmKGUsdCl7cmV0dXJuIGUmJmUudG9Mb3dlckNhc2UoKSE9PVwiY3VycmVudGNvbG9yXCI/Z3UoZSk6Z3UodCl9ZnVuY3Rpb24gYmYoZSx0KXtyZXR1cm4gZS5yZXBsYWNlKC9jdXJyZW50Y29sb3IvZ2ksdCl9ZnVuY3Rpb24gdmYoZSx0KXtyZXR1cm4gTHIoZSkmJihlPWJmKGUsdCkpLGV9YXN5bmMgZnVuY3Rpb24gUG4oZSx0LG4scixpKXtsZXQgbz1hd2FpdCBxZSgpLHU9ey4uLm4sLi4ucXIocHVbdF0sbiksLi4ucXIocixuKX07aWYodD09PVwiaW1nXCIpe2xldFtzLGEsbF09YXdhaXQgeXQoaS5zcmMpO2lmKGE9PT12b2lkIDAmJmw9PT12b2lkIDApe2lmKGkud2lkdGg9PT12b2lkIDB8fGkuaGVpZ2h0PT09dm9pZCAwKXRocm93IG5ldyBFcnJvcihcIkltYWdlIHNpemUgY2Fubm90IGJlIGRldGVybWluZWQuIFBsZWFzZSBwcm92aWRlIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBpbWFnZS5cIik7YT1wYXJzZUludChpLndpZHRoKSxsPXBhcnNlSW50KGkuaGVpZ2h0KX1sZXQgZj1sL2EsYz0odS5ib3JkZXJMZWZ0V2lkdGh8fDApKyh1LmJvcmRlclJpZ2h0V2lkdGh8fDApKyh1LnBhZGRpbmdMZWZ0fHwwKSsodS5wYWRkaW5nUmlnaHR8fDApLHA9KHUuYm9yZGVyVG9wV2lkdGh8fDApKyh1LmJvcmRlckJvdHRvbVdpZHRofHwwKSsodS5wYWRkaW5nVG9wfHwwKSsodS5wYWRkaW5nQm90dG9tfHwwKSxoPXUud2lkdGh8fGkud2lkdGgsZD11LmhlaWdodHx8aS5oZWlnaHQsbT10eXBlb2YgaD09XCJudW1iZXJcIiYmdHlwZW9mIGQ9PVwibnVtYmVyXCI7bSYmKGgtPWMsZC09cCksaD09PXZvaWQgMCYmZD09PXZvaWQgMD8oaD1cIjEwMCVcIixlLnNldEFzcGVjdFJhdGlvKDEvZikpOmg9PT12b2lkIDA/dHlwZW9mIGQ9PVwibnVtYmVyXCI/aD1kL2Y6ZS5zZXRBc3BlY3RSYXRpbygxL2YpOmQ9PT12b2lkIDAmJih0eXBlb2YgaD09XCJudW1iZXJcIj9kPWgqZjplLnNldEFzcGVjdFJhdGlvKDEvZikpLHUud2lkdGg9bT9oK2M6aCx1LmhlaWdodD1tP2QrcDpkLHUuX19zcmM9c31pZih0PT09XCJzdmdcIil7bGV0IHM9aS52aWV3Qm94fHxpLnZpZXdib3gsYT12dChzKSxsPWE/YVszXS9hWzJdOm51bGwse3dpZHRoOmYsaGVpZ2h0OmN9PWk7dHlwZW9mIGY+XCJ1XCImJmM/bD09bnVsbD9mPTA6dHlwZW9mIGM9PVwic3RyaW5nXCImJmMuZW5kc1dpdGgoXCIlXCIpP2Y9cGFyc2VJbnQoYykvbCtcIiVcIjooYz1xKGMsbi5mb250U2l6ZSwxLG4pLGY9Yy9sKTp0eXBlb2YgYz5cInVcIiYmZj9sPT1udWxsP2Y9MDp0eXBlb2YgZj09XCJzdHJpbmdcIiYmZi5lbmRzV2l0aChcIiVcIik/Yz1wYXJzZUludChmKSpsK1wiJVwiOihmPXEoZixuLmZvbnRTaXplLDEsbiksYz1mKmwpOih0eXBlb2YgZjxcInVcIiYmKGY9cShmLG4uZm9udFNpemUsMSxuKXx8ZiksdHlwZW9mIGM8XCJ1XCImJihjPXEoYyxuLmZvbnRTaXplLDEsbil8fGMpLGZ8fD1hPT1udWxsP3ZvaWQgMDphWzJdLGN8fD1hPT1udWxsP3ZvaWQgMDphWzNdKSwhdS53aWR0aCYmZiYmKHUud2lkdGg9ZiksIXUuaGVpZ2h0JiZjJiYodS5oZWlnaHQ9Yyl9cmV0dXJuIGUuc2V0RGlzcGxheSh2ZSh1LmRpc3BsYXkse2ZsZXg6by5ESVNQTEFZX0ZMRVgsYmxvY2s6by5ESVNQTEFZX0ZMRVgsbm9uZTpvLkRJU1BMQVlfTk9ORSxcIi13ZWJraXQtYm94XCI6by5ESVNQTEFZX0ZMRVh9LG8uRElTUExBWV9GTEVYLFwiZGlzcGxheVwiKSksZS5zZXRBbGlnbkNvbnRlbnQodmUodS5hbGlnbkNvbnRlbnQse3N0cmV0Y2g6by5BTElHTl9TVFJFVENILGNlbnRlcjpvLkFMSUdOX0NFTlRFUixcImZsZXgtc3RhcnRcIjpvLkFMSUdOX0ZMRVhfU1RBUlQsXCJmbGV4LWVuZFwiOm8uQUxJR05fRkxFWF9FTkQsXCJzcGFjZS1iZXR3ZWVuXCI6by5BTElHTl9TUEFDRV9CRVRXRUVOLFwic3BhY2UtYXJvdW5kXCI6by5BTElHTl9TUEFDRV9BUk9VTkQsYmFzZWxpbmU6by5BTElHTl9CQVNFTElORSxub3JtYWw6by5BTElHTl9BVVRPfSxvLkFMSUdOX0FVVE8sXCJhbGlnbkNvbnRlbnRcIikpLGUuc2V0QWxpZ25JdGVtcyh2ZSh1LmFsaWduSXRlbXMse3N0cmV0Y2g6by5BTElHTl9TVFJFVENILGNlbnRlcjpvLkFMSUdOX0NFTlRFUixcImZsZXgtc3RhcnRcIjpvLkFMSUdOX0ZMRVhfU1RBUlQsXCJmbGV4LWVuZFwiOm8uQUxJR05fRkxFWF9FTkQsYmFzZWxpbmU6by5BTElHTl9CQVNFTElORSxub3JtYWw6by5BTElHTl9BVVRPfSxvLkFMSUdOX1NUUkVUQ0gsXCJhbGlnbkl0ZW1zXCIpKSxlLnNldEFsaWduU2VsZih2ZSh1LmFsaWduU2VsZix7c3RyZXRjaDpvLkFMSUdOX1NUUkVUQ0gsY2VudGVyOm8uQUxJR05fQ0VOVEVSLFwiZmxleC1zdGFydFwiOm8uQUxJR05fRkxFWF9TVEFSVCxcImZsZXgtZW5kXCI6by5BTElHTl9GTEVYX0VORCxiYXNlbGluZTpvLkFMSUdOX0JBU0VMSU5FLG5vcm1hbDpvLkFMSUdOX0FVVE99LG8uQUxJR05fQVVUTyxcImFsaWduU2VsZlwiKSksZS5zZXRKdXN0aWZ5Q29udGVudCh2ZSh1Lmp1c3RpZnlDb250ZW50LHtjZW50ZXI6by5KVVNUSUZZX0NFTlRFUixcImZsZXgtc3RhcnRcIjpvLkpVU1RJRllfRkxFWF9TVEFSVCxcImZsZXgtZW5kXCI6by5KVVNUSUZZX0ZMRVhfRU5ELFwic3BhY2UtYmV0d2VlblwiOm8uSlVTVElGWV9TUEFDRV9CRVRXRUVOLFwic3BhY2UtYXJvdW5kXCI6by5KVVNUSUZZX1NQQUNFX0FST1VORH0sby5KVVNUSUZZX0ZMRVhfU1RBUlQsXCJqdXN0aWZ5Q29udGVudFwiKSksZS5zZXRGbGV4RGlyZWN0aW9uKHZlKHUuZmxleERpcmVjdGlvbix7cm93Om8uRkxFWF9ESVJFQ1RJT05fUk9XLGNvbHVtbjpvLkZMRVhfRElSRUNUSU9OX0NPTFVNTixcInJvdy1yZXZlcnNlXCI6by5GTEVYX0RJUkVDVElPTl9ST1dfUkVWRVJTRSxcImNvbHVtbi1yZXZlcnNlXCI6by5GTEVYX0RJUkVDVElPTl9DT0xVTU5fUkVWRVJTRX0sby5GTEVYX0RJUkVDVElPTl9ST1csXCJmbGV4RGlyZWN0aW9uXCIpKSxlLnNldEZsZXhXcmFwKHZlKHUuZmxleFdyYXAse3dyYXA6by5XUkFQX1dSQVAsbm93cmFwOm8uV1JBUF9OT19XUkFQLFwid3JhcC1yZXZlcnNlXCI6by5XUkFQX1dSQVBfUkVWRVJTRX0sby5XUkFQX05PX1dSQVAsXCJmbGV4V3JhcFwiKSksdHlwZW9mIHUuZ2FwPFwidVwiJiZlLnNldEdhcChvLkdVVFRFUl9BTEwsdS5nYXApLHR5cGVvZiB1LnJvd0dhcDxcInVcIiYmZS5zZXRHYXAoby5HVVRURVJfUk9XLHUucm93R2FwKSx0eXBlb2YgdS5jb2x1bW5HYXA8XCJ1XCImJmUuc2V0R2FwKG8uR1VUVEVSX0NPTFVNTix1LmNvbHVtbkdhcCksdHlwZW9mIHUuZmxleEJhc2lzPFwidVwiJiZlLnNldEZsZXhCYXNpcyh1LmZsZXhCYXNpcyksZS5zZXRGbGV4R3Jvdyh0eXBlb2YgdS5mbGV4R3Jvdz5cInVcIj8wOnUuZmxleEdyb3cpLGUuc2V0RmxleFNocmluayh0eXBlb2YgdS5mbGV4U2hyaW5rPlwidVwiPzA6dS5mbGV4U2hyaW5rKSx0eXBlb2YgdS5tYXhIZWlnaHQ8XCJ1XCImJmUuc2V0TWF4SGVpZ2h0KHUubWF4SGVpZ2h0KSx0eXBlb2YgdS5tYXhXaWR0aDxcInVcIiYmZS5zZXRNYXhXaWR0aCh1Lm1heFdpZHRoKSx0eXBlb2YgdS5taW5IZWlnaHQ8XCJ1XCImJmUuc2V0TWluSGVpZ2h0KHUubWluSGVpZ2h0KSx0eXBlb2YgdS5taW5XaWR0aDxcInVcIiYmZS5zZXRNaW5XaWR0aCh1Lm1pbldpZHRoKSxlLnNldE92ZXJmbG93KHZlKHUub3ZlcmZsb3cse3Zpc2libGU6by5PVkVSRkxPV19WSVNJQkxFLGhpZGRlbjpvLk9WRVJGTE9XX0hJRERFTn0sby5PVkVSRkxPV19WSVNJQkxFLFwib3ZlcmZsb3dcIikpLGUuc2V0TWFyZ2luKG8uRURHRV9UT1AsdS5tYXJnaW5Ub3B8fDApLGUuc2V0TWFyZ2luKG8uRURHRV9CT1RUT00sdS5tYXJnaW5Cb3R0b218fDApLGUuc2V0TWFyZ2luKG8uRURHRV9MRUZULHUubWFyZ2luTGVmdHx8MCksZS5zZXRNYXJnaW4oby5FREdFX1JJR0hULHUubWFyZ2luUmlnaHR8fDApLGUuc2V0Qm9yZGVyKG8uRURHRV9UT1AsdS5ib3JkZXJUb3BXaWR0aHx8MCksZS5zZXRCb3JkZXIoby5FREdFX0JPVFRPTSx1LmJvcmRlckJvdHRvbVdpZHRofHwwKSxlLnNldEJvcmRlcihvLkVER0VfTEVGVCx1LmJvcmRlckxlZnRXaWR0aHx8MCksZS5zZXRCb3JkZXIoby5FREdFX1JJR0hULHUuYm9yZGVyUmlnaHRXaWR0aHx8MCksZS5zZXRQYWRkaW5nKG8uRURHRV9UT1AsdS5wYWRkaW5nVG9wfHwwKSxlLnNldFBhZGRpbmcoby5FREdFX0JPVFRPTSx1LnBhZGRpbmdCb3R0b218fDApLGUuc2V0UGFkZGluZyhvLkVER0VfTEVGVCx1LnBhZGRpbmdMZWZ0fHwwKSxlLnNldFBhZGRpbmcoby5FREdFX1JJR0hULHUucGFkZGluZ1JpZ2h0fHwwKSxlLnNldFBvc2l0aW9uVHlwZSh2ZSh1LnBvc2l0aW9uLHthYnNvbHV0ZTpvLlBPU0lUSU9OX1RZUEVfQUJTT0xVVEUscmVsYXRpdmU6by5QT1NJVElPTl9UWVBFX1JFTEFUSVZFfSxvLlBPU0lUSU9OX1RZUEVfUkVMQVRJVkUsXCJwb3NpdGlvblwiKSksdHlwZW9mIHUudG9wPFwidVwiJiZlLnNldFBvc2l0aW9uKG8uRURHRV9UT1AsdS50b3ApLHR5cGVvZiB1LmJvdHRvbTxcInVcIiYmZS5zZXRQb3NpdGlvbihvLkVER0VfQk9UVE9NLHUuYm90dG9tKSx0eXBlb2YgdS5sZWZ0PFwidVwiJiZlLnNldFBvc2l0aW9uKG8uRURHRV9MRUZULHUubGVmdCksdHlwZW9mIHUucmlnaHQ8XCJ1XCImJmUuc2V0UG9zaXRpb24oby5FREdFX1JJR0hULHUucmlnaHQpLHR5cGVvZiB1LmhlaWdodDxcInVcIj9lLnNldEhlaWdodCh1LmhlaWdodCk6ZS5zZXRIZWlnaHRBdXRvKCksdHlwZW9mIHUud2lkdGg8XCJ1XCI/ZS5zZXRXaWR0aCh1LndpZHRoKTplLnNldFdpZHRoQXV0bygpLFt1LFRuKHUpXX1pbXBvcnQgeXUgZnJvbVwiZXNjYXBlLWh0bWxcIjt2YXIgdnU9WzEsMCwwLDEsMCwwXTtmdW5jdGlvbiB5ZihlLHQsbil7bGV0IHI9Wy4uLnZ1XTtmb3IobGV0IGkgb2YgZSl7bGV0IG89T2JqZWN0LmtleXMoaSlbMF0sdT1pW29dO2lmKHR5cGVvZiB1PT1cInN0cmluZ1wiKWlmKG89PT1cInRyYW5zbGF0ZVhcIil1PXBhcnNlRmxvYXQodSkvMTAwKnQsaVtvXT11O2Vsc2UgaWYobz09PVwidHJhbnNsYXRlWVwiKXU9cGFyc2VGbG9hdCh1KS8xMDAqbixpW29dPXU7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHJhbnNmb3JtOiBcIiR7b306ICR7dX1cIi5gKTtsZXQgcz11LGE9Wy4uLnZ1XTtzd2l0Y2gobyl7Y2FzZVwidHJhbnNsYXRlWFwiOmFbNF09czticmVhaztjYXNlXCJ0cmFuc2xhdGVZXCI6YVs1XT1zO2JyZWFrO2Nhc2VcInNjYWxlXCI6YVswXT1zLGFbM109czticmVhaztjYXNlXCJzY2FsZVhcIjphWzBdPXM7YnJlYWs7Y2FzZVwic2NhbGVZXCI6YVszXT1zO2JyZWFrO2Nhc2VcInJvdGF0ZVwiOntsZXQgbD1zKk1hdGguUEkvMTgwLGY9TWF0aC5jb3MobCksYz1NYXRoLnNpbihsKTthWzBdPWYsYVsxXT1jLGFbMl09LWMsYVszXT1mO2JyZWFrfWNhc2VcInNrZXdYXCI6YVsyXT1NYXRoLnRhbihzKk1hdGguUEkvMTgwKTticmVhaztjYXNlXCJza2V3WVwiOmFbMV09TWF0aC50YW4ocypNYXRoLlBJLzE4MCk7YnJlYWt9cj1QdChhLHIpfWUuc3BsaWNlKDAsZS5sZW5ndGgpLGUucHVzaCguLi5yKSxlLl9fcmVzb2x2ZWQ9ITB9ZnVuY3Rpb24gUnQoe2xlZnQ6ZSx0b3A6dCx3aWR0aDpuLGhlaWdodDpyfSxpLG8sdSl7bGV0IHM7aS5fX3Jlc29sdmVkfHx5ZihpLG4scik7bGV0IGE9aTtpZihvKXM9YTtlbHNle2xldCBsPSh1PT1udWxsP3ZvaWQgMDp1LnhBYnNvbHV0ZSk/PygodT09bnVsbD92b2lkIDA6dS54UmVsYXRpdmUpPz81MCkqbi8xMDAsZj0odT09bnVsbD92b2lkIDA6dS55QWJzb2x1dGUpPz8oKHU9PW51bGw/dm9pZCAwOnUueVJlbGF0aXZlKT8/NTApKnIvMTAwLGM9ZStsLHA9dCtmO3M9UHQoWzEsMCwwLDEsYyxwXSxQdChhLFsxLDAsMCwxLC1jLC1wXSkpLGEuX19wYXJlbnQmJihzPVB0KGEuX19wYXJlbnQscykpLGEuc3BsaWNlKDAsNiwuLi5zKX1yZXR1cm5gbWF0cml4KCR7cy5tYXAobD0+bC50b0ZpeGVkKDIpKS5qb2luKFwiLFwiKX0pYH1mdW5jdGlvbiB4dSh7bGVmdDplLHRvcDp0LHdpZHRoOm4saGVpZ2h0OnIsaXNJbmhlcml0aW5nVHJhbnNmb3JtOml9LG8pe2xldCB1PVwiXCIscz0xO3JldHVybiBvLnRyYW5zZm9ybSYmKHU9UnQoe2xlZnQ6ZSx0b3A6dCx3aWR0aDpuLGhlaWdodDpyfSxvLnRyYW5zZm9ybSxpLG8udHJhbnNmb3JtT3JpZ2luKSksby5vcGFjaXR5IT09dm9pZCAwJiYocz0rby5vcGFjaXR5KSx7bWF0cml4OnUsb3BhY2l0eTpzfX1mdW5jdGlvbiBCbih7aWQ6ZSxjb250ZW50OnQsZmlsdGVyOm4sbGVmdDpyLHRvcDppLHdpZHRoOm8saGVpZ2h0OnUsbWF0cml4OnMsb3BhY2l0eTphLGltYWdlOmwsY2xpcFBhdGhJZDpmLGRlYnVnOmMsc2hhcGU6cCxkZWNvcmF0aW9uU2hhcGU6aH0sZCl7bGV0IG09XCJcIjtpZihjJiYobT1DKFwicmVjdFwiLHt4OnIseTppLXUsd2lkdGg6byxoZWlnaHQ6dSxmaWxsOlwidHJhbnNwYXJlbnRcIixzdHJva2U6XCIjNTc1ZWZmXCIsXCJzdHJva2Utd2lkdGhcIjoxLHRyYW5zZm9ybTpzfHx2b2lkIDAsXCJjbGlwLXBhdGhcIjpmP2B1cmwoIyR7Zn0pYDp2b2lkIDB9KSksbCl7bGV0IGc9e2hyZWY6bCx4OnIseTppLHdpZHRoOm8saGVpZ2h0OnUsdHJhbnNmb3JtOnN8fHZvaWQgMCxcImNsaXAtcGF0aFwiOmY/YHVybCgjJHtmfSlgOnZvaWQgMCxzdHlsZTpkLmZpbHRlcj9gZmlsdGVyOiR7ZC5maWx0ZXJ9YDp2b2lkIDB9O3JldHVyblsobj9gJHtufTxnIGZpbHRlcj1cInVybCgjc2F0b3JpX3MtJHtlfSlcIj5gOlwiXCIpK0MoXCJpbWFnZVwiLHsuLi5nLG9wYWNpdHk6YSE9PTE/YTp2b2lkIDB9KSsoaHx8XCJcIikrKG4/XCI8L2c+XCI6XCJcIikrbSxcIlwiXX1sZXQgdj17eDpyLHk6aSx3aWR0aDpvLGhlaWdodDp1LFwiZm9udC13ZWlnaHRcIjpkLmZvbnRXZWlnaHQsXCJmb250LXN0eWxlXCI6ZC5mb250U3R5bGUsXCJmb250LXNpemVcIjpkLmZvbnRTaXplLFwiZm9udC1mYW1pbHlcIjpkLmZvbnRGYW1pbHksXCJsZXR0ZXItc3BhY2luZ1wiOmQubGV0dGVyU3BhY2luZ3x8dm9pZCAwLHRyYW5zZm9ybTpzfHx2b2lkIDAsXCJjbGlwLXBhdGhcIjpmP2B1cmwoIyR7Zn0pYDp2b2lkIDAsc3R5bGU6ZC5maWx0ZXI/YGZpbHRlcjoke2QuZmlsdGVyfWA6dm9pZCAwfTtyZXR1cm5bKG4/YCR7bn08ZyBmaWx0ZXI9XCJ1cmwoI3NhdG9yaV9zLSR7ZX0pXCI+YDpcIlwiKStDKFwidGV4dFwiLHsuLi52LGZpbGw6ZC5jb2xvcixvcGFjaXR5OmEhPT0xP2E6dm9pZCAwfSx5dSh0KSkrKGh8fFwiXCIpKyhuP1wiPC9nPlwiOlwiXCIpK20scD9DKFwidGV4dFwiLHYseXUodCkpOlwiXCJdfWZ1bmN0aW9uIHhmKGUsdCxuKXtyZXR1cm4gZS5yZXBsYWNlKC8oW01BXSkoWzAtOS4tXSspLChbMC05Li1dKykvZyxmdW5jdGlvbihyLGksbyx1KXtyZXR1cm4gaSsocGFyc2VGbG9hdChvKSt0KStcIixcIisocGFyc2VGbG9hdCh1KStuKX0pfXZhciBVcj0xLjE7ZnVuY3Rpb24gRnUoe2lkOmUsd2lkdGg6dCxoZWlnaHQ6bn0scil7aWYoIXIuc2hhZG93Q29sb3J8fCFyLnNoYWRvd09mZnNldHx8dHlwZW9mIHIuc2hhZG93UmFkaXVzPlwidVwiKXJldHVyblwiXCI7bGV0IGk9ci5zaGFkb3dDb2xvci5sZW5ndGgsbz1cIlwiLHU9XCJcIixzPTAsYT10LGw9MCxmPW47Zm9yKGxldCBjPTA7YzxpO2MrKyl7bGV0IHA9ci5zaGFkb3dSYWRpdXNbY10qci5zaGFkb3dSYWRpdXNbY10vNDtzPU1hdGgubWluKHIuc2hhZG93T2Zmc2V0W2NdLndpZHRoLXAscyksYT1NYXRoLm1heChyLnNoYWRvd09mZnNldFtjXS53aWR0aCtwK3QsYSksbD1NYXRoLm1pbihyLnNoYWRvd09mZnNldFtjXS5oZWlnaHQtcCxsKSxmPU1hdGgubWF4KHIuc2hhZG93T2Zmc2V0W2NdLmhlaWdodCtwK24sZiksbys9QyhcImZlRHJvcFNoYWRvd1wiLHtkeDpyLnNoYWRvd09mZnNldFtjXS53aWR0aCxkeTpyLnNoYWRvd09mZnNldFtjXS5oZWlnaHQsc3RkRGV2aWF0aW9uOnIuc2hhZG93UmFkaXVzW2NdLzIsXCJmbG9vZC1jb2xvclwiOnIuc2hhZG93Q29sb3JbY10sXCJmbG9vZC1vcGFjaXR5XCI6MSwuLi5pPjE/e2luOlwiU291cmNlR3JhcGhpY1wiLHJlc3VsdDpgc2F0b3JpX3MtJHtlfS1yZXN1bHQtJHtjfWB9Ont9fSksaT4xJiYodT1DKFwiZmVNZXJnZU5vZGVcIix7aW46YHNhdG9yaV9zLSR7ZX0tcmVzdWx0LSR7Y31gfSkrdSl9cmV0dXJuIEMoXCJmaWx0ZXJcIix7aWQ6YHNhdG9yaV9zLSR7ZX1gLHg6KHMvdCoxMDAqVXIpLnRvRml4ZWQoMikrXCIlXCIseToobC9uKjEwMCpVcikudG9GaXhlZCgyKStcIiVcIix3aWR0aDooKGEtcykvdCoxMDAqVXIpLnRvRml4ZWQoMikrXCIlXCIsaGVpZ2h0OigoZi1sKS9uKjEwMCpVcikudG9GaXhlZCgyKStcIiVcIn0sbysodT9DKFwiZmVNZXJnZVwiLHt9LHUpOlwiXCIpKX1mdW5jdGlvbiB3dSh7d2lkdGg6ZSxoZWlnaHQ6dCxzaGFwZTpuLG9wYWNpdHk6cixpZDppfSxvKXtpZighby5ib3hTaGFkb3cpcmV0dXJuIG51bGw7bGV0IHU9XCJcIixzPVwiXCI7Zm9yKGxldCBhPW8uYm94U2hhZG93Lmxlbmd0aC0xO2E+PTA7YS0tKXtsZXQgbD1cIlwiLGY9by5ib3hTaGFkb3dbYV07Zi5zcHJlYWRSYWRpdXMmJmYuaW5zZXQmJihmLnNwcmVhZFJhZGl1cz0tZi5zcHJlYWRSYWRpdXMpO2xldCBjPWYuYmx1clJhZGl1cypmLmJsdXJSYWRpdXMvNCsoZi5zcHJlYWRSYWRpdXN8fDApLHA9TWF0aC5taW4oLWMtKGYuaW5zZXQ/Zi5vZmZzZXRYOjApLDApLGg9TWF0aC5tYXgoYytlLShmLmluc2V0P2Yub2Zmc2V0WDowKSxlKSxkPU1hdGgubWluKC1jLShmLmluc2V0P2Yub2Zmc2V0WTowKSwwKSxtPU1hdGgubWF4KGMrdC0oZi5pbnNldD9mLm9mZnNldFk6MCksdCksdj1gc2F0b3JpX3MtJHtpfS0ke2F9YCxnPWBzYXRvcmlfbXMtJHtpfS0ke2F9YCxiPWYuc3ByZWFkUmFkaXVzP24ucmVwbGFjZSgnc3Ryb2tlLXdpZHRoPVwiMFwiJyxgc3Ryb2tlLXdpZHRoPVwiJHtmLnNwcmVhZFJhZGl1cyoyfVwiYCk6bjtsKz1DKFwibWFza1wiLHtpZDpnLG1hc2tVbml0czpcInVzZXJTcGFjZU9uVXNlXCJ9LEMoXCJyZWN0XCIse3g6MCx5OjAsd2lkdGg6by5fdmlld3BvcnRXaWR0aHx8XCIxMDAlXCIsaGVpZ2h0Om8uX3ZpZXdwb3J0SGVpZ2h0fHxcIjEwMCVcIixmaWxsOmYuaW5zZXQ/XCIjMDAwXCI6XCIjZmZmXCJ9KStiLnJlcGxhY2UoJ2ZpbGw9XCIjZmZmXCInLGYuaW5zZXQ/J2ZpbGw9XCIjZmZmXCInOidmaWxsPVwiIzAwMFwiJykucmVwbGFjZSgnc3Ryb2tlPVwiI2ZmZlwiJyxcIlwiKSk7bGV0IHg9Yi5yZXBsYWNlKC9kPVwiKFteXCJdKylcIi8sKEYseSk9PidkPVwiJyt4Zih5LGYub2Zmc2V0WCxmLm9mZnNldFkpKydcIicpLnJlcGxhY2UoL3g9XCIoW15cIl0rKVwiLywoRix5KT0+J3g9XCInKyhwYXJzZUZsb2F0KHkpK2Yub2Zmc2V0WCkrJ1wiJykucmVwbGFjZSgveT1cIihbXlwiXSspXCIvLChGLHkpPT4neT1cIicrKHBhcnNlRmxvYXQoeSkrZi5vZmZzZXRZKSsnXCInKTtmLnNwcmVhZFJhZGl1cyYmZi5zcHJlYWRSYWRpdXM8MCYmKGwrPUMoXCJtYXNrXCIse2lkOmcrXCItbmVnXCIsbWFza1VuaXRzOlwidXNlclNwYWNlT25Vc2VcIn0seC5yZXBsYWNlKCdzdHJva2U9XCIjZmZmXCInLCdzdHJva2U9XCIjMDAwXCInKS5yZXBsYWNlKC9zdHJva2Utd2lkdGg9XCJbXlwiXStcIi8sYHN0cm9rZS13aWR0aD1cIiR7LWYuc3ByZWFkUmFkaXVzKjJ9XCJgKSkpLGYuc3ByZWFkUmFkaXVzJiZmLnNwcmVhZFJhZGl1czwwJiYoeD1DKFwiZ1wiLHttYXNrOmB1cmwoIyR7Z30tbmVnKWB9LHgpKSxsKz1DKFwiZGVmc1wiLHt9LEMoXCJmaWx0ZXJcIix7aWQ6dix4OmAke3AvZSoxMDB9JWAseTpgJHtkL3QqMTAwfSVgLHdpZHRoOmAkeyhoLXApL2UqMTAwfSVgLGhlaWdodDpgJHsobS1kKS90KjEwMH0lYH0sQyhcImZlR2F1c3NpYW5CbHVyXCIse3N0ZERldmlhdGlvbjpmLmJsdXJSYWRpdXMvMixyZXN1bHQ6XCJiXCJ9KStDKFwiZmVGbG9vZFwiLHtcImZsb29kLWNvbG9yXCI6Zi5jb2xvcixpbjpcIlNvdXJjZUdyYXBoaWNcIixyZXN1bHQ6XCJmXCJ9KStDKFwiZmVDb21wb3NpdGVcIix7aW46XCJmXCIsaW4yOlwiYlwiLG9wZXJhdG9yOmYuaW5zZXQ/XCJvdXRcIjpcImluXCJ9KSkpK0MoXCJnXCIse21hc2s6YHVybCgjJHtnfSlgLGZpbHRlcjpgdXJsKCMke3Z9KWAsb3BhY2l0eTpyfSx4KSxmLmluc2V0P3MrPWw6dSs9bH1yZXR1cm5bdSxzXX1mdW5jdGlvbiBJbih7d2lkdGg6ZSxsZWZ0OnQsdG9wOm4sYXNjZW5kZXI6cixjbGlwUGF0aElkOml9LG8pe2xldHt0ZXh0RGVjb3JhdGlvbkNvbG9yOnUsdGV4dERlY29yYXRpb25TdHlsZTpzLHRleHREZWNvcmF0aW9uTGluZTphLGZvbnRTaXplOmwsY29sb3I6Zn09bztpZighYXx8YT09PVwibm9uZVwiKXJldHVyblwiXCI7bGV0IGM9TWF0aC5tYXgoMSxsKi4xKSxwPWE9PT1cImxpbmUtdGhyb3VnaFwiP24rciouNzphPT09XCJ1bmRlcmxpbmVcIj9uK3IqMS4xOm4saD1zPT09XCJkYXNoZWRcIj9gJHtjKjEuMn0gJHtjKjJ9YDpzPT09XCJkb3R0ZWRcIj9gMCAke2MqMn1gOnZvaWQgMDtyZXR1cm4gQyhcImxpbmVcIix7eDE6dCx5MTpwLHgyOnQrZSx5MjpwLHN0cm9rZTp1fHxmLFwic3Ryb2tlLXdpZHRoXCI6YyxcInN0cm9rZS1kYXNoYXJyYXlcIjpoLFwic3Ryb2tlLWxpbmVjYXBcIjpzPT09XCJkb3R0ZWRcIj9cInJvdW5kXCI6XCJzcXVhcmVcIixcImNsaXAtcGF0aFwiOmk/YHVybCgjJHtpfSlgOnZvaWQgMH0pfWZ1bmN0aW9uIFJuKGUpe3JldHVybiBlPWUucmVwbGFjZShcIlUrXCIsXCIweFwiKSxTdHJpbmcuZnJvbUNvZGVQb2ludChOdW1iZXIoZSkpfXZhciBMdD1SbihcIlUrMDAyMFwiKSxMbj1SbihcIlUrMDAwOVwiKSxNdD1SbihcIlUrMjAyNlwiKTt2YXIgRmY9bmV3IFNldChbTG5dKTtmdW5jdGlvbiB3ZihlKXtyZXR1cm4gRmYuaGFzKGUpfWFzeW5jIGZ1bmN0aW9uKk1uKGUsdCl7bGV0IG49YXdhaXQgcWUoKSx7cGFyZW50U3R5bGU6cixpbmhlcml0ZWRTdHlsZTppLHBhcmVudDpvLGZvbnQ6dSxpZDpzLGlzSW5oZXJpdGluZ1RyYW5zZm9ybTphLGRlYnVnOmwsZW1iZWRGb250OmYsZ3JhcGhlbWVJbWFnZXM6Yyxsb2NhbGU6cCxjYW5Mb2FkQWRkaXRpb25hbEFzc2V0czpofT10LHt0ZXh0QWxpZ246ZCx3aGl0ZVNwYWNlOm0sd29yZEJyZWFrOnYsbGluZUhlaWdodDpnLHRleHRUcmFuc2Zvcm06Yix0ZXh0V3JhcDp4LGZvbnRTaXplOkYsZmlsdGVyOnksdGFiU2l6ZTprPTgsX2luaGVyaXRlZEJhY2tncm91bmRDbGlwVGV4dFBhdGg6UH09cjtlPUVmKGUsYixwKTtsZXR7Y29udGVudDpCLHNob3VsZENvbGxhcHNlVGFic0FuZFNwYWNlczpqLGFsbG93U29mdFdyYXA6b2V9PVNmKGUsbSkse3dvcmRzOnVlLHJlcXVpcmVkQnJlYWtzOnNlLGFsbG93QnJlYWtXb3JkOk59PV9mKEIsdiksW0wsVl09Q2YocixvZSksZGU9a2YobixkKTtvLmluc2VydENoaWxkKGRlLG8uZ2V0Q2hpbGRDb3VudCgpKSxudShyLmZsZXhTaHJpbmspJiZvLnNldEZsZXhTaHJpbmsoMSk7bGV0IFk9dS5nZXRFbmdpbmUoRixnLHIscCksZWU9aD93ZShCLFwiZ3JhcGhlbWVcIikuZmlsdGVyKEk9PiF3ZihJKSYmIVkuaGFzKEkpKTpbXTt5aWVsZCBlZS5tYXAoST0+KHt3b3JkOkksbG9jYWxlOnB9KSksZWUubGVuZ3RoJiYoWT11LmdldEVuZ2luZShGLGcscixwKSk7ZnVuY3Rpb24gbGUoSSl7cmV0dXJuISEoYyYmY1tJXSl9bGV0IGhlPVRmKFkscik7ZnVuY3Rpb24gQShJKXtsZXQgJD0wO2ZvcihsZXQgWCBvZiBJKWxlKFgpPyQrPUY6JCs9aGUoWCk7cmV0dXJuICR9ZnVuY3Rpb24gTyhJKXtyZXR1cm4gQSh3ZShJLFwiZ3JhcGhlbWVcIikpfWxldCBNPUxyKGspP3EoayxGLDEscik6aGUoTHQpKmssUj0oSSwkKT0+e2lmKEkubGVuZ3RoPT09MClyZXR1cm57b3JpZ2luV2lkdGg6MCxlbmRpbmdTcGFjZXNXaWR0aDowLHRleHQ6SX07bGV0e2luZGV4OlgsdGFiQ291bnQ6R309QWYoSSksaWU9MCxIPVwiXCI7aWYoRz4wKXtIPUkuc2xpY2UoMCxYKTtsZXQgZmU9SS5zbGljZShYK0cpLHRlPU8oSCksSWU9dGUrJDtpZT0oTT09PTA/dGU6KE1hdGguZmxvb3IoSWUvTSkrRykqTSkrTyhmZSl9ZWxzZSBpZT1PKEkpO2xldCBtZT1JLnRyaW1FbmQoKT09PUk/aWU6TyhJLnRyaW1FbmQoKSk7cmV0dXJue29yaWdpbldpZHRoOmllLGVuZGluZ1NwYWNlc1dpZHRoOmllLW1lLHRleHQ6SX19LGFlPVtdLGJlPVtdLEJlPVtdLGR0PVtdLFN0PVtdO2Z1bmN0aW9uIERuKEkpe2xldCAkPTAsWD0wLEc9LTEsaWU9MCxIPTAsbWU9MCxmZT0wO2FlPVtdLEJlPVswXSxkdD1bXSxTdD1bXTtsZXQgdGU9MCxJZT0wO2Zvcig7dGU8dWUubGVuZ3RoJiYkPEw7KXtsZXQgVz11ZVt0ZV0sbnQ9c2VbdGVdLEVlPTAse29yaWdpbldpZHRoOlZlLGVuZGluZ1NwYWNlc1dpZHRoOk9yLHRleHQ6WWV9PVIoVyxIKTtXPVllLEVlPVZlO2xldCBaPU9yO250JiZtZT09PTAmJihtZT1ZLmhlaWdodChXKSk7bGV0IERlPVwiLC4hPzotQCk+XX0lI1wiLmluZGV4T2YoV1swXSk8MCxYZT0hSCxQcj10ZSYmRGUmJkgrRWU+SStaJiZvZTtpZihOJiZFZT5JJiYoIUh8fFByfHxudCkpe2xldCBnZT13ZShXLFwiZ3JhcGhlbWVcIik7dWUuc3BsaWNlKHRlLDEsLi4uZ2UpLEg+MCYmKGFlLnB1c2goSC1JZSksYmUucHVzaChmZSksJCsrLGllKz1tZSxIPTAsbWU9MCxmZT0wLEJlLnB1c2goMSksRz0tMSksSWU9Wjtjb250aW51ZX1pZihudHx8UHIpaiYmVz09PVwiIFwiJiYoRWU9MCksYWUucHVzaChILUllKSxiZS5wdXNoKGZlKSwkKyssaWUrPW1lLEg9RWUsbWU9RWU/WS5oZWlnaHQoVyk6MCxmZT1FZT9ZLmJhc2VsaW5lKFcpOjAsQmUucHVzaCgxKSxHPS0xLG50fHwoWD1NYXRoLm1heChYLEkpKTtlbHNle0grPUVlO2xldCBnZT1ZLmhlaWdodChXKTtnZT5tZSYmKG1lPWdlLGZlPVkuYmFzZWxpbmUoVykpLFhlJiZCZVtCZS5sZW5ndGgtMV0rK31YZSYmRysrLFg9TWF0aC5tYXgoWCxIKTtsZXQgaXQ9SC1FZTtpZihFZT09PTApU3QucHVzaCh7eTppZSx4Oml0LHdpZHRoOjAsbGluZTokLGxpbmVJbmRleDpHLGlzSW1hZ2U6ITF9KTtlbHNle2xldCBnZT13ZShXLFwid29yZFwiKTtmb3IobGV0IE9lPTA7T2U8Z2UubGVuZ3RoO09lKyspe2xldCBvdD1nZVtPZV0sV2U9MCxUdD0hMTtsZShvdCk/KFdlPUYsVHQ9ITApOldlPWhlKG90KSxkdC5wdXNoKG90KSxTdC5wdXNoKHt5OmllLHg6aXQsd2lkdGg6V2UsbGluZTokLGxpbmVJbmRleDpHLGlzSW1hZ2U6VHR9KSxpdCs9V2V9fXRlKyssSWU9Wn1yZXR1cm4gSCYmKCQ8TCYmKGllKz1tZSksJCsrLGFlLnB1c2goSCksYmUucHVzaChmZSkpLHt3aWR0aDpYLGhlaWdodDppZX19bGV0IENyPXt3aWR0aDowLGhlaWdodDowfTtkZS5zZXRNZWFzdXJlRnVuYyhJPT57bGV0e3dpZHRoOiQsaGVpZ2h0Olh9PURuKEkpO2lmKHg9PT1cImJhbGFuY2VcIil7bGV0IEc9JC8yLGllPSQsSD0kO2Zvcig7RysxPGllOyl7SD0oRytpZSkvMjtsZXR7aGVpZ2h0Om1lfT1EbihIKTttZT5YP0c9SDppZT1IfXJldHVybiBEbihpZSksQ3I9e3dpZHRoOmllLGhlaWdodDpYfSx7d2lkdGg6TWF0aC5jZWlsKGllKSxoZWlnaHQ6WH19cmV0dXJuIENyPXt3aWR0aDokLGhlaWdodDpYfSx7d2lkdGg6TWF0aC5jZWlsKCQpLGhlaWdodDpYfX0pO2xldFtGbCx3bF09eWllbGQsZ249XCJcIixfcj1cIlwiLGplPWkuX2luaGVyaXRlZENsaXBQYXRoSWQsTW89aS5faW5oZXJpdGVkTWFza0lkLHtsZWZ0Ok5vLHRvcDokbyx3aWR0aDpibixoZWlnaHQ6RWx9PWRlLmdldENvbXB1dGVkTGF5b3V0KCksU3I9by5nZXRDb21wdXRlZFdpZHRoKCktby5nZXRDb21wdXRlZFBhZGRpbmcobi5FREdFX0xFRlQpLW8uZ2V0Q29tcHV0ZWRQYWRkaW5nKG4uRURHRV9SSUdIVCktby5nZXRDb21wdXRlZEJvcmRlcihuLkVER0VfTEVGVCktby5nZXRDb21wdXRlZEJvcmRlcihuLkVER0VfUklHSFQpLHB0PUZsK05vLGh0PXdsKyRvLHttYXRyaXg6JGUsb3BhY2l0eTprcn09eHUoe2xlZnQ6Tm8sdG9wOiRvLHdpZHRoOmJuLGhlaWdodDpFbCxpc0luaGVyaXRpbmdUcmFuc2Zvcm06YX0sciksbXQ9XCJcIjtpZihyLnRleHRTaGFkb3dPZmZzZXQpe2xldHt0ZXh0U2hhZG93Q29sb3I6SSx0ZXh0U2hhZG93T2Zmc2V0OiQsdGV4dFNoYWRvd1JhZGl1czpYfT1yO0FycmF5LmlzQXJyYXkoci50ZXh0U2hhZG93T2Zmc2V0KXx8KEk9W0ldLCQ9WyRdLFg9W1hdKSxtdD1GdSh7d2lkdGg6Q3Iud2lkdGgsaGVpZ2h0OkNyLmhlaWdodCxpZDpzfSx7c2hhZG93Q29sb3I6SSxzaGFkb3dPZmZzZXQ6JCxzaGFkb3dSYWRpdXM6WH0pLG10PUMoXCJkZWZzXCIse30sbXQpfWxldCBrdD1cIlwiLFRyPVwiXCIsV289XCJcIixBcj0tMSxEdD17fSxIZT1udWxsLHFvPTA7Zm9yKGxldCBJPTA7STxkdC5sZW5ndGg7SSsrKXtsZXQgJD1TdFtJXSxYPVN0W0krMV07aWYoISQpY29udGludWU7bGV0IEc9ZHRbSV0saWU9bnVsbCxIPSExLG1lPWM/Y1tHXTpudWxsLGZlPSQueSx0ZT0kLngsSWU9JC53aWR0aCxXPSQubGluZTtpZihXPT09QXIpY29udGludWU7bGV0IG50PSExO2lmKGFlLmxlbmd0aD4xKXtsZXQgWj1ibi1hZVtXXTtpZihkPT09XCJyaWdodFwifHxkPT09XCJlbmRcIil0ZSs9WjtlbHNlIGlmKGQ9PT1cImNlbnRlclwiKXRlKz1aLzI7ZWxzZSBpZihkPT09XCJqdXN0aWZ5XCImJlc8YWUubGVuZ3RoLTEpe2xldCBEZT1CZVtXXSxYZT1EZT4xP1ovKERlLTEpOjA7dGUrPVhlKiQubGluZUluZGV4LG50PSEwfX1sZXQgRWU9YmVbV10sVmU9WS5iYXNlbGluZShHKSxPcj1ZLmhlaWdodChHKSxZZT1FZS1WZTtpZihEdFtXXXx8KER0W1ddPVt0ZSxodCtmZStZZSxWZSxudD9ibjphZVtXXV0pLEwhPT0xLzApe2xldCBpdD1mdW5jdGlvbihnZSxPZSl7bGV0IG90PXdlKE9lLFwiZ3JhcGhlbWVcIixwKSxXZT1cIlwiLFR0PTA7Zm9yKGxldCBVbyBvZiBvdCl7bGV0IHpvPWdlK0EoW1dlK1VvXSk7aWYoV2UmJnpvK0RlPlNyKWJyZWFrO1dlKz1VbyxUdD16b31yZXR1cm57c3Vic2V0OldlLHJlc29sdmVkV2lkdGg6VHR9fSxaPVYsRGU9aGUoVik7RGU+U3ImJihaPU10LERlPWhlKFopKTtsZXQgWGU9aGUoTHQpLFByPVc8YWUubGVuZ3RoLTE7aWYoVysxPT09TCYmKFByfHxhZVtXXT5Tcikpe2lmKHRlK0llK0RlK1hlPlNyKXtsZXR7c3Vic2V0OmdlLHJlc29sdmVkV2lkdGg6T2V9PWl0KHRlLEcpO0c9Z2UrWixBcj1XLER0W1ddWzJdPU9lLEg9ITB9ZWxzZSBpZihYJiZYLmxpbmUhPT1XKWlmKGQ9PT1cImNlbnRlclwiKXtsZXR7c3Vic2V0OmdlLHJlc29sdmVkV2lkdGg6T2V9PWl0KHRlLEcpO0c9Z2UrWixBcj1XLER0W1ddWzJdPU9lLEg9ITB9ZWxzZXtsZXQgZ2U9ZHRbSSsxXSx7c3Vic2V0Ok9lLHJlc29sdmVkV2lkdGg6b3R9PWl0KEllK3RlLGdlKTtHPUcrT2UrWixBcj1XLER0W1ddWzJdPW90LEg9ITB9fX1pZihtZSlmZSs9MDtlbHNlIGlmKGYpe2lmKCFHLmluY2x1ZGVzKExuKSYmIWV1LmluY2x1ZGVzKEcpJiZkdFtJKzFdJiZYJiYhWC5pc0ltYWdlJiZmZT09PVgueSYmIUgpe0hlPT09bnVsbCYmKHFvPXRlKSxIZT1IZT09PW51bGw/RzpIZStHO2NvbnRpbnVlfWxldCBaPUhlPT09bnVsbD9HOkhlK0csRGU9SGU9PT1udWxsP3RlOnFvLFhlPSQud2lkdGgrdGUtRGU7aWU9WS5nZXRTVkcoWi5yZXBsYWNlKC8oXFx0KSsvZyxcIlwiKSx7Li4ucixsZWZ0OnB0K0RlLHRvcDpodCtmZStWZStZZSxsZXR0ZXJTcGFjaW5nOnIubGV0dGVyU3BhY2luZ30pLEhlPW51bGwsbCYmKFdvKz1DKFwicmVjdFwiLHt4OnB0K0RlLHk6aHQrZmUrWWUsd2lkdGg6WGUsaGVpZ2h0Ok9yLGZpbGw6XCJ0cmFuc3BhcmVudFwiLHN0cm9rZTpcIiM1NzVlZmZcIixcInN0cm9rZS13aWR0aFwiOjEsdHJhbnNmb3JtOiRlfHx2b2lkIDAsXCJjbGlwLXBhdGhcIjpqZT9gdXJsKCMke2plfSlgOnZvaWQgMH0pK0MoXCJsaW5lXCIse3gxOnB0K3RlLHgyOnB0K3RlKyQud2lkdGgseTE6aHQrZmUrWWUrVmUseTI6aHQrZmUrWWUrVmUsc3Ryb2tlOlwiIzE0YzAwMFwiLFwic3Ryb2tlLXdpZHRoXCI6MSx0cmFuc2Zvcm06JGV8fHZvaWQgMCxcImNsaXAtcGF0aFwiOmplP2B1cmwoIyR7amV9KWA6dm9pZCAwfSkpfWVsc2UgZmUrPVZlK1llO2lmKHIudGV4dERlY29yYXRpb25MaW5lKXtsZXQgWj1EdFtXXTtaJiYhWls0XSYmKGt0Kz1Jbih7bGVmdDpwdCtaWzBdLHRvcDpaWzFdLHdpZHRoOlpbM10sYXNjZW5kZXI6WlsyXSxjbGlwUGF0aElkOmplfSxyKSxaWzRdPTEpfWlmKGllIT09bnVsbClUcis9aWUrXCIgXCI7ZWxzZXtsZXRbWixEZV09Qm4oe2NvbnRlbnQ6RyxmaWx0ZXI6bXQsaWQ6cyxsZWZ0OnB0K3RlLHRvcDpodCtmZSx3aWR0aDpJZSxoZWlnaHQ6T3IsbWF0cml4OiRlLG9wYWNpdHk6a3IsaW1hZ2U6bWUsY2xpcFBhdGhJZDpqZSxkZWJ1ZzpsLHNoYXBlOiEhUCxkZWNvcmF0aW9uU2hhcGU6a3R9LHIpO2duKz1aLF9yKz1EZSxrdD1cIlwifWlmKEgpYnJlYWt9aWYoVHIpe2xldCBJPXIuY29sb3IhPT1cInRyYW5zcGFyZW50XCImJmtyIT09MD9DKFwicGF0aFwiLHtmaWxsOnIuY29sb3IsZDpUcix0cmFuc2Zvcm06JGV8fHZvaWQgMCxvcGFjaXR5OmtyIT09MT9rcjp2b2lkIDAsXCJjbGlwLXBhdGhcIjpqZT9gdXJsKCMke2plfSlgOnZvaWQgMCxtYXNrOk1vP2B1cmwoIyR7TW99KWA6dm9pZCAwLHN0eWxlOnk/YGZpbHRlcjoke3l9YDp2b2lkIDB9KTpcIlwiO1AmJihfcj1DKFwicGF0aFwiLHtkOlRyLHRyYW5zZm9ybTokZXx8dm9pZCAwfSkpLGduKz0obXQ/bXQrQyhcImdcIix7ZmlsdGVyOmB1cmwoI3NhdG9yaV9zLSR7c30pYH0sSStrdCk6SStrdCkrV299cmV0dXJuIF9yJiYoci5faW5oZXJpdGVkQmFja2dyb3VuZENsaXBUZXh0UGF0aC52YWx1ZSs9X3IpLGdufWZ1bmN0aW9uIEVmKGUsdCxuKXtyZXR1cm4gdD09PVwidXBwZXJjYXNlXCI/ZT1lLnRvTG9jYWxlVXBwZXJDYXNlKG4pOnQ9PT1cImxvd2VyY2FzZVwiP2U9ZS50b0xvY2FsZUxvd2VyQ2FzZShuKTp0PT09XCJjYXBpdGFsaXplXCImJihlPXdlKGUsXCJ3b3JkXCIsbikubWFwKHI9PndlKHIsXCJncmFwaGVtZVwiLG4pLm1hcCgoaSxvKT0+bz09PTA/aS50b0xvY2FsZVVwcGVyQ2FzZShuKTppKS5qb2luKFwiXCIpKS5qb2luKFwiXCIpKSxlfWZ1bmN0aW9uIENmKGUsdCl7bGV0e3RleHRPdmVyZmxvdzpuLGxpbmVDbGFtcDpyLFdlYmtpdExpbmVDbGFtcDppLFdlYmtpdEJveE9yaWVudDpvLG92ZXJmbG93OnUsZGlzcGxheTpzfT1lO2lmKHM9PT1cImJsb2NrXCImJnIpe2xldFthLGw9TXRdPU9mKHIpO2lmKGEpcmV0dXJuW2EsbF19cmV0dXJuIG49PT1cImVsbGlwc2lzXCImJnM9PT1cIi13ZWJraXQtYm94XCImJm89PT1cInZlcnRpY2FsXCImJnJ1KGkpJiZpPjA/W2ksTXRdOm49PT1cImVsbGlwc2lzXCImJnU9PT1cImhpZGRlblwiJiYhdD9bMSxNdF06WzEvMF19ZnVuY3Rpb24gX2YoZSx0KXtsZXQgbj1bXCJicmVhay1hbGxcIixcImJyZWFrLXdvcmRcIl0uaW5jbHVkZXModCkse3dvcmRzOnIscmVxdWlyZWRCcmVha3M6aX09aXUoZSx0KTtyZXR1cm57d29yZHM6cixyZXF1aXJlZEJyZWFrczppLGFsbG93QnJlYWtXb3JkOm59fWZ1bmN0aW9uIFNmKGUsdCl7bGV0IG49W1wicHJlXCIsXCJwcmUtd3JhcFwiLFwicHJlLWxpbmVcIl0uaW5jbHVkZXModCkscj1bXCJub3JtYWxcIixcIm5vd3JhcFwiLFwicHJlLWxpbmVcIl0uaW5jbHVkZXModCksaT0hW1wicHJlXCIsXCJub3dyYXBcIl0uaW5jbHVkZXModCk7cmV0dXJuIG58fChlPWUucmVwbGFjZSgvXFxuL2csTHQpKSxyJiYoZT1lLnJlcGxhY2UoLyhbIF18XFx0KSsvZyxMdCkudHJpbSgpKSx7Y29udGVudDplLHNob3VsZENvbGxhcHNlVGFic0FuZFNwYWNlczpyLGFsbG93U29mdFdyYXA6aX19ZnVuY3Rpb24ga2YoZSx0KXtsZXQgbj1lLk5vZGUuY3JlYXRlKCk7cmV0dXJuIG4uc2V0QWxpZ25JdGVtcyhlLkFMSUdOX0JBU0VMSU5FKSxuLnNldEp1c3RpZnlDb250ZW50KHZlKHQse2xlZnQ6ZS5KVVNUSUZZX0ZMRVhfU1RBUlQscmlnaHQ6ZS5KVVNUSUZZX0ZMRVhfRU5ELGNlbnRlcjplLkpVU1RJRllfQ0VOVEVSLGp1c3RpZnk6ZS5KVVNUSUZZX1NQQUNFX0JFVFdFRU4sc3RhcnQ6ZS5KVVNUSUZZX0ZMRVhfU1RBUlQsZW5kOmUuSlVTVElGWV9GTEVYX0VORH0sZS5KVVNUSUZZX0ZMRVhfU1RBUlQsXCJ0ZXh0QWxpZ25cIikpLG59ZnVuY3Rpb24gVGYoZSx0KXtsZXQgbj1uZXcgTWFwO3JldHVybiBmdW5jdGlvbihpKXtpZihuLmhhcyhpKSlyZXR1cm4gbi5nZXQoaSk7bGV0IG89ZS5tZWFzdXJlKGksdCk7cmV0dXJuIG4uc2V0KGksbyksb319ZnVuY3Rpb24gQWYoZSl7bGV0IHQ9LyhcXHQpKy8uZXhlYyhlKTtyZXR1cm4gdD97aW5kZXg6dC5pbmRleCx0YWJDb3VudDp0WzBdLmxlbmd0aH06e2luZGV4Om51bGwsdGFiQ291bnQ6MH19ZnVuY3Rpb24gT2YoZSl7aWYodHlwZW9mIGU9PVwibnVtYmVyXCIpcmV0dXJuW2VdO2xldCB0PS9eKFxcZCspXFxzKlwiKC4qKVwiJC8sbj0vXihcXGQrKVxccyonKC4qKSckLyxyPXQuZXhlYyhlKSxpPW4uZXhlYyhlKTtpZihyKXtsZXQgbz0rclsxXSx1PXJbMl07cmV0dXJuW28sdV19ZWxzZSBpZihpKXtsZXQgbz0raVsxXSx1PWlbMl07cmV0dXJuW28sdV19cmV0dXJuW119aW1wb3J0IFBmIGZyb21cInBhcnNlLWNzcy1jb2xvclwiO3ZhciBObj1Obnx8e30sRXU9e3R5cGU6XCJkaXJlY3Rpb25hbFwiLHZhbHVlOlwiYm90dG9tXCJ9O05uLnBhcnNlPWZ1bmN0aW9uKCl7dmFyIGU9e2xpbmVhckdyYWRpZW50Oi9eKFxcLSh3ZWJraXR8b3xtc3xtb3opXFwtKT8obGluZWFyXFwtZ3JhZGllbnQpL2kscmVwZWF0aW5nTGluZWFyR3JhZGllbnQ6L14oXFwtKHdlYmtpdHxvfG1zfG1veilcXC0pPyhyZXBlYXRpbmdcXC1saW5lYXJcXC1ncmFkaWVudCkvaSxyYWRpYWxHcmFkaWVudDovXihcXC0od2Via2l0fG98bXN8bW96KVxcLSk/KHJhZGlhbFxcLWdyYWRpZW50KS9pLHJlcGVhdGluZ1JhZGlhbEdyYWRpZW50Oi9eKFxcLSh3ZWJraXR8b3xtc3xtb3opXFwtKT8ocmVwZWF0aW5nXFwtcmFkaWFsXFwtZ3JhZGllbnQpL2ksc2lkZU9yQ29ybmVyOi9edG8gKGxlZnQgKHRvcHxib3R0b20pfHJpZ2h0ICh0b3B8Ym90dG9tKXx0b3AgKGxlZnR8cmlnaHQpfGJvdHRvbSAobGVmdHxyaWdodCl8bGVmdHxyaWdodHx0b3B8Ym90dG9tKS9pLGV4dGVudEtleXdvcmRzOi9eKGNsb3Nlc3RcXC1zaWRlfGNsb3Nlc3RcXC1jb3JuZXJ8ZmFydGhlc3RcXC1zaWRlfGZhcnRoZXN0XFwtY29ybmVyfGNvbnRhaW58Y292ZXIpLyxwb3NpdGlvbktleXdvcmRzOi9eKGxlZnR8Y2VudGVyfHJpZ2h0fHRvcHxib3R0b20pL2kscGl4ZWxWYWx1ZTovXigtPygoWzAtOV0qXFwuWzAtOV0rKXwoWzAtOV0rXFwuPykpKXB4LyxwZXJjZW50YWdlVmFsdWU6L14oLT8oKFswLTldKlxcLlswLTldKyl8KFswLTldK1xcLj8pKSlcXCUvLGVtTGlrZVZhbHVlOi9eKC0/KChbMC05XSpcXC5bMC05XSspfChbMC05XStcXC4/KSkpKHI/ZW18dnd8dmgpLyxhbmdsZVZhbHVlOi9eKC0/KChbMC05XSpcXC5bMC05XSspfChbMC05XStcXC4/KSkpZGVnLyx6ZXJvVmFsdWU6L1swXS8sc3RhcnRDYWxsOi9eXFwoLyxlbmRDYWxsOi9eXFwpLyxjb21tYTovXiwvLGhleENvbG9yOi9eXFwjKFswLTlhLWZBLUZdKykvLGxpdGVyYWxDb2xvcjovXihbYS16QS1aXSspLyxyZ2JDb2xvcjovXnJnYi9pLHJnYmFDb2xvcjovXnJnYmEvaSxudW1iZXI6L14oKFswLTldKlxcLlswLTldKyl8KFswLTldK1xcLj8pKS99LHQ9XCJcIjtmdW5jdGlvbiBuKEEpe3ZhciBPPW5ldyBFcnJvcih0K1wiOiBcIitBKTt0aHJvdyBPLnNvdXJjZT10LE99ZnVuY3Rpb24gcigpe3ZhciBBPWkoKTtyZXR1cm4gdC5sZW5ndGg+MCYmbihcIkludmFsaWQgaW5wdXQgbm90IEVPRlwiKSxBfWZ1bmN0aW9uIGkoKXtyZXR1cm4gayhvKX1mdW5jdGlvbiBvKCl7cmV0dXJuIHMoXCJsaW5lYXItZ3JhZGllbnRcIixlLmxpbmVhckdyYWRpZW50LGwsRXUpfHxzKFwicmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudFwiLGUucmVwZWF0aW5nTGluZWFyR3JhZGllbnQsbCxFdSl8fHMoXCJyYWRpYWwtZ3JhZGllbnRcIixlLnJhZGlhbEdyYWRpZW50LGgpfHxzKFwicmVwZWF0aW5nLXJhZGlhbC1ncmFkaWVudFwiLGUucmVwZWF0aW5nUmFkaWFsR3JhZGllbnQsaCl9ZnVuY3Rpb24gdShBPXt9KXt2YXIgTSxSLGFlLGJlO2xldCBPPXsuLi5BfTtyZXR1cm4gT2JqZWN0LmFzc2lnbihPLHtzdHlsZTooTy5zdHlsZXx8W10pLmxlbmd0aD4wP08uc3R5bGU6W3t0eXBlOlwiZXh0ZW50LWtleXdvcmRcIix2YWx1ZTpcImZhcnRoZXN0LWNvcm5lclwifV0sYXQ6e3R5cGU6XCJwb3NpdGlvblwiLHZhbHVlOnt4Ont0eXBlOlwicG9zaXRpb24ta2V5d29yZFwiLHZhbHVlOlwiY2VudGVyXCIsLi4uKChSPShNPU8uYXQpPT1udWxsP3ZvaWQgMDpNLnZhbHVlKT09bnVsbD92b2lkIDA6Ui54KXx8e319LHk6e3R5cGU6XCJwb3NpdGlvbi1rZXl3b3JkXCIsdmFsdWU6XCJjZW50ZXJcIiwuLi4oKGJlPShhZT1PLmF0KT09bnVsbD92b2lkIDA6YWUudmFsdWUpPT1udWxsP3ZvaWQgMDpiZS55KXx8e319fX19KSxBLnZhbHVlfHxPYmplY3QuYXNzaWduKE8se3R5cGU6XCJzaGFwZVwiLHZhbHVlOk8uc3R5bGUuc29tZShCZT0+W1wiJVwiLFwiZXh0ZW50LWtleXdvcmRcIl0uaW5jbHVkZXMoQmUudHlwZSkpP1wiZWxsaXBzZVwiOlwiY2lyY2xlXCJ9KSxPfWZ1bmN0aW9uIHMoQSxPLE0sUil7cmV0dXJuIGEoTyxmdW5jdGlvbihhZSl7dmFyIGJlPU0oKTtyZXR1cm4gYmU/bGUoZS5jb21tYSl8fG4oXCJNaXNzaW5nIGNvbW1hIGJlZm9yZSBjb2xvciBzdG9wc1wiKTpiZT1SLHt0eXBlOkEsb3JpZW50YXRpb246QS5lbmRzV2l0aChcInJhZGlhbC1ncmFkaWVudFwiKT8oYmU9PW51bGw/dm9pZCAwOmJlLm1hcChCZT0+dShCZSkpKT8/W3UoKV06YmUsY29sb3JTdG9wczprKFApfX0pfWZ1bmN0aW9uIGEoQSxPKXt2YXIgTT1sZShBKTtpZihNKXtsZShlLnN0YXJ0Q2FsbCl8fG4oXCJNaXNzaW5nIChcIik7dmFyIFI9TyhNKTtyZXR1cm4gbGUoZS5lbmRDYWxsKXx8bihcIk1pc3NpbmcgKVwiKSxSfX1mdW5jdGlvbiBsKCl7cmV0dXJuIGYoKXx8YygpfHxwKCl9ZnVuY3Rpb24gZigpe3JldHVybiBlZShcImRpcmVjdGlvbmFsXCIsZS5zaWRlT3JDb3JuZXIsMSl9ZnVuY3Rpb24gYygpe3JldHVybiBlZShcImFuZ3VsYXJcIixlLmFuZ2xlVmFsdWUsMSl9ZnVuY3Rpb24gcCgpe3JldHVybiBlZShcImRpcmVjdGlvbmFsXCIsZS56ZXJvVmFsdWUsMCl9ZnVuY3Rpb24gaCgpe3ZhciBBLE89ZCgpLE07cmV0dXJuIE8mJihBPVtdLEEucHVzaChPKSxNPXQsbGUoZS5jb21tYSkmJihPPWQoKSxPP0EucHVzaChPKTp0PU0pKSxBfWZ1bmN0aW9uIGQoKXtsZXQgQT1tKCksTz14KCk7aWYoISghQSYmIU8pKXJldHVybnsuLi5BLGF0Ok99fWZ1bmN0aW9uIG0oKXtsZXQgQT12KCl8fGcoKSxPPWIoKXx8ZGUoKXx8TCgpLE09ZWUoXCIlXCIsZS5wZXJjZW50YWdlVmFsdWUsMSk7aWYoQSlyZXR1cm57Li4uQSxzdHlsZTpbTyxNXS5maWx0ZXIoUj0+Uil9O2lmKE8pcmV0dXJue3N0eWxlOltPLE1dLmZpbHRlcihSPT5SKSwuLi52KCl8fGcoKX19ZnVuY3Rpb24gdigpe3JldHVybiBlZShcInNoYXBlXCIsL14oY2lyY2xlKS9pLDApfWZ1bmN0aW9uIGcoKXtyZXR1cm4gZWUoXCJzaGFwZVwiLC9eKGVsbGlwc2UpL2ksMCl9ZnVuY3Rpb24gYigpe3JldHVybiBlZShcImV4dGVudC1rZXl3b3JkXCIsZS5leHRlbnRLZXl3b3JkcywxKX1mdW5jdGlvbiB4KCl7aWYoZWUoXCJwb3NpdGlvblwiLC9eYXQvLDApKXt2YXIgQT1GKCk7cmV0dXJuIEF8fG4oXCJNaXNzaW5nIHBvc2l0aW9uaW5nIHZhbHVlXCIpLEF9fWZ1bmN0aW9uIEYoKXt2YXIgQT15KCk7aWYoQS54fHxBLnkpcmV0dXJue3R5cGU6XCJwb3NpdGlvblwiLHZhbHVlOkF9fWZ1bmN0aW9uIHkoKXtyZXR1cm57eDpMKCkseTpMKCl9fWZ1bmN0aW9uIGsoQSl7dmFyIE89QSgpLE09W107aWYoTylmb3IoTS5wdXNoKE8pO2xlKGUuY29tbWEpOylPPUEoKSxPP00ucHVzaChPKTpuKFwiT25lIGV4dHJhIGNvbW1hXCIpO3JldHVybiBNfWZ1bmN0aW9uIFAoKXt2YXIgQT1CKCk7cmV0dXJuIEF8fG4oXCJFeHBlY3RlZCBjb2xvciBkZWZpbml0aW9uXCIpLEEubGVuZ3RoPUwoKSxBfWZ1bmN0aW9uIEIoKXtyZXR1cm4gb2UoKXx8c2UoKXx8dWUoKXx8aigpfWZ1bmN0aW9uIGooKXtyZXR1cm4gZWUoXCJsaXRlcmFsXCIsZS5saXRlcmFsQ29sb3IsMCl9ZnVuY3Rpb24gb2UoKXtyZXR1cm4gZWUoXCJoZXhcIixlLmhleENvbG9yLDEpfWZ1bmN0aW9uIHVlKCl7cmV0dXJuIGEoZS5yZ2JDb2xvcixmdW5jdGlvbigpe3JldHVybnt0eXBlOlwicmdiXCIsdmFsdWU6ayhOKX19KX1mdW5jdGlvbiBzZSgpe3JldHVybiBhKGUucmdiYUNvbG9yLGZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6XCJyZ2JhXCIsdmFsdWU6ayhOKX19KX1mdW5jdGlvbiBOKCl7cmV0dXJuIGxlKGUubnVtYmVyKVsxXX1mdW5jdGlvbiBMKCl7cmV0dXJuIGVlKFwiJVwiLGUucGVyY2VudGFnZVZhbHVlLDEpfHxWKCl8fGRlKCl9ZnVuY3Rpb24gVigpe3JldHVybiBlZShcInBvc2l0aW9uLWtleXdvcmRcIixlLnBvc2l0aW9uS2V5d29yZHMsMSl9ZnVuY3Rpb24gZGUoKXtyZXR1cm4gZWUoXCJweFwiLGUucGl4ZWxWYWx1ZSwxKXx8WShlLmVtTGlrZVZhbHVlLDEpfWZ1bmN0aW9uIFkoQSxPKXt2YXIgTT1sZShBKTtpZihNKXJldHVybnt0eXBlOk1bNV0sdmFsdWU6TVtPXX19ZnVuY3Rpb24gZWUoQSxPLE0pe3ZhciBSPWxlKE8pO2lmKFIpcmV0dXJue3R5cGU6QSx2YWx1ZTpSW01dfX1mdW5jdGlvbiBsZShBKXt2YXIgTyxNO3JldHVybiBNPS9eW1xcblxcclxcdFxcc10rLy5leGVjKHQpLE0mJmhlKE1bMF0ubGVuZ3RoKSxPPUEuZXhlYyh0KSxPJiZoZShPWzBdLmxlbmd0aCksT31mdW5jdGlvbiBoZShBKXt0PXQuc3Vic3RyKEEpfXJldHVybiBmdW5jdGlvbihBKXtyZXR1cm4gdD1BLnRvU3RyaW5nKCkscigpfX0oKTt2YXIgJG49Tm47ZnVuY3Rpb24gQmYoZSl7cmV0dXJuIGUudHlwZT09PVwibGl0ZXJhbFwiP2UudmFsdWU6ZS50eXBlPT09XCJoZXhcIj9gIyR7ZS52YWx1ZX1gOmUudHlwZT09PVwicmdiXCI/YHJnYigke2UudmFsdWUuam9pbihcIixcIil9KWA6ZS50eXBlPT09XCJyZ2JhXCI/YHJnYmEoJHtlLnZhbHVlLmpvaW4oXCIsXCIpfSlgOlwidHJhbnNwYXJlbnRcIn1mdW5jdGlvbiBJZihlKXtsZXQgdD0wLG49MCxyPTAsaT0wO3JldHVybiBlLmluY2x1ZGVzKFwidG9wXCIpP249MTplLmluY2x1ZGVzKFwiYm90dG9tXCIpJiYoaT0xKSxlLmluY2x1ZGVzKFwibGVmdFwiKT90PTE6ZS5pbmNsdWRlcyhcInJpZ2h0XCIpJiYocj0xKSwhdCYmIXImJiFuJiYhaSYmKG49MSksW3QsbixyLGldfWZ1bmN0aW9uIFJmKGUsdCl7cmV0dXJuIHR5cGVvZiBlPT1cInN0cmluZ1wiJiZlLmVuZHNXaXRoKFwiJVwiKT90KnBhcnNlRmxvYXQoZSkvMTAwOitlfWZ1bmN0aW9uIFduKGUse3g6dCx5Om4sZGVmYXVsdFg6cixkZWZhdWx0WTppfSl7cmV0dXJuKGU/ZS5zcGxpdChcIiBcIikubWFwKG89Pnt0cnl7bGV0IHU9bmV3IFFlKG8pO3JldHVybiB1LnR5cGU9PT1cImxlbmd0aFwifHx1LnR5cGU9PT1cIm51bWJlclwiP3UudmFsdWU6dS52YWx1ZSt1LnVuaXR9Y2F0Y2h7cmV0dXJuIG51bGx9fSkuZmlsdGVyKG89Pm8hPT1udWxsKTpbcixpXSkubWFwKChvLHUpPT5SZihvLFt0LG5dW3VdKSl9ZnVuY3Rpb24gQ3UoZSx0LG4pe2xldCByPVtdO2ZvcihsZXQgcyBvZiB0KXtsZXQgYT1CZihzKTtpZighci5sZW5ndGgmJihyLnB1c2goe29mZnNldDowLGNvbG9yOmF9KSx0eXBlb2Ygcy5sZW5ndGg+XCJ1XCJ8fHMubGVuZ3RoLnZhbHVlPT09XCIwXCIpKWNvbnRpbnVlO2xldCBsPXR5cGVvZiBzLmxlbmd0aD5cInVcIj92b2lkIDA6cy5sZW5ndGgudHlwZT09PVwiJVwiP3MubGVuZ3RoLnZhbHVlLzEwMDpzLmxlbmd0aC52YWx1ZS9lO3IucHVzaCh7b2Zmc2V0OmwsY29sb3I6YX0pfXIubGVuZ3RofHxyLnB1c2goe29mZnNldDowLGNvbG9yOlwidHJhbnNwYXJlbnRcIn0pO2xldCBpPXJbci5sZW5ndGgtMV07aS5vZmZzZXQhPT0xJiYodHlwZW9mIGkub2Zmc2V0PlwidVwiP2kub2Zmc2V0PTE6ci5wdXNoKHtvZmZzZXQ6MSxjb2xvcjppLmNvbG9yfSkpO2xldCBvPTAsdT0xO2ZvcihsZXQgcz0wO3M8ci5sZW5ndGg7cysrKWlmKHR5cGVvZiByW3NdLm9mZnNldD5cInVcIil7Zm9yKHU8cyYmKHU9cyk7dHlwZW9mIHJbdV0ub2Zmc2V0PlwidVwiOyl1Kys7cltzXS5vZmZzZXQ9KHJbdV0ub2Zmc2V0LXJbb10ub2Zmc2V0KS8odS1vKSoocy1vKStyW29dLm9mZnNldH1lbHNlIG89cztyZXR1cm4gbj09PVwibWFza1wiP3IubWFwKHM9PntsZXQgYT1QZihzLmNvbG9yKTtyZXR1cm4gYS5hbHBoYT09PTA/ey4uLnMsY29sb3I6XCJyZ2JhKDAsIDAsIDAsIDEpXCJ9OnsuLi5zLGNvbG9yOmByZ2JhKDI1NSwgMjU1LCAyNTUsICR7YS5hbHBoYX0pYH19KTpyfWFzeW5jIGZ1bmN0aW9uIE50KHtpZDplLHdpZHRoOnQsaGVpZ2h0Om4sbGVmdDpyLHRvcDppfSx7aW1hZ2U6byxzaXplOnUscG9zaXRpb246cyxyZXBlYXQ6YX0sbCxmKXthPWF8fFwicmVwZWF0XCIsZj1mfHxcImJhY2tncm91bmRcIjtsZXQgYz1hPT09XCJyZXBlYXQteFwifHxhPT09XCJyZXBlYXRcIixwPWE9PT1cInJlcGVhdC15XCJ8fGE9PT1cInJlcGVhdFwiLGg9V24odSx7eDp0LHk6bixkZWZhdWx0WDp0LGRlZmF1bHRZOm59KSxkPVduKHMse3g6dCx5Om4sZGVmYXVsdFg6MCxkZWZhdWx0WTowfSk7aWYoby5zdGFydHNXaXRoKFwibGluZWFyLWdyYWRpZW50KFwiKSl7bGV0IG09JG4ucGFyc2UobylbMF0sW3YsZ109aCxiLHgsRix5LGs7aWYobS5vcmllbnRhdGlvbi50eXBlPT09XCJkaXJlY3Rpb25hbFwiKVtiLHgsRix5XT1JZihtLm9yaWVudGF0aW9uLnZhbHVlKSxrPU1hdGguc3FydChNYXRoLnBvdygoRi1iKSp2LDIpK01hdGgucG93KCh5LXgpKmcsMikpO2Vsc2UgaWYobS5vcmllbnRhdGlvbi50eXBlPT09XCJhbmd1bGFyXCIpe2xldCBOPWZ1bmN0aW9uKEwpe2lmKEw9KEwlKE1hdGguUEkqMikrTWF0aC5QSSoyKSUoTWF0aC5QSSoyKSxNYXRoLmFicyhMLU1hdGguUEkvMik8MWUtNil7Yj0wLHg9MCxGPTEseT0wLGs9djtyZXR1cm59ZWxzZSBpZihNYXRoLmFicyhMKTwxZS02KXtiPTAseD0xLEY9MCx5PTAsaz1nO3JldHVybn1pZihMPj1NYXRoLlBJLzImJkw8TWF0aC5QSSl7TihNYXRoLlBJLUwpLHg9MS14LHk9MS15O3JldHVybn1lbHNlIGlmKEw+PU1hdGguUEkpe04oTC1NYXRoLlBJKTtsZXQgTT1iO2I9RixGPU0sTT14LHg9eSx5PU07cmV0dXJufWxldCBWPU1hdGgudGFuKEwpLGRlPVYqc2UsWT1NYXRoLmF0YW4oZGUpLGVlPU1hdGguc3FydCgyKSpNYXRoLmNvcyhNYXRoLlBJLzQtWSk7Yj0wLHg9MSxGPU1hdGguc2luKFkpKmVlLHk9MS1NYXRoLmNvcyhZKSplZTtsZXQgbGU9MSxoZT0xL1YsQT1NYXRoLmFicygobGUqc2UraGUpL01hdGguc3FydChsZSpsZStoZSpoZSkvTWF0aC5zcXJ0KHNlKnNlKzEpKTtrPU1hdGguc3FydCh2KnYrZypnKSpBfSxzZT12L2c7TigrbS5vcmllbnRhdGlvbi52YWx1ZS8xODAqTWF0aC5QSSl9bGV0IFA9Q3UoayxtLmNvbG9yU3RvcHMsZiksQj1gc2F0b3JpX2JpJHtlfWAsaj1gc2F0b3JpX3BhdHRlcm5fJHtlfWAsb2U9QyhcInBhdHRlcm5cIix7aWQ6aix4OmRbMF0vdCx5OmRbMV0vbix3aWR0aDpjP3YvdDpcIjFcIixoZWlnaHQ6cD9nL246XCIxXCIscGF0dGVyblVuaXRzOlwib2JqZWN0Qm91bmRpbmdCb3hcIn0sQyhcImxpbmVhckdyYWRpZW50XCIse2lkOkIseDE6Yix5MTp4LHgyOkYseTI6eX0sUC5tYXAodWU9PkMoXCJzdG9wXCIse29mZnNldDp1ZS5vZmZzZXQqMTAwK1wiJVwiLFwic3RvcC1jb2xvclwiOnVlLmNvbG9yfSkpLmpvaW4oXCJcIikpK0MoXCJyZWN0XCIse3g6MCx5OjAsd2lkdGg6dixoZWlnaHQ6ZyxmaWxsOmB1cmwoIyR7Qn0pYH0pKTtyZXR1cm5baixvZV19aWYoby5zdGFydHNXaXRoKFwicmFkaWFsLWdyYWRpZW50KFwiKSl7bGV0IG09JG4ucGFyc2UobylbMF0sdj1tLm9yaWVudGF0aW9uWzBdLFtnLGJdPWgseD1cImNpcmNsZVwiLEY9Zy8yLHk9Yi8yO2lmKHYudHlwZT09PVwic2hhcGVcIil7aWYoeD12LnZhbHVlLHYuYXQpaWYodi5hdC50eXBlPT09XCJwb3NpdGlvblwiKXtsZXQgTj1MZih2LmF0LnZhbHVlLngsdi5hdC52YWx1ZS55LGcsYixsLmZvbnRTaXplLGwpO0Y9Ti54LHk9Ti55fWVsc2UgdGhyb3cgbmV3IEVycm9yKFwib3JpZW50YXRpb24uYXQudHlwZSBub3QgaW1wbGVtZW50ZWQ6IFwiK3YuYXQudHlwZSl9ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJvcmllbnRhdGlvbi50eXBlIG5vdCBpbXBsZW1lbnRlZDogXCIrdi50eXBlKTtsZXQgaz1DdSh0LG0uY29sb3JTdG9wcyxmKSxQPWBzYXRvcmlfcmFkaWFsXyR7ZX1gLEI9YHNhdG9yaV9wYXR0ZXJuXyR7ZX1gLGo9YHNhdG9yaV9tYXNrXyR7ZX1gLG9lPU1mKHgsdi5zdHlsZSxsLmZvbnRTaXplLHt4OkYseX0sW2csYl0sbCksdWU9QyhcInBhdHRlcm5cIix7aWQ6Qix4OmRbMF0vdCx5OmRbMV0vbix3aWR0aDpjP2cvdDpcIjFcIixoZWlnaHQ6cD9iL246XCIxXCIscGF0dGVyblVuaXRzOlwib2JqZWN0Qm91bmRpbmdCb3hcIn0sQyhcInJhZGlhbEdyYWRpZW50XCIse2lkOlB9LGsubWFwKE49PkMoXCJzdG9wXCIse29mZnNldDpOLm9mZnNldCxcInN0b3AtY29sb3JcIjpOLmNvbG9yfSkpLmpvaW4oXCJcIikpK0MoXCJtYXNrXCIse2lkOmp9LEMoXCJyZWN0XCIse3g6MCx5OjAsd2lkdGg6ZyxoZWlnaHQ6YixmaWxsOlwiI2ZmZlwifSkpK0MoXCJyZWN0XCIse3g6MCx5OjAsd2lkdGg6ZyxoZWlnaHQ6YixmaWxsOmsuYXQoLTEpLmNvbG9yfSkrQyh4LHtjeDpGLGN5Onksd2lkdGg6ZyxoZWlnaHQ6YiwuLi5vZSxmaWxsOmB1cmwoIyR7UH0pYCxtYXNrOmB1cmwoIyR7an0pYH0pKTtyZXR1cm5bQix1ZV19aWYoby5zdGFydHNXaXRoKFwidXJsKFwiKSl7bGV0IG09V24odSx7eDp0LHk6bixkZWZhdWx0WDowLGRlZmF1bHRZOjB9KSxbdixnLGJdPWF3YWl0IHl0KG8uc2xpY2UoNCwtMSkpLHg9Zj09PVwibWFza1wiP2d8fG1bMF06bVswXXx8ZyxGPWY9PT1cIm1hc2tcIj9ifHxtWzFdOm1bMV18fGI7cmV0dXJuW2BzYXRvcmlfYmkke2V9YCxDKFwicGF0dGVyblwiLHtpZDpgc2F0b3JpX2JpJHtlfWAscGF0dGVybkNvbnRlbnRVbml0czpcInVzZXJTcGFjZU9uVXNlXCIscGF0dGVyblVuaXRzOlwidXNlclNwYWNlT25Vc2VcIix4OmRbMF0rcix5OmRbMV0raSx3aWR0aDpjP3g6XCIxMDAlXCIsaGVpZ2h0OnA/RjpcIjEwMCVcIn0sQyhcImltYWdlXCIse3g6MCx5OjAsd2lkdGg6eCxoZWlnaHQ6RixwcmVzZXJ2ZUFzcGVjdFJhdGlvOlwibm9uZVwiLGhyZWY6dn0pKV19dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGJhY2tncm91bmQgaW1hZ2U6IFwiJHtvfVwiYCl9ZnVuY3Rpb24gTGYoZSx0LG4scixpLG8pe2xldCB1PXt4Om4vMix5OnIvMn07cmV0dXJuIGUudHlwZT09PVwicG9zaXRpb24ta2V5d29yZFwiP09iamVjdC5hc3NpZ24odSxfdShlLnZhbHVlLG4scixcInhcIikpOnUueD1xKGAke2UudmFsdWV9JHtlLnR5cGV9YCxpLG4sbywhMCksdC50eXBlPT09XCJwb3NpdGlvbi1rZXl3b3JkXCI/T2JqZWN0LmFzc2lnbih1LF91KHQudmFsdWUsbixyLFwieVwiKSk6dS55PXEoYCR7dC52YWx1ZX0ke3QudHlwZX1gLGkscixvLCEwKSx1fWZ1bmN0aW9uIF91KGUsdCxuLHIpe3N3aXRjaChlKXtjYXNlXCJjZW50ZXJcIjpyZXR1cm57W3JdOnI9PT1cInhcIj90LzI6bi8yfTtjYXNlXCJsZWZ0XCI6cmV0dXJue3g6MH07Y2FzZVwidG9wXCI6cmV0dXJue3k6MH07Y2FzZVwicmlnaHRcIjpyZXR1cm57eDp0fTtjYXNlXCJib3R0b21cIjpyZXR1cm57eTpufX19ZnVuY3Rpb24gTWYoZSx0LG4scixpLG8pe2xldFt1LHNdPWkse3g6YSx5Omx9PXIsZj17fSxjPTAscD0wO2lmKCF0LnNvbWUoZD0+ZC50eXBlPT09XCJleHRlbnQta2V5d29yZFwiKSl7aWYodC5zb21lKGQ9PmQudmFsdWUuc3RhcnRzV2l0aChcIi1cIikpKXRocm93IG5ldyBFcnJvcihcImRpc2FsbG93IHNldHRpbmcgbmVnYXRpdmUgdmFsdWVzIHRvIHRoZSBzaXplIG9mIHRoZSBzaGFwZS4gQ2hlY2sgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2Nzc3dnLWRyYWZ0cy9jc3MtaW1hZ2VzLyN2YWxkZWYtcmctc2l6ZS1sZW5ndGgtMFwiKTtyZXR1cm4gZT09PVwiY2lyY2xlXCI/e3I6cShgJHt0WzBdLnZhbHVlfSR7dFswXS50eXBlfWAsbix1LG8sITApfTp7cng6cShgJHt0WzBdLnZhbHVlfSR7dFswXS50eXBlfWAsbix1LG8sITApLHJ5OnEoYCR7dFsxXS52YWx1ZX0ke3RbMV0udHlwZX1gLG4scyxvLCEwKX19c3dpdGNoKHRbMF0udmFsdWUpe2Nhc2VcImZhcnRoZXN0LWNvcm5lclwiOmM9TWF0aC5tYXgoTWF0aC5hYnModS1hKSxNYXRoLmFicyhhKSkscD1NYXRoLm1heChNYXRoLmFicyhzLWwpLE1hdGguYWJzKGwpKTticmVhaztjYXNlXCJjbG9zZXN0LWNvcm5lclwiOmM9TWF0aC5taW4oTWF0aC5hYnModS1hKSxNYXRoLmFicyhhKSkscD1NYXRoLm1pbihNYXRoLmFicyhzLWwpLE1hdGguYWJzKGwpKTticmVhaztjYXNlXCJmYXJ0aGVzdC1zaWRlXCI6cmV0dXJuIGU9PT1cImNpcmNsZVwiP2Yucj1NYXRoLm1heChNYXRoLmFicyh1LWEpLE1hdGguYWJzKGEpLE1hdGguYWJzKHMtbCksTWF0aC5hYnMobCkpOihmLnJ4PU1hdGgubWF4KE1hdGguYWJzKHUtYSksTWF0aC5hYnMoYSkpLGYucnk9TWF0aC5tYXgoTWF0aC5hYnMocy1sKSxNYXRoLmFicyhsKSkpLGY7Y2FzZVwiY2xvc2VzdC1zaWRlXCI6cmV0dXJuIGU9PT1cImNpcmNsZVwiP2Yucj1NYXRoLm1pbihNYXRoLmFicyh1LWEpLE1hdGguYWJzKGEpLE1hdGguYWJzKHMtbCksTWF0aC5hYnMobCkpOihmLnJ4PU1hdGgubWluKE1hdGguYWJzKHUtYSksTWF0aC5hYnMoYSkpLGYucnk9TWF0aC5taW4oTWF0aC5hYnMocy1sKSxNYXRoLmFicyhsKSkpLGZ9aWYoZT09PVwiY2lyY2xlXCIpZi5yPU1hdGguc3FydChjKmMrcCpwKTtlbHNle2xldCBkPXAhPT0wP2MvcDoxO2M9PT0wPyhmLnJ4PTAsZi5yeT0wKTooZi5yeT1NYXRoLnNxcnQoYypjK3AqcCpkKmQpL2QsZi5yeD1mLnJ5KmQpfXJldHVybiBmfWZ1bmN0aW9uIE5mKFtlLHRdKXtyZXR1cm4gTWF0aC5yb3VuZChlKjFlMyk9PT0wJiZNYXRoLnJvdW5kKHQqMWUzKT09PTA/MDpNYXRoLnJvdW5kKGUqdC9NYXRoLnNxcnQoZSplK3QqdCkqMWUzKS8xZTN9ZnVuY3Rpb24genIoZSx0LG4pe3JldHVybiBuPGUrdCYmKG4vMjxlJiZuLzI8dD9lPXQ9bi8yOm4vMjxlP2U9bi10Om4vMjx0JiYodD1uLWUpKSxbZSx0XX1mdW5jdGlvbiBHcihlKXtlWzBdPWVbMV09TWF0aC5taW4oZVswXSxlWzFdKX1mdW5jdGlvbiBqcihlLHQsbixyLGkpe2lmKHR5cGVvZiBlPT1cInN0cmluZ1wiKXtsZXQgbz1lLnNwbGl0KFwiIFwiKS5tYXAocz0+cy50cmltKCkpLHU9IW9bMV0mJiFvWzBdLmVuZHNXaXRoKFwiJVwiKTtyZXR1cm4gb1sxXT1vWzFdfHxvWzBdLFt1LFtNYXRoLm1pbihxKG9bMF0scix0LGksITApLHQpLE1hdGgubWluKHEob1sxXSxyLG4saSwhMCksbildXX1yZXR1cm4gdHlwZW9mIGU9PVwibnVtYmVyXCI/WyEwLFtNYXRoLm1pbihlLHQpLE1hdGgubWluKGUsbildXTpbITAsdm9pZCAwXX12YXIgSHI9ZT0+ZSYmZVswXSE9PTAmJmVbMV0hPT0wO2Z1bmN0aW9uIEplKHtsZWZ0OmUsdG9wOnQsd2lkdGg6bixoZWlnaHQ6cn0saSxvKXtsZXR7Ym9yZGVyVG9wTGVmdFJhZGl1czp1LGJvcmRlclRvcFJpZ2h0UmFkaXVzOnMsYm9yZGVyQm90dG9tTGVmdFJhZGl1czphLGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOmwsZm9udFNpemU6Zn09aSxjLHAsaCxkO2lmKFtjLHVdPWpyKHUsbixyLGYsaSksW3Asc109anIocyxuLHIsZixpKSxbaCxhXT1qcihhLG4scixmLGkpLFtkLGxdPWpyKGwsbixyLGYsaSksIW8mJiFIcih1KSYmIUhyKHMpJiYhSHIoYSkmJiFIcihsKSlyZXR1cm5cIlwiO3V8fD1bMCwwXSxzfHw9WzAsMF0sYXx8PVswLDBdLGx8fD1bMCwwXSxbdVswXSxzWzBdXT16cih1WzBdLHNbMF0sbiksW2FbMF0sbFswXV09enIoYVswXSxsWzBdLG4pLFt1WzFdLGFbMV1dPXpyKHVbMV0sYVsxXSxyKSxbc1sxXSxsWzFdXT16cihzWzFdLGxbMV0sciksYyYmR3IodSkscCYmR3IocyksaCYmR3IoYSksZCYmR3IobCk7bGV0IG09W107bVswXT1bcyxzXSxtWzFdPVtsLFstbFswXSxsWzFdXV0sbVsyXT1bYSxbLWFbMF0sLWFbMV1dXSxtWzNdPVt1LFt1WzBdLC11WzFdXV07bGV0IHY9YGgke24tdVswXS1zWzBdfSBhJHttWzBdWzBdfSAwIDAgMSAke21bMF1bMV19YCxnPWB2JHtyLXNbMV0tbFsxXX0gYSR7bVsxXVswXX0gMCAwIDEgJHttWzFdWzFdfWAsYj1gaCR7bFswXSthWzBdLW59IGEke21bMl1bMF19IDAgMCAxICR7bVsyXVsxXX1gLHg9YHYke2FbMV0rdVsxXS1yfSBhJHttWzNdWzBdfSAwIDAgMSAke21bM11bMV19YDtpZihvKXtsZXQgeT1mdW5jdGlvbihzZSl7bGV0IE49TmYoW3UscyxsLGFdW3NlXSk7cmV0dXJuIHNlPT09MD9bW2UrdVswXS1OLHQrdVsxXS1OXSxbZSt1WzBdLHRdXTpzZT09PTE/W1tlK24tc1swXStOLHQrc1sxXS1OXSxbZStuLHQrc1sxXV1dOnNlPT09Mj9bW2Urbi1sWzBdK04sdCtyLWxbMV0rTl0sW2Urbi1sWzBdLHQrcl1dOltbZSthWzBdLU4sdCtyLWFbMV0rTl0sW2UsdCtyLWFbMV1dXX0sRj1vLmluZGV4T2YoITEpO2lmKCFvLmluY2x1ZGVzKCEwKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGBwYXJ0aWFsU2lkZXNgLlwiKTtpZihGPT09LTEpRj0wO2Vsc2UgZm9yKDshb1tGXTspRj0oRisxKSU0O2xldCBrPVwiXCIsUD15KEYpLEI9YE0ke1BbMF19IEEke21bKEYrMyklNF1bMF19IDAgMCAxICR7UFsxXX1gLGo9MDtmb3IoO2o8NCYmb1soRitqKSU0XTtqKyspays9QitcIiBcIixCPVt2LGcsYix4XVsoRitqKSU0XTtsZXQgb2U9KEYraiklNDtrKz1CLnNwbGl0KFwiIFwiKVswXTtsZXQgdWU9eShvZSk7cmV0dXJuIGsrPWAgQSR7bVsob2UrMyklNF1bMF19IDAgMCAxICR7dWVbMF19YCxrfXJldHVybmBNJHtlK3VbMF19LCR7dH0gJHt2fSAke2d9ICR7Yn0gJHt4fWB9ZnVuY3Rpb24gU3UoZSx0LG4pe3JldHVybiBuW2UrXCJXaWR0aFwiXT09PW5bdCtcIldpZHRoXCJdJiZuW2UrXCJTdHlsZVwiXT09PW5bdCtcIlN0eWxlXCJdJiZuW2UrXCJDb2xvclwiXT09PW5bdCtcIkNvbG9yXCJdfWZ1bmN0aW9uIGt1KHtpZDplLGN1cnJlbnRDbGlwUGF0aElkOnQsYm9yZGVyUGF0aDpuLGJvcmRlclR5cGU6cixsZWZ0OmksdG9wOm8sd2lkdGg6dSxoZWlnaHQ6c30sYSl7aWYoIShhLmJvcmRlclRvcFdpZHRofHxhLmJvcmRlclJpZ2h0V2lkdGh8fGEuYm9yZGVyQm90dG9tV2lkdGh8fGEuYm9yZGVyTGVmdFdpZHRoKSlyZXR1cm4gbnVsbDtsZXQgZj1gc2F0b3JpX2JjLSR7ZX1gO3JldHVybltDKFwiY2xpcFBhdGhcIix7aWQ6ZixcImNsaXAtcGF0aFwiOnQ/YHVybCgjJHt0fSlgOnZvaWQgMH0sQyhyLHt4OmkseTpvLHdpZHRoOnUsaGVpZ2h0OnMsZDpufHx2b2lkIDB9KSksZl19ZnVuY3Rpb24gJHQoe2xlZnQ6ZSx0b3A6dCx3aWR0aDpuLGhlaWdodDpyLHByb3BzOmksYXNDb250ZW50TWFzazpvLG1hc2tCb3JkZXJPbmx5OnV9LHMpe2xldCBhPVtcImJvcmRlclRvcFwiLFwiYm9yZGVyUmlnaHRcIixcImJvcmRlckJvdHRvbVwiLFwiYm9yZGVyTGVmdFwiXTtpZighbyYmIWEuc29tZShoPT5zW2grXCJXaWR0aFwiXSkpcmV0dXJuXCJcIjtsZXQgbD1cIlwiLGY9MDtmb3IoO2Y+MCYmU3UoYVtmXSxhWyhmKzMpJTRdLHMpOylmPShmKzMpJTQ7bGV0IGM9WyExLCExLCExLCExXSxwPVtdO2ZvcihsZXQgaD0wO2g8NDtoKyspe2xldCBkPShmK2gpJTQsbT0oZitoKzEpJTQsdj1hW2RdLGc9YVttXTtpZihjW2RdPSEwLHA9W3NbditcIldpZHRoXCJdLHNbditcIlN0eWxlXCJdLHNbditcIkNvbG9yXCJdLHZdLCFTdSh2LGcscykpe2xldCBiPShwWzBdfHwwKSsobyYmIXUmJnNbdi5yZXBsYWNlKFwiYm9yZGVyXCIsXCJwYWRkaW5nXCIpXXx8MCk7YiYmKGwrPUMoXCJwYXRoXCIse3dpZHRoOm4saGVpZ2h0OnIsLi4uaSxmaWxsOlwibm9uZVwiLHN0cm9rZTpvP1wiIzAwMFwiOnBbMl0sXCJzdHJva2Utd2lkdGhcIjpiKjIsXCJzdHJva2UtZGFzaGFycmF5XCI6IW8mJnBbMV09PT1cImRhc2hlZFwiP2IqMitcIiBcIitiOnZvaWQgMCxkOkplKHtsZWZ0OmUsdG9wOnQsd2lkdGg6bixoZWlnaHQ6cn0scyxjKX0pKSxjPVshMSwhMSwhMSwhMV19fWlmKGMuc29tZShCb29sZWFuKSl7bGV0IGg9KHBbMF18fDApKyhvJiYhdSYmc1twWzNdLnJlcGxhY2UoXCJib3JkZXJcIixcInBhZGRpbmdcIildfHwwKTtoJiYobCs9QyhcInBhdGhcIix7d2lkdGg6bixoZWlnaHQ6ciwuLi5pLGZpbGw6XCJub25lXCIsc3Ryb2tlOm8/XCIjMDAwXCI6cFsyXSxcInN0cm9rZS13aWR0aFwiOmgqMixcInN0cm9rZS1kYXNoYXJyYXlcIjohbyYmcFsxXT09PVwiZGFzaGVkXCI/aCoyK1wiIFwiK2g6dm9pZCAwLGQ6SmUoe2xlZnQ6ZSx0b3A6dCx3aWR0aDpuLGhlaWdodDpyfSxzLGMpfSkpfXJldHVybiBsfWZ1bmN0aW9uIHFuKHtpZDplLGxlZnQ6dCx0b3A6bix3aWR0aDpyLGhlaWdodDppLG1hdHJpeDpvLGJvcmRlck9ubHk6dX0scyl7bGV0IGE9KHMuYm9yZGVyTGVmdFdpZHRofHwwKSsodT8wOnMucGFkZGluZ0xlZnR8fDApLGw9KHMuYm9yZGVyVG9wV2lkdGh8fDApKyh1PzA6cy5wYWRkaW5nVG9wfHwwKSxmPShzLmJvcmRlclJpZ2h0V2lkdGh8fDApKyh1PzA6cy5wYWRkaW5nUmlnaHR8fDApLGM9KHMuYm9yZGVyQm90dG9tV2lkdGh8fDApKyh1PzA6cy5wYWRkaW5nQm90dG9tfHwwKSxwPXt4OnQrYSx5Om4rbCx3aWR0aDpyLWEtZixoZWlnaHQ6aS1sLWN9O3JldHVybiBDKFwibWFza1wiLHtpZDplfSxDKFwicmVjdFwiLHsuLi5wLGZpbGw6XCIjZmZmXCIsbWFzazpzLl9pbmhlcml0ZWRNYXNrSWQ/YHVybCgjJHtzLl9pbmhlcml0ZWRNYXNrSWR9KWA6dm9pZCAwfSkrJHQoe2xlZnQ6dCx0b3A6bix3aWR0aDpyLGhlaWdodDppLHByb3BzOnt0cmFuc2Zvcm06b3x8dm9pZCAwfSxhc0NvbnRlbnRNYXNrOiEwLG1hc2tCb3JkZXJPbmx5OnV9LHMpKX1pbXBvcnR7Z2V0U3R5bGVzRm9yUHJvcGVydHkgYXMgVHV9ZnJvbVwiY3NzLXRvLXJlYWN0LW5hdGl2ZVwiO3ZhciBXdD17Y2lyY2xlOi9jaXJjbGVcXCgoLispXFwpLyxlbGxpcHNlOi9lbGxpcHNlXFwoKC4rKVxcKS8scGF0aDovcGF0aFxcKCguKylcXCkvLHBvbHlnb246L3BvbHlnb25cXCgoLispXFwpLyxpbnNldDovaW5zZXRcXCgoLispXFwpL307ZnVuY3Rpb24gUHUoe3dpZHRoOmUsaGVpZ2h0OnR9LG4scil7ZnVuY3Rpb24gaShsKXtsZXQgZj1sLm1hdGNoKFd0LmNpcmNsZSk7aWYoIWYpcmV0dXJuIG51bGw7bGV0WyxjXT1mLFtwLGg9XCJcIl09Yy5zcGxpdChcImF0XCIpLm1hcCh2PT52LnRyaW0oKSkse3g6ZCx5Om19PU91KGgsZSx0KTtyZXR1cm57dHlwZTpcImNpcmNsZVwiLHI6cShwLHIuZm9udFNpemUsTWF0aC5zcXJ0KE1hdGgucG93KGUsMikrTWF0aC5wb3codCwyKSkvTWF0aC5zcXJ0KDIpLHIsITApLGN4OnEoZCxyLmZvbnRTaXplLGUsciwhMCksY3k6cShtLHIuZm9udFNpemUsdCxyLCEwKX19ZnVuY3Rpb24gbyhsKXtsZXQgZj1sLm1hdGNoKFd0LmVsbGlwc2UpO2lmKCFmKXJldHVybiBudWxsO2xldFssY109ZixbcCxoPVwiXCJdPWMuc3BsaXQoXCJhdFwiKS5tYXAoYj0+Yi50cmltKCkpLFtkLG1dPXAuc3BsaXQoXCIgXCIpLHt4OnYseTpnfT1PdShoLGUsdCk7cmV0dXJue3R5cGU6XCJlbGxpcHNlXCIscng6cShkfHxcIjUwJVwiLHIuZm9udFNpemUsZSxyLCEwKSxyeTpxKG18fFwiNTAlXCIsci5mb250U2l6ZSx0LHIsITApLGN4OnEodixyLmZvbnRTaXplLGUsciwhMCksY3k6cShnLHIuZm9udFNpemUsdCxyLCEwKX19ZnVuY3Rpb24gdShsKXtsZXQgZj1sLm1hdGNoKFd0LnBhdGgpO2lmKCFmKXJldHVybiBudWxsO2xldFtjLHBdPUF1KGZbMV0pO3JldHVybnt0eXBlOlwicGF0aFwiLGQ6cCxcImZpbGwtcnVsZVwiOmN9fWZ1bmN0aW9uIHMobCl7bGV0IGY9bC5tYXRjaChXdC5wb2x5Z29uKTtpZighZilyZXR1cm4gbnVsbDtsZXRbYyxwXT1BdShmWzFdKTtyZXR1cm57dHlwZTpcInBvbHlnb25cIixcImZpbGwtcnVsZVwiOmMscG9pbnRzOnAuc3BsaXQoXCIsXCIpLm1hcChoPT5oLnNwbGl0KFwiIFwiKS5tYXAoKGQsbSk9PnEoZCxyLmZvbnRTaXplLG09PT0wP2U6dCxyLCEwKSkuam9pbihcIiBcIikpLmpvaW4oXCIsXCIpfX1mdW5jdGlvbiBhKGwpe2xldCBmPWwubWF0Y2goV3QuaW5zZXQpO2lmKCFmKXJldHVybiBudWxsO2xldFtjLHBdPShmWzFdLmluY2x1ZGVzKFwicm91bmRcIik/ZlsxXTpgJHtmWzFdLnRyaW0oKX0gcm91bmQgMGApLnNwbGl0KFwicm91bmRcIiksaD1UdShcImJvcmRlclJhZGl1c1wiLHAsITApLGQ9T2JqZWN0LnZhbHVlcyhoKS5tYXAoRj0+U3RyaW5nKEYpKS5tYXAoKEYseSk9PnEoRixyLmZvbnRTaXplLHk9PT0wfHx5PT09Mj90OmUsciwhMCl8fDApLG09T2JqZWN0LnZhbHVlcyhUdShcIm1hcmdpblwiLGMsITApKS5tYXAoRj0+U3RyaW5nKEYpKS5tYXAoKEYseSk9PnEoRixyLmZvbnRTaXplLHk9PT0wfHx5PT09Mj90OmUsciwhMCl8fDApLHY9bVszXSxnPW1bMF0sYj1lLShtWzFdK21bM10pLHg9dC0obVswXSttWzJdKTtyZXR1cm4gZC5zb21lKEY9PkY+MCk/e3R5cGU6XCJwYXRoXCIsZDpKZSh7bGVmdDp2LHRvcDpnLHdpZHRoOmIsaGVpZ2h0Onh9LHsuLi5uLC4uLmh9KX06e3R5cGU6XCJyZWN0XCIseDp2LHk6Zyx3aWR0aDpiLGhlaWdodDp4fX1yZXR1cm57cGFyc2VDaXJjbGU6aSxwYXJzZUVsbGlwc2U6byxwYXJzZVBhdGg6dSxwYXJzZVBvbHlnb246cyxwYXJzZUluc2V0OmF9fWZ1bmN0aW9uIEF1KGUpe2xldFssdD1cIm5vbnplcm9cIixuXT1lLnJlcGxhY2UoLygnfFwiKS9nLFwiXCIpLm1hdGNoKC9eKG5vbnplcm98ZXZlbm9kZCk/LD8oLispLyl8fFtdO3JldHVyblt0LG5dfWZ1bmN0aW9uIE91KGUsdCxuKXtsZXQgcj1lLnNwbGl0KFwiIFwiKSxpPXt4OnJbMF18fFwiNTAlXCIseTpyWzFdfHxcIjUwJVwifTtyZXR1cm4gci5mb3JFYWNoKG89PntvPT09XCJ0b3BcIj9pLnk9MDpvPT09XCJib3R0b21cIj9pLnk9bjpvPT09XCJsZWZ0XCI/aS54PTA6bz09PVwicmlnaHRcIj9pLng9dDpvPT09XCJjZW50ZXJcIiYmKGkueD10LzIsaS55PW4vMil9KSxpfWZ1bmN0aW9uIFZyKGUpe3JldHVybmBzYXRvcmlfY3AtJHtlfWB9ZnVuY3Rpb24gQnUoZSl7cmV0dXJuYHVybCgjJHtWcihlKX0pYH1mdW5jdGlvbiBJdShlLHQsbil7aWYodC5jbGlwUGF0aD09PVwibm9uZVwiKXJldHVyblwiXCI7bGV0IHI9UHUoZSx0LG4pLGk9dC5jbGlwUGF0aCxvPXt0eXBlOlwiXCJ9O2ZvcihsZXQgdSBvZiBPYmplY3Qua2V5cyhyKSlpZihvPXJbdV0oaSksbylicmVhaztpZihvKXtsZXR7dHlwZTp1LC4uLnN9PW87cmV0dXJuIEMoXCJjbGlwUGF0aFwiLHtpZDpWcihlLmlkKSxcImNsaXAtcGF0aFwiOmUuY3VycmVudENsaXBQYXRoLHRyYW5zZm9ybTpgdHJhbnNsYXRlKCR7ZS5sZWZ0fSwgJHtlLnRvcH0pYH0sQyh1LHMpKX1yZXR1cm5cIlwifWZ1bmN0aW9uIFVuKHtsZWZ0OmUsdG9wOnQsd2lkdGg6bixoZWlnaHQ6cixwYXRoOmksbWF0cml4Om8saWQ6dSxjdXJyZW50Q2xpcFBhdGg6cyxzcmM6YX0sbCxmKXtsZXQgYz1cIlwiLHA9bC5jbGlwUGF0aCYmbC5jbGlwUGF0aCE9PVwibm9uZVwiP0l1KHtsZWZ0OmUsdG9wOnQsd2lkdGg6bixoZWlnaHQ6cixwYXRoOmksaWQ6dSxtYXRyaXg6byxjdXJyZW50Q2xpcFBhdGg6cyxzcmM6YX0sbCxmKTpcIlwiO2lmKGwub3ZlcmZsb3chPT1cImhpZGRlblwiJiYhYSljPVwiXCI7ZWxzZXtsZXQgZD1wP2BzYXRvcmlfb2NwLSR7dX1gOlZyKHUpO2M9QyhcImNsaXBQYXRoXCIse2lkOmQsXCJjbGlwLXBhdGhcIjpzfSxDKGk/XCJwYXRoXCI6XCJyZWN0XCIse3g6ZSx5OnQsd2lkdGg6bixoZWlnaHQ6cixkOml8fHZvaWQgMH0pKX1sZXQgaD1xbih7aWQ6YHNhdG9yaV9vbS0ke3V9YCxsZWZ0OmUsdG9wOnQsd2lkdGg6bixoZWlnaHQ6cixtYXRyaXg6byxib3JkZXJPbmx5OiFhfSxsKTtyZXR1cm4gcCtjK2h9dmFyICRmPWU9PmBzYXRvcmlfbWktJHtlfWA7YXN5bmMgZnVuY3Rpb24gem4oZSx0LG4pe2lmKCF0Lm1hc2tJbWFnZSlyZXR1cm5bXCJcIixcIlwiXTtsZXR7bGVmdDpyLHRvcDppLHdpZHRoOm8saGVpZ2h0OnUsaWQ6c309ZSxhPXQubWFza0ltYWdlLGw9YS5sZW5ndGg7aWYoIWwpcmV0dXJuW1wiXCIsXCJcIl07bGV0IGY9JGYocyksYz1cIlwiO2ZvcihsZXQgcD0wO3A8bDtwKyspe2xldCBoPWFbcF0sW2QsbV09YXdhaXQgTnQoe2lkOmAke2Z9LSR7cH1gLGxlZnQ6cix0b3A6aSx3aWR0aDpvLGhlaWdodDp1fSxoLG4sXCJtYXNrXCIpO2MrPW0rQyhcInJlY3RcIix7eDowLHk6MCx3aWR0aDpvLGhlaWdodDp1LGZpbGw6YHVybCgjJHtkfSlgfSl9cmV0dXJuIGM9QyhcIm1hc2tcIix7aWQ6Zn0sYyksW2YsY119YXN5bmMgZnVuY3Rpb24gcXQoe2lkOmUsbGVmdDp0LHRvcDpuLHdpZHRoOnIsaGVpZ2h0OmksaXNJbmhlcml0aW5nVHJhbnNmb3JtOm8sc3JjOnUsZGVidWc6c30sYSxsKXtpZihhLmRpc3BsYXk9PT1cIm5vbmVcIilyZXR1cm5cIlwiO2xldCBmPSEhdSxjPVwicmVjdFwiLHA9XCJcIixoPVwiXCIsZD1bXSxtPTEsdj1cIlwiO2EuYmFja2dyb3VuZENvbG9yJiZkLnB1c2goYS5iYWNrZ3JvdW5kQ29sb3IpLGEub3BhY2l0eSE9PXZvaWQgMCYmKG09K2Eub3BhY2l0eSksYS50cmFuc2Zvcm0mJihwPVJ0KHtsZWZ0OnQsdG9wOm4sd2lkdGg6cixoZWlnaHQ6aX0sYS50cmFuc2Zvcm0sbyxhLnRyYW5zZm9ybU9yaWdpbikpO2xldCBnPVwiXCI7aWYoYS5iYWNrZ3JvdW5kSW1hZ2Upe2xldCBMPVtdO2ZvcihsZXQgVj0wO1Y8YS5iYWNrZ3JvdW5kSW1hZ2UubGVuZ3RoO1YrKyl7bGV0IGRlPWEuYmFja2dyb3VuZEltYWdlW1ZdLFk9YXdhaXQgTnQoe2lkOmUrXCJfXCIrVix3aWR0aDpyLGhlaWdodDppLGxlZnQ6dCx0b3A6bn0sZGUsbCk7WSYmTC51bnNoaWZ0KFkpfWZvcihsZXQgViBvZiBMKWQucHVzaChgdXJsKCMke1ZbMF19KWApLGgrPVZbMV0sVlsyXSYmKGcrPVZbMl0pfWxldFtiLHhdPWF3YWl0IHpuKHtpZDplLGxlZnQ6dCx0b3A6bix3aWR0aDpyLGhlaWdodDppfSxhLGwpO2grPXg7bGV0IEY9Yj9gdXJsKCMke2J9KWA6YS5faW5oZXJpdGVkTWFza0lkP2B1cmwoIyR7YS5faW5oZXJpdGVkTWFza0lkfSlgOnZvaWQgMCx5PUplKHtsZWZ0OnQsdG9wOm4sd2lkdGg6cixoZWlnaHQ6aX0sYSk7eSYmKGM9XCJwYXRoXCIpO2xldCBrPWEuX2luaGVyaXRlZENsaXBQYXRoSWQ7cyYmKHY9QyhcInJlY3RcIix7eDp0LHk6bix3aWR0aDpyLGhlaWdodDppLGZpbGw6XCJ0cmFuc3BhcmVudFwiLHN0cm9rZTpcIiNmZjU3NTdcIixcInN0cm9rZS13aWR0aFwiOjEsdHJhbnNmb3JtOnB8fHZvaWQgMCxcImNsaXAtcGF0aFwiOms/YHVybCgjJHtrfSlgOnZvaWQgMH0pKTtsZXR7YmFja2dyb3VuZENsaXA6UCxmaWx0ZXI6Qn09YSxqPVA9PT1cInRleHRcIj9gdXJsKCNzYXRvcmlfYmN0LSR7ZX0pYDprP2B1cmwoIyR7a30pYDphLmNsaXBQYXRoP0J1KGUpOnZvaWQgMCxvZT1Vbih7bGVmdDp0LHRvcDpuLHdpZHRoOnIsaGVpZ2h0OmkscGF0aDp5LGlkOmUsbWF0cml4OnAsY3VycmVudENsaXBQYXRoOmosc3JjOnV9LGEsbCksdWU9ZC5tYXAoTD0+QyhjLHt4OnQseTpuLHdpZHRoOnIsaGVpZ2h0OmksZmlsbDpMLGQ6eXx8dm9pZCAwLHRyYW5zZm9ybTpwfHx2b2lkIDAsXCJjbGlwLXBhdGhcIjpqLHN0eWxlOkI/YGZpbHRlcjoke0J9YDp2b2lkIDAsbWFzazpGfSkpLmpvaW4oXCJcIiksc2U9a3Uoe2lkOmUsbGVmdDp0LHRvcDpuLHdpZHRoOnIsaGVpZ2h0OmksY3VycmVudENsaXBQYXRoSWQ6ayxib3JkZXJQYXRoOnksYm9yZGVyVHlwZTpjfSxhKTtpZihmKXtsZXQgTD0oYS5ib3JkZXJMZWZ0V2lkdGh8fDApKyhhLnBhZGRpbmdMZWZ0fHwwKSxWPShhLmJvcmRlclRvcFdpZHRofHwwKSsoYS5wYWRkaW5nVG9wfHwwKSxkZT0oYS5ib3JkZXJSaWdodFdpZHRofHwwKSsoYS5wYWRkaW5nUmlnaHR8fDApLFk9KGEuYm9yZGVyQm90dG9tV2lkdGh8fDApKyhhLnBhZGRpbmdCb3R0b218fDApLGVlPWEub2JqZWN0Rml0PT09XCJjb250YWluXCI/XCJ4TWlkWU1pZFwiOmEub2JqZWN0Rml0PT09XCJjb3ZlclwiP1wieE1pZFlNaWQgc2xpY2VcIjpcIm5vbmVcIjt1ZSs9QyhcImltYWdlXCIse3g6dCtMLHk6bitWLHdpZHRoOnItTC1kZSxoZWlnaHQ6aS1WLVksaHJlZjp1LHByZXNlcnZlQXNwZWN0UmF0aW86ZWUsdHJhbnNmb3JtOnB8fHZvaWQgMCxzdHlsZTpCP2BmaWx0ZXI6JHtCfWA6dm9pZCAwLFwiY2xpcC1wYXRoXCI6YHVybCgjc2F0b3JpX2NwLSR7ZX0pYCxtYXNrOmI/YHVybCgjJHtifSlgOmB1cmwoI3NhdG9yaV9vbS0ke2V9KWB9KX1pZihzZSl7aCs9c2VbMF07bGV0IEw9c2VbMV07dWUrPSR0KHtsZWZ0OnQsdG9wOm4sd2lkdGg6cixoZWlnaHQ6aSxwcm9wczp7dHJhbnNmb3JtOnB8fHZvaWQgMCxcImNsaXAtcGF0aFwiOmB1cmwoIyR7TH0pYH19LGEpfWxldCBOPXd1KHt3aWR0aDpyLGhlaWdodDppLGlkOmUsb3BhY2l0eTptLHNoYXBlOkMoYyx7eDp0LHk6bix3aWR0aDpyLGhlaWdodDppLGZpbGw6XCIjZmZmXCIsc3Ryb2tlOlwiI2ZmZlwiLFwic3Ryb2tlLXdpZHRoXCI6MCxkOnl8fHZvaWQgMCx0cmFuc2Zvcm06cHx8dm9pZCAwLFwiY2xpcC1wYXRoXCI6aixtYXNrOkZ9KX0sYSk7cmV0dXJuKGg/QyhcImRlZnNcIix7fSxoKTpcIlwiKSsoTj9OWzBdOlwiXCIpK29lKyhtIT09MT9gPGcgb3BhY2l0eT1cIiR7bX1cIj5gOlwiXCIpKyhnfHx1ZSkrKG0hPT0xP1wiPC9nPlwiOlwiXCIpKyhOP05bMV06XCJcIikrdn12YXIgUnU9KCk9Pi9bIyowLTldXFx1RkUwRj9cXHUyMEUzfFtcXHhBOVxceEFFXFx1MjAzQ1xcdTIwNDlcXHUyMTIyXFx1MjEzOVxcdTIxOTQtXFx1MjE5OVxcdTIxQTlcXHUyMUFBXFx1MjMxQVxcdTIzMUJcXHUyMzI4XFx1MjNDRlxcdTIzRUQtXFx1MjNFRlxcdTIzRjFcXHUyM0YyXFx1MjNGOC1cXHUyM0ZBXFx1MjRDMlxcdTI1QUFcXHUyNUFCXFx1MjVCNlxcdTI1QzBcXHUyNUZCXFx1MjVGQ1xcdTI1RkVcXHUyNjAwLVxcdTI2MDRcXHUyNjBFXFx1MjYxMVxcdTI2MTRcXHUyNjE1XFx1MjYxOFxcdTI2MjBcXHUyNjIyXFx1MjYyM1xcdTI2MjZcXHUyNjJBXFx1MjYyRVxcdTI2MkZcXHUyNjM4LVxcdTI2M0FcXHUyNjQwXFx1MjY0MlxcdTI2NDgtXFx1MjY1M1xcdTI2NUZcXHUyNjYwXFx1MjY2M1xcdTI2NjVcXHUyNjY2XFx1MjY2OFxcdTI2N0JcXHUyNjdFXFx1MjY3RlxcdTI2OTJcXHUyNjk0LVxcdTI2OTdcXHUyNjk5XFx1MjY5QlxcdTI2OUNcXHUyNkEwXFx1MjZBN1xcdTI2QUFcXHUyNkIwXFx1MjZCMVxcdTI2QkRcXHUyNkJFXFx1MjZDNFxcdTI2QzhcXHUyNkNGXFx1MjZEMVxcdTI2RDNcXHUyNkU5XFx1MjZGMC1cXHUyNkY1XFx1MjZGN1xcdTI2RjhcXHUyNkZBXFx1MjcwMlxcdTI3MDhcXHUyNzA5XFx1MjcwRlxcdTI3MTJcXHUyNzE0XFx1MjcxNlxcdTI3MURcXHUyNzIxXFx1MjczM1xcdTI3MzRcXHUyNzQ0XFx1Mjc0N1xcdTI3NTdcXHUyNzYzXFx1MjdBMVxcdTI5MzRcXHUyOTM1XFx1MkIwNS1cXHUyQjA3XFx1MkIxQlxcdTJCMUNcXHUyQjU1XFx1MzAzMFxcdTMwM0RcXHUzMjk3XFx1MzI5OV1cXHVGRTBGP3xbXFx1MjYxRFxcdTI3MENcXHUyNzBEXSg/OlxcdUZFMEZ8XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98W1xcdTI3MEFcXHUyNzBCXSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHUyM0U5LVxcdTIzRUNcXHUyM0YwXFx1MjNGM1xcdTI1RkRcXHUyNjkzXFx1MjZBMVxcdTI2QUJcXHUyNkM1XFx1MjZDRVxcdTI2RDRcXHUyNkVBXFx1MjZGRFxcdTI3MDVcXHUyNzI4XFx1Mjc0Q1xcdTI3NEVcXHUyNzUzLVxcdTI3NTVcXHUyNzk1LVxcdTI3OTdcXHUyN0IwXFx1MjdCRlxcdTJCNTBdfFxcdTI2RjkoPzpcXHVGRTBGfFxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/KD86XFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml1cXHVGRTBGPyk/fFxcdTI3NjRcXHVGRTBGPyg/OlxcdTIwMEQoPzpcXHVEODNEXFx1REQyNXxcXHVEODNFXFx1REU3OSkpP3xcXHVEODNDKD86W1xcdURDMDRcXHVERDcwXFx1REQ3MVxcdUREN0VcXHVERDdGXFx1REUwMlxcdURFMzdcXHVERjIxXFx1REYyNC1cXHVERjJDXFx1REYzNlxcdURGN0RcXHVERjk2XFx1REY5N1xcdURGOTktXFx1REY5QlxcdURGOUVcXHVERjlGXFx1REZDRFxcdURGQ0VcXHVERkQ0LVxcdURGREZcXHVERkY1XFx1REZGN11cXHVGRTBGP3xbXFx1REY4NVxcdURGQzJcXHVERkM3XSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHVERkMzXFx1REZDNFxcdURGQ0FdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT8oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdURGQ0JcXHVERkNDXSg/OlxcdUZFMEZ8XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT8oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdURDQ0ZcXHVERDhFXFx1REQ5MS1cXHVERDlBXFx1REUwMVxcdURFMUFcXHVERTJGXFx1REUzMi1cXHVERTM2XFx1REUzOC1cXHVERTNBXFx1REU1MFxcdURFNTFcXHVERjAwLVxcdURGMjBcXHVERjJELVxcdURGMzVcXHVERjM3LVxcdURGN0NcXHVERjdFLVxcdURGODRcXHVERjg2LVxcdURGOTNcXHVERkEwLVxcdURGQzFcXHVERkM1XFx1REZDNlxcdURGQzhcXHVERkM5XFx1REZDRi1cXHVERkQzXFx1REZFMC1cXHVERkYwXFx1REZGOC1cXHVERkZGXXxcXHVEREU2XFx1RDgzQ1tcXHVEREU4LVxcdURERUNcXHVEREVFXFx1RERGMVxcdURERjJcXHVEREY0XFx1RERGNi1cXHVEREZBXFx1RERGQ1xcdURERkRcXHVEREZGXXxcXHVEREU3XFx1RDgzQ1tcXHVEREU2XFx1RERFN1xcdURERTktXFx1RERFRlxcdURERjEtXFx1RERGNFxcdURERjYtXFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRVxcdURERkZdfFxcdURERThcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFOVxcdURERUItXFx1RERFRVxcdURERjAtXFx1RERGNVxcdURERjdcXHVEREZBLVxcdURERkZdfFxcdURERTlcXHVEODNDW1xcdURERUFcXHVEREVDXFx1RERFRlxcdURERjBcXHVEREYyXFx1RERGNFxcdURERkZdfFxcdURERUFcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVEXFx1RERGNy1cXHVEREZBXXxcXHVEREVCXFx1RDgzQ1tcXHVEREVFLVxcdURERjBcXHVEREYyXFx1RERGNFxcdURERjddfFxcdURERUNcXHVEODNDW1xcdURERTZcXHVEREU3XFx1RERFOS1cXHVEREVFXFx1RERGMS1cXHVEREYzXFx1RERGNS1cXHVEREZBXFx1RERGQ1xcdURERkVdfFxcdURERURcXHVEODNDW1xcdURERjBcXHVEREYyXFx1RERGM1xcdURERjdcXHVEREY5XFx1RERGQV18XFx1RERFRVxcdUQ4M0NbXFx1RERFOC1cXHVEREVBXFx1RERGMS1cXHVEREY0XFx1RERGNi1cXHVEREY5XXxcXHVEREVGXFx1RDgzQ1tcXHVEREVBXFx1RERGMlxcdURERjRcXHVEREY1XXxcXHVEREYwXFx1RDgzQ1tcXHVEREVBXFx1RERFQy1cXHVEREVFXFx1RERGMlxcdURERjNcXHVEREY1XFx1RERGN1xcdURERkNcXHVEREZFXFx1RERGRl18XFx1RERGMVxcdUQ4M0NbXFx1RERFNi1cXHVEREU4XFx1RERFRVxcdURERjBcXHVEREY3LVxcdURERkJcXHVEREZFXXxcXHVEREYyXFx1RDgzQ1tcXHVEREU2XFx1RERFOC1cXHVEREVEXFx1RERGMC1cXHVEREZGXXxcXHVEREYzXFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERUEtXFx1RERFQ1xcdURERUVcXHVEREYxXFx1RERGNFxcdURERjVcXHVEREY3XFx1RERGQVxcdURERkZdfFxcdURERjRcXHVEODNDXFx1RERGMnxcXHVEREY1XFx1RDgzQ1tcXHVEREU2XFx1RERFQS1cXHVEREVEXFx1RERGMC1cXHVEREYzXFx1RERGNy1cXHVEREY5XFx1RERGQ1xcdURERkVdfFxcdURERjZcXHVEODNDXFx1RERFNnxcXHVEREY3XFx1RDgzQ1tcXHVEREVBXFx1RERGNFxcdURERjhcXHVEREZBXFx1RERGQ118XFx1RERGOFxcdUQ4M0NbXFx1RERFNi1cXHVEREVBXFx1RERFQy1cXHVEREY0XFx1RERGNy1cXHVEREY5XFx1RERGQlxcdURERkQtXFx1RERGRl18XFx1RERGOVxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREU5XFx1RERFQi1cXHVEREVEXFx1RERFRi1cXHVEREY0XFx1RERGN1xcdURERjlcXHVEREZCXFx1RERGQ1xcdURERkZdfFxcdURERkFcXHVEODNDW1xcdURERTZcXHVEREVDXFx1RERGMlxcdURERjNcXHVEREY4XFx1RERGRVxcdURERkZdfFxcdURERkJcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVFXFx1RERGM1xcdURERkFdfFxcdURERkNcXHVEODNDW1xcdURERUJcXHVEREY4XXxcXHVEREZEXFx1RDgzQ1xcdURERjB8XFx1RERGRVxcdUQ4M0NbXFx1RERFQVxcdURERjldfFxcdURERkZcXHVEODNDW1xcdURERTZcXHVEREYyXFx1RERGQ118XFx1REZGM1xcdUZFMEY/KD86XFx1MjAwRCg/OlxcdTI2QTdcXHVGRTBGP3xcXHVEODNDXFx1REYwOCkpP3xcXHVERkY0KD86XFx1MjAwRFxcdTI2MjBcXHVGRTBGP3xcXHVEQjQwXFx1REM2N1xcdURCNDBcXHVEQzYyXFx1REI0MCg/OlxcdURDNjVcXHVEQjQwXFx1REM2RVxcdURCNDBcXHVEQzY3fFxcdURDNzNcXHVEQjQwXFx1REM2M1xcdURCNDBcXHVEQzc0fFxcdURDNzdcXHVEQjQwXFx1REM2Q1xcdURCNDBcXHVEQzczKVxcdURCNDBcXHVEQzdGKT8pfFxcdUQ4M0QoPzpbXFx1REMwOFxcdURDMjZdKD86XFx1MjAwRFxcdTJCMUIpP3xbXFx1REMzRlxcdURDRkRcXHVERDQ5XFx1REQ0QVxcdURENkZcXHVERDcwXFx1REQ3M1xcdURENzYtXFx1REQ3OVxcdUREODdcXHVERDhBLVxcdUREOERcXHVEREE1XFx1RERBOFxcdUREQjFcXHVEREIyXFx1RERCQ1xcdUREQzItXFx1RERDNFxcdURERDEtXFx1REREM1xcdUREREMtXFx1RERERVxcdURERTFcXHVEREUzXFx1RERFOFxcdURERUZcXHVEREYzXFx1RERGQVxcdURFQ0JcXHVERUNELVxcdURFQ0ZcXHVERUUwLVxcdURFRTVcXHVERUU5XFx1REVGMFxcdURFRjNdXFx1RkUwRj98W1xcdURDNDJcXHVEQzQzXFx1REM0Ni1cXHVEQzUwXFx1REM2NlxcdURDNjdcXHVEQzZCLVxcdURDNkRcXHVEQzcyXFx1REM3NC1cXHVEQzc2XFx1REM3OFxcdURDN0NcXHVEQzgzXFx1REM4NVxcdURDOEZcXHVEQzkxXFx1RENBQVxcdUREN0FcXHVERDk1XFx1REQ5NlxcdURFNENcXHVERTRGXFx1REVDMFxcdURFQ0NdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98W1xcdURDNkVcXHVEQzcwXFx1REM3MVxcdURDNzNcXHVEQzc3XFx1REM4MVxcdURDODJcXHVEQzg2XFx1REM4N1xcdURFNDUtXFx1REU0N1xcdURFNEJcXHVERTREXFx1REU0RVxcdURFQTNcXHVERUI0LVxcdURFQjZdKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT8oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdURENzRcXHVERDkwXSg/OlxcdUZFMEZ8XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98W1xcdURDMDAtXFx1REMwN1xcdURDMDktXFx1REMxNFxcdURDMTYtXFx1REMyNVxcdURDMjctXFx1REMzQVxcdURDM0MtXFx1REMzRVxcdURDNDBcXHVEQzQ0XFx1REM0NVxcdURDNTEtXFx1REM2NVxcdURDNkFcXHVEQzc5LVxcdURDN0JcXHVEQzdELVxcdURDODBcXHVEQzg0XFx1REM4OC1cXHVEQzhFXFx1REM5MFxcdURDOTItXFx1RENBOVxcdURDQUItXFx1RENGQ1xcdURDRkYtXFx1REQzRFxcdURENEItXFx1REQ0RVxcdURENTAtXFx1REQ2N1xcdUREQTRcXHVEREZCLVxcdURFMkRcXHVERTJGLVxcdURFMzRcXHVERTM3LVxcdURFNDRcXHVERTQ4LVxcdURFNEFcXHVERTgwLVxcdURFQTJcXHVERUE0LVxcdURFQjNcXHVERUI3LVxcdURFQkZcXHVERUMxLVxcdURFQzVcXHVERUQwLVxcdURFRDJcXHVERUQ1LVxcdURFRDdcXHVERURDLVxcdURFREZcXHVERUVCXFx1REVFQ1xcdURFRjQtXFx1REVGQ1xcdURGRTAtXFx1REZFQlxcdURGRjBdfFxcdURDMTUoPzpcXHUyMDBEXFx1RDgzRVxcdUREQkEpP3xcXHVEQzNCKD86XFx1MjAwRFxcdTI3NDRcXHVGRTBGPyk/fFxcdURDNDFcXHVGRTBGPyg/OlxcdTIwMERcXHVEODNEXFx1RERFOFxcdUZFMEY/KT98XFx1REM2OCg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4fFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0QoPzpbXFx1REM2OFxcdURDNjldXFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/KXxbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEQzY2KD86XFx1MjAwRFxcdUQ4M0RcXHVEQzY2KT98XFx1REM2Nyg/OlxcdTIwMERcXHVEODNEW1xcdURDNjZcXHVEQzY3XSk/KXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1RDgzQyg/OlxcdURGRkIoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEXFx1RDgzRCg/OlxcdURDOEJcXHUyMDBEXFx1RDgzRCk/XFx1REM2OFxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OFxcdUQ4M0NbXFx1REZGQy1cXHVERkZGXSkpKT98XFx1REZGQyg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCXFx1REZGRC1cXHVERkZGXSkpKT98XFx1REZGRCg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCXFx1REZGQ1xcdURGRkVcXHVERkZGXSkpKT98XFx1REZGRSg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkRcXHVERkZGXSkpKT98XFx1REZGRig/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86XFx1REM4QlxcdTIwMERcXHVEODNEKT9cXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1tcXHVERkZCLVxcdURGRkVdKSkpPykpP3xcXHVEQzY5KD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRFxcdUQ4M0QoPzpcXHVEQzhCXFx1MjAwRFxcdUQ4M0QpP1tcXHVEQzY4XFx1REM2OV18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRCg/OltcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdURDNjYoPzpcXHUyMDBEXFx1RDgzRFxcdURDNjYpP3xcXHVEQzY3KD86XFx1MjAwRFxcdUQ4M0RbXFx1REM2NlxcdURDNjddKT98XFx1REM2OVxcdTIwMERcXHVEODNEKD86XFx1REM2Nig/OlxcdTIwMERcXHVEODNEXFx1REM2Nik/fFxcdURDNjcoPzpcXHUyMDBEXFx1RDgzRFtcXHVEQzY2XFx1REM2N10pPykpfFxcdUQ4M0VbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdKXxcXHVEODNDKD86XFx1REZGQig/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86W1xcdURDNjhcXHVEQzY5XXxcXHVEQzhCXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XVxcdUQ4M0NbXFx1REZGQy1cXHVERkZGXSkpKT98XFx1REZGQyg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86W1xcdURDNjhcXHVEQzY5XXxcXHVEQzhCXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XVxcdUQ4M0NbXFx1REZGQlxcdURGRkQtXFx1REZGRl0pKSk/fFxcdURGRkQoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEXFx1RDgzRCg/OltcXHVEQzY4XFx1REM2OV18XFx1REM4QlxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XSlcXHVEODNDW1xcdURGRkItXFx1REZGRl18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0UoPzpbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdfFxcdUREMURcXHUyMDBEXFx1RDgzRFtcXHVEQzY4XFx1REM2OV1cXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdKSkpP3xcXHVERkZFKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRFxcdUQ4M0QoPzpbXFx1REM2OFxcdURDNjldfFxcdURDOEJcXHUyMDBEXFx1RDgzRFtcXHVEQzY4XFx1REM2OV0pXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldXFx1RDgzQ1tcXHVERkZCLVxcdURGRkRcXHVERkZGXSkpKT98XFx1REZGRig/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMERcXHVEODNEKD86W1xcdURDNjhcXHVEQzY5XXxcXHVEQzhCXFx1MjAwRFxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNEW1xcdURDNjhcXHVEQzY5XVxcdUQ4M0NbXFx1REZGQi1cXHVERkZFXSkpKT8pKT98XFx1REM2Rig/OlxcdTIwMERbXFx1MjY0MFxcdTI2NDJdXFx1RkUwRj8pP3xcXHVERDc1KD86XFx1RkUwRnxcXHVEODNDW1xcdURGRkItXFx1REZGRl0pPyg/OlxcdTIwMERbXFx1MjY0MFxcdTI2NDJdXFx1RkUwRj8pP3xcXHVERTJFKD86XFx1MjAwRFxcdUQ4M0RcXHVEQ0E4KT98XFx1REUzNSg/OlxcdTIwMERcXHVEODNEXFx1RENBQik/fFxcdURFMzYoPzpcXHUyMDBEXFx1RDgzQ1xcdURGMkJcXHVGRTBGPyk/KXxcXHVEODNFKD86W1xcdUREMENcXHVERDBGXFx1REQxOC1cXHVERDFGXFx1REQzMC1cXHVERDM0XFx1REQzNlxcdURENzdcXHVEREI1XFx1RERCNlxcdUREQkJcXHVEREQyXFx1REREM1xcdURERDVcXHVERUMzLVxcdURFQzVcXHVERUYwXFx1REVGMi1cXHVERUY4XSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/fFtcXHVERDI2XFx1REQzNVxcdUREMzctXFx1REQzOVxcdUREM0RcXHVERDNFXFx1RERCOFxcdUREQjlcXHVERENELVxcdUREQ0ZcXHVEREQ0XFx1RERENi1cXHVEREREXSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSk/KD86XFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml1cXHVGRTBGPyk/fFtcXHVERERFXFx1RERERl0oPzpcXHUyMDBEW1xcdTI2NDBcXHUyNjQyXVxcdUZFMEY/KT98W1xcdUREMERcXHVERDBFXFx1REQxMC1cXHVERDE3XFx1REQyMC1cXHVERDI1XFx1REQyNy1cXHVERDJGXFx1REQzQVxcdUREM0YtXFx1REQ0NVxcdURENDctXFx1REQ3NlxcdURENzgtXFx1RERCNFxcdUREQjdcXHVEREJBXFx1RERCQy1cXHVERENDXFx1REREMFxcdURERTAtXFx1RERGRlxcdURFNzAtXFx1REU3Q1xcdURFODAtXFx1REU4OFxcdURFOTAtXFx1REVCRFxcdURFQkYtXFx1REVDMlxcdURFQ0UtXFx1REVEQlxcdURFRTAtXFx1REVFOF18XFx1REQzQyg/OlxcdTIwMERbXFx1MjY0MFxcdTI2NDJdXFx1RkUwRj98XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKT98XFx1REREMSg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY4NFxcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNFXFx1REREMSkpfFxcdUQ4M0MoPzpcXHVERkZCKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCk/XFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkMtXFx1REZGRl18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjg0XFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKSkpP3xcXHVERkZDKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCk/XFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkJcXHVERkZELVxcdURGRkZdfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjdDXFx1REY4NFxcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRSg/OltcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF18XFx1REQxRFxcdTIwMERcXHVEODNFXFx1REREMVxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSkpKT98XFx1REZGRCg/OlxcdTIwMEQoPzpbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XVxcdUZFMEY/fFxcdTI3NjRcXHVGRTBGP1xcdTIwMEQoPzpcXHVEODNEXFx1REM4QlxcdTIwMEQpP1xcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCXFx1REZGQ1xcdURGRkVcXHVERkZGXXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY3Q1xcdURGODRcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0UoPzpbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdfFxcdUREMURcXHUyMDBEXFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkItXFx1REZGRl0pKSk/fFxcdURGRkUoPzpcXHUyMDBEKD86W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGP3xcXHUyNzY0XFx1RkUwRj9cXHUyMDBEKD86XFx1RDgzRFxcdURDOEJcXHUyMDBEKT9cXHVEODNFXFx1REREMVxcdUQ4M0NbXFx1REZGQi1cXHVERkZEXFx1REZGRl18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjg0XFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKSkpP3xcXHVERkZGKD86XFx1MjAwRCg/OltcXHUyNjk1XFx1MjY5NlxcdTI3MDhdXFx1RkUwRj98XFx1Mjc2NFxcdUZFMEY/XFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCk/XFx1RDgzRVxcdURERDFcXHVEODNDW1xcdURGRkItXFx1REZGRV18XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGN0NcXHVERjg0XFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFKD86W1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXXxcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxXFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKSkpPykpP3xcXHVERUYxKD86XFx1RDgzQyg/OlxcdURGRkIoPzpcXHUyMDBEXFx1RDgzRVxcdURFRjJcXHVEODNDW1xcdURGRkMtXFx1REZGRl0pP3xcXHVERkZDKD86XFx1MjAwRFxcdUQ4M0VcXHVERUYyXFx1RDgzQ1tcXHVERkZCXFx1REZGRC1cXHVERkZGXSk/fFxcdURGRkQoPzpcXHUyMDBEXFx1RDgzRVxcdURFRjJcXHVEODNDW1xcdURGRkJcXHVERkZDXFx1REZGRVxcdURGRkZdKT98XFx1REZGRSg/OlxcdTIwMERcXHVEODNFXFx1REVGMlxcdUQ4M0NbXFx1REZGQi1cXHVERkZEXFx1REZGRl0pP3xcXHVERkZGKD86XFx1MjAwRFxcdUQ4M0VcXHVERUYyXFx1RDgzQ1tcXHVERkZCLVxcdURGRkVdKT8pKT8pL2c7dmFyIFdmPW5ldyBSZWdFeHAoUnUoKSxcIlwiKSxHbj17ZW1vamk6V2Ysc3ltYm9sOi9cXHB7U3ltYm9sfS91LG1hdGg6L1xccHtNYXRofS91fSxqbj17XCJqYS1KUFwiOi9cXHB7c2N4PUhpcmF9fFxccHtzY3g9S2FuYX18XFxwe3NjeD1IYW59fFtcXHUzMDAwXXxbXFx1RkYwMC1cXHVGRkVGXS91LFwia28tS1JcIjovXFxwe3NjeD1IYW5ndWx9L3UsXCJ6aC1DTlwiOi9cXHB7c2N4PUhhbn0vdSxcInpoLVRXXCI6L1xccHtzY3g9SGFufS91LFwiemgtSEtcIjovXFxwe3NjeD1IYW59L3UsXCJ0aC1USFwiOi9cXHB7c2N4PVRoYWl9L3UsXCJibi1JTlwiOi9cXHB7c2N4PUJlbmdhbGl9L3UsXCJhci1BUlwiOi9cXHB7c2N4PUFyYWJpY30vdSxcInRhLUlOXCI6L1xccHtzY3g9VGFtaWx9L3UsXCJtbC1JTlwiOi9cXHB7c2N4PU1hbGF5YWxhbX0vdSxcImhlLUlMXCI6L1xccHtzY3g9SGVicmV3fS91LFwidGUtSU5cIjovXFxwe3NjeD1UZWx1Z3V9L3UsZGV2YW5hZ2FyaTovXFxwe3NjeD1EZXZhbmFnYXJpfS91LGthbm5hZGE6L1xccHtzY3g9S2FubmFkYX0vdX0sWXI9T2JqZWN0LmtleXMoey4uLmpuLC4uLkdufSk7ZnVuY3Rpb24gTHUoZSl7cmV0dXJuIFlyLmluY2x1ZGVzKGUpfWZ1bmN0aW9uIE11KGUsdCl7Zm9yKGxldCByIG9mIE9iamVjdC5rZXlzKEduKSlpZihHbltyXS50ZXN0KGUpKXJldHVybltyXTtsZXQgbj1PYmplY3Qua2V5cyhqbikuZmlsdGVyKHI9PmpuW3JdLnRlc3QoZSkpO2lmKG4ubGVuZ3RoPT09MClyZXR1cm5bXCJ1bmtub3duXCJdO2lmKHQpe2xldCByPW4uZmluZEluZGV4KGk9Pmk9PT10KTtyIT09LTEmJihuLnNwbGljZShyLDEpLG4udW5zaGlmdCh0KSl9cmV0dXJuIG59ZnVuY3Rpb24gTnUoZSl7aWYoZSlyZXR1cm4gWXIuZmluZCh0PT50LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChlLnRvTG93ZXJDYXNlKCkpKX1hc3luYyBmdW5jdGlvbipVdChlLHQpe3ZhciBNO2xldCBuPWF3YWl0IHFlKCkse2lkOnIsaW5oZXJpdGVkU3R5bGU6aSxwYXJlbnQ6byxmb250OnUsZGVidWc6cyxsb2NhbGU6YSxlbWJlZEZvbnQ6bD0hMCxncmFwaGVtZUltYWdlczpmLGNhbkxvYWRBZGRpdGlvbmFsQXNzZXRzOmMsZ2V0VHdTdHlsZXM6cH09dDtpZihlPT09bnVsbHx8dHlwZW9mIGU+XCJ1XCIpcmV0dXJuIHlpZWxkLHlpZWxkLFwiXCI7aWYoIWJ0KGUpfHx0eXBlb2YgZS50eXBlPT1cImZ1bmN0aW9uXCIpe2xldCBSO2lmKCFidChlKSlSPU1uKFN0cmluZyhlKSx0KSx5aWVsZChhd2FpdCBSLm5leHQoKSkudmFsdWU7ZWxzZXtpZihLbyhlLnR5cGUpKXRocm93IG5ldyBFcnJvcihcIkNsYXNzIGNvbXBvbmVudCBpcyBub3Qgc3VwcG9ydGVkLlwiKTtSPVV0KGUudHlwZShlLnByb3BzKSx0KSx5aWVsZChhd2FpdCBSLm5leHQoKSkudmFsdWV9YXdhaXQgUi5uZXh0KCk7bGV0IGFlPXlpZWxkO3JldHVybihhd2FpdCBSLm5leHQoYWUpKS52YWx1ZX1sZXR7dHlwZTpoLHByb3BzOmR9PWU7aWYoZCYmSm8oZCkpdGhyb3cgbmV3IEVycm9yKFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgcHJvcGVydHkgaXMgbm90IHN1cHBvcnRlZC4gU2VlIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgaW5mb3JtYXRpb24gaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9zYXRvcmkjanN4LlwiKTtsZXR7c3R5bGU6bSxjaGlsZHJlbjp2LHR3OmcsbGFuZzpiPWF9PWR8fHt9LHg9TnUoYik7aWYoZyl7bGV0IFI9cChnLG0pO209T2JqZWN0LmFzc2lnbihSLG0pfWxldCBGPW4uTm9kZS5jcmVhdGUoKTtvLmluc2VydENoaWxkKEYsby5nZXRDaGlsZENvdW50KCkpO2xldFt5LGtdPWF3YWl0IFBuKEYsaCxpLG0sZCksUD15LnRyYW5zZm9ybT09PWkudHJhbnNmb3JtO2lmKFB8fCh5LnRyYW5zZm9ybS5fX3BhcmVudD1pLnRyYW5zZm9ybSksKHkub3ZlcmZsb3c9PT1cImhpZGRlblwifHx5LmNsaXBQYXRoJiZ5LmNsaXBQYXRoIT09XCJub25lXCIpJiYoay5faW5oZXJpdGVkQ2xpcFBhdGhJZD1gc2F0b3JpX2NwLSR7cn1gLGsuX2luaGVyaXRlZE1hc2tJZD1gc2F0b3JpX29tLSR7cn1gKSx5Lm1hc2tJbWFnZSYmKGsuX2luaGVyaXRlZE1hc2tJZD1gc2F0b3JpX21pLSR7cn1gKSx5LmJhY2tncm91bmRDbGlwPT09XCJ0ZXh0XCIpe2xldCBSPXt2YWx1ZTpcIlwifTtrLl9pbmhlcml0ZWRCYWNrZ3JvdW5kQ2xpcFRleHRQYXRoPVIseS5faW5oZXJpdGVkQmFja2dyb3VuZENsaXBUZXh0UGF0aD1SfWxldCBCPVpvKHYpLGo9W10sb2U9MCx1ZT1bXTtmb3IobGV0IFIgb2YgQil7bGV0IGFlPVV0KFIse2lkOnIrXCItXCIrb2UrKyxwYXJlbnRTdHlsZTp5LGluaGVyaXRlZFN0eWxlOmssaXNJbmhlcml0aW5nVHJhbnNmb3JtOiEwLHBhcmVudDpGLGZvbnQ6dSxlbWJlZEZvbnQ6bCxkZWJ1ZzpzLGdyYXBoZW1lSW1hZ2VzOmYsY2FuTG9hZEFkZGl0aW9uYWxBc3NldHM6Yyxsb2NhbGU6eCxnZXRUd1N0eWxlczpwLG9uTm9kZURldGVjdGVkOnQub25Ob2RlRGV0ZWN0ZWR9KTtjP3VlLnB1c2goLi4uKGF3YWl0IGFlLm5leHQoKSkudmFsdWV8fFtdKTphd2FpdCBhZS5uZXh0KCksai5wdXNoKGFlKX15aWVsZCB1ZTtmb3IobGV0IFIgb2Ygailhd2FpdCBSLm5leHQoKTtsZXRbc2UsTl09eWllbGQse2xlZnQ6TCx0b3A6Vix3aWR0aDpkZSxoZWlnaHQ6WX09Ri5nZXRDb21wdXRlZExheW91dCgpO0wrPXNlLFYrPU47bGV0IGVlPVwiXCIsbGU9XCJcIixoZT1cIlwiLHtjaGlsZHJlbjpBLC4uLk99PWQ7aWYoKE09dC5vbk5vZGVEZXRlY3RlZCk9PW51bGx8fE0uY2FsbCh0LHtsZWZ0OkwsdG9wOlYsd2lkdGg6ZGUsaGVpZ2h0OlksdHlwZTpoLHByb3BzOk8sa2V5OmUua2V5LHRleHRDb250ZW50OmJ0KEEpP3ZvaWQgMDpBfSksaD09PVwiaW1nXCIpe2xldCBSPXkuX19zcmM7bGU9YXdhaXQgcXQoe2lkOnIsbGVmdDpMLHRvcDpWLHdpZHRoOmRlLGhlaWdodDpZLHNyYzpSLGlzSW5oZXJpdGluZ1RyYW5zZm9ybTpQLGRlYnVnOnN9LHksayl9ZWxzZSBpZihoPT09XCJzdmdcIil7bGV0IFI9eS5jb2xvcixhZT1hd2FpdCBkdShlLFIpO2xlPWF3YWl0IHF0KHtpZDpyLGxlZnQ6TCx0b3A6Vix3aWR0aDpkZSxoZWlnaHQ6WSxzcmM6YWUsaXNJbmhlcml0aW5nVHJhbnNmb3JtOlAsZGVidWc6c30seSxrKX1lbHNle2xldCBSPW09PW51bGw/dm9pZCAwOm0uZGlzcGxheTtpZihoPT09XCJkaXZcIiYmdiYmdHlwZW9mIHYhPVwic3RyaW5nXCImJlIhPT1cImZsZXhcIiYmUiE9PVwibm9uZVwiKXRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgPGRpdj4gdG8gaGF2ZSBleHBsaWNpdCBcImRpc3BsYXk6IGZsZXhcIiBvciBcImRpc3BsYXk6IG5vbmVcIiBpZiBpdCBoYXMgbW9yZSB0aGFuIG9uZSBjaGlsZCBub2RlLicpO2xlPWF3YWl0IHF0KHtpZDpyLGxlZnQ6TCx0b3A6Vix3aWR0aDpkZSxoZWlnaHQ6WSxpc0luaGVyaXRpbmdUcmFuc2Zvcm06UCxkZWJ1ZzpzfSx5LGspfWZvcihsZXQgUiBvZiBqKWVlKz0oYXdhaXQgUi5uZXh0KFtMLFZdKSkudmFsdWU7cmV0dXJuIHkuX2luaGVyaXRlZEJhY2tncm91bmRDbGlwVGV4dFBhdGgmJihoZSs9QyhcImNsaXBQYXRoXCIse2lkOmBzYXRvcmlfYmN0LSR7cn1gLFwiY2xpcC1wYXRoXCI6eS5faW5oZXJpdGVkQ2xpcFBhdGhJZD9gdXJsKCMke3kuX2luaGVyaXRlZENsaXBQYXRoSWR9KWA6dm9pZCAwfSx5Ll9pbmhlcml0ZWRCYWNrZ3JvdW5kQ2xpcFRleHRQYXRoLnZhbHVlKSksaGUrbGUrZWV9aW1wb3J0IEhuIGZyb21cIkBzaHVkaW5nL29wZW50eXBlLmpzXCI7dmFyICR1PVwidW5rbm93blwiO2Z1bmN0aW9uIHFmKGUsdCxbbixyXSxbaSxvXSl7aWYobiE9PWkpcmV0dXJuIG4/IWl8fG49PT1lPy0xOmk9PT1lPzE6ZT09PTQwMCYmbj09PTUwMHx8ZT09PTUwMCYmbj09PTQwMD8tMTplPT09NDAwJiZpPT09NTAwfHxlPT09NTAwJiZpPT09NDAwPzE6ZTw0MDA/bjxlJiZpPGU/aS1uOm48ZT8tMTppPGU/MTpuLWk6ZTxuJiZlPGk/bi1pOmU8bj8tMTplPGk/MTppLW46MTtpZihyIT09byl7aWYocj09PXQpcmV0dXJuLTE7aWYobz09PXQpcmV0dXJuIDF9cmV0dXJuLTF9dmFyIHp0PWNsYXNze2NvbnN0cnVjdG9yKHQpe3RoaXMuZm9udHM9bmV3IE1hcDt0aGlzLmFkZEZvbnRzKHQpfWdldCh7bmFtZTp0LHdlaWdodDpuLHN0eWxlOnJ9KXtpZighdGhpcy5mb250cy5oYXModCkpcmV0dXJuIG51bGw7bj09PVwibm9ybWFsXCImJihuPTQwMCksbj09PVwiYm9sZFwiJiYobj03MDApLHR5cGVvZiBuPT1cInN0cmluZ1wiJiYobj1OdW1iZXIucGFyc2VJbnQobiwxMCkpO2xldCBpPVsuLi50aGlzLmZvbnRzLmdldCh0KV0sbz1pWzBdO2ZvcihsZXQgdT0xO3U8aS5sZW5ndGg7dSsrKXtsZXRbLHMsYV09byxbLGwsZl09aVt1XTtxZihuLHIsW3MsYV0sW2wsZl0pPjAmJihvPWlbdV0pfXJldHVybiBvWzBdfWFkZEZvbnRzKHQpe2ZvcihsZXQgbiBvZiB0KXtsZXR7bmFtZTpyLGRhdGE6aSxsYW5nOm99PW47aWYobyYmIUx1KG8pKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YWx1ZSBmb3IgcHJvcHMgXFxgbGFuZ1xcYDogXCIke299XCIuIFRoZSB2YWx1ZSBtdXN0IGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOiAke1lyLmpvaW4oXCIsIFwiKX0uYCk7bGV0IHU9bz8/JHUscz1Ibi5wYXJzZShcImJ1ZmZlclwiaW4gaT9pLmJ1ZmZlci5zbGljZShpLmJ5dGVPZmZzZXQsaS5ieXRlT2Zmc2V0K2kuYnl0ZUxlbmd0aCk6aSx7bG93TWVtb3J5OiEwfSksYT1zLmNoYXJUb0dseXBoSW5kZXg7cy5jaGFyVG9HbHlwaEluZGV4PWY9PntsZXQgYz1hLmNhbGwocyxmKTtyZXR1cm4gYz09PTAmJnMuX3RyYWNrQnJva2VuQ2hhcnMmJnMuX3RyYWNrQnJva2VuQ2hhcnMucHVzaChmKSxjfSx0aGlzLmRlZmF1bHRGb250fHwodGhpcy5kZWZhdWx0Rm9udD1zKTtsZXQgbD1gJHtyLnRvTG93ZXJDYXNlKCl9XyR7dX1gO3RoaXMuZm9udHMuaGFzKGwpfHx0aGlzLmZvbnRzLnNldChsLFtdKSx0aGlzLmZvbnRzLmdldChsKS5wdXNoKFtzLG4ud2VpZ2h0LG4uc3R5bGVdKX19Z2V0RW5naW5lKHQ9MTYsbj0xLjIse2ZvbnRGYW1pbHk6cj1cInNhbnMtc2VyaWZcIixmb250V2VpZ2h0Omk9NDAwLGZvbnRTdHlsZTpvPVwibm9ybWFsXCJ9LHUpe2lmKCF0aGlzLmZvbnRzLnNpemUpdGhyb3cgbmV3IEVycm9yKFwiTm8gZm9udHMgYXJlIGxvYWRlZC4gQXQgbGVhc3Qgb25lIGZvbnQgaXMgcmVxdWlyZWQgdG8gY2FsY3VsYXRlIHRoZSBsYXlvdXQuXCIpO3I9KEFycmF5LmlzQXJyYXkocik/cjpbcl0pLm1hcChiPT5iLnRvTG93ZXJDYXNlKCkpO2xldCBzPVtdO3IuZm9yRWFjaChiPT57bGV0IHg9dGhpcy5nZXQoe25hbWU6Yix3ZWlnaHQ6aSxzdHlsZTpvfSk7aWYoeCl7cy5wdXNoKHgpO3JldHVybn1sZXQgRj10aGlzLmdldCh7bmFtZTpiK1wiX3Vua25vd25cIix3ZWlnaHQ6aSxzdHlsZTpvfSk7aWYoRil7cy5wdXNoKEYpO3JldHVybn19KTtsZXQgYT1BcnJheS5mcm9tKHRoaXMuZm9udHMua2V5cygpKSxsPVtdLGY9W10sYz1bXTtmb3IobGV0IGIgb2YgYSlpZighci5pbmNsdWRlcyhiKSlpZih1KXtsZXQgeD1VZihiKTt4P3g9PT11P2wucHVzaCh0aGlzLmdldCh7bmFtZTpiLHdlaWdodDppLHN0eWxlOm99KSk6Zi5wdXNoKHRoaXMuZ2V0KHtuYW1lOmIsd2VpZ2h0Omksc3R5bGU6b30pKTpjLnB1c2godGhpcy5nZXQoe25hbWU6Yix3ZWlnaHQ6aSxzdHlsZTpvfSkpfWVsc2UgYy5wdXNoKHRoaXMuZ2V0KHtuYW1lOmIsd2VpZ2h0Omksc3R5bGU6b30pKTtsZXQgcD1uZXcgTWFwLGg9KGIseD0hMCk9PntsZXQgRj1bLi4ucywuLi5jLC4uLmwsLi4ueD9mOltdXTtpZih0eXBlb2YgYj5cInVcIilyZXR1cm4geD9GW0YubGVuZ3RoLTFdOnZvaWQgMDtsZXQgeT1iLmNoYXJDb2RlQXQoMCk7aWYocC5oYXMoeSkpcmV0dXJuIHAuZ2V0KHkpO2xldCBrPUYuZmluZCgoUCxCKT0+ISFQLmNoYXJUb0dseXBoSW5kZXgoYil8fHgmJkI9PT1GLmxlbmd0aC0xKTtyZXR1cm4gayYmcC5zZXQoeSxrKSxrfSxkPShiLHg9ITEpPT57dmFyIHksaztyZXR1cm4oKHg/KGs9KHk9Yi50YWJsZXMpPT1udWxsP3ZvaWQgMDp5Lm9zMik9PW51bGw/dm9pZCAwOmsuc1R5cG9Bc2NlbmRlcjowKXx8Yi5hc2NlbmRlcikvYi51bml0c1BlckVtKnR9LG09KGIseD0hMSk9Pnt2YXIgeSxrO3JldHVybigoeD8oaz0oeT1iLnRhYmxlcyk9PW51bGw/dm9pZCAwOnkub3MyKT09bnVsbD92b2lkIDA6ay5zVHlwb0Rlc2NlbmRlcjowKXx8Yi5kZXNjZW5kZXIpL2IudW5pdHNQZXJFbSp0fSx2PWI9PmgoYiwhMSksZz17aGFzOmI9PntpZihiPT09YFxuYClyZXR1cm4hMDtsZXQgeD12KGIpO3JldHVybiB4Pyh4Ll90cmFja0Jyb2tlbkNoYXJzPVtdLHguc3RyaW5nVG9HbHlwaHMoYikseC5fdHJhY2tCcm9rZW5DaGFycy5sZW5ndGg/KHguX3RyYWNrQnJva2VuQ2hhcnM9dm9pZCAwLCExKTohMCk6ITF9LGJhc2VsaW5lOihiLHg9dHlwZW9mIGI+XCJ1XCI/c1swXTpoKGIpKT0+e2xldCBGPWQoeCwhMCkseT1tKHgsITApLGs9Zy5oZWlnaHQoYix4KSx7eU1heDpQLHlNaW46Qn09eC50YWJsZXMuaGVhZCxqPUYteSxvZT0oUC8oUC1CKS0xKSpqO3JldHVybiBrKigoMS4yL24rMSkvMikrb2V9LGhlaWdodDooYix4PXR5cGVvZiBiPlwidVwiP3NbMF06aChiKSk9PihkKHgpLW0oeCkpKihuLzEuMiksbWVhc3VyZTooYix4KT0+dGhpcy5tZWFzdXJlKGgsYix4KSxnZXRTVkc6KGIseCk9PnRoaXMuZ2V0U1ZHKGgsYix4KX07cmV0dXJuIGd9cGF0Y2hGb250RmFsbGJhY2tSZXNvbHZlcih0LG4pe2xldCByPVtdO3QuX3RyYWNrQnJva2VuQ2hhcnM9cjtsZXQgaT10LnN0cmluZ1RvR2x5cGhzO3JldHVybiB0LnN0cmluZ1RvR2x5cGhzPShvLC4uLnUpPT57bGV0IHM9aS5jYWxsKHQsbywuLi51KTtmb3IobGV0IGE9MDthPHMubGVuZ3RoO2ErKylpZihzW2FdLnVuaWNvZGU9PT12b2lkIDApe2xldCBsPXIuc2hpZnQoKSxmPW4obCk7aWYoZiE9PXQpe2xldCBjPWYuY2hhclRvR2x5cGgobCkscD10LnVuaXRzUGVyRW0vZi51bml0c1BlckVtLGg9bmV3IEhuLlBhdGg7aC51bml0c1BlckVtPXQudW5pdHNQZXJFbSxoLmNvbW1hbmRzPWMucGF0aC5jb21tYW5kcy5tYXAobT0+e2xldCB2PXsuLi5tfTtmb3IobGV0IGcgaW4gdil0eXBlb2YgdltnXT09XCJudW1iZXJcIiYmKHZbZ10qPXApO3JldHVybiB2fSk7bGV0IGQ9bmV3IEhuLkdseXBoKHsuLi5jLGFkdmFuY2VXaWR0aDpjLmFkdmFuY2VXaWR0aCpwLHhNaW46Yy54TWluKnAseE1heDpjLnhNYXgqcCx5TWluOmMueU1pbipwLHlNYXg6Yy55TWF4KnAscGF0aDpofSk7c1thXT1kfX1yZXR1cm4gc30sKCk9Pnt0LnN0cmluZ1RvR2x5cGhzPWksdC5fdHJhY2tCcm9rZW5DaGFycz12b2lkIDB9fW1lYXN1cmUodCxuLHtmb250U2l6ZTpyLGxldHRlclNwYWNpbmc6aT0wfSl7bGV0IG89dChuKSx1PXRoaXMucGF0Y2hGb250RmFsbGJhY2tSZXNvbHZlcihvLHQpO3RyeXtyZXR1cm4gby5nZXRBZHZhbmNlV2lkdGgobixyLHtsZXR0ZXJTcGFjaW5nOmkvcn0pfWZpbmFsbHl7dSgpfX1nZXRTVkcodCxuLHtmb250U2l6ZTpyLHRvcDppLGxlZnQ6byxsZXR0ZXJTcGFjaW5nOnU9MH0pe2xldCBzPXQobiksYT10aGlzLnBhdGNoRm9udEZhbGxiYWNrUmVzb2x2ZXIocyx0KTt0cnl7cmV0dXJuIHI9PT0wP1wiXCI6cy5nZXRQYXRoKG4ucmVwbGFjZSgvXFxuL2csXCJcIiksbyxpLHIse2xldHRlclNwYWNpbmc6dS9yfSkudG9QYXRoRGF0YSgxKX1maW5hbGx5e2EoKX19fTtmdW5jdGlvbiBVZihlKXtsZXQgdD1lLnNwbGl0KFwiX1wiKSxuPXRbdC5sZW5ndGgtMV07cmV0dXJuIG49PT0kdT92b2lkIDA6bn1mdW5jdGlvbiBWbih7d2lkdGg6ZSxoZWlnaHQ6dCxjb250ZW50Om59KXtyZXR1cm4gQyhcInN2Z1wiLHt3aWR0aDplLGhlaWdodDp0LHZpZXdCb3g6YDAgMCAke2V9ICR7dH1gLHhtbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn0sbil9dmFyIGJsPU9sKFhhKCkpO3ZhciBrbT1bXCJpb3NcIixcImFuZHJvaWRcIixcIndpbmRvd3NcIixcIm1hY29zXCIsXCJ3ZWJcIl07ZnVuY3Rpb24gS2EoZSl7cmV0dXJuIGttLmluY2x1ZGVzKGUpfXZhciBUbT1bXCJwb3J0cmFpdFwiLFwibGFuZHNjYXBlXCJdO2Z1bmN0aW9uIEphKGUpe3JldHVybiBUbS5pbmNsdWRlcyhlKX12YXIgUWE7KGZ1bmN0aW9uKGUpe2UuZm9udFNpemU9XCJmb250U2l6ZVwiLGUubGluZUhlaWdodD1cImxpbmVIZWlnaHRcIn0pKFFhfHwoUWE9e30pKTt2YXIgejsoZnVuY3Rpb24oZSl7ZS5yZW09XCJyZW1cIixlLmVtPVwiZW1cIixlLnB4PVwicHhcIixlLnBlcmNlbnQ9XCIlXCIsZS52dz1cInZ3XCIsZS52aD1cInZoXCIsZS5ub25lPVwiPG5vLWNzcy11bml0PlwifSkoenx8KHo9e30pKTtmdW5jdGlvbiB5byhlKXtyZXR1cm4gdHlwZW9mIGU9PVwic3RyaW5nXCJ9ZnVuY3Rpb24geG8oZSl7cmV0dXJuIHR5cGVvZiBlPT1cIm9iamVjdFwifXZhciBGbztmdW5jdGlvbiBEKGUpe3JldHVybntraW5kOlwiY29tcGxldGVcIixzdHlsZTplfX1mdW5jdGlvbiBjZShlLHQ9e30pe2xldHtmcmFjdGlvbnM6bn09dDtpZihuJiZlLmluY2x1ZGVzKFwiL1wiKSl7bGV0W289XCJcIix1PVwiXCJdPWUuc3BsaXQoXCIvXCIsMikscz1jZShvKSxhPWNlKHUpO3JldHVybiFzfHwhYT9udWxsOltzWzBdL2FbMF0sYVsxXV19bGV0IHI9cGFyc2VGbG9hdChlKTtpZihOdW1iZXIuaXNOYU4ocikpcmV0dXJuIG51bGw7bGV0IGk9ZS5tYXRjaCgvKChbYS16XXsyLH18JSkpJC8pO2lmKCFpKXJldHVybltyLHoubm9uZV07c3dpdGNoKGk9PW51bGw/dm9pZCAwOmlbMV0pe2Nhc2VcInJlbVwiOnJldHVybltyLHoucmVtXTtjYXNlXCJweFwiOnJldHVybltyLHoucHhdO2Nhc2VcImVtXCI6cmV0dXJuW3Isei5lbV07Y2FzZVwiJVwiOnJldHVybltyLHoucGVyY2VudF07Y2FzZVwidndcIjpyZXR1cm5bcix6LnZ3XTtjYXNlXCJ2aFwiOnJldHVybltyLHoudmhdO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIEdlKGUsdCxuPXt9KXtsZXQgcj1NZSh0LG4pO3JldHVybiByPT09bnVsbD9udWxsOkQoe1tlXTpyfSl9ZnVuY3Rpb24gcG4oZSx0LG4pe2xldCByPU1lKHQpO3JldHVybiByIT09bnVsbCYmKG5bZV09ciksbn1mdW5jdGlvbiBlbChlLHQpe2xldCBuPU1lKHQpO3JldHVybiBuPT09bnVsbD9udWxsOntbZV06bn19ZnVuY3Rpb24gTWUoZSx0PXt9KXtpZihlPT09dm9pZCAwKXJldHVybiBudWxsO2xldCBuPWNlKFN0cmluZyhlKSx0KTtyZXR1cm4gbj9ydCguLi5uLHQpOm51bGx9ZnVuY3Rpb24gcnQoZSx0LG49e30pe2xldHtpc05lZ2F0aXZlOnIsZGV2aWNlOml9PW47c3dpdGNoKHQpe2Nhc2Ugei5yZW06cmV0dXJuIGUqMTYqKHI/LTE6MSk7Y2FzZSB6LnB4OnJldHVybiBlKihyPy0xOjEpO2Nhc2Ugei5wZXJjZW50OnJldHVybmAke3I/XCItXCI6XCJcIn0ke2V9JWA7Y2FzZSB6Lm5vbmU6cmV0dXJuIGUqKHI/LTE6MSk7Y2FzZSB6LnZ3OnJldHVybiBpIT1udWxsJiZpLndpbmRvd0RpbWVuc2lvbnM/aS53aW5kb3dEaW1lbnNpb25zLndpZHRoKihlLzEwMCk6KEZlKFwiYHZ3YCBDU1MgdW5pdCByZXF1aXJlcyBjb25maWd1cmF0aW9uIHdpdGggYHVzZURldmljZUNvbnRleHQoKWBcIiksbnVsbCk7Y2FzZSB6LnZoOnJldHVybiBpIT1udWxsJiZpLndpbmRvd0RpbWVuc2lvbnM/aS53aW5kb3dEaW1lbnNpb25zLmhlaWdodCooZS8xMDApOihGZShcImB2aGAgQ1NTIHVuaXQgcmVxdWlyZXMgY29uZmlndXJhdGlvbiB3aXRoIGB1c2VEZXZpY2VDb250ZXh0KClgXCIpLG51bGwpO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIHdvKGUpe2xldCB0PWNlKGUpO2lmKCF0KXJldHVybiBudWxsO2xldFtuLHJdPXQ7c3dpdGNoKHIpe2Nhc2Ugei5yZW06cmV0dXJuIG4qMTY7Y2FzZSB6LnB4OnJldHVybiBuO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBBbT17dDpcIlRvcFwiLHRyOlwiVG9wUmlnaHRcIix0bDpcIlRvcExlZnRcIixiOlwiQm90dG9tXCIsYnI6XCJCb3R0b21SaWdodFwiLGJsOlwiQm90dG9tTGVmdFwiLGw6XCJMZWZ0XCIscjpcIlJpZ2h0XCIseDpcIkhvcml6b250YWxcIix5OlwiVmVydGljYWxcIn07ZnVuY3Rpb24gRW8oZSl7cmV0dXJuIEFtW2U/P1wiXCJdfHxcIkFsbFwifWZ1bmN0aW9uIENvKGUpe2xldCB0PVwiQWxsXCI7cmV0dXJuW2UucmVwbGFjZSgvXi0odHxifHJ8bHx0cnx0bHxicnxibCkoLXwkKS8sKHIsaSk9Pih0PUVvKGkpLFwiXCIpKSx0XX1mdW5jdGlvbiBmdChlLHQ9e30pe2lmKGUuaW5jbHVkZXMoXCIvXCIpKXtsZXQgbj1aYShlLHsuLi50LGZyYWN0aW9uczohMH0pO2lmKG4pcmV0dXJuIG59cmV0dXJuIGVbMF09PT1cIltcIiYmKGU9ZS5zbGljZSgxLC0xKSksWmEoZSx0KX1mdW5jdGlvbiBBZShlLHQsbj17fSl7bGV0IHI9ZnQodCxuKTtyZXR1cm4gcj09PW51bGw/bnVsbDpEKHtbZV06cn0pfWZ1bmN0aW9uIFphKGUsdD17fSl7aWYoZT09PVwicHhcIilyZXR1cm4gMTtsZXQgbj1jZShlLHQpO2lmKCFuKXJldHVybiBudWxsO2xldFtyLGldPW47cmV0dXJuIHQuZnJhY3Rpb25zJiYoaT16LnBlcmNlbnQscio9MTAwKSxpPT09ei5ub25lJiYocj1yLzQsaT16LnJlbSkscnQocixpLHQpfWZ1bmN0aW9uIE9tKC4uLmUpe2NvbnNvbGUud2FybiguLi5lKX1mdW5jdGlvbiBQbSguLi5lKXt9dmFyIEZlPXR5cGVvZiBwcm9jZXNzPlwidVwifHwoKEZvPXByb2Nlc3M9PW51bGw/dm9pZCAwOnByb2Nlc3MuZW52KT09PW51bGx8fEZvPT09dm9pZCAwP3ZvaWQgMDpGby5KRVNUX1dPUktFUl9JRCk9PT12b2lkIDA/T206UG07dmFyIEJtPVtbXCJhc3BlY3Qtc3F1YXJlXCIsRCh7YXNwZWN0UmF0aW86MX0pXSxbXCJhc3BlY3QtdmlkZW9cIixEKHthc3BlY3RSYXRpbzoxNi85fSldLFtcIml0ZW1zLWNlbnRlclwiLEQoe2FsaWduSXRlbXM6XCJjZW50ZXJcIn0pXSxbXCJpdGVtcy1zdGFydFwiLEQoe2FsaWduSXRlbXM6XCJmbGV4LXN0YXJ0XCJ9KV0sW1wiaXRlbXMtZW5kXCIsRCh7YWxpZ25JdGVtczpcImZsZXgtZW5kXCJ9KV0sW1wiaXRlbXMtYmFzZWxpbmVcIixEKHthbGlnbkl0ZW1zOlwiYmFzZWxpbmVcIn0pXSxbXCJpdGVtcy1zdHJldGNoXCIsRCh7YWxpZ25JdGVtczpcInN0cmV0Y2hcIn0pXSxbXCJqdXN0aWZ5LXN0YXJ0XCIsRCh7anVzdGlmeUNvbnRlbnQ6XCJmbGV4LXN0YXJ0XCJ9KV0sW1wianVzdGlmeS1lbmRcIixEKHtqdXN0aWZ5Q29udGVudDpcImZsZXgtZW5kXCJ9KV0sW1wianVzdGlmeS1jZW50ZXJcIixEKHtqdXN0aWZ5Q29udGVudDpcImNlbnRlclwifSldLFtcImp1c3RpZnktYmV0d2VlblwiLEQoe2p1c3RpZnlDb250ZW50Olwic3BhY2UtYmV0d2VlblwifSldLFtcImp1c3RpZnktYXJvdW5kXCIsRCh7anVzdGlmeUNvbnRlbnQ6XCJzcGFjZS1hcm91bmRcIn0pXSxbXCJqdXN0aWZ5LWV2ZW5seVwiLEQoe2p1c3RpZnlDb250ZW50Olwic3BhY2UtZXZlbmx5XCJ9KV0sW1wiY29udGVudC1zdGFydFwiLEQoe2FsaWduQ29udGVudDpcImZsZXgtc3RhcnRcIn0pXSxbXCJjb250ZW50LWVuZFwiLEQoe2FsaWduQ29udGVudDpcImZsZXgtZW5kXCJ9KV0sW1wiY29udGVudC1iZXR3ZWVuXCIsRCh7YWxpZ25Db250ZW50Olwic3BhY2UtYmV0d2VlblwifSldLFtcImNvbnRlbnQtYXJvdW5kXCIsRCh7YWxpZ25Db250ZW50Olwic3BhY2UtYXJvdW5kXCJ9KV0sW1wiY29udGVudC1zdHJldGNoXCIsRCh7YWxpZ25Db250ZW50Olwic3RyZXRjaFwifSldLFtcImNvbnRlbnQtY2VudGVyXCIsRCh7YWxpZ25Db250ZW50OlwiY2VudGVyXCJ9KV0sW1wic2VsZi1hdXRvXCIsRCh7YWxpZ25TZWxmOlwiYXV0b1wifSldLFtcInNlbGYtc3RhcnRcIixEKHthbGlnblNlbGY6XCJmbGV4LXN0YXJ0XCJ9KV0sW1wic2VsZi1lbmRcIixEKHthbGlnblNlbGY6XCJmbGV4LWVuZFwifSldLFtcInNlbGYtY2VudGVyXCIsRCh7YWxpZ25TZWxmOlwiY2VudGVyXCJ9KV0sW1wic2VsZi1zdHJldGNoXCIsRCh7YWxpZ25TZWxmOlwic3RyZXRjaFwifSldLFtcInNlbGYtYmFzZWxpbmVcIixEKHthbGlnblNlbGY6XCJiYXNlbGluZVwifSldLFtcImRpcmVjdGlvbi1pbmhlcml0XCIsRCh7ZGlyZWN0aW9uOlwiaW5oZXJpdFwifSldLFtcImRpcmVjdGlvbi1sdHJcIixEKHtkaXJlY3Rpb246XCJsdHJcIn0pXSxbXCJkaXJlY3Rpb24tcnRsXCIsRCh7ZGlyZWN0aW9uOlwicnRsXCJ9KV0sW1wiaGlkZGVuXCIsRCh7ZGlzcGxheTpcIm5vbmVcIn0pXSxbXCJmbGV4XCIsRCh7ZGlzcGxheTpcImZsZXhcIn0pXSxbXCJmbGV4LXJvd1wiLEQoe2ZsZXhEaXJlY3Rpb246XCJyb3dcIn0pXSxbXCJmbGV4LXJvdy1yZXZlcnNlXCIsRCh7ZmxleERpcmVjdGlvbjpcInJvdy1yZXZlcnNlXCJ9KV0sW1wiZmxleC1jb2xcIixEKHtmbGV4RGlyZWN0aW9uOlwiY29sdW1uXCJ9KV0sW1wiZmxleC1jb2wtcmV2ZXJzZVwiLEQoe2ZsZXhEaXJlY3Rpb246XCJjb2x1bW4tcmV2ZXJzZVwifSldLFtcImZsZXgtd3JhcFwiLEQoe2ZsZXhXcmFwOlwid3JhcFwifSldLFtcImZsZXgtd3JhcC1yZXZlcnNlXCIsRCh7ZmxleFdyYXA6XCJ3cmFwLXJldmVyc2VcIn0pXSxbXCJmbGV4LW5vd3JhcFwiLEQoe2ZsZXhXcmFwOlwibm93cmFwXCJ9KV0sW1wiZmxleC1hdXRvXCIsRCh7ZmxleEdyb3c6MSxmbGV4U2hyaW5rOjEsZmxleEJhc2lzOlwiYXV0b1wifSldLFtcImZsZXgtaW5pdGlhbFwiLEQoe2ZsZXhHcm93OjAsZmxleFNocmluazoxLGZsZXhCYXNpczpcImF1dG9cIn0pXSxbXCJmbGV4LW5vbmVcIixEKHtmbGV4R3JvdzowLGZsZXhTaHJpbms6MCxmbGV4QmFzaXM6XCJhdXRvXCJ9KV0sW1wib3ZlcmZsb3ctaGlkZGVuXCIsRCh7b3ZlcmZsb3c6XCJoaWRkZW5cIn0pXSxbXCJvdmVyZmxvdy12aXNpYmxlXCIsRCh7b3ZlcmZsb3c6XCJ2aXNpYmxlXCJ9KV0sW1wib3ZlcmZsb3ctc2Nyb2xsXCIsRCh7b3ZlcmZsb3c6XCJzY3JvbGxcIn0pXSxbXCJhYnNvbHV0ZVwiLEQoe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIn0pXSxbXCJyZWxhdGl2ZVwiLEQoe3Bvc2l0aW9uOlwicmVsYXRpdmVcIn0pXSxbXCJpdGFsaWNcIixEKHtmb250U3R5bGU6XCJpdGFsaWNcIn0pXSxbXCJub3QtaXRhbGljXCIsRCh7Zm9udFN0eWxlOlwibm9ybWFsXCJ9KV0sW1wib2xkc3R5bGUtbnVtc1wiLHlyKFwib2xkc3R5bGUtbnVtc1wiKV0sW1wic21hbGwtY2Fwc1wiLHlyKFwic21hbGwtY2Fwc1wiKV0sW1wibGluaW5nLW51bXNcIix5cihcImxpbmluZy1udW1zXCIpXSxbXCJ0YWJ1bGFyLW51bXNcIix5cihcInRhYnVsYXItbnVtc1wiKV0sW1wicHJvcG9ydGlvbmFsLW51bXNcIix5cihcInByb3BvcnRpb25hbC1udW1zXCIpXSxbXCJmb250LXRoaW5cIixEKHtmb250V2VpZ2h0OlwiMTAwXCJ9KV0sW1wiZm9udC0xMDBcIixEKHtmb250V2VpZ2h0OlwiMTAwXCJ9KV0sW1wiZm9udC1leHRyYWxpZ2h0XCIsRCh7Zm9udFdlaWdodDpcIjIwMFwifSldLFtcImZvbnQtMjAwXCIsRCh7Zm9udFdlaWdodDpcIjIwMFwifSldLFtcImZvbnQtbGlnaHRcIixEKHtmb250V2VpZ2h0OlwiMzAwXCJ9KV0sW1wiZm9udC0zMDBcIixEKHtmb250V2VpZ2h0OlwiMzAwXCJ9KV0sW1wiZm9udC1ub3JtYWxcIixEKHtmb250V2VpZ2h0Olwibm9ybWFsXCJ9KV0sW1wiZm9udC00MDBcIixEKHtmb250V2VpZ2h0OlwiNDAwXCJ9KV0sW1wiZm9udC1tZWRpdW1cIixEKHtmb250V2VpZ2h0OlwiNTAwXCJ9KV0sW1wiZm9udC01MDBcIixEKHtmb250V2VpZ2h0OlwiNTAwXCJ9KV0sW1wiZm9udC1zZW1pYm9sZFwiLEQoe2ZvbnRXZWlnaHQ6XCI2MDBcIn0pXSxbXCJmb250LTYwMFwiLEQoe2ZvbnRXZWlnaHQ6XCI2MDBcIn0pXSxbXCJmb250LWJvbGRcIixEKHtmb250V2VpZ2h0OlwiYm9sZFwifSldLFtcImZvbnQtNzAwXCIsRCh7Zm9udFdlaWdodDpcIjcwMFwifSldLFtcImZvbnQtZXh0cmFib2xkXCIsRCh7Zm9udFdlaWdodDpcIjgwMFwifSldLFtcImZvbnQtODAwXCIsRCh7Zm9udFdlaWdodDpcIjgwMFwifSldLFtcImZvbnQtYmxhY2tcIixEKHtmb250V2VpZ2h0OlwiOTAwXCJ9KV0sW1wiZm9udC05MDBcIixEKHtmb250V2VpZ2h0OlwiOTAwXCJ9KV0sW1wiaW5jbHVkZS1mb250LXBhZGRpbmdcIixEKHtpbmNsdWRlRm9udFBhZGRpbmc6ITB9KV0sW1wicmVtb3ZlLWZvbnQtcGFkZGluZ1wiLEQoe2luY2x1ZGVGb250UGFkZGluZzohMX0pXSxbXCJtYXgtdy1ub25lXCIsRCh7bWF4V2lkdGg6XCI5OTk5OSVcIn0pXSxbXCJ0ZXh0LWxlZnRcIixEKHt0ZXh0QWxpZ246XCJsZWZ0XCJ9KV0sW1widGV4dC1jZW50ZXJcIixEKHt0ZXh0QWxpZ246XCJjZW50ZXJcIn0pXSxbXCJ0ZXh0LXJpZ2h0XCIsRCh7dGV4dEFsaWduOlwicmlnaHRcIn0pXSxbXCJ0ZXh0LWp1c3RpZnlcIixEKHt0ZXh0QWxpZ246XCJqdXN0aWZ5XCJ9KV0sW1widGV4dC1hdXRvXCIsRCh7dGV4dEFsaWduOlwiYXV0b1wifSldLFtcInVuZGVybGluZVwiLEQoe3RleHREZWNvcmF0aW9uTGluZTpcInVuZGVybGluZVwifSldLFtcImxpbmUtdGhyb3VnaFwiLEQoe3RleHREZWNvcmF0aW9uTGluZTpcImxpbmUtdGhyb3VnaFwifSldLFtcIm5vLXVuZGVybGluZVwiLEQoe3RleHREZWNvcmF0aW9uTGluZTpcIm5vbmVcIn0pXSxbXCJ1cHBlcmNhc2VcIixEKHt0ZXh0VHJhbnNmb3JtOlwidXBwZXJjYXNlXCJ9KV0sW1wibG93ZXJjYXNlXCIsRCh7dGV4dFRyYW5zZm9ybTpcImxvd2VyY2FzZVwifSldLFtcImNhcGl0YWxpemVcIixEKHt0ZXh0VHJhbnNmb3JtOlwiY2FwaXRhbGl6ZVwifSldLFtcIm5vcm1hbC1jYXNlXCIsRCh7dGV4dFRyYW5zZm9ybTpcIm5vbmVcIn0pXSxbXCJ3LWF1dG9cIixEKHt3aWR0aDpcImF1dG9cIn0pXSxbXCJoLWF1dG9cIixEKHtoZWlnaHQ6XCJhdXRvXCJ9KV0sW1wic2hhZG93LXNtXCIsRCh7c2hhZG93T2Zmc2V0Ont3aWR0aDoxLGhlaWdodDoxfSxzaGFkb3dDb2xvcjpcIiMwMDBcIixzaGFkb3dSYWRpdXM6MSxzaGFkb3dPcGFjaXR5Oi4wMjUsZWxldmF0aW9uOjF9KV0sW1wic2hhZG93XCIsRCh7c2hhZG93T2Zmc2V0Ont3aWR0aDoxLGhlaWdodDoxfSxzaGFkb3dDb2xvcjpcIiMwMDBcIixzaGFkb3dSYWRpdXM6MSxzaGFkb3dPcGFjaXR5Oi4wNzUsZWxldmF0aW9uOjJ9KV0sW1wic2hhZG93LW1kXCIsRCh7c2hhZG93T2Zmc2V0Ont3aWR0aDoxLGhlaWdodDoxfSxzaGFkb3dDb2xvcjpcIiMwMDBcIixzaGFkb3dSYWRpdXM6MyxzaGFkb3dPcGFjaXR5Oi4xMjUsZWxldmF0aW9uOjN9KV0sW1wic2hhZG93LWxnXCIsRCh7c2hhZG93T2Zmc2V0Ont3aWR0aDoxLGhlaWdodDoxfSxzaGFkb3dDb2xvcjpcIiMwMDBcIixzaGFkb3dPcGFjaXR5Oi4xNSxzaGFkb3dSYWRpdXM6OCxlbGV2YXRpb246OH0pXSxbXCJzaGFkb3cteGxcIixEKHtzaGFkb3dPZmZzZXQ6e3dpZHRoOjEsaGVpZ2h0OjF9LHNoYWRvd0NvbG9yOlwiIzAwMFwiLHNoYWRvd09wYWNpdHk6LjE5LHNoYWRvd1JhZGl1czoyMCxlbGV2YXRpb246MTJ9KV0sW1wic2hhZG93LTJ4bFwiLEQoe3NoYWRvd09mZnNldDp7d2lkdGg6MSxoZWlnaHQ6MX0sc2hhZG93Q29sb3I6XCIjMDAwXCIsc2hhZG93T3BhY2l0eTouMjUsc2hhZG93UmFkaXVzOjMwLGVsZXZhdGlvbjoxNn0pXSxbXCJzaGFkb3ctbm9uZVwiLEQoe3NoYWRvd09mZnNldDp7d2lkdGg6MCxoZWlnaHQ6MH0sc2hhZG93Q29sb3I6XCIjMDAwXCIsc2hhZG93UmFkaXVzOjAsc2hhZG93T3BhY2l0eTowLGVsZXZhdGlvbjowfSldXSxfbz1CbTtmdW5jdGlvbiB5cihlKXtyZXR1cm57a2luZDpcImRlcGVuZGVudFwiLGNvbXBsZXRlKHQpeyghdC5mb250VmFyaWFudHx8IUFycmF5LmlzQXJyYXkodC5mb250VmFyaWFudCkpJiYodC5mb250VmFyaWFudD1bXSksdC5mb250VmFyaWFudC5wdXNoKGUpfX19dmFyIHhyPWNsYXNze2NvbnN0cnVjdG9yKHQpe3RoaXMuaXI9bmV3IE1hcChfbyksdGhpcy5zdHlsZXM9bmV3IE1hcCx0aGlzLnByZWZpeGVzPW5ldyBNYXAsdGhpcy5pcj1uZXcgTWFwKFsuLi5fbywuLi50Pz9bXV0pfWdldFN0eWxlKHQpe3JldHVybiB0aGlzLnN0eWxlcy5nZXQodCl9c2V0U3R5bGUodCxuKXt0aGlzLnN0eWxlcy5zZXQodCxuKX1nZXRJcih0KXtyZXR1cm4gdGhpcy5pci5nZXQodCl9c2V0SXIodCxuKXt0aGlzLmlyLnNldCh0LG4pfWdldFByZWZpeE1hdGNoKHQpe3JldHVybiB0aGlzLnByZWZpeGVzLmdldCh0KX1zZXRQcmVmaXhNYXRjaCh0LG4pe3RoaXMucHJlZml4ZXMuc2V0KHQsbil9fTtmdW5jdGlvbiBTbyhlLHQsbj17fSl7bGV0IHI9dD09bnVsbD92b2lkIDA6dFtlXTtpZighcilyZXR1cm4gQWUoXCJmb250U2l6ZVwiLGUsbik7aWYodHlwZW9mIHI9PVwic3RyaW5nXCIpcmV0dXJuIEdlKFwiZm9udFNpemVcIixyKTtsZXQgaT17fSxbbyx1XT1yLHM9ZWwoXCJmb250U2l6ZVwiLG8pO2lmKHMmJihpPXMpLHR5cGVvZiB1PT1cInN0cmluZ1wiKXJldHVybiBEKHBuKFwibGluZUhlaWdodFwiLHRsKHUsaSksaSkpO2xldHtsaW5lSGVpZ2h0OmEsbGV0dGVyU3BhY2luZzpsfT11O3JldHVybiBhJiZwbihcImxpbmVIZWlnaHRcIix0bChhLGkpLGkpLGwmJnBuKFwibGV0dGVyU3BhY2luZ1wiLGwsaSksRChpKX1mdW5jdGlvbiB0bChlLHQpe2xldCBuPWNlKGUpO2lmKG4pe2xldFtyLGldPW47aWYoKGk9PT16Lm5vbmV8fGk9PT16LmVtKSYmdHlwZW9mIHQuZm9udFNpemU9PVwibnVtYmVyXCIpcmV0dXJuIHQuZm9udFNpemUqcn1yZXR1cm4gZX1mdW5jdGlvbiBrbyhlLHQpe3ZhciBuO2xldCByPShuPXQ9PW51bGw/dm9pZCAwOnRbZV0pIT09bnVsbCYmbiE9PXZvaWQgMD9uOmUuc3RhcnRzV2l0aChcIltcIik/ZS5zbGljZSgxLC0xKTplLGk9Y2Uocik7aWYoIWkpcmV0dXJuIG51bGw7bGV0W28sdV09aTtpZih1PT09ei5ub25lKXJldHVybntraW5kOlwiZGVwZW5kZW50XCIsY29tcGxldGUoYSl7aWYodHlwZW9mIGEuZm9udFNpemUhPVwibnVtYmVyXCIpcmV0dXJuXCJyZWxhdGl2ZSBsaW5lLWhlaWdodCB1dGlsaXRpZXMgcmVxdWlyZSB0aGF0IGZvbnQtc2l6ZSBiZSBzZXRcIjthLmxpbmVIZWlnaHQ9YS5mb250U2l6ZSpvfX07bGV0IHM9cnQobyx1KTtyZXR1cm4gcyE9PW51bGw/RCh7bGluZUhlaWdodDpzfSk6bnVsbH1mdW5jdGlvbiBUbyhlLHQsbixyLGkpe2xldCBvPVwiXCI7aWYoclswXT09PVwiW1wiKW89ci5zbGljZSgxLC0xKTtlbHNle2xldCBsPWk9PW51bGw/dm9pZCAwOmlbcl07aWYobClvPWw7ZWxzZXtsZXQgZj1mdChyKTtyZXR1cm4gZiYmdHlwZW9mIGY9PVwibnVtYmVyXCI/cmwoZix6LnB4LHQsZSk6bnVsbH19aWYobz09PVwiYXV0b1wiKXJldHVybiBubCh0LGUsXCJhdXRvXCIpO2xldCB1PWNlKG8pO2lmKCF1KXJldHVybiBudWxsO2xldFtzLGFdPXU7cmV0dXJuIG4mJihzPS1zKSxybChzLGEsdCxlKX1mdW5jdGlvbiBybChlLHQsbixyKXtsZXQgaT1ydChlLHQpO3JldHVybiBpPT09bnVsbD9udWxsOm5sKG4scixpKX1mdW5jdGlvbiBubChlLHQsbil7c3dpdGNoKGUpe2Nhc2VcIkFsbFwiOnJldHVybntraW5kOlwiY29tcGxldGVcIixzdHlsZTp7W2Ake3R9VG9wYF06bixbYCR7dH1SaWdodGBdOm4sW2Ake3R9Qm90dG9tYF06bixbYCR7dH1MZWZ0YF06bn19O2Nhc2VcIkJvdHRvbVwiOmNhc2VcIlRvcFwiOmNhc2VcIkxlZnRcIjpjYXNlXCJSaWdodFwiOnJldHVybntraW5kOlwiY29tcGxldGVcIixzdHlsZTp7W2Ake3R9JHtlfWBdOm59fTtjYXNlXCJWZXJ0aWNhbFwiOnJldHVybntraW5kOlwiY29tcGxldGVcIixzdHlsZTp7W2Ake3R9VG9wYF06bixbYCR7dH1Cb3R0b21gXTpufX07Y2FzZVwiSG9yaXpvbnRhbFwiOnJldHVybntraW5kOlwiY29tcGxldGVcIixzdHlsZTp7W2Ake3R9TGVmdGBdOm4sW2Ake3R9UmlnaHRgXTpufX07ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gQW8oZSl7aWYoIWUpcmV0dXJue307bGV0IHQ9T2JqZWN0LmVudHJpZXMoZSkucmVkdWNlKChpLFtvLHVdKT0+e2xldCBzPVswLDEvMCwwXSxhPXR5cGVvZiB1PT1cInN0cmluZ1wiP3ttaW46dX06dSxsPWEubWluP3dvKGEubWluKTowO2w9PT1udWxsP0ZlKGBpbnZhbGlkIHNjcmVlbiBjb25maWcgdmFsdWU6ICR7b30tPm1pbjogJHthLm1pbn1gKTpzWzBdPWw7bGV0IGY9YS5tYXg/d28oYS5tYXgpOjEvMDtyZXR1cm4gZj09PW51bGw/RmUoYGludmFsaWQgc2NyZWVuIGNvbmZpZyB2YWx1ZTogJHtvfS0+bWF4OiAke2EubWF4fWApOnNbMV09ZixpW29dPXMsaX0se30pLG49T2JqZWN0LnZhbHVlcyh0KTtuLnNvcnQoKGksbyk9PntsZXRbdSxzXT1pLFthLGxdPW87cmV0dXJuIHM9PT0xLzB8fGw9PT0xLzA/dS1hOnMtbH0pO2xldCByPTA7cmV0dXJuIG4uZm9yRWFjaChpPT5pWzJdPXIrKyksdH1mdW5jdGlvbiBPbyhlLHQpe2xldCBuPXQ9PW51bGw/dm9pZCAwOnRbZV07aWYoIW4pcmV0dXJuIG51bGw7aWYodHlwZW9mIG49PVwic3RyaW5nXCIpcmV0dXJuIEQoe2ZvbnRGYW1pbHk6bn0pO2xldCByPW5bMF07cmV0dXJuIHI/RCh7Zm9udEZhbWlseTpyfSk6bnVsbH1mdW5jdGlvbiBjdChlLHQsbil7aWYoIW4pcmV0dXJuIG51bGw7bGV0IHI7dC5pbmNsdWRlcyhcIi9cIikmJihbdD1cIlwiLHJdPXQuc3BsaXQoXCIvXCIsMikpO2xldCBpPVwiXCI7aWYodC5zdGFydHNXaXRoKFwiWyNcIil8fHQuc3RhcnRzV2l0aChcIltyZ2JcIik/aT10LnNsaWNlKDEsLTEpOmk9dWwodCxuKSwhaSlyZXR1cm4gbnVsbDtpZihyKXtsZXQgbz1OdW1iZXIocik7aWYoIU51bWJlci5pc05hTihvKSlyZXR1cm4gaT1pbChpLG8vMTAwKSxEKHtbaG5bZV0uY29sb3JdOml9KX1yZXR1cm57a2luZDpcImRlcGVuZGVudFwiLGNvbXBsZXRlKG8pe2xldCB1PWhuW2VdLm9wYWNpdHkscz1vW3VdO3R5cGVvZiBzPT1cIm51bWJlclwiJiYoaT1pbChpLHMpKSxvW2huW2VdLmNvbG9yXT1pfX19ZnVuY3Rpb24gRnIoZSx0KXtsZXQgbj1wYXJzZUludCh0LDEwKTtpZihOdW1iZXIuaXNOYU4obikpcmV0dXJuIG51bGw7bGV0IHI9bi8xMDA7cmV0dXJue2tpbmQ6XCJjb21wbGV0ZVwiLHN0eWxlOntbaG5bZV0ub3BhY2l0eV06cn19fWZ1bmN0aW9uIGlsKGUsdCl7cmV0dXJuIGUuc3RhcnRzV2l0aChcIiNcIik/ZT1JbShlKTplLnN0YXJ0c1dpdGgoXCJyZ2IoXCIpJiYoZT1lLnJlcGxhY2UoL15yZ2JcXCgvLFwicmdiYShcIikucmVwbGFjZSgvXFwpJC8sXCIsIDEpXCIpKSxlLnJlcGxhY2UoLywgP1xcZCpcXC4/KFxcZCspXFwpJC8sYCwgJHt0fSlgKX1mdW5jdGlvbiBvbChlKXtmb3IobGV0IHQgaW4gZSl0LnN0YXJ0c1dpdGgoXCJfX29wYWNpdHlfXCIpJiZkZWxldGUgZVt0XX12YXIgaG49e2JnOntvcGFjaXR5OlwiX19vcGFjaXR5X2JnXCIsY29sb3I6XCJiYWNrZ3JvdW5kQ29sb3JcIn0sdGV4dDp7b3BhY2l0eTpcIl9fb3BhY2l0eV90ZXh0XCIsY29sb3I6XCJjb2xvclwifSxib3JkZXI6e29wYWNpdHk6XCJfX29wYWNpdHlfYm9yZGVyXCIsY29sb3I6XCJib3JkZXJDb2xvclwifSxib3JkZXJUb3A6e29wYWNpdHk6XCJfX29wYWNpdHlfYm9yZGVyXCIsY29sb3I6XCJib3JkZXJUb3BDb2xvclwifSxib3JkZXJCb3R0b206e29wYWNpdHk6XCJfX29wYWNpdHlfYm9yZGVyXCIsY29sb3I6XCJib3JkZXJCb3R0b21Db2xvclwifSxib3JkZXJMZWZ0OntvcGFjaXR5OlwiX19vcGFjaXR5X2JvcmRlclwiLGNvbG9yOlwiYm9yZGVyTGVmdENvbG9yXCJ9LGJvcmRlclJpZ2h0OntvcGFjaXR5OlwiX19vcGFjaXR5X2JvcmRlclwiLGNvbG9yOlwiYm9yZGVyUmlnaHRDb2xvclwifSxzaGFkb3c6e29wYWNpdHk6XCJfX29wYWNpdHlfc2hhZG93XCIsY29sb3I6XCJzaGFkb3dDb2xvclwifSx0aW50OntvcGFjaXR5OlwiX19vcGFjaXR5X3RpbnRcIixjb2xvcjpcInRpbnRDb2xvclwifX07ZnVuY3Rpb24gSW0oZSl7bGV0IHQ9ZTtlPWUucmVwbGFjZShSbSwodSxzLGEsbCk9PnMrcythK2ErbCtsKTtsZXQgbj1MbS5leGVjKGUpO2lmKCFuKXJldHVybiBGZShgaW52YWxpZCBjb25maWcgaGV4IGNvbG9yIHZhbHVlOiAke3R9YCksXCJyZ2JhKDAsIDAsIDAsIDEpXCI7bGV0IHI9cGFyc2VJbnQoblsxXSwxNiksaT1wYXJzZUludChuWzJdLDE2KSxvPXBhcnNlSW50KG5bM10sMTYpO3JldHVybmByZ2JhKCR7cn0sICR7aX0sICR7b30sIDEpYH1mdW5jdGlvbiB1bChlLHQpe2xldCBuPXRbZV07aWYoeW8obikpcmV0dXJuIG47aWYoeG8obikmJnlvKG4uREVGQVVMVCkpcmV0dXJuIG4uREVGQVVMVDtsZXRbcj1cIlwiLC4uLmldPWUuc3BsaXQoXCItXCIpO2Zvcig7ciE9PWU7KXtsZXQgbz10W3JdO2lmKHhvKG8pKXJldHVybiB1bChpLmpvaW4oXCItXCIpLG8pO2lmKGkubGVuZ3RoPT09MClyZXR1cm5cIlwiO3I9YCR7cn0tJHtpLnNoaWZ0KCl9YH1yZXR1cm5cIlwifXZhciBSbT0vXiM/KFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pJC9pLExtPS9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2k7ZnVuY3Rpb24gYWwoZSx0KXtsZXRbbixyXT1DbyhlKTtpZihuLm1hdGNoKC9eKC0/KFxcZCkrKT8kLykpcmV0dXJuIE1tKG4scix0PT1udWxsP3ZvaWQgMDp0LmJvcmRlcldpZHRoKTtpZihuPW4ucmVwbGFjZSgvXi0vLFwiXCIpLFtcImRhc2hlZFwiLFwic29saWRcIixcImRvdHRlZFwiXS5pbmNsdWRlcyhuKSlyZXR1cm4gRCh7Ym9yZGVyU3R5bGU6bn0pO2xldCBvPVwiYm9yZGVyXCI7c3dpdGNoKHIpe2Nhc2VcIkJvdHRvbVwiOm89XCJib3JkZXJCb3R0b21cIjticmVhaztjYXNlXCJUb3BcIjpvPVwiYm9yZGVyVG9wXCI7YnJlYWs7Y2FzZVwiTGVmdFwiOm89XCJib3JkZXJMZWZ0XCI7YnJlYWs7Y2FzZVwiUmlnaHRcIjpvPVwiYm9yZGVyUmlnaHRcIjticmVha31sZXQgdT1jdChvLG4sdD09bnVsbD92b2lkIDA6dC5ib3JkZXJDb2xvcik7aWYodSlyZXR1cm4gdTtsZXQgcz1gYm9yZGVyJHtyPT09XCJBbGxcIj9cIlwiOnJ9V2lkdGhgO249bi5yZXBsYWNlKC9eLS8sXCJcIik7bGV0IGE9bi5zbGljZSgxLC0xKSxsPUFlKHMsYSk7cmV0dXJuIHR5cGVvZihsPT1udWxsP3ZvaWQgMDpsLnN0eWxlW3NdKSE9XCJudW1iZXJcIj9udWxsOmx9ZnVuY3Rpb24gTW0oZSx0LG4pe2lmKCFuKXJldHVybiBudWxsO2U9ZS5yZXBsYWNlKC9eLS8sXCJcIik7bGV0IGk9bltlPT09XCJcIj9cIkRFRkFVTFRcIjplXTtpZihpPT09dm9pZCAwKXJldHVybiBudWxsO2xldCBvPWBib3JkZXIke3Q9PT1cIkFsbFwiP1wiXCI6dH1XaWR0aGA7cmV0dXJuIEdlKG8saSl9ZnVuY3Rpb24gbGwoZSx0KXtpZighdClyZXR1cm4gbnVsbDtsZXRbbixyXT1DbyhlKTtuPW4ucmVwbGFjZSgvXi0vLFwiXCIpLG49PT1cIlwiJiYobj1cIkRFRkFVTFRcIik7bGV0IGk9YGJvcmRlciR7cj09PVwiQWxsXCI/XCJcIjpyfVJhZGl1c2Asbz10W25dO2lmKG8pcmV0dXJuIHNsKEdlKGksbykpO2xldCB1PUFlKGksbik7cmV0dXJuIHR5cGVvZih1PT1udWxsP3ZvaWQgMDp1LnN0eWxlW2ldKSE9XCJudW1iZXJcIj9udWxsOnNsKHUpfWZ1bmN0aW9uIHNsKGUpe2lmKChlPT1udWxsP3ZvaWQgMDplLmtpbmQpIT09XCJjb21wbGV0ZVwiKXJldHVybiBlO2xldCB0PWUuc3R5bGUuYm9yZGVyVG9wUmFkaXVzO3QhPT12b2lkIDAmJihlLnN0eWxlLmJvcmRlclRvcExlZnRSYWRpdXM9dCxlLnN0eWxlLmJvcmRlclRvcFJpZ2h0UmFkaXVzPXQsZGVsZXRlIGUuc3R5bGUuYm9yZGVyVG9wUmFkaXVzKTtsZXQgbj1lLnN0eWxlLmJvcmRlckJvdHRvbVJhZGl1cztuIT09dm9pZCAwJiYoZS5zdHlsZS5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzPW4sZS5zdHlsZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cz1uLGRlbGV0ZSBlLnN0eWxlLmJvcmRlckJvdHRvbVJhZGl1cyk7bGV0IHI9ZS5zdHlsZS5ib3JkZXJMZWZ0UmFkaXVzO3IhPT12b2lkIDAmJihlLnN0eWxlLmJvcmRlckJvdHRvbUxlZnRSYWRpdXM9cixlLnN0eWxlLmJvcmRlclRvcExlZnRSYWRpdXM9cixkZWxldGUgZS5zdHlsZS5ib3JkZXJMZWZ0UmFkaXVzKTtsZXQgaT1lLnN0eWxlLmJvcmRlclJpZ2h0UmFkaXVzO3JldHVybiBpIT09dm9pZCAwJiYoZS5zdHlsZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cz1pLGUuc3R5bGUuYm9yZGVyVG9wUmlnaHRSYWRpdXM9aSxkZWxldGUgZS5zdHlsZS5ib3JkZXJSaWdodFJhZGl1cyksZX1mdW5jdGlvbiBDdChlLHQsbixyKXtsZXQgaT1udWxsO2U9PT1cImluc2V0XCImJih0PXQucmVwbGFjZSgvXih4fHkpLS8sKHMsYSk9PihpPWE9PT1cInhcIj9cInhcIjpcInlcIixcIlwiKSkpO2xldCBvPXI9PW51bGw/dm9pZCAwOnJbdF07aWYobyl7bGV0IHM9TWUobyx7aXNOZWdhdGl2ZTpufSk7aWYocyE9PW51bGwpcmV0dXJuIGZsKGUsaSxzKX1sZXQgdT1mdCh0LHtpc05lZ2F0aXZlOm59KTtyZXR1cm4gdSE9PW51bGw/ZmwoZSxpLHUpOm51bGx9ZnVuY3Rpb24gZmwoZSx0LG4pe2lmKGUhPT1cImluc2V0XCIpcmV0dXJuIEQoe1tlXTpufSk7c3dpdGNoKHQpe2Nhc2UgbnVsbDpyZXR1cm4gRCh7dG9wOm4sbGVmdDpuLHJpZ2h0Om4sYm90dG9tOm59KTtjYXNlXCJ5XCI6cmV0dXJuIEQoe3RvcDpuLGJvdHRvbTpufSk7Y2FzZVwieFwiOnJldHVybiBEKHtsZWZ0Om4scmlnaHQ6bn0pfX1mdW5jdGlvbiB3cihlLHQsbil7dmFyIHI7dD10LnJlcGxhY2UoL14tLyxcIlwiKTtsZXQgaT10PT09XCJcIj9cIkRFRkFVTFRcIjp0LG89TnVtYmVyKChyPW49PW51bGw/dm9pZCAwOm5baV0pIT09bnVsbCYmciE9PXZvaWQgMD9yOnQpO3JldHVybiBOdW1iZXIuaXNOYU4obyk/bnVsbDpEKHtbYGZsZXgke2V9YF06b30pfWZ1bmN0aW9uIGNsKGUsdCl7dmFyIG4scjtpZihlPSh0PT1udWxsP3ZvaWQgMDp0W2VdKXx8ZSxbXCJtaW4tY29udGVudFwiLFwicmV2ZXJ0XCIsXCJ1bnNldFwiXS5pbmNsdWRlcyhlKSlyZXR1cm4gbnVsbDtpZihlLm1hdGNoKC9eXFxkKyhcXC5cXGQrKT8kLykpcmV0dXJuIEQoe2ZsZXhHcm93Ok51bWJlcihlKSxmbGV4QmFzaXM6XCIwJVwifSk7bGV0IGk9ZS5tYXRjaCgvXihcXGQrKVxccysoXFxkKykkLyk7aWYoaSlyZXR1cm4gRCh7ZmxleEdyb3c6TnVtYmVyKGlbMV0pLGZsZXhTaHJpbms6TnVtYmVyKGlbMl0pfSk7aWYoaT1lLm1hdGNoKC9eKFxcZCspXFxzKyhbXiBdKykkLyksaSl7bGV0IG89TWUoKG49aVsyXSkhPT1udWxsJiZuIT09dm9pZCAwP246XCJcIik7cmV0dXJuIG8/RCh7ZmxleEdyb3c6TnVtYmVyKGlbMV0pLGZsZXhCYXNpczpvfSk6bnVsbH1pZihpPWUubWF0Y2goL14oXFxkKylcXHMrKFxcZCspXFxzKyguKykkLyksaSl7bGV0IG89TWUoKHI9aVszXSkhPT1udWxsJiZyIT09dm9pZCAwP3I6XCJcIik7cmV0dXJuIG8/RCh7ZmxleEdyb3c6TnVtYmVyKGlbMV0pLGZsZXhTaHJpbms6TnVtYmVyKGlbMl0pLGZsZXhCYXNpczpvfSk6bnVsbH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBQbyhlLHQsbj17fSxyKXtsZXQgaT1yPT1udWxsP3ZvaWQgMDpyW3RdO3JldHVybiBpIT09dm9pZCAwP0dlKGUsaSxuKTpBZShlLHQsbil9ZnVuY3Rpb24gRXIoZSx0LG49e30scil7bGV0IGk9TWUocj09bnVsbD92b2lkIDA6clt0XSxuKTtyZXR1cm4gaT9EKHtbZV06aX0pOih0PT09XCJzY3JlZW5cIiYmKHQ9ZS5pbmNsdWRlcyhcIldpZHRoXCIpP1wiMTAwdndcIjpcIjEwMHZoXCIpLEFlKGUsdCxuKSl9ZnVuY3Rpb24gZGwoZSx0LG4pe2xldCByPW49PW51bGw/dm9pZCAwOm5bZV07aWYocil7bGV0IGk9Y2Uocix7aXNOZWdhdGl2ZTp0fSk7aWYoIWkpcmV0dXJuIG51bGw7bGV0W28sdV09aTtpZih1PT09ei5lbSlyZXR1cm4gTm0obyk7aWYodT09PXoucGVyY2VudClyZXR1cm4gRmUoXCJwZXJjZW50YWdlLWJhc2VkIGxldHRlci1zcGFjaW5nIGNvbmZpZ3VyYXRpb24gY3VycmVudGx5IHVuc3VwcG9ydGVkLCBzd2l0Y2ggdG8gYGVtYHMsIG9yIG9wZW4gYW4gaXNzdWUgaWYgeW91J2QgbGlrZSB0byBzZWUgc3VwcG9ydCBhZGRlZC5cIiksbnVsbDtsZXQgcz1ydChvLHUse2lzTmVnYXRpdmU6dH0pO3JldHVybiBzIT09bnVsbD9EKHtsZXR0ZXJTcGFjaW5nOnN9KTpudWxsfXJldHVybiBBZShcImxldHRlclNwYWNpbmdcIixlLHtpc05lZ2F0aXZlOnR9KX1mdW5jdGlvbiBObShlKXtyZXR1cm57a2luZDpcImRlcGVuZGVudFwiLGNvbXBsZXRlKHQpe2xldCBuPXQuZm9udFNpemU7aWYodHlwZW9mIG4hPVwibnVtYmVyXCJ8fE51bWJlci5pc05hTihuKSlyZXR1cm5cInRyYWNraW5nLVggcmVsYXRpdmUgbGV0dGVyIHNwYWNpbmcgY2xhc3NlcyByZXF1aXJlIGZvbnQtc2l6ZSB0byBiZSBzZXRcIjt0LmxldHRlclNwYWNpbmc9TWF0aC5yb3VuZCgoZSpuK051bWJlci5FUFNJTE9OKSoxMDApLzEwMH19fWZ1bmN0aW9uIHBsKGUsdCl7bGV0IG49dD09bnVsbD92b2lkIDA6dFtlXTtpZihuKXtsZXQgaT1jZShTdHJpbmcobikpO2lmKGkpcmV0dXJuIEQoe29wYWNpdHk6aVswXX0pfWxldCByPWNlKGUpO3JldHVybiByP0Qoe29wYWNpdHk6clswXS8xMDB9KTpudWxsfWZ1bmN0aW9uIGhsKGUpe2xldCB0PXBhcnNlSW50KGUsMTApO3JldHVybiBOdW1iZXIuaXNOYU4odCk/bnVsbDp7a2luZDpcImNvbXBsZXRlXCIsc3R5bGU6e3NoYWRvd09wYWNpdHk6dC8xMDB9fX1mdW5jdGlvbiBtbChlKXtpZihlLmluY2x1ZGVzKFwiL1wiKSl7bGV0W249XCJcIixyPVwiXCJdPWUuc3BsaXQoXCIvXCIsMiksaT1CbyhuKSxvPUJvKHIpO3JldHVybiBpPT09bnVsbHx8bz09PW51bGw/bnVsbDp7a2luZDpcImNvbXBsZXRlXCIsc3R5bGU6e3NoYWRvd09mZnNldDp7d2lkdGg6aSxoZWlnaHQ6b319fX1sZXQgdD1CbyhlKTtyZXR1cm4gdD09PW51bGw/bnVsbDp7a2luZDpcImNvbXBsZXRlXCIsc3R5bGU6e3NoYWRvd09mZnNldDp7d2lkdGg6dCxoZWlnaHQ6dH19fX1mdW5jdGlvbiBCbyhlKXtsZXQgdD1mdChlKTtyZXR1cm4gdHlwZW9mIHQ9PVwibnVtYmVyXCI/dDpudWxsfXZhciBfdD1jbGFzc3tjb25zdHJ1Y3Rvcih0LG49e30scixpLG8pe3ZhciB1LHMsYSxsLGYsYzt0aGlzLmNvbmZpZz1uLHRoaXMuY2FjaGU9cix0aGlzLnBvc2l0aW9uPTAsdGhpcy5pc051bGw9ITEsdGhpcy5pc05lZ2F0aXZlPSExLHRoaXMuY29udGV4dD17fSx0aGlzLmNvbnRleHQuZGV2aWNlPWk7bGV0IHA9dC50cmltKCkuc3BsaXQoXCI6XCIpLGg9W107cC5sZW5ndGg9PT0xP3RoaXMuc3RyaW5nPXQ6KHRoaXMuc3RyaW5nPSh1PXAucG9wKCkpIT09bnVsbCYmdSE9PXZvaWQgMD91OlwiXCIsaD1wKSx0aGlzLmNoYXI9dGhpcy5zdHJpbmdbMF07bGV0IGQ9QW8oKHM9dGhpcy5jb25maWcudGhlbWUpPT09bnVsbHx8cz09PXZvaWQgMD92b2lkIDA6cy5zY3JlZW5zKTtmb3IobGV0IG0gb2YgaClpZihkW21dKXtsZXQgdj0oYT1kW21dKT09PW51bGx8fGE9PT12b2lkIDA/dm9pZCAwOmFbMl07diE9PXZvaWQgMCYmKHRoaXMub3JkZXI9KChsPXRoaXMub3JkZXIpIT09bnVsbCYmbCE9PXZvaWQgMD9sOjApK3YpO2xldCBnPShmPWkud2luZG93RGltZW5zaW9ucyk9PT1udWxsfHxmPT09dm9pZCAwP3ZvaWQgMDpmLndpZHRoO2lmKGcpe2xldFtiLHhdPShjPWRbbV0pIT09bnVsbCYmYyE9PXZvaWQgMD9jOlswLDBdOyhnPD1ifHxnPngpJiYodGhpcy5pc051bGw9ITApfWVsc2UgdGhpcy5pc051bGw9ITB9ZWxzZSBLYShtKT90aGlzLmlzTnVsbD1tIT09bzpKYShtKT9pLndpbmRvd0RpbWVuc2lvbnM/KGkud2luZG93RGltZW5zaW9ucy53aWR0aD5pLndpbmRvd0RpbWVuc2lvbnMuaGVpZ2h0P1wibGFuZHNjYXBlXCI6XCJwb3J0cmFpdFwiKSE9PW0/dGhpcy5pc051bGw9ITA6dGhpcy5pbmNyZW1lbnRPcmRlcigpOnRoaXMuaXNOdWxsPSEwOm09PT1cInJldGluYVwiP2kucGl4ZWxEZW5zaXR5PT09Mj90aGlzLmluY3JlbWVudE9yZGVyKCk6dGhpcy5pc051bGw9ITA6bT09PVwiZGFya1wiP2kuY29sb3JTY2hlbWUhPT1cImRhcmtcIj90aGlzLmlzTnVsbD0hMDp0aGlzLmluY3JlbWVudE9yZGVyKCk6dGhpcy5oYW5kbGVQb3NzaWJsZUFyYml0cmFyeUJyZWFrcG9pbnRQcmVmaXgobSl8fCh0aGlzLmlzTnVsbD0hMCl9cGFyc2UoKXtpZih0aGlzLmlzTnVsbClyZXR1cm57a2luZDpcIm51bGxcIn07bGV0IHQ9dGhpcy5jYWNoZS5nZXRJcih0aGlzLnJlc3QpO2lmKHQpcmV0dXJuIHQ7dGhpcy5wYXJzZUlzTmVnYXRpdmUoKTtsZXQgbj10aGlzLnBhcnNlVXRpbGl0eSgpO3JldHVybiBuP3RoaXMub3JkZXIhPT12b2lkIDA/e2tpbmQ6XCJvcmRlcmVkXCIsb3JkZXI6dGhpcy5vcmRlcixzdHlsZUlyOm59Om46e2tpbmQ6XCJudWxsXCJ9fXBhcnNlVXRpbGl0eSgpe3ZhciB0LG4scixpLG87bGV0IHU9dGhpcy5jb25maWcudGhlbWUscz1udWxsO3N3aXRjaCh0aGlzLmNoYXIpe2Nhc2VcIm1cIjpjYXNlXCJwXCI6e2xldCBhPXRoaXMucGVla1NsaWNlKDEsMykubWF0Y2goL14odHxifHJ8bHx4fHkpPy0vKTtpZihhKXtsZXQgbD10aGlzLmNoYXI9PT1cIm1cIj9cIm1hcmdpblwiOlwicGFkZGluZ1wiO3RoaXMuYWR2YW5jZSgoKG49KHQ9YVswXSk9PT1udWxsfHx0PT09dm9pZCAwP3ZvaWQgMDp0Lmxlbmd0aCkhPT1udWxsJiZuIT09dm9pZCAwP246MCkrMSk7bGV0IGY9RW8oYVsxXSksYz1UbyhsLGYsdGhpcy5pc05lZ2F0aXZlLHRoaXMucmVzdCwocj10aGlzLmNvbmZpZy50aGVtZSk9PT1udWxsfHxyPT09dm9pZCAwP3ZvaWQgMDpyW2xdKTtpZihjKXJldHVybiBjfX19aWYodGhpcy5jb25zdW1lUGVla2VkKFwiaC1cIikmJihzPVBvKFwiaGVpZ2h0XCIsdGhpcy5yZXN0LHRoaXMuY29udGV4dCx1PT1udWxsP3ZvaWQgMDp1LmhlaWdodCkscyl8fHRoaXMuY29uc3VtZVBlZWtlZChcInctXCIpJiYocz1QbyhcIndpZHRoXCIsdGhpcy5yZXN0LHRoaXMuY29udGV4dCx1PT1udWxsP3ZvaWQgMDp1LndpZHRoKSxzKXx8dGhpcy5jb25zdW1lUGVla2VkKFwibWluLXctXCIpJiYocz1FcihcIm1pbldpZHRoXCIsdGhpcy5yZXN0LHRoaXMuY29udGV4dCx1PT1udWxsP3ZvaWQgMDp1Lm1pbldpZHRoKSxzKXx8dGhpcy5jb25zdW1lUGVla2VkKFwibWluLWgtXCIpJiYocz1FcihcIm1pbkhlaWdodFwiLHRoaXMucmVzdCx0aGlzLmNvbnRleHQsdT09bnVsbD92b2lkIDA6dS5taW5IZWlnaHQpLHMpfHx0aGlzLmNvbnN1bWVQZWVrZWQoXCJtYXgtdy1cIikmJihzPUVyKFwibWF4V2lkdGhcIix0aGlzLnJlc3QsdGhpcy5jb250ZXh0LHU9PW51bGw/dm9pZCAwOnUubWF4V2lkdGgpLHMpfHx0aGlzLmNvbnN1bWVQZWVrZWQoXCJtYXgtaC1cIikmJihzPUVyKFwibWF4SGVpZ2h0XCIsdGhpcy5yZXN0LHRoaXMuY29udGV4dCx1PT1udWxsP3ZvaWQgMDp1Lm1heEhlaWdodCkscyl8fHRoaXMuY29uc3VtZVBlZWtlZChcImxlYWRpbmctXCIpJiYocz1rbyh0aGlzLnJlc3QsdT09bnVsbD92b2lkIDA6dS5saW5lSGVpZ2h0KSxzKXx8dGhpcy5jb25zdW1lUGVla2VkKFwidGV4dC1cIikmJihzPVNvKHRoaXMucmVzdCx1PT1udWxsP3ZvaWQgMDp1LmZvbnRTaXplLHRoaXMuY29udGV4dCksc3x8KHM9Y3QoXCJ0ZXh0XCIsdGhpcy5yZXN0LHU9PW51bGw/dm9pZCAwOnUudGV4dENvbG9yKSxzKXx8dGhpcy5jb25zdW1lUGVla2VkKFwib3BhY2l0eS1cIikmJihzPUZyKFwidGV4dFwiLHRoaXMucmVzdCkscykpfHx0aGlzLmNvbnN1bWVQZWVrZWQoXCJmb250LVwiKSYmKHM9T28odGhpcy5yZXN0LHU9PW51bGw/dm9pZCAwOnUuZm9udEZhbWlseSkscyl8fHRoaXMuY29uc3VtZVBlZWtlZChcImFzcGVjdC1cIikmJih0aGlzLmNvbnN1bWVQZWVrZWQoXCJyYXRpby1cIikmJkZlKFwiYGFzcGVjdC1yYXRpby17cmF0aW99YCBpcyBkZXByZWNhdGVkLCB1c2UgYGFzcGVjdC17cmF0aW99YCBpbnN0ZWFkXCIpLHM9R2UoXCJhc3BlY3RSYXRpb1wiLHRoaXMucmVzdCx7ZnJhY3Rpb25zOiEwfSkscyl8fHRoaXMuY29uc3VtZVBlZWtlZChcInRpbnQtXCIpJiYocz1jdChcInRpbnRcIix0aGlzLnJlc3QsdT09bnVsbD92b2lkIDA6dS5jb2xvcnMpLHMpfHx0aGlzLmNvbnN1bWVQZWVrZWQoXCJiZy1cIikmJihzPWN0KFwiYmdcIix0aGlzLnJlc3QsdT09bnVsbD92b2lkIDA6dS5iYWNrZ3JvdW5kQ29sb3IpLHN8fHRoaXMuY29uc3VtZVBlZWtlZChcIm9wYWNpdHktXCIpJiYocz1GcihcImJnXCIsdGhpcy5yZXN0KSxzKSl8fHRoaXMuY29uc3VtZVBlZWtlZChcImJvcmRlclwiKSYmKHM9YWwodGhpcy5yZXN0LHUpLHN8fHRoaXMuY29uc3VtZVBlZWtlZChcIi1vcGFjaXR5LVwiKSYmKHM9RnIoXCJib3JkZXJcIix0aGlzLnJlc3QpLHMpKXx8dGhpcy5jb25zdW1lUGVla2VkKFwicm91bmRlZFwiKSYmKHM9bGwodGhpcy5yZXN0LHU9PW51bGw/dm9pZCAwOnUuYm9yZGVyUmFkaXVzKSxzKXx8dGhpcy5jb25zdW1lUGVla2VkKFwiYm90dG9tLVwiKSYmKHM9Q3QoXCJib3R0b21cIix0aGlzLnJlc3QsdGhpcy5pc05lZ2F0aXZlLHU9PW51bGw/dm9pZCAwOnUuaW5zZXQpLHMpfHx0aGlzLmNvbnN1bWVQZWVrZWQoXCJ0b3AtXCIpJiYocz1DdChcInRvcFwiLHRoaXMucmVzdCx0aGlzLmlzTmVnYXRpdmUsdT09bnVsbD92b2lkIDA6dS5pbnNldCkscyl8fHRoaXMuY29uc3VtZVBlZWtlZChcImxlZnQtXCIpJiYocz1DdChcImxlZnRcIix0aGlzLnJlc3QsdGhpcy5pc05lZ2F0aXZlLHU9PW51bGw/dm9pZCAwOnUuaW5zZXQpLHMpfHx0aGlzLmNvbnN1bWVQZWVrZWQoXCJyaWdodC1cIikmJihzPUN0KFwicmlnaHRcIix0aGlzLnJlc3QsdGhpcy5pc05lZ2F0aXZlLHU9PW51bGw/dm9pZCAwOnUuaW5zZXQpLHMpfHx0aGlzLmNvbnN1bWVQZWVrZWQoXCJpbnNldC1cIikmJihzPUN0KFwiaW5zZXRcIix0aGlzLnJlc3QsdGhpcy5pc05lZ2F0aXZlLHU9PW51bGw/dm9pZCAwOnUuaW5zZXQpLHMpfHx0aGlzLmNvbnN1bWVQZWVrZWQoXCJmbGV4LVwiKSYmKHRoaXMuY29uc3VtZVBlZWtlZChcImdyb3dcIik/cz13cihcIkdyb3dcIix0aGlzLnJlc3QsdT09bnVsbD92b2lkIDA6dS5mbGV4R3Jvdyk6dGhpcy5jb25zdW1lUGVla2VkKFwic2hyaW5rXCIpP3M9d3IoXCJTaHJpbmtcIix0aGlzLnJlc3QsdT09bnVsbD92b2lkIDA6dS5mbGV4U2hyaW5rKTpzPWNsKHRoaXMucmVzdCx1PT1udWxsP3ZvaWQgMDp1LmZsZXgpLHMpfHx0aGlzLmNvbnN1bWVQZWVrZWQoXCJncm93XCIpJiYocz13cihcIkdyb3dcIix0aGlzLnJlc3QsdT09bnVsbD92b2lkIDA6dS5mbGV4R3Jvdykscyl8fHRoaXMuY29uc3VtZVBlZWtlZChcInNocmlua1wiKSYmKHM9d3IoXCJTaHJpbmtcIix0aGlzLnJlc3QsdT09bnVsbD92b2lkIDA6dS5mbGV4U2hyaW5rKSxzKXx8dGhpcy5jb25zdW1lUGVla2VkKFwic2hhZG93LWNvbG9yLW9wYWNpdHktXCIpJiYocz1GcihcInNoYWRvd1wiLHRoaXMucmVzdCkscyl8fHRoaXMuY29uc3VtZVBlZWtlZChcInNoYWRvdy1vcGFjaXR5LVwiKSYmKHM9aGwodGhpcy5yZXN0KSxzKXx8dGhpcy5jb25zdW1lUGVla2VkKFwic2hhZG93LW9mZnNldC1cIikmJihzPW1sKHRoaXMucmVzdCkscyl8fHRoaXMuY29uc3VtZVBlZWtlZChcInNoYWRvdy1yYWRpdXMtXCIpJiYocz1BZShcInNoYWRvd1JhZGl1c1wiLHRoaXMucmVzdCkscyl8fHRoaXMuY29uc3VtZVBlZWtlZChcInNoYWRvdy1cIikmJihzPWN0KFwic2hhZG93XCIsdGhpcy5yZXN0LHU9PW51bGw/dm9pZCAwOnUuY29sb3JzKSxzKSlyZXR1cm4gcztpZih0aGlzLmNvbnN1bWVQZWVrZWQoXCJlbGV2YXRpb24tXCIpKXtsZXQgYT1wYXJzZUludCh0aGlzLnJlc3QsMTApO2lmKCFOdW1iZXIuaXNOYU4oYSkpcmV0dXJuIEQoe2VsZXZhdGlvbjphfSl9aWYodGhpcy5jb25zdW1lUGVla2VkKFwib3BhY2l0eS1cIikmJihzPXBsKHRoaXMucmVzdCx1PT1udWxsP3ZvaWQgMDp1Lm9wYWNpdHkpLHMpfHx0aGlzLmNvbnN1bWVQZWVrZWQoXCJ0cmFja2luZy1cIikmJihzPWRsKHRoaXMucmVzdCx0aGlzLmlzTmVnYXRpdmUsdT09bnVsbD92b2lkIDA6dS5sZXR0ZXJTcGFjaW5nKSxzKSlyZXR1cm4gcztpZih0aGlzLmNvbnN1bWVQZWVrZWQoXCJ6LVwiKSl7bGV0IGE9TnVtYmVyKChvPShpPXU9PW51bGw/dm9pZCAwOnUuekluZGV4KT09PW51bGx8fGk9PT12b2lkIDA/dm9pZCAwOmlbdGhpcy5yZXN0XSkhPT1udWxsJiZvIT09dm9pZCAwP286dGhpcy5yZXN0KTtpZighTnVtYmVyLmlzTmFOKGEpKXJldHVybiBEKHt6SW5kZXg6YX0pfXJldHVybiBGZShgXFxgJHt0aGlzLnJlc3R9XFxgIHVua25vd24gb3IgaW52YWxpZCB1dGlsaXR5YCksbnVsbH1oYW5kbGVQb3NzaWJsZUFyYml0cmFyeUJyZWFrcG9pbnRQcmVmaXgodCl7dmFyIG47aWYodFswXSE9PVwibVwiKXJldHVybiExO2xldCByPXQubWF0Y2goL14obWlufG1heCktKHd8aCktXFxbKFteXFxdXSspXFxdJC8pO2lmKCFyKXJldHVybiExO2lmKCEoISgobj10aGlzLmNvbnRleHQuZGV2aWNlKT09PW51bGx8fG49PT12b2lkIDApJiZuLndpbmRvd0RpbWVuc2lvbnMpKXJldHVybiB0aGlzLmlzTnVsbD0hMCwhMDtsZXQgaT10aGlzLmNvbnRleHQuZGV2aWNlLndpbmRvd0RpbWVuc2lvbnMsWyxvPVwiXCIsdT1cIlwiLHM9XCJcIl09cixhPXU9PT1cIndcIj9pLndpZHRoOmkuaGVpZ2h0LGw9Y2Uocyx0aGlzLmNvbnRleHQpO2lmKGw9PT1udWxsKXJldHVybiB0aGlzLmlzTnVsbD0hMCwhMDtsZXRbZixjXT1sO3JldHVybiBjIT09XCJweFwiJiYodGhpcy5pc051bGw9ITApLChvPT09XCJtaW5cIj9hPj1mOmE8PWYpP3RoaXMuaW5jcmVtZW50T3JkZXIoKTp0aGlzLmlzTnVsbD0hMCwhMH1hZHZhbmNlKHQ9MSl7dGhpcy5wb3NpdGlvbis9dCx0aGlzLmNoYXI9dGhpcy5zdHJpbmdbdGhpcy5wb3NpdGlvbl19Z2V0IHJlc3QoKXtyZXR1cm4gdGhpcy5wZWVrU2xpY2UoMCx0aGlzLnN0cmluZy5sZW5ndGgpfXBlZWtTbGljZSh0LG4pe3JldHVybiB0aGlzLnN0cmluZy5zbGljZSh0aGlzLnBvc2l0aW9uK3QsdGhpcy5wb3NpdGlvbituKX1jb25zdW1lUGVla2VkKHQpe3JldHVybiB0aGlzLnBlZWtTbGljZSgwLHQubGVuZ3RoKT09PXQ/KHRoaXMuYWR2YW5jZSh0Lmxlbmd0aCksITApOiExfXBhcnNlSXNOZWdhdGl2ZSgpe3RoaXMuY2hhcj09PVwiLVwiJiYodGhpcy5hZHZhbmNlKCksdGhpcy5pc05lZ2F0aXZlPSEwLHRoaXMuY29udGV4dC5pc05lZ2F0aXZlPSEwKX1pbmNyZW1lbnRPcmRlcigpe3ZhciB0O3RoaXMub3JkZXI9KCh0PXRoaXMub3JkZXIpIT09bnVsbCYmdCE9PXZvaWQgMD90OjApKzF9fTtmdW5jdGlvbiBEbChlKXtsZXQgdD1bXSxuPW51bGw7cmV0dXJuIGUuZm9yRWFjaChyPT57aWYodHlwZW9mIHI9PVwic3RyaW5nXCIpdD1bLi4udCwuLi5JbyhyKV07ZWxzZSBpZihBcnJheS5pc0FycmF5KHIpKXQ9Wy4uLnQsLi4uci5mbGF0TWFwKElvKV07ZWxzZSBpZih0eXBlb2Ygcj09XCJvYmplY3RcIiYmciE9PW51bGwpZm9yKGxldFtpLG9db2YgT2JqZWN0LmVudHJpZXMocikpdHlwZW9mIG89PVwiYm9vbGVhblwiP3Q9Wy4uLnQsLi4ubz9JbyhpKTpbXV06bj9uW2ldPW86bj17W2ldOm99fSksW3QuZmlsdGVyKEJvb2xlYW4pLmZpbHRlcigkbSksbl19ZnVuY3Rpb24gSW8oZSl7cmV0dXJuIGUudHJpbSgpLnNwbGl0KC9cXHMrLyl9ZnVuY3Rpb24gJG0oZSx0LG4pe3JldHVybiBuLmluZGV4T2YoZSk9PT10fWZ1bmN0aW9uIGdsKGUpe3ZhciB0O3JldHVybih0PWU9PW51bGw/dm9pZCAwOmUucmVkdWNlKChuLHIpPT4oey4uLm4sLi4uV20oci5oYW5kbGVyKX0pLHt9KSkhPT1udWxsJiZ0IT09dm9pZCAwP3Q6e319ZnVuY3Rpb24gV20oZSl7bGV0IHQ9e307cmV0dXJuIGUoe2FkZFV0aWxpdGllczpuPT57dD1ufSwuLi5xbX0pLHR9ZnVuY3Rpb24gTmUoZSl7dGhyb3cgbmV3IEVycm9yKGB0YWlsd2luZGNzcyBwbHVnaW4gZnVuY3Rpb24gYXJndW1lbnQgb2JqZWN0IHByb3AgXCIke2V9XCIgbm90IGltcGxlbWVudGVkYCl9dmFyIHFtPXthZGRDb21wb25lbnRzOk5lLGFkZEJhc2U6TmUsYWRkVmFyaWFudDpOZSxlOk5lLHByZWZpeDpOZSx0aGVtZTpOZSx2YXJpYW50czpOZSxjb25maWc6TmUsY29yZVBsdWdpbnM6TmUsbWF0Y2hVdGlsaXRpZXM6TmUscG9zdGNzczpudWxsfTtmdW5jdGlvbiB2bChlLHQpe2xldCBuPSgwLGJsLmRlZmF1bHQpKFVtKGUpKSxyPXt9LGk9Z2wobi5wbHVnaW5zKSxvPXt9LHU9T2JqZWN0LmVudHJpZXMoaSkubWFwKChbZCxtXSk9PnR5cGVvZiBtPT1cInN0cmluZ1wiPyhvW2RdPW0sW2Qse2tpbmQ6XCJudWxsXCJ9XSk6W2QsRChtKV0pLmZpbHRlcigoWyxkXSk9PmQua2luZCE9PVwibnVsbFwiKTtmdW5jdGlvbiBzKCl7cmV0dXJuW3Iud2luZG93RGltZW5zaW9ucz9gdyR7ci53aW5kb3dEaW1lbnNpb25zLndpZHRofWA6ITEsci53aW5kb3dEaW1lbnNpb25zP2BoJHtyLndpbmRvd0RpbWVuc2lvbnMuaGVpZ2h0fWA6ITEsci5mb250U2NhbGU/YGZzJHtyLmZvbnRTY2FsZX1gOiExLHIuY29sb3JTY2hlbWU9PT1cImRhcmtcIj9cImRhcmtcIjohMSxyLnBpeGVsRGVuc2l0eT09PTI/XCJyZXRpbmFcIjohMV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCItLVwiKXx8XCJkZWZhdWx0XCJ9bGV0IGE9cygpLGw9e307ZnVuY3Rpb24gZigpe2xldCBkPWxbYV07aWYoZClyZXR1cm4gZDtsZXQgbT1uZXcgeHIodSk7cmV0dXJuIGxbYV09bSxtfWZ1bmN0aW9uIGMoLi4uZCl7bGV0IG09ZigpLHY9e30sZz1bXSxiPVtdLFt4LEZdPURsKGQpLHk9eC5qb2luKFwiIFwiKSxrPW0uZ2V0U3R5bGUoeSk7aWYoaylyZXR1cm57Li4uaywuLi5GfHx7fX07Zm9yKGxldCBQIG9mIHgpe2xldCBCPW0uZ2V0SXIoUCk7aWYoIUImJlAgaW4gbyl7bGV0IG9lPWMob1tQXSk7bS5zZXRJcihQLEQob2UpKSx2PXsuLi52LC4uLm9lfTtjb250aW51ZX1zd2l0Y2goQj1uZXcgX3QoUCxuLG0scix0KS5wYXJzZSgpLEIua2luZCl7Y2FzZVwiY29tcGxldGVcIjp2PXsuLi52LC4uLkIuc3R5bGV9LG0uc2V0SXIoUCxCKTticmVhaztjYXNlXCJkZXBlbmRlbnRcIjpnLnB1c2goQik7YnJlYWs7Y2FzZVwib3JkZXJlZFwiOmIucHVzaChCKTticmVhaztjYXNlXCJudWxsXCI6bS5zZXRJcihQLEIpO2JyZWFrfX1pZihiLmxlbmd0aD4wKXtiLnNvcnQoKFAsQik9PlAub3JkZXItQi5vcmRlcik7Zm9yKGxldCBQIG9mIGIpc3dpdGNoKFAuc3R5bGVJci5raW5kKXtjYXNlXCJjb21wbGV0ZVwiOnY9ey4uLnYsLi4uUC5zdHlsZUlyLnN0eWxlfTticmVhaztjYXNlXCJkZXBlbmRlbnRcIjpnLnB1c2goUC5zdHlsZUlyKTticmVha319aWYoZy5sZW5ndGg+MCl7Zm9yKGxldCBQIG9mIGcpe2xldCBCPVAuY29tcGxldGUodik7QiYmRmUoQil9b2wodil9cmV0dXJuIHkhPT1cIlwiJiZtLnNldFN0eWxlKHksdiksRiYmKHY9ey4uLnYsLi4uRn0pLHZ9ZnVuY3Rpb24gcChkKXtsZXQgbT1jKGQuc3BsaXQoL1xccysvZykubWFwKHY9PnYucmVwbGFjZSgvXihiZ3x0ZXh0fGJvcmRlciktLyxcIlwiKSkubWFwKHY9PmBiZy0ke3Z9YCkuam9pbihcIiBcIikpO3JldHVybiB0eXBlb2YgbS5iYWNrZ3JvdW5kQ29sb3I9PVwic3RyaW5nXCI/bS5iYWNrZ3JvdW5kQ29sb3I6dm9pZCAwfWxldCBoPShkLC4uLm0pPT57bGV0IHY9XCJcIjtyZXR1cm4gZC5mb3JFYWNoKChnLGIpPT57dmFyIHg7dis9ZysoKHg9bVtiXSkhPT1udWxsJiZ4IT09dm9pZCAwP3g6XCJcIil9KSxjKHYpfTtyZXR1cm4gaC5zdHlsZT1jLGguY29sb3I9cCxoLnByZWZpeE1hdGNoPSguLi5kKT0+e2xldCBtPWQuc29ydCgpLmpvaW4oXCI6XCIpLHY9ZigpLGc9di5nZXRQcmVmaXhNYXRjaChtKTtpZihnIT09dm9pZCAwKXJldHVybiBnO2xldCBGPW5ldyBfdChgJHttfTpmbGV4YCxuLHYscix0KS5wYXJzZSgpLmtpbmQhPT1cIm51bGxcIjtyZXR1cm4gdi5zZXRQcmVmaXhNYXRjaChtLEYpLEZ9LGguc2V0V2luZG93RGltZW5zaW9ucz1kPT57ci53aW5kb3dEaW1lbnNpb25zPWQsYT1zKCl9LGguc2V0Rm9udFNjYWxlPWQ9PntyLmZvbnRTY2FsZT1kLGE9cygpfSxoLnNldFBpeGVsRGVuc2l0eT1kPT57ci5waXhlbERlbnNpdHk9ZCxhPXMoKX0saC5zZXRDb2xvclNjaGVtZT1kPT57ci5jb2xvclNjaGVtZT1kLGE9cygpfSxofWZ1bmN0aW9uIFVtKGUpe3JldHVybnsuLi5lLGNvbnRlbnQ6W1wiX25vX3dhcm5pbmdzX3BsZWFzZVwiXX19dmFyIEdtPXtoYW5kbGVyOih7YWRkVXRpbGl0aWVzOmV9KT0+e2Uoe1wic2hhZG93LXNtXCI6e2JveFNoYWRvdzpcIjAgMXB4IDJweCAwIHJnYigwIDAgMCAvIDAuMDUpXCJ9LHNoYWRvdzp7Ym94U2hhZG93OlwiMCAxcHggM3B4IDAgcmdiKDAgMCAwIC8gMC4xKSwgMCAxcHggMnB4IC0xcHggcmdiKDAgMCAwIC8gMC4xKVwifSxcInNoYWRvdy1tZFwiOntib3hTaGFkb3c6XCIwIDRweCA2cHggLTFweCByZ2IoMCAwIDAgLyAwLjEpLCAwIDJweCA0cHggLTJweCByZ2IoMCAwIDAgLyAwLjEpXCJ9LFwic2hhZG93LWxnXCI6e2JveFNoYWRvdzpcIjAgMTBweCAxNXB4IC0zcHggcmdiKDAgMCAwIC8gMC4xKSwgMCA0cHggNnB4IC00cHggcmdiKDAgMCAwIC8gMC4xKVwifSxcInNoYWRvdy14bFwiOntib3hTaGFkb3c6XCIwIDIwcHggMjVweCAtNXB4IHJnYigwIDAgMCAvIDAuMSksIDAgOHB4IDEwcHggLTZweCByZ2IoMCAwIDAgLyAwLjEpXCJ9LFwic2hhZG93LTJ4bFwiOntib3hTaGFkb3c6XCIwIDI1cHggNTBweCAtMTJweCByZ2IoMCAwIDAgLyAwLjI1KVwifSxcInNoYWRvdy1pbm5lclwiOntib3hTaGFkb3c6XCJpbnNldCAwIDJweCA0cHggMCByZ2IoMCAwIDAgLyAwLjA1KVwifSxcInNoYWRvdy1ub25lXCI6e2JveFNoYWRvdzpcIjAgMCAjMDAwMFwifX0pfX07ZnVuY3Rpb24gam0oZSl7cmV0dXJuIHZsKHsuLi5lLHBsdWdpbnM6Wy4uLihlPT1udWxsP3ZvaWQgMDplLnBsdWdpbnMpPz9bXSxHbV19LFwid2ViXCIpfXZhciBtbjtmdW5jdGlvbiBSbyh7d2lkdGg6ZSxoZWlnaHQ6dCxjb25maWc6bn0pe3JldHVybiBtbnx8KG1uPWptKG4pKSxtbi5zZXRXaW5kb3dEaW1lbnNpb25zKHt3aWR0aDorZSxoZWlnaHQ6K3R9KSxtbn12YXIgTG89bmV3IFdlYWtNYXA7YXN5bmMgZnVuY3Rpb24geGwoZSx0KXtsZXQgbj1hd2FpdCBxZSgpO2lmKCFufHwhbi5Ob2RlKXRocm93IG5ldyBFcnJvcihcIlNhdG9yaSBpcyBub3QgaW5pdGlhbGl6ZWQ6IGV4cGVjdCBgeW9nYWAgdG8gYmUgbG9hZGVkLCBnb3QgXCIrbik7dC5mb250cz10LmZvbnRzfHxbXTtsZXQgcjtMby5oYXModC5mb250cyk/cj1Mby5nZXQodC5mb250cyk6TG8uc2V0KHQuZm9udHMscj1uZXcgenQodC5mb250cykpO2xldCBpPVwid2lkdGhcImluIHQ/dC53aWR0aDp2b2lkIDAsbz1cImhlaWdodFwiaW4gdD90LmhlaWdodDp2b2lkIDAsdT1uLk5vZGUuY3JlYXRlKCk7aSYmdS5zZXRXaWR0aChpKSxvJiZ1LnNldEhlaWdodChvKSx1LnNldEZsZXhEaXJlY3Rpb24obi5GTEVYX0RJUkVDVElPTl9ST1cpLHUuc2V0RmxleFdyYXAobi5XUkFQX1dSQVApLHUuc2V0QWxpZ25Db250ZW50KG4uQUxJR05fQVVUTyksdS5zZXRBbGlnbkl0ZW1zKG4uQUxJR05fRkxFWF9TVEFSVCksdS5zZXRKdXN0aWZ5Q29udGVudChuLkpVU1RJRllfRkxFWF9TVEFSVCksdS5zZXRPdmVyZmxvdyhuLk9WRVJGTE9XX0hJRERFTik7bGV0IHM9ey4uLnQuZ3JhcGhlbWVJbWFnZXN9LGE9bmV3IFNldDtSZS5jbGVhcigpLGF3YWl0IGN1KGUpO2xldCBsPVV0KGUse2lkOlwiaWRcIixwYXJlbnRTdHlsZTp7fSxpbmhlcml0ZWRTdHlsZTp7Zm9udFNpemU6MTYsZm9udFdlaWdodDpcIm5vcm1hbFwiLGZvbnRGYW1pbHk6XCJzZXJpZlwiLGZvbnRTdHlsZTpcIm5vcm1hbFwiLGxpbmVIZWlnaHQ6MS4yLGNvbG9yOlwiYmxhY2tcIixvcGFjaXR5OjEsd2hpdGVTcGFjZTpcIm5vcm1hbFwiLF92aWV3cG9ydFdpZHRoOmksX3ZpZXdwb3J0SGVpZ2h0Om99LHBhcmVudDp1LGZvbnQ6cixlbWJlZEZvbnQ6dC5lbWJlZEZvbnQsZGVidWc6dC5kZWJ1ZyxncmFwaGVtZUltYWdlczpzLGNhbkxvYWRBZGRpdGlvbmFsQXNzZXRzOiEhdC5sb2FkQWRkaXRpb25hbEFzc2V0LG9uTm9kZURldGVjdGVkOnQub25Ob2RlRGV0ZWN0ZWQsZ2V0VHdTdHlsZXM6KGQsbSk9PntsZXQgZz17Li4uUm8oe3dpZHRoOmksaGVpZ2h0Om8sY29uZmlnOnQudGFpbHdpbmRDb25maWd9KShbZF0pfTtyZXR1cm4gdHlwZW9mIGcubGluZUhlaWdodD09XCJudW1iZXJcIiYmKGcubGluZUhlaWdodD1nLmxpbmVIZWlnaHQvKCtnLmZvbnRTaXplfHxtLmZvbnRTaXplfHwxNikpLGcuc2hhZG93Q29sb3ImJmcuYm94U2hhZG93JiYoZy5ib3hTaGFkb3c9Zy5ib3hTaGFkb3cucmVwbGFjZSgvcmdiYT9cXChbXildK1xcKS8sZy5zaGFkb3dDb2xvcikpLGd9fSksZj0oYXdhaXQgbC5uZXh0KCkpLnZhbHVlO2lmKHQubG9hZEFkZGl0aW9uYWxBc3NldCYmZi5sZW5ndGgpe2xldCBkPUhtKGYpLG09W10sdj17fTthd2FpdCBQcm9taXNlLmFsbChPYmplY3QuZW50cmllcyhkKS5mbGF0TWFwKChbZyxiXSk9PmIubWFwKHg9PntsZXQgRj1gJHtnfV8ke3h9YDtyZXR1cm4gYS5oYXMoRik/bnVsbDooYS5hZGQoRiksdC5sb2FkQWRkaXRpb25hbEFzc2V0KGcseCkudGhlbih5PT57dHlwZW9mIHk9PVwic3RyaW5nXCI/dlt4XT15OnkmJihBcnJheS5pc0FycmF5KHkpP20ucHVzaCguLi55KTptLnB1c2goeSkpfSkpfSkpKSxyLmFkZEZvbnRzKG0pLE9iamVjdC5hc3NpZ24ocyx2KX1hd2FpdCBsLm5leHQoKSx1LmNhbGN1bGF0ZUxheW91dChpLG8sbi5ESVJFQ1RJT05fTFRSKTtsZXQgYz0oYXdhaXQgbC5uZXh0KFswLDBdKSkudmFsdWUscD11LmdldENvbXB1dGVkV2lkdGgoKSxoPXUuZ2V0Q29tcHV0ZWRIZWlnaHQoKTtyZXR1cm4gdS5mcmVlUmVjdXJzaXZlKCksVm4oe3dpZHRoOnAsaGVpZ2h0OmgsY29udGVudDpjfSl9ZnVuY3Rpb24gSG0oZSl7bGV0IHQ9e30sbj17fTtmb3IobGV0e3dvcmQ6cixsb2NhbGU6aX1vZiBlKXtsZXQgbz1NdShyLGkpLmpvaW4oXCJ8XCIpO25bb109bltvXXx8XCJcIixuW29dKz1yfXJldHVybiBPYmplY3Qua2V5cyhuKS5mb3JFYWNoKHI9Pnt0W3JdPXRbcl18fFtdLHI9PT1cImVtb2ppXCI/dFtyXS5wdXNoKC4uLnlsKHdlKG5bcl0sXCJncmFwaGVtZVwiKSkpOih0W3JdWzBdPXRbcl1bMF18fFwiXCIsdFtyXVswXSs9eWwod2UobltyXSxcImdyYXBoZW1lXCIscj09PVwidW5rbm93blwiP3ZvaWQgMDpyKSkuam9pbihcIlwiKSl9KSx0fWZ1bmN0aW9uIHlsKGUpe3JldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoZSkpfWV4cG9ydHt4bCBhcyBkZWZhdWx0LEJsIGFzIGluaXR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/satori/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swr/_internal/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swr/_internal/dist/index.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INFINITE_PREFIX: function() { return /* binding */ INFINITE_PREFIX; },\n/* harmony export */   IS_REACT_LEGACY: function() { return /* binding */ IS_REACT_LEGACY; },\n/* harmony export */   IS_SERVER: function() { return /* binding */ IS_SERVER; },\n/* harmony export */   OBJECT: function() { return /* binding */ OBJECT; },\n/* harmony export */   SWRConfig: function() { return /* binding */ SWRConfig; },\n/* harmony export */   SWRGlobalState: function() { return /* binding */ SWRGlobalState; },\n/* harmony export */   UNDEFINED: function() { return /* binding */ UNDEFINED; },\n/* harmony export */   cache: function() { return /* binding */ cache; },\n/* harmony export */   compare: function() { return /* binding */ compare; },\n/* harmony export */   createCacheHelper: function() { return /* binding */ createCacheHelper; },\n/* harmony export */   defaultConfig: function() { return /* binding */ defaultConfig; },\n/* harmony export */   defaultConfigOptions: function() { return /* binding */ defaultConfigOptions; },\n/* harmony export */   getTimestamp: function() { return /* binding */ getTimestamp; },\n/* harmony export */   hasRequestAnimationFrame: function() { return /* binding */ hasRequestAnimationFrame; },\n/* harmony export */   initCache: function() { return /* binding */ initCache; },\n/* harmony export */   internalMutate: function() { return /* binding */ internalMutate; },\n/* harmony export */   isDocumentDefined: function() { return /* binding */ isDocumentDefined; },\n/* harmony export */   isFunction: function() { return /* binding */ isFunction; },\n/* harmony export */   isPromiseLike: function() { return /* binding */ isPromiseLike; },\n/* harmony export */   isUndefined: function() { return /* binding */ isUndefined; },\n/* harmony export */   isWindowDefined: function() { return /* binding */ isWindowDefined; },\n/* harmony export */   mergeConfigs: function() { return /* binding */ mergeConfigs; },\n/* harmony export */   mergeObjects: function() { return /* binding */ mergeObjects; },\n/* harmony export */   mutate: function() { return /* binding */ mutate; },\n/* harmony export */   noop: function() { return /* binding */ noop; },\n/* harmony export */   normalize: function() { return /* binding */ normalize; },\n/* harmony export */   preload: function() { return /* binding */ preload; },\n/* harmony export */   preset: function() { return /* binding */ preset; },\n/* harmony export */   rAF: function() { return /* binding */ rAF; },\n/* harmony export */   revalidateEvents: function() { return /* binding */ events; },\n/* harmony export */   serialize: function() { return /* binding */ serialize; },\n/* harmony export */   slowConnection: function() { return /* binding */ slowConnection; },\n/* harmony export */   stableHash: function() { return /* binding */ stableHash; },\n/* harmony export */   subscribeCallback: function() { return /* binding */ subscribeCallback; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* binding */ useIsomorphicLayoutEffect; },\n/* harmony export */   useSWRConfig: function() { return /* binding */ useSWRConfig; },\n/* harmony export */   withArgs: function() { return /* binding */ withArgs; },\n/* harmony export */   withMiddleware: function() { return /* binding */ withMiddleware; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n\n// Shared state between server components and client components\nconst noop = ()=>{};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nconst UNDEFINED = /*#__NOINLINE__*/ noop();\nconst OBJECT = Object;\nconst isUndefined = (v)=>v === UNDEFINED;\nconst isFunction = (v)=>typeof v == 'function';\nconst mergeObjects = (a, b)=>({\n        ...a,\n        ...b\n    });\nconst isPromiseLike = (x)=>isFunction(x.then);\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\n// counter of the key\nlet counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nconst stableHash = (arg)=>{\n    const type = typeof arg;\n    const constructor = arg && arg.constructor;\n    const isDate = constructor == Date;\n    let result;\n    let index;\n    if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {\n        // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n        // If it's already hashed, directly return the result.\n        result = table.get(arg);\n        if (result) return result;\n        // Store the hash first for circular reference detection before entering the\n        // recursive `stableHash` calls.\n        // For other objects like set and map, we use this id directly as the hash.\n        result = ++counter + '~';\n        table.set(arg, result);\n        if (constructor == Array) {\n            // Array.\n            result = '@';\n            for(index = 0; index < arg.length; index++){\n                result += stableHash(arg[index]) + ',';\n            }\n            table.set(arg, result);\n        }\n        if (constructor == OBJECT) {\n            // Object, sort keys.\n            result = '#';\n            const keys = OBJECT.keys(arg).sort();\n            while(!isUndefined(index = keys.pop())){\n                if (!isUndefined(arg[index])) {\n                    result += index + ':' + stableHash(arg[index]) + ',';\n                }\n            }\n            table.set(arg, result);\n        }\n    } else {\n        result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n    }\n    return result;\n};\n\n// Global state used to deduplicate requests and store listeners\nconst SWRGlobalState = new WeakMap();\n\nconst EMPTY_CACHE = {};\nconst INITIAL_CACHE = {};\nconst STR_UNDEFINED = 'undefined';\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nconst isWindowDefined = typeof window != STR_UNDEFINED;\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\nconst hasRequestAnimationFrame = ()=>isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\nconst createCacheHelper = (cache, key)=>{\n    const state = SWRGlobalState.get(cache);\n    return [\n        // Getter\n        ()=>!isUndefined(key) && cache.get(key) || EMPTY_CACHE,\n        // Setter\n        (info)=>{\n            if (!isUndefined(key)) {\n                const prev = cache.get(key);\n                // Before writing to the store, we keep the value in the initial cache\n                // if it's not there yet.\n                if (!(key in INITIAL_CACHE)) {\n                    INITIAL_CACHE[key] = prev;\n                }\n                state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n            }\n        },\n        // Subscriber\n        state[6],\n        // Get server cache snapshot\n        ()=>{\n            if (!isUndefined(key)) {\n                // If the cache was updated on the client, we return the stored initial value.\n                if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n            }\n            // If we haven't done any client-side updates, we return the current value.\n            return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n        }\n    ];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */ let online = true;\nconst isOnline = ()=>online;\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [\n    window.addEventListener.bind(window),\n    window.removeEventListener.bind(window)\n] : [\n    noop,\n    noop\n];\nconst isVisible = ()=>{\n    const visibilityState = isDocumentDefined && document.visibilityState;\n    return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\nconst initFocus = (callback)=>{\n    // focus revalidate\n    if (isDocumentDefined) {\n        document.addEventListener('visibilitychange', callback);\n    }\n    onWindowEvent('focus', callback);\n    return ()=>{\n        if (isDocumentDefined) {\n            document.removeEventListener('visibilitychange', callback);\n        }\n        offWindowEvent('focus', callback);\n    };\n};\nconst initReconnect = (callback)=>{\n    // revalidate on reconnected\n    const onOnline = ()=>{\n        online = true;\n        callback();\n    };\n    // nothing to revalidate, just update the status\n    const onOffline = ()=>{\n        online = false;\n    };\n    onWindowEvent('online', onOnline);\n    onWindowEvent('offline', onOffline);\n    return ()=>{\n        offWindowEvent('online', onOnline);\n        offWindowEvent('offline', onOffline);\n    };\n};\nconst preset = {\n    isOnline,\n    isVisible\n};\nconst defaultConfigOptions = {\n    initFocus,\n    initReconnect\n};\n\nconst IS_REACT_LEGACY = !react__WEBPACK_IMPORTED_MODULE_0__.useId;\nconst IS_SERVER = !isWindowDefined || 'Deno' in window;\n// Polyfill requestAnimationFrame\nconst rAF = (f)=>hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nconst navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nconst slowConnection = !IS_SERVER && navigatorConnection && ([\n    'slow-2g',\n    '2g'\n].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\n\nconst serialize = (key)=>{\n    if (isFunction(key)) {\n        try {\n            key = key();\n        } catch (err) {\n            // dependencies not ready\n            key = '';\n        }\n    }\n    // Use the original key as the argument of fetcher. This can be a string or an\n    // array of values.\n    const args = key;\n    // If key is not falsy, or not an empty array, hash it.\n    key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n    return [\n        key,\n        args\n    ];\n};\n\n// Global timestamp.\nlet __timestamp = 0;\nconst getTimestamp = ()=>++__timestamp;\n\nconst FOCUS_EVENT = 0;\nconst RECONNECT_EVENT = 1;\nconst MUTATE_EVENT = 2;\nconst ERROR_REVALIDATE_EVENT = 3;\n\nvar events = {\n  __proto__: null,\n  ERROR_REVALIDATE_EVENT: ERROR_REVALIDATE_EVENT,\n  FOCUS_EVENT: FOCUS_EVENT,\n  MUTATE_EVENT: MUTATE_EVENT,\n  RECONNECT_EVENT: RECONNECT_EVENT\n};\n\nasync function internalMutate(...args) {\n    const [cache, _key, _data, _opts] = args;\n    // When passing as a boolean, it's explicitly used to disable/enable\n    // revalidation.\n    const options = mergeObjects({\n        populateCache: true,\n        throwOnError: true\n    }, typeof _opts === 'boolean' ? {\n        revalidate: _opts\n    } : _opts || {});\n    let populateCache = options.populateCache;\n    const rollbackOnErrorOption = options.rollbackOnError;\n    let optimisticData = options.optimisticData;\n    const revalidate = options.revalidate !== false;\n    const rollbackOnError = (error)=>{\n        return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n    };\n    const throwOnError = options.throwOnError;\n    // If the second argument is a key filter, return the mutation results for all\n    // filtered keys.\n    if (isFunction(_key)) {\n        const keyFilter = _key;\n        const matchedKeys = [];\n        const it = cache.keys();\n        for (const key of it){\n            if (// Skip the special useSWRInfinite and useSWRSubscription keys.\n            !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n                matchedKeys.push(key);\n            }\n        }\n        return Promise.all(matchedKeys.map(mutateByKey));\n    }\n    return mutateByKey(_key);\n    async function mutateByKey(_k) {\n        // Serialize key\n        const [key] = serialize(_k);\n        if (!key) return;\n        const [get, set] = createCacheHelper(cache, key);\n        const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\n        const startRevalidate = ()=>{\n            const revalidators = EVENT_REVALIDATORS[key];\n            if (revalidate) {\n                // Invalidate the key by deleting the concurrent request markers so new\n                // requests will not be deduped.\n                delete FETCH[key];\n                delete PRELOAD[key];\n                if (revalidators && revalidators[0]) {\n                    return revalidators[0](MUTATE_EVENT).then(()=>get().data);\n                }\n            }\n            return get().data;\n        };\n        // If there is no new data provided, revalidate the key with current state.\n        if (args.length < 3) {\n            // Revalidate and broadcast state.\n            return startRevalidate();\n        }\n        let data = _data;\n        let error;\n        // Update global timestamps.\n        const beforeMutationTs = getTimestamp();\n        MUTATION[key] = [\n            beforeMutationTs,\n            0\n        ];\n        const hasOptimisticData = !isUndefined(optimisticData);\n        const state = get();\n        // `displayedData` is the current value on screen. It could be the optimistic value\n        // that is going to be overridden by a `committedData`, or get reverted back.\n        // `committedData` is the validated value that comes from a fetch or mutation.\n        const displayedData = state.data;\n        const currentData = state._c;\n        const committedData = isUndefined(currentData) ? displayedData : currentData;\n        // Do optimistic data update.\n        if (hasOptimisticData) {\n            optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n            // When we set optimistic data, backup the current committedData data in `_c`.\n            set({\n                data: optimisticData,\n                _c: committedData\n            });\n        }\n        if (isFunction(data)) {\n            // `data` is a function, call it passing current cache value.\n            try {\n                data = data(committedData);\n            } catch (err) {\n                // If it throws an error synchronously, we shouldn't update the cache.\n                error = err;\n            }\n        }\n        // `data` is a promise/thenable, resolve the final data first.\n        if (data && isPromiseLike(data)) {\n            // This means that the mutation is async, we need to check timestamps to\n            // avoid race conditions.\n            data = await data.catch((err)=>{\n                error = err;\n            });\n            // Check if other mutations have occurred since we've started this mutation.\n            // If there's a race we don't update cache or broadcast the change,\n            // just return the data.\n            if (beforeMutationTs !== MUTATION[key][0]) {\n                if (error) throw error;\n                return data;\n            } else if (error && hasOptimisticData && rollbackOnError(error)) {\n                // Rollback. Always populate the cache in this case but without\n                // transforming the data.\n                populateCache = true;\n                // Reset data to be the latest committed data, and clear the `_c` value.\n                set({\n                    data: committedData,\n                    _c: UNDEFINED\n                });\n            }\n        }\n        // If we should write back the cache after request.\n        if (populateCache) {\n            if (!error) {\n                // Transform the result into data.\n                if (isFunction(populateCache)) {\n                    const populateCachedData = populateCache(data, committedData);\n                    set({\n                        data: populateCachedData,\n                        error: UNDEFINED,\n                        _c: UNDEFINED\n                    });\n                } else {\n                    // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n                    set({\n                        data,\n                        error: UNDEFINED,\n                        _c: UNDEFINED\n                    });\n                }\n            }\n        }\n        // Reset the timestamp to mark the mutation has ended.\n        MUTATION[key][1] = getTimestamp();\n        // Update existing SWR Hooks' internal states:\n        Promise.resolve(startRevalidate()).then(()=>{\n            // The mutation and revalidation are ended, we can clear it since the data is\n            // not an optimistic value anymore.\n            set({\n                _c: UNDEFINED\n            });\n        });\n        // Throw error or return data\n        if (error) {\n            if (throwOnError) throw error;\n            return;\n        }\n        return data;\n    }\n}\n\nconst revalidateAllKeys = (revalidators, type)=>{\n    for(const key in revalidators){\n        if (revalidators[key][0]) revalidators[key][0](type);\n    }\n};\nconst initCache = (provider, options)=>{\n    // The global state for a specific provider will be used to deduplicate\n    // requests and store listeners. As well as a mutate function that is bound to\n    // the cache.\n    // The provider's global state might be already initialized. Let's try to get the\n    // global state associated with the provider first.\n    if (!SWRGlobalState.has(provider)) {\n        const opts = mergeObjects(defaultConfigOptions, options);\n        // If there's no global state bound to the provider, create a new one with the\n        // new mutate function.\n        const EVENT_REVALIDATORS = {};\n        const mutate = internalMutate.bind(UNDEFINED, provider);\n        let unmount = noop;\n        const subscriptions = {};\n        const subscribe = (key, callback)=>{\n            const subs = subscriptions[key] || [];\n            subscriptions[key] = subs;\n            subs.push(callback);\n            return ()=>subs.splice(subs.indexOf(callback), 1);\n        };\n        const setter = (key, value, prev)=>{\n            provider.set(key, value);\n            const subs = subscriptions[key];\n            if (subs) {\n                for (const fn of subs){\n                    fn(value, prev);\n                }\n            }\n        };\n        const initProvider = ()=>{\n            if (!SWRGlobalState.has(provider)) {\n                // Update the state if it's new, or if the provider has been extended.\n                SWRGlobalState.set(provider, [\n                    EVENT_REVALIDATORS,\n                    {},\n                    {},\n                    {},\n                    mutate,\n                    setter,\n                    subscribe\n                ]);\n                if (!IS_SERVER) {\n                    // When listening to the native events for auto revalidations,\n                    // we intentionally put a delay (setTimeout) here to make sure they are\n                    // fired after immediate JavaScript executions, which can be\n                    // React's state updates.\n                    // This avoids some unnecessary revalidations such as\n                    // https://github.com/vercel/swr/issues/1680.\n                    const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));\n                    const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));\n                    unmount = ()=>{\n                        releaseFocus && releaseFocus();\n                        releaseReconnect && releaseReconnect();\n                        // When un-mounting, we need to remove the cache provider from the state\n                        // storage too because it's a side-effect. Otherwise, when re-mounting we\n                        // will not re-register those event listeners.\n                        SWRGlobalState.delete(provider);\n                    };\n                }\n            }\n        };\n        initProvider();\n        // This is a new provider, we need to initialize it and setup DOM events\n        // listeners for `focus` and `reconnect` actions.\n        // We might want to inject an extra layer on top of `provider` in the future,\n        // such as key serialization, auto GC, etc.\n        // For now, it's just a `Map` interface without any modifications.\n        return [\n            provider,\n            mutate,\n            initProvider,\n            unmount\n        ];\n    }\n    return [\n        provider,\n        SWRGlobalState.get(provider)[4]\n    ];\n};\n\n// error retry\nconst onErrorRetry = (_, __, config, revalidate, opts)=>{\n    const maxRetryCount = config.errorRetryCount;\n    const currentRetryCount = opts.retryCount;\n    // Exponential backoff\n    const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n    if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n        return;\n    }\n    setTimeout(revalidate, timeout, opts);\n};\nconst compare = (currentData, newData)=>stableHash(currentData) == stableHash(newData);\n// Default cache provider\nconst [cache, mutate] = initCache(new Map());\n// Default config\nconst defaultConfig = mergeObjects({\n    // events\n    onLoadingSlow: noop,\n    onSuccess: noop,\n    onError: noop,\n    onErrorRetry,\n    onDiscarded: noop,\n    // switches\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n    revalidateIfStale: true,\n    shouldRetryOnError: true,\n    // timeouts\n    errorRetryInterval: slowConnection ? 10000 : 5000,\n    focusThrottleInterval: 5 * 1000,\n    dedupingInterval: 2 * 1000,\n    loadingTimeout: slowConnection ? 5000 : 3000,\n    // providers\n    compare,\n    isPaused: ()=>false,\n    cache,\n    mutate,\n    fallback: {}\n}, // use web preset by default\npreset);\n\nconst mergeConfigs = (a, b)=>{\n    // Need to create a new object to avoid mutating the original here.\n    const v = mergeObjects(a, b);\n    // If two configs are provided, merge their `use` and `fallback` options.\n    if (b) {\n        const { use: u1, fallback: f1 } = a;\n        const { use: u2, fallback: f2 } = b;\n        if (u1 && u2) {\n            v.use = u1.concat(u2);\n        }\n        if (f1 && f2) {\n            v.fallback = mergeObjects(f1, f2);\n        }\n    }\n    return v;\n};\n\nconst SWRConfigContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nconst SWRConfig = (props)=>{\n    const { value } = props;\n    const parentConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SWRConfigContext);\n    const isFunctionalConfig = isFunction(value);\n    const config = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>isFunctionalConfig ? value(parentConfig) : value, [\n        isFunctionalConfig,\n        parentConfig,\n        value\n    ]);\n    // Extend parent context values and middleware.\n    const extendedConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [\n        isFunctionalConfig,\n        parentConfig,\n        config\n    ]);\n    // Should not use the inherited provider.\n    const provider = config && config.provider;\n    // initialize the cache only on first access.\n    const cacheContextRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(UNDEFINED);\n    if (provider && !cacheContextRef.current) {\n        cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n    }\n    const cacheContext = cacheContextRef.current;\n    // Override the cache if a new provider is given.\n    if (cacheContext) {\n        extendedConfig.cache = cacheContext[0];\n        extendedConfig.mutate = cacheContext[1];\n    }\n    // Unsubscribe events.\n    useIsomorphicLayoutEffect(()=>{\n        if (cacheContext) {\n            cacheContext[2] && cacheContext[2]();\n            return cacheContext[3];\n        }\n    }, []);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(SWRConfigContext.Provider, mergeObjects(props, {\n        value: extendedConfig\n    }));\n};\n\nconst INFINITE_PREFIX = '$inf$';\n\n// @ts-expect-error\nconst enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\nconst use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\nconst setupDevTools = ()=>{\n    if (enableDevtools) {\n        // @ts-expect-error\n        window.__SWR_DEVTOOLS_REACT__ = react__WEBPACK_IMPORTED_MODULE_0__;\n    }\n};\n\nconst normalize = (args)=>{\n    return isFunction(args[1]) ? [\n        args[0],\n        args[1],\n        args[2] || {}\n    ] : [\n        args[0],\n        null,\n        (args[1] === null ? args[2] : args[1]) || {}\n    ];\n};\n\nconst useSWRConfig = ()=>{\n    return mergeObjects(defaultConfig, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SWRConfigContext));\n};\n\nconst preload = (key_, fetcher)=>{\n    const [key, fnArg] = serialize(key_);\n    const [, , , PRELOAD] = SWRGlobalState.get(cache);\n    // Prevent preload to be called multiple times before used.\n    if (PRELOAD[key]) return PRELOAD[key];\n    const req = fetcher(fnArg);\n    PRELOAD[key] = req;\n    return req;\n};\nconst middleware = (useSWRNext)=>(key_, fetcher_, config)=>{\n        // fetcher might be a sync function, so this should not be an async function\n        const fetcher = fetcher_ && ((...args)=>{\n            const [key] = serialize(key_);\n            const [, , , PRELOAD] = SWRGlobalState.get(cache);\n            if (key.startsWith(INFINITE_PREFIX)) {\n                // we want the infinite fetcher to be called.\n                // handling of the PRELOAD cache happens there.\n                return fetcher_(...args);\n            }\n            const req = PRELOAD[key];\n            if (isUndefined(req)) return fetcher_(...args);\n            delete PRELOAD[key];\n            return req;\n        });\n        return useSWRNext(key_, fetcher, config);\n    };\n\nconst BUILT_IN_MIDDLEWARE = use.concat(middleware);\n\n// It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\nconst withArgs = (hook)=>{\n    return function useSWRArgs(...args) {\n        // Get the default and inherited configuration.\n        const fallbackConfig = useSWRConfig();\n        // Normalize arguments.\n        const [key, fn, _config] = normalize(args);\n        // Merge configurations.\n        const config = mergeConfigs(fallbackConfig, _config);\n        // Apply middleware\n        let next = hook;\n        const { use } = config;\n        const middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n        for(let i = middleware.length; i--;){\n            next = middleware[i](next);\n        }\n        return next(key, fn || config.fetcher || null, config);\n    };\n};\n\n// Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\nconst subscribeCallback = (key, callbacks, callback)=>{\n    const keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n    keyedRevalidators.push(callback);\n    return ()=>{\n        const index = keyedRevalidators.indexOf(callback);\n        if (index >= 0) {\n            // O(1): faster than splice\n            keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n            keyedRevalidators.pop();\n        }\n    };\n};\n\n// Create a custom hook with a middleware\nconst withMiddleware = (useSWR, middleware)=>{\n    return (...args)=>{\n        const [key, fn, config] = normalize(args);\n        const uses = (config.use || []).concat(middleware);\n        return useSWR(key, fn, {\n            ...config,\n            use: uses\n        });\n    };\n};\n\nsetupDevTools();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swr/_internal/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swr/core/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swr/core/dist/index.mjs ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SWRConfig: function() { return /* binding */ SWRConfig; },\n/* harmony export */   \"default\": function() { return /* binding */ useSWR; },\n/* harmony export */   mutate: function() { return /* reexport safe */ swr_internal__WEBPACK_IMPORTED_MODULE_3__.mutate; },\n/* harmony export */   preload: function() { return /* reexport safe */ swr_internal__WEBPACK_IMPORTED_MODULE_3__.preload; },\n/* harmony export */   unstable_serialize: function() { return /* binding */ unstable_serialize; },\n/* harmony export */   useSWRConfig: function() { return /* reexport safe */ swr_internal__WEBPACK_IMPORTED_MODULE_3__.useSWRConfig; }\n/* harmony export */ });\n/* harmony import */ var client_only__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! client-only */ \"(app-pages-browser)/./node_modules/next/dist/compiled/client-only/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(app-pages-browser)/./node_modules/use-sync-external-store/shim/index.js\");\n/* harmony import */ var swr_internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! swr/_internal */ \"(app-pages-browser)/./node_modules/swr/_internal/dist/index.mjs\");\n\n\n\n\n\n\nconst unstable_serialize = (key)=>(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.serialize)(key)[0];\n\n/// <reference types=\"react/experimental\" />\nconst use = react__WEBPACK_IMPORTED_MODULE_1__.use || ((promise)=>{\n    if (promise.status === 'pending') {\n        throw promise;\n    } else if (promise.status === 'fulfilled') {\n        return promise.value;\n    } else if (promise.status === 'rejected') {\n        throw promise.reason;\n    } else {\n        promise.status = 'pending';\n        promise.then((v)=>{\n            promise.status = 'fulfilled';\n            promise.value = v;\n        }, (e)=>{\n            promise.status = 'rejected';\n            promise.reason = e;\n        });\n        throw promise;\n    }\n});\nconst WITH_DEDUPE = {\n    dedupe: true\n};\nconst useSWRHandler = (_key, fetcher, config)=>{\n    const { cache, compare, suspense, fallbackData, revalidateOnMount, revalidateIfStale, refreshInterval, refreshWhenHidden, refreshWhenOffline, keepPreviousData } = config;\n    const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = swr_internal__WEBPACK_IMPORTED_MODULE_3__.SWRGlobalState.get(cache);\n    // `key` is the identifier of the SWR internal state,\n    // `fnArg` is the argument/arguments parsed from the key, which will be passed\n    // to the fetcher.\n    // All of them are derived from `_key`.\n    const [key, fnArg] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.serialize)(_key);\n    // If it's the initial render of this hook.\n    const initialMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // If the hook is unmounted already. This will be used to prevent some effects\n    // to be called after unmounting.\n    const unmountedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Refs to keep the key and config.\n    const keyRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(key);\n    const fetcherRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(fetcher);\n    const configRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(config);\n    const getConfig = ()=>configRef.current;\n    const isActive = ()=>getConfig().isVisible() && getConfig().isOnline();\n    const [getCache, setCache, subscribeCache, getInitialCache] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.createCacheHelper)(cache, key);\n    const stateDependencies = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({}).current;\n    const fallback = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(fallbackData) ? config.fallback[key] : fallbackData;\n    const isEqual = (prev, current)=>{\n        for(const _ in stateDependencies){\n            const t = _;\n            if (t === 'data') {\n                if (!compare(prev[t], current[t])) {\n                    if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(prev[t])) {\n                        return false;\n                    }\n                    if (!compare(returnedData, current[t])) {\n                        return false;\n                    }\n                }\n            } else {\n                if (current[t] !== prev[t]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    const getSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const shouldStartRequest = (()=>{\n            if (!key) return false;\n            if (!fetcher) return false;\n            // If `revalidateOnMount` is set, we take the value directly.\n            if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(revalidateOnMount)) return revalidateOnMount;\n            // If it's paused, we skip revalidation.\n            if (getConfig().isPaused()) return false;\n            if (suspense) return false;\n            if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(revalidateIfStale)) return revalidateIfStale;\n            return true;\n        })();\n        // Get the cache and merge it with expected states.\n        const getSelectedCache = (state)=>{\n            // We only select the needed fields from the state.\n            const snapshot = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.mergeObjects)(state);\n            delete snapshot._k;\n            if (!shouldStartRequest) {\n                return snapshot;\n            }\n            return {\n                isValidating: true,\n                isLoading: true,\n                ...snapshot\n            };\n        };\n        const cachedData = getCache();\n        const initialData = getInitialCache();\n        const clientSnapshot = getSelectedCache(cachedData);\n        const serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n        // To make sure that we are returning the same object reference to avoid\n        // unnecessary re-renders, we keep the previous snapshot and use deep\n        // comparison to check if we need to return a new one.\n        let memorizedSnapshot = clientSnapshot;\n        return [\n            ()=>{\n                const newSnapshot = getSelectedCache(getCache());\n                const compareResult = isEqual(newSnapshot, memorizedSnapshot);\n                if (compareResult) {\n                    // Mentally, we should always return the `memorizedSnapshot` here\n                    // as there's no change between the new and old snapshots.\n                    // However, since the `isEqual` function only compares selected fields,\n                    // the values of the unselected fields might be changed. That's\n                    // simply because we didn't track them.\n                    // To support the case in https://github.com/vercel/swr/pull/2576,\n                    // we need to update these fields in the `memorizedSnapshot` too\n                    // with direct mutations to ensure the snapshot is always up-to-date\n                    // even for the unselected fields, but only trigger re-renders when\n                    // the selected fields are changed.\n                    memorizedSnapshot.data = newSnapshot.data;\n                    memorizedSnapshot.isLoading = newSnapshot.isLoading;\n                    memorizedSnapshot.isValidating = newSnapshot.isValidating;\n                    memorizedSnapshot.error = newSnapshot.error;\n                    return memorizedSnapshot;\n                } else {\n                    memorizedSnapshot = newSnapshot;\n                    return newSnapshot;\n                }\n            },\n            ()=>serverSnapshot\n        ];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        cache,\n        key\n    ]);\n    // Get the current state that SWR should return.\n    const cached = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)((0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((callback)=>subscribeCache(key, (current, prev)=>{\n            if (!isEqual(prev, current)) callback();\n        }), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        cache,\n        key\n    ]), getSnapshot[0], getSnapshot[1]);\n    const isInitialMount = !initialMountedRef.current;\n    const hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n    const cachedData = cached.data;\n    const data = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(cachedData) ? fallback : cachedData;\n    const error = cached.error;\n    // Use a ref to store previously returned data. Use the initial data as its initial value.\n    const laggyDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(data);\n    const returnedData = keepPreviousData ? (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(cachedData) ? laggyDataRef.current : cachedData : data;\n    // - Suspense mode and there's stale data for the initial render.\n    // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n    // - `revalidateIfStale` is enabled but `data` is not defined.\n    const shouldDoInitialRevalidation = (()=>{\n        // if a key already has revalidators and also has error, we should not trigger revalidation\n        if (hasRevalidator && !(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(error)) return false;\n        // If `revalidateOnMount` is set, we take the value directly.\n        if (isInitialMount && !(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(revalidateOnMount)) return revalidateOnMount;\n        // If it's paused, we skip revalidation.\n        if (getConfig().isPaused()) return false;\n        // Under suspense mode, it will always fetch on render if there is no\n        // stale data so no need to revalidate immediately mount it again.\n        // If data exists, only revalidate if `revalidateIfStale` is true.\n        if (suspense) return (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(data) ? false : revalidateIfStale;\n        // If there is no stale data, we need to revalidate when mount;\n        // If `revalidateIfStale` is set to true, we will always revalidate.\n        return (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(data) || revalidateIfStale;\n    })();\n    // Resolve the default validating state:\n    // If it's able to validate, and it should revalidate when mount, this will be true.\n    const defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n    const isValidating = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n    const isLoading = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n    // The revalidation function is a carefully crafted wrapper of the original\n    // `fetcher`, to correctly handle the many edge cases.\n    const revalidate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (revalidateOpts)=>{\n        const currentFetcher = fetcherRef.current;\n        if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n            return false;\n        }\n        let newData;\n        let startAt;\n        let loading = true;\n        const opts = revalidateOpts || {};\n        // If there is no ongoing concurrent request, or `dedupe` is not set, a\n        // new request should be initiated.\n        const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n        /*\n         For React 17\n         Do unmount check for calls:\n         If key has changed during the revalidation, or the component has been\n         unmounted, old dispatch and old event callbacks should not take any\n         effect\n\n        For React 18\n        only check if key has changed\n        https://github.com/reactwg/react-18/discussions/82\n      */ const callbackSafeguard = ()=>{\n            if (swr_internal__WEBPACK_IMPORTED_MODULE_3__.IS_REACT_LEGACY) {\n                return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n            }\n            return key === keyRef.current;\n        };\n        // The final state object when the request finishes.\n        const finalState = {\n            isValidating: false,\n            isLoading: false\n        };\n        const finishRequestAndUpdateState = ()=>{\n            setCache(finalState);\n        };\n        const cleanupState = ()=>{\n            // Check if it's still the same request before deleting it.\n            const requestInfo = FETCH[key];\n            if (requestInfo && requestInfo[1] === startAt) {\n                delete FETCH[key];\n            }\n        };\n        // Start fetching. Change the `isValidating` state, update the cache.\n        const initialState = {\n            isValidating: true\n        };\n        // It is in the `isLoading` state, if and only if there is no cached data.\n        // This bypasses fallback data and laggy data.\n        if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(getCache().data)) {\n            initialState.isLoading = true;\n        }\n        try {\n            if (shouldStartNewRequest) {\n                setCache(initialState);\n                // If no cache is being rendered currently (it shows a blank page),\n                // we trigger the loading slow event.\n                if (config.loadingTimeout && (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(getCache().data)) {\n                    setTimeout(()=>{\n                        if (loading && callbackSafeguard()) {\n                            getConfig().onLoadingSlow(key, config);\n                        }\n                    }, config.loadingTimeout);\n                }\n                // Start the request and save the timestamp.\n                // Key must be truthy if entering here.\n                FETCH[key] = [\n                    currentFetcher(fnArg),\n                    (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.getTimestamp)()\n                ];\n            }\n            [newData, startAt] = FETCH[key];\n            newData = await newData;\n            if (shouldStartNewRequest) {\n                // If the request isn't interrupted, clean it up after the\n                // deduplication interval.\n                setTimeout(cleanupState, config.dedupingInterval);\n            }\n            // If there're other ongoing request(s), started after the current one,\n            // we need to ignore the current one to avoid possible race conditions:\n            //   req1------------------>res1        (current one)\n            //        req2---------------->res2\n            // the request that fired later will always be kept.\n            // The timestamp maybe be `undefined` or a number\n            if (!FETCH[key] || FETCH[key][1] !== startAt) {\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Clear error.\n            finalState.error = swr_internal__WEBPACK_IMPORTED_MODULE_3__.UNDEFINED;\n            // If there're other mutations(s), that overlapped with the current revalidation:\n            // case 1:\n            //   req------------------>res\n            //       mutate------>end\n            // case 2:\n            //         req------------>res\n            //   mutate------>end\n            // case 3:\n            //   req------------------>res\n            //       mutate-------...---------->\n            // we have to ignore the revalidation result (res) because it's no longer fresh.\n            // meanwhile, a new revalidation should be triggered when the mutation ends.\n            const mutationInfo = MUTATION[key];\n            if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(mutationInfo) && // case 1\n            (startAt <= mutationInfo[0] || // case 2\n            startAt <= mutationInfo[1] || // case 3\n            mutationInfo[1] === 0)) {\n                finishRequestAndUpdateState();\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Deep compare with the latest state to avoid extra re-renders.\n            // For local state, compare and assign.\n            const cacheData = getCache().data;\n            // Since the compare fn could be custom fn\n            // cacheData might be different from newData even when compare fn returns True\n            finalState.data = compare(cacheData, newData) ? cacheData : newData;\n            // Trigger the successful callback if it's the original request.\n            if (shouldStartNewRequest) {\n                if (callbackSafeguard()) {\n                    getConfig().onSuccess(newData, key, config);\n                }\n            }\n        } catch (err) {\n            cleanupState();\n            const currentConfig = getConfig();\n            const { shouldRetryOnError } = currentConfig;\n            // Not paused, we continue handling the error. Otherwise, discard it.\n            if (!currentConfig.isPaused()) {\n                // Get a new error, don't use deep comparison for errors.\n                finalState.error = err;\n                // Error event and retry logic. Only for the actual request, not\n                // deduped ones.\n                if (shouldStartNewRequest && callbackSafeguard()) {\n                    currentConfig.onError(err, key, currentConfig);\n                    if (shouldRetryOnError === true || (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isFunction)(shouldRetryOnError) && shouldRetryOnError(err)) {\n                        if (isActive()) {\n                            // If it's inactive, stop. It will auto-revalidate when\n                            // refocusing or reconnecting.\n                            // When retrying, deduplication is always enabled.\n                            currentConfig.onErrorRetry(err, key, currentConfig, (_opts)=>{\n                                const revalidators = EVENT_REVALIDATORS[key];\n                                if (revalidators && revalidators[0]) {\n                                    revalidators[0](swr_internal__WEBPACK_IMPORTED_MODULE_3__.revalidateEvents.ERROR_REVALIDATE_EVENT, _opts);\n                                }\n                            }, {\n                                retryCount: (opts.retryCount || 0) + 1,\n                                dedupe: true\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        // Mark loading as stopped.\n        loading = false;\n        // Update the current hook's state.\n        finishRequestAndUpdateState();\n        return true;\n    }, // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n    // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        key,\n        cache\n    ]);\n    // Similar to the global mutate but bound to the current cache and key.\n    // `cache` isn't allowed to change during the lifecycle.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const boundMutate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(// Use callback to make sure `keyRef.current` returns latest result every time\n    (...args)=>{\n        return (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.internalMutate)(cache, keyRef.current, ...args);\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    // The logic for updating refs.\n    (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(()=>{\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        // Handle laggy data updates. If there's cached data of the current key,\n        // it'll be the correct reference.\n        if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(cachedData)) {\n            laggyDataRef.current = cachedData;\n        }\n    });\n    // After mounted or key changed.\n    (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(()=>{\n        if (!key) return;\n        const softRevalidate = revalidate.bind(swr_internal__WEBPACK_IMPORTED_MODULE_3__.UNDEFINED, WITH_DEDUPE);\n        // Expose revalidators to global event listeners. So we can trigger\n        // revalidation from the outside.\n        let nextFocusRevalidatedAt = 0;\n        const onRevalidate = (type, opts = {})=>{\n            if (type == swr_internal__WEBPACK_IMPORTED_MODULE_3__.revalidateEvents.FOCUS_EVENT) {\n                const now = Date.now();\n                if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n                    nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n                    softRevalidate();\n                }\n            } else if (type == swr_internal__WEBPACK_IMPORTED_MODULE_3__.revalidateEvents.RECONNECT_EVENT) {\n                if (getConfig().revalidateOnReconnect && isActive()) {\n                    softRevalidate();\n                }\n            } else if (type == swr_internal__WEBPACK_IMPORTED_MODULE_3__.revalidateEvents.MUTATE_EVENT) {\n                return revalidate();\n            } else if (type == swr_internal__WEBPACK_IMPORTED_MODULE_3__.revalidateEvents.ERROR_REVALIDATE_EVENT) {\n                return revalidate(opts);\n            }\n            return;\n        };\n        const unsubEvents = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.subscribeCallback)(key, EVENT_REVALIDATORS, onRevalidate);\n        // Mark the component as mounted and update corresponding refs.\n        unmountedRef.current = false;\n        keyRef.current = key;\n        initialMountedRef.current = true;\n        // Keep the original key in the cache.\n        setCache({\n            _k: fnArg\n        });\n        // Trigger a revalidation\n        if (shouldDoInitialRevalidation) {\n            if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(data) || swr_internal__WEBPACK_IMPORTED_MODULE_3__.IS_SERVER) {\n                // Revalidate immediately.\n                softRevalidate();\n            } else {\n                // Delay the revalidate if we have data to return so we won't block\n                // rendering.\n                (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.rAF)(softRevalidate);\n            }\n        }\n        return ()=>{\n            // Mark it as unmounted.\n            unmountedRef.current = true;\n            unsubEvents();\n        };\n    }, [\n        key\n    ]);\n    // Polling\n    (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(()=>{\n        let timer;\n        function next() {\n            // Use the passed interval\n            // ...or invoke the function with the updated data to get the interval\n            const interval = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isFunction)(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n            // We only start the next interval if `refreshInterval` is not 0, and:\n            // - `force` is true, which is the start of polling\n            // - or `timer` is not 0, which means the effect wasn't canceled\n            if (interval && timer !== -1) {\n                timer = setTimeout(execute, interval);\n            }\n        }\n        function execute() {\n            // Check if it's OK to execute:\n            // Only revalidate when the page is visible, online, and not errored.\n            if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n                revalidate(WITH_DEDUPE).then(next);\n            } else {\n                // Schedule the next interval to check again.\n                next();\n            }\n        }\n        next();\n        return ()=>{\n            if (timer) {\n                clearTimeout(timer);\n                timer = -1;\n            }\n        };\n    }, [\n        refreshInterval,\n        refreshWhenHidden,\n        refreshWhenOffline,\n        key\n    ]);\n    // Display debug info in React DevTools.\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useDebugValue)(returnedData);\n    // In Suspense mode, we can't return the empty `data` state.\n    // If there is an `error`, the `error` needs to be thrown to the error boundary.\n    // If there is no `error`, the `revalidation` promise needs to be thrown to\n    // the suspense boundary.\n    if (suspense && (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(data) && key) {\n        // SWR should throw when trying to use Suspense on the server with React 18,\n        // without providing any initial data. See:\n        // https://github.com/vercel/swr/issues/1832\n        if (!swr_internal__WEBPACK_IMPORTED_MODULE_3__.IS_REACT_LEGACY && swr_internal__WEBPACK_IMPORTED_MODULE_3__.IS_SERVER) {\n            throw new Error('Fallback data is required when using suspense in SSR.');\n        }\n        // Always update fetcher and config refs even with the Suspense mode.\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        unmountedRef.current = false;\n        const req = PRELOAD[key];\n        if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(req)) {\n            const promise = boundMutate(req);\n            use(promise);\n        }\n        if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(error)) {\n            const promise = revalidate(WITH_DEDUPE);\n            if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(returnedData)) {\n                promise.status = 'fulfilled';\n                promise.value = true;\n            }\n            use(promise);\n        } else {\n            throw error;\n        }\n    }\n    return {\n        mutate: boundMutate,\n        get data () {\n            stateDependencies.data = true;\n            return returnedData;\n        },\n        get error () {\n            stateDependencies.error = true;\n            return error;\n        },\n        get isValidating () {\n            stateDependencies.isValidating = true;\n            return isValidating;\n        },\n        get isLoading () {\n            stateDependencies.isLoading = true;\n            return isLoading;\n        }\n    };\n};\nconst SWRConfig = swr_internal__WEBPACK_IMPORTED_MODULE_3__.OBJECT.defineProperty(swr_internal__WEBPACK_IMPORTED_MODULE_3__.SWRConfig, 'defaultValue', {\n    value: swr_internal__WEBPACK_IMPORTED_MODULE_3__.defaultConfig\n});\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error, isLoading } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (isLoading) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */ const useSWR = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.withArgs)(useSWRHandler);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swr/core/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/swr/immutable/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swr/immutable/dist/index.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ useSWRImmutable; },\n/* harmony export */   immutable: function() { return /* binding */ immutable; }\n/* harmony export */ });\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! swr */ \"(app-pages-browser)/./node_modules/swr/core/dist/index.mjs\");\n/* harmony import */ var swr_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swr/_internal */ \"(app-pages-browser)/./node_modules/swr/_internal/dist/index.mjs\");\n\n\n\nconst immutable = (useSWRNext)=>(key, fetcher, config)=>{\n        // Always override all revalidate options.\n        config.revalidateOnFocus = false;\n        config.revalidateIfStale = false;\n        config.revalidateOnReconnect = false;\n        return useSWRNext(key, fetcher, config);\n    };\nconst useSWRImmutable = (0,swr_internal__WEBPACK_IMPORTED_MODULE_1__.withMiddleware)(swr__WEBPACK_IMPORTED_MODULE_0__[\"default\"], immutable);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zd3IvaW1tdXRhYmxlL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUI7QUFDc0I7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDREQUFjLENBQUMsMkNBQU07O0FBRUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3N3ci9pbW11dGFibGUvZGlzdC9pbmRleC5tanM/YWI0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXNlU1dSIGZyb20gJ3N3cic7XG5pbXBvcnQgeyB3aXRoTWlkZGxld2FyZSB9IGZyb20gJ3N3ci9faW50ZXJuYWwnO1xuXG5jb25zdCBpbW11dGFibGUgPSAodXNlU1dSTmV4dCk9PihrZXksIGZldGNoZXIsIGNvbmZpZyk9PntcbiAgICAgICAgLy8gQWx3YXlzIG92ZXJyaWRlIGFsbCByZXZhbGlkYXRlIG9wdGlvbnMuXG4gICAgICAgIGNvbmZpZy5yZXZhbGlkYXRlT25Gb2N1cyA9IGZhbHNlO1xuICAgICAgICBjb25maWcucmV2YWxpZGF0ZUlmU3RhbGUgPSBmYWxzZTtcbiAgICAgICAgY29uZmlnLnJldmFsaWRhdGVPblJlY29ubmVjdCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdXNlU1dSTmV4dChrZXksIGZldGNoZXIsIGNvbmZpZyk7XG4gICAgfTtcbmNvbnN0IHVzZVNXUkltbXV0YWJsZSA9IHdpdGhNaWRkbGV3YXJlKHVzZVNXUiwgaW1tdXRhYmxlKTtcblxuZXhwb3J0IHsgdXNlU1dSSW1tdXRhYmxlIGFzIGRlZmF1bHQsIGltbXV0YWJsZSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/swr/immutable/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-color-keywords/colors.json":
/*!*****************************************************!*\
  !*** ./node_modules/css-color-keywords/colors.json ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = JSON.parse('{"black":"#000000","silver":"#c0c0c0","gray":"#808080","white":"#ffffff","maroon":"#800000","red":"#ff0000","purple":"#800080","fuchsia":"#ff00ff","green":"#008000","lime":"#00ff00","olive":"#808000","yellow":"#ffff00","navy":"#000080","blue":"#0000ff","teal":"#008080","aqua":"#00ffff","orange":"#ffa500","aliceblue":"#f0f8ff","antiquewhite":"#faebd7","aquamarine":"#7fffd4","azure":"#f0ffff","beige":"#f5f5dc","bisque":"#ffe4c4","blanchedalmond":"#ffebcd","blueviolet":"#8a2be2","brown":"#a52a2a","burlywood":"#deb887","cadetblue":"#5f9ea0","chartreuse":"#7fff00","chocolate":"#d2691e","coral":"#ff7f50","cornflowerblue":"#6495ed","cornsilk":"#fff8dc","crimson":"#dc143c","darkblue":"#00008b","darkcyan":"#008b8b","darkgoldenrod":"#b8860b","darkgray":"#a9a9a9","darkgreen":"#006400","darkgrey":"#a9a9a9","darkkhaki":"#bdb76b","darkmagenta":"#8b008b","darkolivegreen":"#556b2f","darkorange":"#ff8c00","darkorchid":"#9932cc","darkred":"#8b0000","darksalmon":"#e9967a","darkseagreen":"#8fbc8f","darkslateblue":"#483d8b","darkslategray":"#2f4f4f","darkslategrey":"#2f4f4f","darkturquoise":"#00ced1","darkviolet":"#9400d3","deeppink":"#ff1493","deepskyblue":"#00bfff","dimgray":"#696969","dimgrey":"#696969","dodgerblue":"#1e90ff","firebrick":"#b22222","floralwhite":"#fffaf0","forestgreen":"#228b22","gainsboro":"#dcdcdc","ghostwhite":"#f8f8ff","gold":"#ffd700","goldenrod":"#daa520","greenyellow":"#adff2f","grey":"#808080","honeydew":"#f0fff0","hotpink":"#ff69b4","indianred":"#cd5c5c","indigo":"#4b0082","ivory":"#fffff0","khaki":"#f0e68c","lavender":"#e6e6fa","lavenderblush":"#fff0f5","lawngreen":"#7cfc00","lemonchiffon":"#fffacd","lightblue":"#add8e6","lightcoral":"#f08080","lightcyan":"#e0ffff","lightgoldenrodyellow":"#fafad2","lightgray":"#d3d3d3","lightgreen":"#90ee90","lightgrey":"#d3d3d3","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightseagreen":"#20b2aa","lightskyblue":"#87cefa","lightslategray":"#778899","lightslategrey":"#778899","lightsteelblue":"#b0c4de","lightyellow":"#ffffe0","limegreen":"#32cd32","linen":"#faf0e6","mediumaquamarine":"#66cdaa","mediumblue":"#0000cd","mediumorchid":"#ba55d3","mediumpurple":"#9370db","mediumseagreen":"#3cb371","mediumslateblue":"#7b68ee","mediumspringgreen":"#00fa9a","mediumturquoise":"#48d1cc","mediumvioletred":"#c71585","midnightblue":"#191970","mintcream":"#f5fffa","mistyrose":"#ffe4e1","moccasin":"#ffe4b5","navajowhite":"#ffdead","oldlace":"#fdf5e6","olivedrab":"#6b8e23","orangered":"#ff4500","orchid":"#da70d6","palegoldenrod":"#eee8aa","palegreen":"#98fb98","paleturquoise":"#afeeee","palevioletred":"#db7093","papayawhip":"#ffefd5","peachpuff":"#ffdab9","peru":"#cd853f","pink":"#ffc0cb","plum":"#dda0dd","powderblue":"#b0e0e6","rosybrown":"#bc8f8f","royalblue":"#4169e1","saddlebrown":"#8b4513","salmon":"#fa8072","sandybrown":"#f4a460","seagreen":"#2e8b57","seashell":"#fff5ee","sienna":"#a0522d","skyblue":"#87ceeb","slateblue":"#6a5acd","slategray":"#708090","slategrey":"#708090","snow":"#fffafa","springgreen":"#00ff7f","steelblue":"#4682b4","tan":"#d2b48c","thistle":"#d8bfd8","tomato":"#ff6347","turquoise":"#40e0d0","violet":"#ee82ee","wheat":"#f5deb3","whitesmoke":"#f5f5f5","yellowgreen":"#9acd32","rebeccapurple":"#663399"}');

/***/ })

}]);